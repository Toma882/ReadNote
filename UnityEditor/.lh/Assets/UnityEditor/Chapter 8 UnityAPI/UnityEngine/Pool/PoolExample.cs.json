{
    "sourceFile": "Assets/UnityEditor/Chapter 8 UnityAPI/UnityEngine/Pool/PoolExample.cs",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1750932499402,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1750932499402,
            "name": "Commit-0",
            "content": "using UnityEngine;\r\nusing UnityEngine.Pool;\r\n\r\n/// <summary>\r\n/// UnityEngine.Pool 命名空间案例演示\r\n/// 展示ObjectPool、CollectionPool等核心功能\r\n/// </summary>\r\npublic class PoolExample : MonoBehaviour\r\n{\r\n    [Header(\"对象池设置\")]\r\n    [SerializeField] private GameObject prefab; //预制体\r\n    [SerializeField] private int poolSize = 10; //池大小\r\n    [SerializeField] private int spawnCount = 5; //生成数量\r\n    [SerializeField] private bool usePool = true; //是否使用对象池\r\n\r\n    private ObjectPool<GameObject> objectPool;\r\n    private List<GameObject> spawnedObjects = new List<GameObject>();\r\n\r\n    private void Start()\r\n    {\r\n        if (prefab != null)\r\n        {\r\n            // 创建对象池\r\n            objectPool = new ObjectPool<GameObject>(\r\n                createFunc: () => Instantiate(prefab),\r\n                actionOnGet: (obj) => {\r\n                    obj.SetActive(true);\r\n                    obj.transform.position = Random.insideUnitSphere * 5f;\r\n                },\r\n                actionOnRelease: (obj) => obj.SetActive(false),\r\n                actionOnDestroy: (obj) => Destroy(obj),\r\n                collectionCheck: true,\r\n                defaultCapacity: poolSize,\r\n                maxSize: poolSize * 2\r\n            );\r\n        }\r\n    }\r\n\r\n    private void Update()\r\n    {\r\n        if (Input.GetKeyDown(KeyCode.Space))\r\n        {\r\n            if (usePool)\r\n            {\r\n                SpawnWithPool();\r\n            }\r\n            else\r\n            {\r\n                SpawnWithoutPool();\r\n            }\r\n        }\r\n\r\n        if (Input.GetKeyDown(KeyCode.R))\r\n        {\r\n            ReleaseAll();\r\n        }\r\n    }\r\n\r\n    /// <summary>\r\n    /// 使用对象池生成对象\r\n    /// </summary>\r\n    private void SpawnWithPool()\r\n    {\r\n        for (int i = 0; i < spawnCount; i++)\r\n        {\r\n            var obj = objectPool.Get();\r\n            spawnedObjects.Add(obj);\r\n        }\r\n        Debug.Log($\"使用对象池生成了 {spawnCount} 个对象\");\r\n    }\r\n\r\n    /// <summary>\r\n    /// 不使用对象池生成对象\r\n    /// </summary>\r\n    private void SpawnWithoutPool()\r\n    {\r\n        for (int i = 0; i < spawnCount; i++)\r\n        {\r\n            var obj = Instantiate(prefab);\r\n            obj.transform.position = Random.insideUnitSphere * 5f;\r\n            spawnedObjects.Add(obj);\r\n        }\r\n        Debug.Log($\"不使用对象池生成了 {spawnCount} 个对象\");\r\n    }\r\n\r\n    /// <summary>\r\n    /// 释放所有对象\r\n    /// </summary>\r\n    private void ReleaseAll()\r\n    {\r\n        if (usePool)\r\n        {\r\n            foreach (var obj in spawnedObjects)\r\n            {\r\n                if (obj != null)\r\n                {\r\n                    objectPool.Release(obj);\r\n                }\r\n            }\r\n            Debug.Log(\"已释放所有对象到对象池\");\r\n        }\r\n        else\r\n        {\r\n            foreach (var obj in spawnedObjects)\r\n            {\r\n                if (obj != null)\r\n                {\r\n                    Destroy(obj);\r\n                }\r\n            }\r\n            Debug.Log(\"已销毁所有对象\");\r\n        }\r\n        spawnedObjects.Clear();\r\n    }\r\n\r\n    private void OnDestroy()\r\n    {\r\n        if (objectPool != null)\r\n        {\r\n            objectPool.Dispose();\r\n        }\r\n    }\r\n\r\n    private void OnGUI()\r\n    {\r\n        GUILayout.BeginArea(new Rect(10, 10, 350, 250));\r\n        GUILayout.Label(\"Object Pool 对象池演示\", UnityEditor.EditorStyles.boldLabel);\r\n        prefab = (GameObject)UnityEditor.EditorGUILayout.ObjectField(\"预制体\", prefab, typeof(GameObject), true);\r\n        poolSize = int.TryParse(GUILayout.TextField(poolSize.ToString()), out var size) ? size : poolSize;\r\n        spawnCount = int.TryParse(GUILayout.TextField(spawnCount.ToString()), out var count) ? count : spawnCount;\r\n        usePool = GUILayout.Toggle(usePool, \"使用对象池\");\r\n        GUILayout.Label($\"当前对象数量: {spawnedObjects.Count}\");\r\n        GUILayout.Label(\"按空格键生成对象，按R键释放对象\");\r\n        if (GUILayout.Button(\"生成对象\"))\r\n        {\r\n            if (usePool)\r\n            {\r\n                SpawnWithPool();\r\n            }\r\n            else\r\n            {\r\n                SpawnWithoutPool();\r\n            }\r\n        }\r\n        if (GUILayout.Button(\"释放所有对象\"))\r\n        {\r\n            ReleaseAll();\r\n        }\r\n        GUILayout.EndArea();\r\n    }\r\n} "
        }
    ]
}