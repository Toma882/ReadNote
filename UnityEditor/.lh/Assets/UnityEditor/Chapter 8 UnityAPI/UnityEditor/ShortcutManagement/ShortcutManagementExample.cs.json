{
    "sourceFile": "Assets/UnityEditor/Chapter 8 UnityAPI/UnityEditor/ShortcutManagement/ShortcutManagementExample.cs",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1750940915884,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1750940915884,
            "name": "Commit-0",
            "content": "using UnityEngine;\r\nusing UnityEditor;\r\nusing UnityEditor.ShortcutManagement;\r\nusing System.Collections.Generic;\r\nusing System.Linq;\r\n\r\nnamespace UnityEditor.ShortcutManagement.Examples\r\n{\r\n    /// <summary>\r\n    /// UnityEditor.ShortcutManagement 命名空间使用示例\r\n    /// 演示快捷键管理系统的注册、绑定和管理功能\r\n    /// </summary>\r\n    public class ShortcutManagementExample : MonoBehaviour\r\n    {\r\n        [Header(\"快捷键配置\")]\r\n        [SerializeField] private bool enableShortcuts = true;\r\n        [SerializeField] private string shortcutName = \"CustomShortcut\";\r\n        [SerializeField] private string shortcutKey = \"Ctrl+Shift+S\";\r\n        [SerializeField] private string shortcutContext = \"Game\";\r\n        \r\n        [Header(\"快捷键状态\")]\r\n        [SerializeField] private int shortcutCount = 0;\r\n        [SerializeField] private string lastTriggeredShortcut = \"\";\r\n        [SerializeField] private bool isShortcutValid = false;\r\n        \r\n        [Header(\"快捷键数据\")]\r\n        [SerializeField] private List<ShortcutEntry> availableShortcuts = new List<ShortcutEntry>();\r\n        [SerializeField] private ShortcutEntry currentShortcut;\r\n        \r\n        private Dictionary<string, ShortcutEntry> shortcutRegistry = new Dictionary<string, ShortcutEntry>();\r\n        \r\n        /// <summary>\r\n        /// 快捷键条目\r\n        /// </summary>\r\n        [System.Serializable]\r\n        public class ShortcutEntry\r\n        {\r\n            public string id;\r\n            public string displayName;\r\n            public string keyCombination;\r\n            public string context;\r\n            public bool isActive;\r\n            \r\n            public ShortcutEntry(string id, string displayName, string keyCombination, string context)\r\n            {\r\n                this.id = id;\r\n                this.displayName = displayName;\r\n                this.keyCombination = keyCombination;\r\n                this.context = context;\r\n                this.isActive = true;\r\n            }\r\n        }\r\n        \r\n        /// <summary>\r\n        /// 初始化快捷键系统\r\n        /// </summary>\r\n        private void Start()\r\n        {\r\n            InitializeShortcutSystem();\r\n        }\r\n        \r\n        /// <summary>\r\n        /// 初始化快捷键系统\r\n        /// </summary>\r\n        private void InitializeShortcutSystem()\r\n        {\r\n            if (!enableShortcuts)\r\n            {\r\n                Debug.Log(\"快捷键系统已禁用\");\r\n                return;\r\n            }\r\n            \r\n            try\r\n            {\r\n                // 加载现有快捷键\r\n                LoadAvailableShortcuts();\r\n                \r\n                // 注册默认快捷键\r\n                RegisterDefaultShortcuts();\r\n                \r\n                Debug.Log(\"快捷键系统初始化完成\");\r\n            }\r\n            catch (System.Exception e)\r\n            {\r\n                Debug.LogError($\"快捷键系统初始化失败: {e.Message}\");\r\n            }\r\n        }\r\n        \r\n        /// <summary>\r\n        /// 加载可用快捷键\r\n        /// </summary>\r\n        private void LoadAvailableShortcuts()\r\n        {\r\n            availableShortcuts.Clear();\r\n            shortcutRegistry.Clear();\r\n            \r\n            // 获取所有已注册的快捷键\r\n            var shortcuts = ShortcutManager.instance.GetAvailableShortcuts();\r\n            foreach (var shortcut in shortcuts)\r\n            {\r\n                var entry = new ShortcutEntry(\r\n                    shortcut.identifier,\r\n                    shortcut.displayName,\r\n                    shortcut.keyCombination,\r\n                    shortcut.context\r\n                );\r\n                \r\n                availableShortcuts.Add(entry);\r\n                shortcutRegistry[shortcut.identifier] = entry;\r\n            }\r\n            \r\n            shortcutCount = availableShortcuts.Count;\r\n            Debug.Log($\"加载了 {shortcutCount} 个快捷键\");\r\n        }\r\n        \r\n        /// <summary>\r\n        /// 注册默认快捷键\r\n        /// </summary>\r\n        private void RegisterDefaultShortcuts()\r\n        {\r\n            // 注册自定义快捷键\r\n            RegisterShortcut(\"Custom/TestShortcut\", \"测试快捷键\", \"Ctrl+Shift+T\", \"Game\");\r\n            RegisterShortcut(\"Custom/SaveScene\", \"保存场景\", \"Ctrl+Shift+S\", \"Game\");\r\n            RegisterShortcut(\"Custom/LoadScene\", \"加载场景\", \"Ctrl+Shift+L\", \"Game\");\r\n            RegisterShortcut(\"Custom/ResetTransform\", \"重置变换\", \"Ctrl+Shift+R\", \"Game\");\r\n        }\r\n        \r\n        /// <summary>\r\n        /// 注册快捷键\r\n        /// </summary>\r\n        public void RegisterShortcut(string shortcutId, string displayName, string keyCombination, string context)\r\n        {\r\n            if (string.IsNullOrEmpty(shortcutId))\r\n            {\r\n                Debug.LogError(\"快捷键ID为空\");\r\n                return;\r\n            }\r\n            \r\n            try\r\n            {\r\n                // 创建快捷键定义\r\n                var shortcutDef = new ShortcutDefinition\r\n                {\r\n                    identifier = shortcutId,\r\n                    displayName = displayName,\r\n                    keyCombination = keyCombination,\r\n                    context = context\r\n                };\r\n                \r\n                // 注册快捷键\r\n                ShortcutManager.instance.RegisterShortcut(shortcutDef);\r\n                \r\n                // 添加到本地注册表\r\n                var entry = new ShortcutEntry(shortcutId, displayName, keyCombination, context);\r\n                availableShortcuts.Add(entry);\r\n                shortcutRegistry[shortcutId] = entry;\r\n                shortcutCount = availableShortcuts.Count;\r\n                \r\n                Debug.Log($\"快捷键已注册: {shortcutId} ({keyCombination})\");\r\n            }\r\n            catch (System.Exception e)\r\n            {\r\n                Debug.LogError($\"注册快捷键失败: {e.Message}\");\r\n            }\r\n        }\r\n        \r\n        /// <summary>\r\n        /// 注销快捷键\r\n        /// </summary>\r\n        public void UnregisterShortcut(string shortcutId)\r\n        {\r\n            if (string.IsNullOrEmpty(shortcutId))\r\n            {\r\n                Debug.LogError(\"快捷键ID为空\");\r\n                return;\r\n            }\r\n            \r\n            try\r\n            {\r\n                // 注销快捷键\r\n                ShortcutManager.instance.UnregisterShortcut(shortcutId);\r\n                \r\n                // 从本地注册表移除\r\n                if (shortcutRegistry.ContainsKey(shortcutId))\r\n                {\r\n                    var entry = shortcutRegistry[shortcutId];\r\n                    availableShortcuts.Remove(entry);\r\n                    shortcutRegistry.Remove(shortcutId);\r\n                    shortcutCount = availableShortcuts.Count;\r\n                    \r\n                    Debug.Log($\"快捷键已注销: {shortcutId}\");\r\n                }\r\n            }\r\n            catch (System.Exception e)\r\n            {\r\n                Debug.LogError($\"注销快捷键失败: {e.Message}\");\r\n            }\r\n        }\r\n        \r\n        /// <summary>\r\n        /// 绑定快捷键到方法\r\n        /// </summary>\r\n        [Shortcut(\"Custom/TestShortcut\", KeyCode.T, ShortcutModifiers.Control | ShortcutModifiers.Shift)]\r\n        public static void TestShortcut()\r\n        {\r\n            Debug.Log(\"测试快捷键被触发\");\r\n        }\r\n        \r\n        /// <summary>\r\n        /// 保存场景快捷键\r\n        /// </summary>\r\n        [Shortcut(\"Custom/SaveScene\", KeyCode.S, ShortcutModifiers.Control | ShortcutModifiers.Shift)]\r\n        public static void SaveSceneShortcut()\r\n        {\r\n            EditorApplication.ExecuteMenuItem(\"File/Save\");\r\n            Debug.Log(\"场景保存快捷键被触发\");\r\n        }\r\n        \r\n        /// <summary>\r\n        /// 加载场景快捷键\r\n        /// </summary>\r\n        [Shortcut(\"Custom/LoadScene\", KeyCode.L, ShortcutModifiers.Control | ShortcutModifiers.Shift)]\r\n        public static void LoadSceneShortcut()\r\n        {\r\n            EditorApplication.ExecuteMenuItem(\"File/Open Scene\");\r\n            Debug.Log(\"场景加载快捷键被触发\");\r\n        }\r\n        \r\n        /// <summary>\r\n        /// 重置变换快捷键\r\n        /// </summary>\r\n        [Shortcut(\"Custom/ResetTransform\", KeyCode.R, ShortcutModifiers.Control | ShortcutModifiers.Shift)]\r\n        public static void ResetTransformShortcut()\r\n        {\r\n            var selectedObjects = Selection.gameObjects;\r\n            foreach (var obj in selectedObjects)\r\n            {\r\n                obj.transform.localPosition = Vector3.zero;\r\n                obj.transform.localRotation = Quaternion.identity;\r\n                obj.transform.localScale = Vector3.one;\r\n            }\r\n            Debug.Log(\"重置变换快捷键被触发\");\r\n        }\r\n        \r\n        /// <summary>\r\n        /// 修改快捷键绑定\r\n        /// </summary>\r\n        public void ModifyShortcutBinding(string shortcutId, string newKeyCombination)\r\n        {\r\n            if (string.IsNullOrEmpty(shortcutId))\r\n            {\r\n                Debug.LogError(\"快捷键ID为空\");\r\n                return;\r\n            }\r\n            \r\n            try\r\n            {\r\n                // 获取现有快捷键\r\n                var shortcut = ShortcutManager.instance.GetShortcut(shortcutId);\r\n                if (shortcut != null)\r\n                {\r\n                    // 创建新的快捷键定义\r\n                    var newShortcutDef = new ShortcutDefinition\r\n                    {\r\n                        identifier = shortcut.identifier,\r\n                        displayName = shortcut.displayName,\r\n                        keyCombination = newKeyCombination,\r\n                        context = shortcut.context\r\n                    };\r\n                    \r\n                    // 注销旧快捷键\r\n                    ShortcutManager.instance.UnregisterShortcut(shortcutId);\r\n                    \r\n                    // 注册新快捷键\r\n                    ShortcutManager.instance.RegisterShortcut(newShortcutDef);\r\n                    \r\n                    // 更新本地注册表\r\n                    if (shortcutRegistry.ContainsKey(shortcutId))\r\n                    {\r\n                        shortcutRegistry[shortcutId].keyCombination = newKeyCombination;\r\n                    }\r\n                    \r\n                    Debug.Log($\"快捷键绑定已修改: {shortcutId} -> {newKeyCombination}\");\r\n                }\r\n            }\r\n            catch (System.Exception e)\r\n            {\r\n                Debug.LogError($\"修改快捷键绑定失败: {e.Message}\");\r\n            }\r\n        }\r\n        \r\n        /// <summary>\r\n        /// 启用/禁用快捷键\r\n        /// </summary>\r\n        public void SetShortcutActive(string shortcutId, bool isActive)\r\n        {\r\n            if (string.IsNullOrEmpty(shortcutId))\r\n            {\r\n                Debug.LogError(\"快捷键ID为空\");\r\n                return;\r\n            }\r\n            \r\n            try\r\n            {\r\n                if (isActive)\r\n                {\r\n                    ShortcutManager.instance.EnableShortcut(shortcutId);\r\n                }\r\n                else\r\n                {\r\n                    ShortcutManager.instance.DisableShortcut(shortcutId);\r\n                }\r\n                \r\n                // 更新本地状态\r\n                if (shortcutRegistry.ContainsKey(shortcutId))\r\n                {\r\n                    shortcutRegistry[shortcutId].isActive = isActive;\r\n                }\r\n                \r\n                Debug.Log($\"快捷键状态已更改: {shortcutId} -> {(isActive ? \"启用\" : \"禁用\")}\");\r\n            }\r\n            catch (System.Exception e)\r\n            {\r\n                Debug.LogError($\"更改快捷键状态失败: {e.Message}\");\r\n            }\r\n        }\r\n        \r\n        /// <summary>\r\n        /// 获取快捷键信息\r\n        /// </summary>\r\n        public string GetShortcutInfo(string shortcutId)\r\n        {\r\n            if (string.IsNullOrEmpty(shortcutId))\r\n                return \"快捷键ID为空\";\r\n            \r\n            try\r\n            {\r\n                var shortcut = ShortcutManager.instance.GetShortcut(shortcutId);\r\n                if (shortcut != null)\r\n                {\r\n                    return $\"ID: {shortcut.identifier}, 名称: {shortcut.displayName}, 按键: {shortcut.keyCombination}, 上下文: {shortcut.context}\";\r\n                }\r\n                \r\n                return $\"快捷键不存在: {shortcutId}\";\r\n            }\r\n            catch (System.Exception e)\r\n            {\r\n                return $\"获取快捷键信息失败: {e.Message}\";\r\n            }\r\n        }\r\n        \r\n        /// <summary>\r\n        /// 验证快捷键有效性\r\n        /// </summary>\r\n        public bool ValidateShortcut(string keyCombination)\r\n        {\r\n            if (string.IsNullOrEmpty(keyCombination))\r\n                return false;\r\n            \r\n            try\r\n            {\r\n                // 尝试解析按键组合\r\n                var keyCode = ShortcutManager.instance.ParseKeyCombination(keyCombination);\r\n                return keyCode != KeyCode.None;\r\n            }\r\n            catch\r\n            {\r\n                return false;\r\n            }\r\n        }\r\n        \r\n        /// <summary>\r\n        /// 导出快捷键配置\r\n        /// </summary>\r\n        public void ExportShortcuts()\r\n        {\r\n            string exportPath = EditorUtility.SaveFilePanel(\"导出快捷键\", \"\", \"shortcuts\", \"json\");\r\n            if (string.IsNullOrEmpty(exportPath))\r\n                return;\r\n            \r\n            try\r\n            {\r\n                var exportData = new Dictionary<string, object>();\r\n                foreach (var shortcut in availableShortcuts)\r\n                {\r\n                    exportData[shortcut.id] = new\r\n                    {\r\n                        displayName = shortcut.displayName,\r\n                        keyCombination = shortcut.keyCombination,\r\n                        context = shortcut.context,\r\n                        isActive = shortcut.isActive\r\n                    };\r\n                }\r\n                \r\n                string json = JsonUtility.ToJson(new { shortcuts = exportData }, true);\r\n                System.IO.File.WriteAllText(exportPath, json);\r\n                \r\n                Debug.Log($\"快捷键配置已导出到: {exportPath}\");\r\n            }\r\n            catch (System.Exception e)\r\n            {\r\n                Debug.LogError($\"导出快捷键失败: {e.Message}\");\r\n            }\r\n        }\r\n        \r\n        /// <summary>\r\n        /// 导入快捷键配置\r\n        /// </summary>\r\n        public void ImportShortcuts()\r\n        {\r\n            string importPath = EditorUtility.OpenFilePanel(\"导入快捷键\", \"\", \"json\");\r\n            if (string.IsNullOrEmpty(importPath))\r\n                return;\r\n            \r\n            try\r\n            {\r\n                string json = System.IO.File.ReadAllText(importPath);\r\n                var importData = JsonUtility.FromJson<Dictionary<string, object>>(json);\r\n                \r\n                foreach (var shortcut in importData)\r\n                {\r\n                    // 这里需要根据实际JSON结构解析数据\r\n                    Debug.Log($\"导入快捷键: {shortcut.Key}\");\r\n                }\r\n                \r\n                Debug.Log($\"快捷键配置已从 {importPath} 导入\");\r\n            }\r\n            catch (System.Exception e)\r\n            {\r\n                Debug.LogError($\"导入快捷键失败: {e.Message}\");\r\n            }\r\n        }\r\n        \r\n        /// <summary>\r\n        /// 重置所有快捷键\r\n        /// </summary>\r\n        public void ResetAllShortcuts()\r\n        {\r\n            try\r\n            {\r\n                ShortcutManager.instance.ResetToDefault();\r\n                LoadAvailableShortcuts();\r\n                Debug.Log(\"所有快捷键已重置为默认值\");\r\n            }\r\n            catch (System.Exception e)\r\n            {\r\n                Debug.LogError($\"重置快捷键失败: {e.Message}\");\r\n            }\r\n        }\r\n        \r\n        /// <summary>\r\n        /// 获取所有快捷键ID\r\n        /// </summary>\r\n        public string[] GetAllShortcutIds()\r\n        {\r\n            return availableShortcuts.Select(s => s.id).ToArray();\r\n        }\r\n        \r\n        /// <summary>\r\n        /// 按上下文获取快捷键\r\n        /// </summary>\r\n        public ShortcutEntry[] GetShortcutsByContext(string context)\r\n        {\r\n            return availableShortcuts.Where(s => s.context == context).ToArray();\r\n        }\r\n        \r\n        /// <summary>\r\n        /// 在编辑器中显示GUI\r\n        /// </summary>\r\n        private void OnGUI()\r\n        {\r\n            if (!Application.isPlaying) return;\r\n            \r\n            GUILayout.BeginArea(new Rect(10, 10, 500, 700));\r\n            GUILayout.Label(\"UnityEditor.ShortcutManagement 示例\", EditorStyles.boldLabel);\r\n            \r\n            GUILayout.Space(10);\r\n            GUILayout.Label($\"状态: {(enableShortcuts ? \"启用\" : \"禁用\")}\");\r\n            GUILayout.Label($\"快捷键数量: {shortcutCount}\");\r\n            GUILayout.Label($\"最后触发: {lastTriggeredShortcut}\");\r\n            GUILayout.Label($\"快捷键有效: {(isShortcutValid ? \"是\" : \"否\")}\");\r\n            \r\n            GUILayout.Space(10);\r\n            GUILayout.Label(\"快捷键注册\", EditorStyles.boldLabel);\r\n            \r\n            shortcutName = GUILayout.TextField(\"快捷键名称\", shortcutName);\r\n            shortcutKey = GUILayout.TextField(\"按键组合\", shortcutKey);\r\n            shortcutContext = GUILayout.TextField(\"上下文\", shortcutContext);\r\n            \r\n            if (GUILayout.Button(\"注册快捷键\"))\r\n            {\r\n                RegisterShortcut(shortcutName, shortcutName, shortcutKey, shortcutContext);\r\n            }\r\n            \r\n            if (GUILayout.Button(\"验证按键组合\"))\r\n            {\r\n                isShortcutValid = ValidateShortcut(shortcutKey);\r\n                Debug.Log($\"按键组合验证结果: {(isShortcutValid ? \"有效\" : \"无效\")}\");\r\n            }\r\n            \r\n            GUILayout.Space(10);\r\n            GUILayout.Label(\"快捷键管理\", EditorStyles.boldLabel);\r\n            \r\n            string[] shortcutIds = GetAllShortcutIds();\r\n            if (shortcutIds.Length > 0)\r\n            {\r\n                int selectedIndex = EditorGUILayout.Popup(\"选择快捷键\", 0, shortcutIds);\r\n                if (selectedIndex >= 0 && selectedIndex < availableShortcuts.Count)\r\n                {\r\n                    currentShortcut = availableShortcuts[selectedIndex];\r\n                    \r\n                    GUILayout.Label(GetShortcutInfo(currentShortcut.id));\r\n                    \r\n                    string newKey = GUILayout.TextField(\"新按键组合\", currentShortcut.keyCombination);\r\n                    if (newKey != currentShortcut.keyCombination)\r\n                    {\r\n                        ModifyShortcutBinding(currentShortcut.id, newKey);\r\n                    }\r\n                    \r\n                    bool isActive = EditorGUILayout.Toggle(\"启用\", currentShortcut.isActive);\r\n                    if (isActive != currentShortcut.isActive)\r\n                    {\r\n                        SetShortcutActive(currentShortcut.id, isActive);\r\n                    }\r\n                    \r\n                    if (GUILayout.Button(\"注销快捷键\"))\r\n                    {\r\n                        UnregisterShortcut(currentShortcut.id);\r\n                    }\r\n                }\r\n            }\r\n            \r\n            GUILayout.Space(10);\r\n            GUILayout.Label(\"快捷键操作\", EditorStyles.boldLabel);\r\n            \r\n            if (GUILayout.Button(\"测试快捷键\"))\r\n            {\r\n                TestShortcut();\r\n                lastTriggeredShortcut = \"Custom/TestShortcut\";\r\n            }\r\n            \r\n            if (GUILayout.Button(\"保存场景\"))\r\n            {\r\n                SaveSceneShortcut();\r\n                lastTriggeredShortcut = \"Custom/SaveScene\";\r\n            }\r\n            \r\n            if (GUILayout.Button(\"重置变换\"))\r\n            {\r\n                ResetTransformShortcut();\r\n                lastTriggeredShortcut = \"Custom/ResetTransform\";\r\n            }\r\n            \r\n            GUILayout.Space(10);\r\n            GUILayout.Label(\"导入导出\", EditorStyles.boldLabel);\r\n            \r\n            if (GUILayout.Button(\"导出快捷键\"))\r\n            {\r\n                ExportShortcuts();\r\n            }\r\n            \r\n            if (GUILayout.Button(\"导入快捷键\"))\r\n            {\r\n                ImportShortcuts();\r\n            }\r\n            \r\n            if (GUILayout.Button(\"重置所有快捷键\"))\r\n            {\r\n                ResetAllShortcuts();\r\n            }\r\n            \r\n            GUILayout.Space(10);\r\n            GUILayout.Label(\"配置\", EditorStyles.boldLabel);\r\n            \r\n            enableShortcuts = EditorGUILayout.Toggle(\"启用快捷键\", enableShortcuts);\r\n            \r\n            GUILayout.EndArea();\r\n        }\r\n    }\r\n} "
        }
    ]
}