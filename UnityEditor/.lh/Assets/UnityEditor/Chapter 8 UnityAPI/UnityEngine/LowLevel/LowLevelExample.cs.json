{
    "sourceFile": "Assets/UnityEditor/Chapter 8 UnityAPI/UnityEngine/LowLevel/LowLevelExample.cs",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1750934788348,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1750934788348,
            "name": "Commit-0",
            "content": "using UnityEngine;\r\nusing Unity.Collections;\r\nusing Unity.Jobs;\r\nusing Unity.Burst;\r\n\r\n/// <summary>\r\n/// UnityEngine.LowLevel 命名空间案例演示\r\n/// 展示底层系统访问、内存管理、性能优化等核心功能\r\n/// </summary>\r\npublic class LowLevelExample : MonoBehaviour\r\n{\r\n    [Header(\"底层系统配置\")]\r\n    [SerializeField] private bool enableLowLevelAccess = true; //启用底层访问\r\n    [SerializeField] private bool enableJobSystem = true; //启用作业系统\r\n    [SerializeField] private bool enableBurstCompilation = true; //启用Burst编译\r\n    [SerializeField] private bool enableNativeCollections = true; //启用原生集合\r\n    [SerializeField] private bool enableMemoryProfiling = true; //启用内存分析\r\n    \r\n    [Header(\"内存管理\")]\r\n    [SerializeField] private int nativeArraySize = 1000; //原生数组大小\r\n    [SerializeField] private int jobBatchSize = 64; //作业批处理大小\r\n    [SerializeField] private bool useUnsafeCode = false; //使用不安全代码\r\n    [SerializeField] private bool enableMemoryPooling = true; //启用内存池\r\n    \r\n    [Header(\"性能监控\")]\r\n    [SerializeField] private bool enablePerformanceProfiling = true; //启用性能分析\r\n    [SerializeField] private float profilingInterval = 1f; //分析间隔\r\n    [SerializeField] private bool logPerformanceData = false; //记录性能数据\r\n    [SerializeField] private int maxProfilingSamples = 100; //最大分析样本数\r\n    \r\n    [Header(\"系统状态\")]\r\n    [SerializeField] private long totalMemory = 0; //总内存\r\n    [SerializeField] private long usedMemory = 0; //已用内存\r\n    [SerializeField] private long nativeMemory = 0; //原生内存\r\n    [SerializeField] private int activeJobs = 0; //活跃作业数\r\n    [SerializeField] private float jobCompletionRate = 0f; //作业完成率\r\n    [SerializeField] private float burstCompilationTime = 0f; //Burst编译时间\r\n    \r\n    [Header(\"性能数据\")]\r\n    [SerializeField] private float[] performanceHistory = new float[100]; //性能历史\r\n    [SerializeField] private int performanceIndex = 0; //性能索引\r\n    [SerializeField] private float averagePerformance = 0f; //平均性能\r\n    [SerializeField] private float minPerformance = 0f; //最低性能\r\n    [SerializeField] private float maxPerformance = 0f; //最高性能\r\n    \r\n    private NativeArray<float> nativeArray;\r\n    private NativeList<int> nativeList;\r\n    private JobHandle[] jobHandles;\r\n    private float lastProfilingTime = 0f;\r\n    private bool isInitialized = false;\r\n    private System.Collections.Generic.List<JobHandle> activeJobHandles = new System.Collections.Generic.List<JobHandle>();\r\n\r\n    private void Start()\r\n    {\r\n        InitializeLowLevelSystem();\r\n    }\r\n\r\n    /// <summary>\r\n    /// 初始化底层系统\r\n    /// </summary>\r\n    private void InitializeLowLevelSystem()\r\n    {\r\n        // 初始化原生集合\r\n        InitializeNativeCollections();\r\n        \r\n        // 初始化作业系统\r\n        InitializeJobSystem();\r\n        \r\n        // 初始化性能监控\r\n        InitializePerformanceMonitoring();\r\n        \r\n        // 配置底层系统\r\n        ConfigureLowLevelSystem();\r\n        \r\n        isInitialized = true;\r\n        Debug.Log(\"底层系统初始化完成\");\r\n    }\r\n\r\n    /// <summary>\r\n    /// 初始化原生集合\r\n    /// </summary>\r\n    private void InitializeNativeCollections()\r\n    {\r\n        if (enableNativeCollections)\r\n        {\r\n            // 创建原生数组\r\n            nativeArray = new NativeArray<float>(nativeArraySize, Allocator.Persistent);\r\n            \r\n            // 创建原生列表\r\n            nativeList = new NativeList<int>(Allocator.Persistent);\r\n            \r\n            // 初始化数据\r\n            for (int i = 0; i < nativeArraySize; i++)\r\n            {\r\n                nativeArray[i] = Random.Range(0f, 100f);\r\n            }\r\n            \r\n            Debug.Log($\"原生集合初始化完成: 数组大小={nativeArraySize}\");\r\n        }\r\n    }\r\n\r\n    /// <summary>\r\n    /// 初始化作业系统\r\n    /// </summary>\r\n    private void InitializeJobSystem()\r\n    {\r\n        if (enableJobSystem)\r\n        {\r\n            jobHandles = new JobHandle[10]; // 最多10个并发作业\r\n            Debug.Log(\"作业系统初始化完成\");\r\n        }\r\n    }\r\n\r\n    /// <summary>\r\n    /// 初始化性能监控\r\n    /// </summary>\r\n    private void InitializePerformanceMonitoring()\r\n    {\r\n        if (enablePerformanceProfiling)\r\n        {\r\n            performanceHistory = new float[maxProfilingSamples];\r\n            performanceIndex = 0;\r\n            averagePerformance = 0f;\r\n            minPerformance = 0f;\r\n            maxPerformance = 0f;\r\n            \r\n            Debug.Log(\"性能监控初始化完成\");\r\n        }\r\n    }\r\n\r\n    /// <summary>\r\n    /// 配置底层系统\r\n    /// </summary>\r\n    private void ConfigureLowLevelSystem()\r\n    {\r\n        // 配置作业系统\r\n        if (enableJobSystem)\r\n        {\r\n            // 设置作业批处理大小\r\n            JobHandle.CompleteAll(activeJobHandles.ToArray());\r\n            activeJobHandles.Clear();\r\n        }\r\n        \r\n        // 配置内存管理\r\n        if (enableMemoryPooling)\r\n        {\r\n            // 这里可以配置内存池\r\n            Debug.Log(\"内存池配置完成\");\r\n        }\r\n        \r\n        Debug.Log(\"底层系统配置完成\");\r\n    }\r\n\r\n    private void Update()\r\n    {\r\n        if (!isInitialized) return;\r\n        \r\n        // 更新系统状态\r\n        UpdateSystemStatus();\r\n        \r\n        // 执行作业\r\n        ExecuteJobs();\r\n        \r\n        // 性能监控\r\n        if (enablePerformanceProfiling && Time.time - lastProfilingTime > profilingInterval)\r\n        {\r\n            MonitorPerformance();\r\n            lastProfilingTime = Time.time;\r\n        }\r\n        \r\n        // 内存管理\r\n        if (enableMemoryProfiling)\r\n        {\r\n            MonitorMemory();\r\n        }\r\n    }\r\n\r\n    /// <summary>\r\n    /// 更新系统状态\r\n    /// </summary>\r\n    private void UpdateSystemStatus()\r\n    {\r\n        // 获取内存信息\r\n        totalMemory = SystemInfo.systemMemorySize * 1024 * 1024;\r\n        usedMemory = System.GC.GetTotalMemory(false);\r\n        nativeMemory = GetNativeMemoryUsage();\r\n        \r\n        // 获取作业状态\r\n        activeJobs = activeJobHandles.Count;\r\n        jobCompletionRate = CalculateJobCompletionRate();\r\n        \r\n        // 获取Burst编译信息\r\n        burstCompilationTime = GetBurstCompilationTime();\r\n    }\r\n\r\n    /// <summary>\r\n    /// 执行作业\r\n    /// </summary>\r\n    private void ExecuteJobs()\r\n    {\r\n        if (!enableJobSystem) return;\r\n        \r\n        // 清理完成的作业\r\n        CleanupCompletedJobs();\r\n        \r\n        // 执行新作业\r\n        if (activeJobHandles.Count < jobHandles.Length)\r\n        {\r\n            ExecuteSampleJob();\r\n        }\r\n    }\r\n\r\n    /// <summary>\r\n    /// 执行示例作业\r\n    /// </summary>\r\n    private void ExecuteSampleJob()\r\n    {\r\n        if (enableBurstCompilation)\r\n        {\r\n            var job = new SampleBurstJob\r\n            {\r\n                input = nativeArray,\r\n                output = new NativeArray<float>(nativeArraySize, Allocator.TempJob)\r\n            };\r\n            \r\n            var jobHandle = job.Schedule(nativeArraySize, jobBatchSize);\r\n            activeJobHandles.Add(jobHandle);\r\n            \r\n            if (logPerformanceData)\r\n            {\r\n                Debug.Log($\"Burst作业已调度: 大小={nativeArraySize}, 批处理={jobBatchSize}\");\r\n            }\r\n        }\r\n        else\r\n        {\r\n            var job = new SampleJob\r\n            {\r\n                input = nativeArray,\r\n                output = new NativeArray<float>(nativeArraySize, Allocator.TempJob)\r\n            };\r\n            \r\n            var jobHandle = job.Schedule(nativeArraySize, jobBatchSize);\r\n            activeJobHandles.Add(jobHandle);\r\n            \r\n            if (logPerformanceData)\r\n            {\r\n                Debug.Log($\"普通作业已调度: 大小={nativeArraySize}, 批处理={jobBatchSize}\");\r\n            }\r\n        }\r\n    }\r\n\r\n    /// <summary>\r\n    /// 清理完成的作业\r\n    /// </summary>\r\n    private void CleanupCompletedJobs()\r\n    {\r\n        for (int i = activeJobHandles.Count - 1; i >= 0; i--)\r\n        {\r\n            if (activeJobHandles[i].IsCompleted)\r\n            {\r\n                activeJobHandles[i].Complete();\r\n                activeJobHandles.RemoveAt(i);\r\n            }\r\n        }\r\n    }\r\n\r\n    /// <summary>\r\n    /// 监控性能\r\n    /// </summary>\r\n    private void MonitorPerformance()\r\n    {\r\n        float currentPerformance = 1f / Time.deltaTime;\r\n        \r\n        // 更新性能历史\r\n        performanceHistory[performanceIndex] = currentPerformance;\r\n        performanceIndex = (performanceIndex + 1) % maxProfilingSamples;\r\n        \r\n        // 计算性能统计\r\n        CalculatePerformanceStats();\r\n        \r\n        if (logPerformanceData)\r\n        {\r\n            Debug.Log($\"性能监控: FPS={currentPerformance:F1}, 平均={averagePerformance:F1}, 作业数={activeJobs}\");\r\n        }\r\n    }\r\n\r\n    /// <summary>\r\n    /// 计算性能统计\r\n    /// </summary>\r\n    private void CalculatePerformanceStats()\r\n    {\r\n        float sum = 0f;\r\n        minPerformance = float.MaxValue;\r\n        maxPerformance = 0f;\r\n        \r\n        for (int i = 0; i < maxProfilingSamples; i++)\r\n        {\r\n            float value = performanceHistory[i];\r\n            sum += value;\r\n            \r\n            if (value < minPerformance) minPerformance = value;\r\n            if (value > maxPerformance) maxPerformance = value;\r\n        }\r\n        \r\n        averagePerformance = sum / maxProfilingSamples;\r\n    }\r\n\r\n    /// <summary>\r\n    /// 监控内存\r\n    /// </summary>\r\n    private void MonitorMemory()\r\n    {\r\n        // 获取内存使用情况\r\n        long currentMemory = System.GC.GetTotalMemory(false);\r\n        \r\n        if (logPerformanceData)\r\n        {\r\n            Debug.Log($\"内存监控: 总内存={totalMemory / (1024 * 1024):F1}MB, 已用={usedMemory / (1024 * 1024):F1}MB, 原生={nativeMemory / (1024 * 1024):F1}MB\");\r\n        }\r\n    }\r\n\r\n    /// <summary>\r\n    /// 获取原生内存使用量\r\n    /// </summary>\r\n    /// <returns>原生内存使用量（字节）</returns>\r\n    private long GetNativeMemoryUsage()\r\n    {\r\n        // 这是一个简化的原生内存计算\r\n        // 在实际项目中，可能需要使用更复杂的计算方法\r\n        return nativeArray.IsCreated ? nativeArray.Length * sizeof(float) : 0;\r\n    }\r\n\r\n    /// <summary>\r\n    /// 计算作业完成率\r\n    /// </summary>\r\n    /// <returns>作业完成率（0-1）</returns>\r\n    private float CalculateJobCompletionRate()\r\n    {\r\n        if (activeJobHandles.Count == 0) return 1f;\r\n        \r\n        int completedJobs = 0;\r\n        foreach (var jobHandle in activeJobHandles)\r\n        {\r\n            if (jobHandle.IsCompleted)\r\n            {\r\n                completedJobs++;\r\n            }\r\n        }\r\n        \r\n        return (float)completedJobs / activeJobHandles.Count;\r\n    }\r\n\r\n    /// <summary>\r\n    /// 获取Burst编译时间\r\n    /// </summary>\r\n    /// <returns>Burst编译时间（毫秒）</returns>\r\n    private float GetBurstCompilationTime()\r\n    {\r\n        // 这是一个简化的Burst编译时间计算\r\n        // 在实际项目中，可能需要使用更复杂的计算方法\r\n        return Random.Range(10f, 100f); // 模拟数据\r\n    }\r\n\r\n    /// <summary>\r\n    /// 执行批量计算\r\n    /// </summary>\r\n    public void ExecuteBatchCalculation()\r\n    {\r\n        if (!enableJobSystem) return;\r\n        \r\n        Debug.Log(\"开始批量计算...\");\r\n        \r\n        // 创建批量计算作业\r\n        var batchJob = new BatchCalculationJob\r\n        {\r\n            data = nativeArray,\r\n            result = new NativeArray<float>(nativeArraySize, Allocator.TempJob)\r\n        };\r\n        \r\n        var jobHandle = batchJob.Schedule(nativeArraySize, jobBatchSize);\r\n        activeJobHandles.Add(jobHandle);\r\n        \r\n        Debug.Log($\"批量计算作业已调度: 数据大小={nativeArraySize}\");\r\n    }\r\n\r\n    /// <summary>\r\n    /// 执行并行处理\r\n    /// </summary>\r\n    public void ExecuteParallelProcessing()\r\n    {\r\n        if (!enableJobSystem) return;\r\n        \r\n        Debug.Log(\"开始并行处理...\");\r\n        \r\n        // 创建并行处理作业\r\n        var parallelJob = new ParallelProcessingJob\r\n        {\r\n            input = nativeArray,\r\n            output = new NativeArray<float>(nativeArraySize, Allocator.TempJob),\r\n            multiplier = 2.0f\r\n        };\r\n        \r\n        var jobHandle = parallelJob.Schedule(nativeArraySize, jobBatchSize);\r\n        activeJobHandles.Add(jobHandle);\r\n        \r\n        Debug.Log($\"并行处理作业已调度: 数据大小={nativeArraySize}\");\r\n    }\r\n\r\n    /// <summary>\r\n    /// 执行内存优化\r\n    /// </summary>\r\n    public void ExecuteMemoryOptimization()\r\n    {\r\n        Debug.Log(\"开始内存优化...\");\r\n        \r\n        // 清理未使用的内存\r\n        System.GC.Collect();\r\n        System.GC.WaitForPendingFinalizers();\r\n        System.GC.Collect();\r\n        \r\n        // 清理完成的作业\r\n        CleanupCompletedJobs();\r\n        \r\n        // 重新分配原生集合\r\n        if (nativeArray.IsCreated)\r\n        {\r\n            nativeArray.Dispose();\r\n            nativeArray = new NativeArray<float>(nativeArraySize, Allocator.Persistent);\r\n        }\r\n        \r\n        Debug.Log(\"内存优化完成\");\r\n    }\r\n\r\n    /// <summary>\r\n    /// 生成性能报告\r\n    /// </summary>\r\n    public void GeneratePerformanceReport()\r\n    {\r\n        Debug.Log(\"=== 底层系统性能报告 ===\");\r\n        Debug.Log($\"总内存: {totalMemory / (1024 * 1024):F1} MB\");\r\n        Debug.Log($\"已用内存: {usedMemory / (1024 * 1024):F1} MB\");\r\n        Debug.Log($\"原生内存: {nativeMemory / (1024 * 1024):F1} MB\");\r\n        Debug.Log($\"活跃作业数: {activeJobs}\");\r\n        Debug.Log($\"作业完成率: {jobCompletionRate:P1}\");\r\n        Debug.Log($\"Burst编译时间: {burstCompilationTime:F1} ms\");\r\n        Debug.Log($\"平均性能: {averagePerformance:F1} FPS\");\r\n        Debug.Log($\"最低性能: {minPerformance:F1} FPS\");\r\n        Debug.Log($\"最高性能: {maxPerformance:F1} FPS\");\r\n    }\r\n\r\n    /// <summary>\r\n    /// 生成系统报告\r\n    /// </summary>\r\n    public void GenerateSystemReport()\r\n    {\r\n        Debug.Log(\"=== 底层系统报告 ===\");\r\n        Debug.Log($\"底层访问: {(enableLowLevelAccess ? \"启用\" : \"禁用\")}\");\r\n        Debug.Log($\"作业系统: {(enableJobSystem ? \"启用\" : \"禁用\")}\");\r\n        Debug.Log($\"Burst编译: {(enableBurstCompilation ? \"启用\" : \"禁用\")}\");\r\n        Debug.Log($\"原生集合: {(enableNativeCollections ? \"启用\" : \"禁用\")}\");\r\n        Debug.Log($\"内存分析: {(enableMemoryProfiling ? \"启用\" : \"禁用\")}\");\r\n        Debug.Log($\"性能分析: {(enablePerformanceProfiling ? \"启用\" : \"禁用\")}\");\r\n        Debug.Log($\"原生数组大小: {nativeArraySize}\");\r\n        Debug.Log($\"作业批处理大小: {jobBatchSize}\");\r\n        Debug.Log($\"使用不安全代码: {(useUnsafeCode ? \"是\" : \"否\")}\");\r\n        Debug.Log($\"启用内存池: {(enableMemoryPooling ? \"是\" : \"否\")}\");\r\n    }\r\n\r\n    /// <summary>\r\n    /// 重置系统\r\n    /// </summary>\r\n    public void ResetSystem()\r\n    {\r\n        Debug.Log(\"重置底层系统...\");\r\n        \r\n        // 清理作业\r\n        CleanupCompletedJobs();\r\n        JobHandle.CompleteAll(activeJobHandles.ToArray());\r\n        activeJobHandles.Clear();\r\n        \r\n        // 清理原生集合\r\n        if (nativeArray.IsCreated)\r\n        {\r\n            nativeArray.Dispose();\r\n        }\r\n        if (nativeList.IsCreated)\r\n        {\r\n            nativeList.Dispose();\r\n        }\r\n        \r\n        // 重新初始化\r\n        InitializeLowLevelSystem();\r\n        \r\n        Debug.Log(\"底层系统重置完成\");\r\n    }\r\n\r\n    /// <summary>\r\n    /// 导出性能数据\r\n    /// </summary>\r\n    public void ExportPerformanceData()\r\n    {\r\n        var data = new PerformanceData\r\n        {\r\n            timestamp = System.DateTime.Now.ToString(),\r\n            totalMemory = totalMemory,\r\n            usedMemory = usedMemory,\r\n            nativeMemory = nativeMemory,\r\n            activeJobs = activeJobs,\r\n            jobCompletionRate = jobCompletionRate,\r\n            burstCompilationTime = burstCompilationTime,\r\n            averagePerformance = averagePerformance,\r\n            minPerformance = minPerformance,\r\n            maxPerformance = maxPerformance,\r\n            performanceHistory = performanceHistory\r\n        };\r\n        \r\n        string json = JsonUtility.ToJson(data, true);\r\n        string filename = $\"lowlevel_performance_{System.DateTime.Now:yyyyMMdd_HHmmss}.json\";\r\n        \r\n        System.IO.File.WriteAllText(filename, json);\r\n        Debug.Log($\"性能数据已导出: {filename}\");\r\n    }\r\n\r\n    private void OnGUI()\r\n    {\r\n        GUILayout.BeginArea(new Rect(10, 10, 400, 800));\r\n        GUILayout.Label(\"LowLevel 底层系统演示\", UnityEditor.EditorStyles.boldLabel);\r\n        \r\n        GUILayout.Space(10);\r\n        GUILayout.Label(\"系统配置:\");\r\n        enableLowLevelAccess = GUILayout.Toggle(enableLowLevelAccess, \"启用底层访问\");\r\n        enableJobSystem = GUILayout.Toggle(enableJobSystem, \"启用作业系统\");\r\n        enableBurstCompilation = GUILayout.Toggle(enableBurstCompilation, \"启用Burst编译\");\r\n        enableNativeCollections = GUILayout.Toggle(enableNativeCollections, \"启用原生集合\");\r\n        enableMemoryProfiling = GUILayout.Toggle(enableMemoryProfiling, \"启用内存分析\");\r\n        enablePerformanceProfiling = GUILayout.Toggle(enablePerformanceProfiling, \"启用性能分析\");\r\n        \r\n        GUILayout.Space(10);\r\n        GUILayout.Label(\"内存管理:\");\r\n        nativeArraySize = int.TryParse(GUILayout.TextField(\"原生数组大小\", nativeArraySize.ToString()), out var arraySize) ? arraySize : nativeArraySize;\r\n        jobBatchSize = int.TryParse(GUILayout.TextField(\"作业批处理大小\", jobBatchSize.ToString()), out var batchSize) ? batchSize : jobBatchSize;\r\n        useUnsafeCode = GUILayout.Toggle(useUnsafeCode, \"使用不安全代码\");\r\n        enableMemoryPooling = GUILayout.Toggle(enableMemoryPooling, \"启用内存池\");\r\n        \r\n        GUILayout.Space(10);\r\n        GUILayout.Label(\"系统状态:\");\r\n        GUILayout.Label($\"总内存: {totalMemory / (1024 * 1024):F1} MB\");\r\n        GUILayout.Label($\"已用内存: {usedMemory / (1024 * 1024):F1} MB\");\r\n        GUILayout.Label($\"原生内存: {nativeMemory / (1024 * 1024):F1} MB\");\r\n        GUILayout.Label($\"活跃作业数: {activeJobs}\");\r\n        GUILayout.Label($\"作业完成率: {jobCompletionRate:P1}\");\r\n        GUILayout.Label($\"Burst编译时间: {burstCompilationTime:F1} ms\");\r\n        \r\n        GUILayout.Space(10);\r\n        GUILayout.Label(\"性能数据:\");\r\n        GUILayout.Label($\"平均性能: {averagePerformance:F1} FPS\");\r\n        GUILayout.Label($\"最低性能: {minPerformance:F1} FPS\");\r\n        GUILayout.Label($\"最高性能: {maxPerformance:F1} FPS\");\r\n        \r\n        GUILayout.Space(10);\r\n        \r\n        if (GUILayout.Button(\"执行批量计算\"))\r\n        {\r\n            ExecuteBatchCalculation();\r\n        }\r\n        \r\n        if (GUILayout.Button(\"执行并行处理\"))\r\n        {\r\n            ExecuteParallelProcessing();\r\n        }\r\n        \r\n        if (GUILayout.Button(\"执行内存优化\"))\r\n        {\r\n            ExecuteMemoryOptimization();\r\n        }\r\n        \r\n        if (GUILayout.Button(\"生成性能报告\"))\r\n        {\r\n            GeneratePerformanceReport();\r\n        }\r\n        \r\n        if (GUILayout.Button(\"生成系统报告\"))\r\n        {\r\n            GenerateSystemReport();\r\n        }\r\n        \r\n        if (GUILayout.Button(\"重置系统\"))\r\n        {\r\n            ResetSystem();\r\n        }\r\n        \r\n        if (GUILayout.Button(\"导出性能数据\"))\r\n        {\r\n            ExportPerformanceData();\r\n        }\r\n        \r\n        GUILayout.EndArea();\r\n    }\r\n\r\n    private void OnDestroy()\r\n    {\r\n        // 清理资源\r\n        if (nativeArray.IsCreated)\r\n        {\r\n            nativeArray.Dispose();\r\n        }\r\n        if (nativeList.IsCreated)\r\n        {\r\n            nativeList.Dispose();\r\n        }\r\n        \r\n        // 清理作业\r\n        CleanupCompletedJobs();\r\n        JobHandle.CompleteAll(activeJobHandles.ToArray());\r\n    }\r\n}\r\n\r\n/// <summary>\r\n/// 示例Burst作业\r\n/// </summary>\r\n[BurstCompile]\r\npublic struct SampleBurstJob : IJobParallelFor\r\n{\r\n    [ReadOnly] public NativeArray<float> input;\r\n    [WriteOnly] public NativeArray<float> output;\r\n    \r\n    public void Execute(int index)\r\n    {\r\n        output[index] = input[index] * 2.0f;\r\n    }\r\n}\r\n\r\n/// <summary>\r\n/// 示例普通作业\r\n/// </summary>\r\npublic struct SampleJob : IJobParallelFor\r\n{\r\n    [ReadOnly] public NativeArray<float> input;\r\n    [WriteOnly] public NativeArray<float> output;\r\n    \r\n    public void Execute(int index)\r\n    {\r\n        output[index] = input[index] * 2.0f;\r\n    }\r\n}\r\n\r\n/// <summary>\r\n/// 批量计算作业\r\n/// </summary>\r\n[BurstCompile]\r\npublic struct BatchCalculationJob : IJobParallelFor\r\n{\r\n    [ReadOnly] public NativeArray<float> data;\r\n    [WriteOnly] public NativeArray<float> result;\r\n    \r\n    public void Execute(int index)\r\n    {\r\n        result[index] = Mathf.Sqrt(data[index]) + Mathf.Pow(data[index], 2);\r\n    }\r\n}\r\n\r\n/// <summary>\r\n/// 并行处理作业\r\n/// </summary>\r\n[BurstCompile]\r\npublic struct ParallelProcessingJob : IJobParallelFor\r\n{\r\n    [ReadOnly] public NativeArray<float> input;\r\n    [WriteOnly] public NativeArray<float> output;\r\n    public float multiplier;\r\n    \r\n    public void Execute(int index)\r\n    {\r\n        output[index] = input[index] * multiplier + Mathf.Sin(input[index]);\r\n    }\r\n}\r\n\r\n/// <summary>\r\n/// 性能数据类\r\n/// </summary>\r\n[System.Serializable]\r\npublic class PerformanceData\r\n{\r\n    public string timestamp;\r\n    public long totalMemory;\r\n    public long usedMemory;\r\n    public long nativeMemory;\r\n    public int activeJobs;\r\n    public float jobCompletionRate;\r\n    public float burstCompilationTime;\r\n    public float averagePerformance;\r\n    public float minPerformance;\r\n    public float maxPerformance;\r\n    public float[] performanceHistory;\r\n} "
        }
    ]
}