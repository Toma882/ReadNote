{
    "sourceFile": "Assets/UnityEditor/Chapter 8 UnityAPI/UnityEditor/Build/BuildExample.cs",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1750938406855,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1750938406855,
            "name": "Commit-0",
            "content": "using UnityEngine;\r\nusing UnityEditor;\r\nusing UnityEditor.Build;\r\nusing UnityEditor.Build.Reporting;\r\nusing System.Collections.Generic;\r\n\r\n/// <summary>\r\n/// UnityEditor.Build 命名空间案例演示\r\n/// 展示构建系统的使用，包括构建流程、构建报告和构建回调\r\n/// </summary>\r\npublic class BuildExample : MonoBehaviour, IPreprocessBuildWithReport, IPostprocessBuildWithReport\r\n{\r\n    [Header(\"构建系统配置\")]\r\n    [SerializeField] private bool enableBuildSystem = true; //启用构建系统\r\n    [SerializeField] private bool enableBuildLogging = true; //启用构建日志\r\n    [SerializeField] private bool enableBuildValidation = true; //启用构建验证\r\n    [SerializeField] private bool enableBuildOptimization = true; //启用构建优化\r\n    [SerializeField] private bool enableBuildCompression = true; //启用构建压缩\r\n    \r\n    [Header(\"构建目标\")]\r\n    [SerializeField] private BuildTarget buildTarget = BuildTarget.StandaloneWindows; //构建目标\r\n    [SerializeField] private BuildTargetGroup buildTargetGroup = BuildTargetGroup.Standalone; //构建目标组\r\n    [SerializeField] private string buildPath = \"Builds/\"; //构建路径\r\n    [SerializeField] private string buildName = \"MyGame\"; //构建名称\r\n    [SerializeField] private BuildOptions buildOptions = BuildOptions.None; //构建选项\r\n    \r\n    [Header(\"构建配置\")]\r\n    [SerializeField] private bool developmentBuild = false; //开发构建\r\n    [SerializeField] private bool debugBuild = false; //调试构建\r\n    [SerializeField] private bool allowDebugging = false; //允许调试\r\n    [SerializeField] private bool compressWithLz4 = true; //使用LZ4压缩\r\n    [SerializeField] private bool compressWithLz4HC = false; //使用LZ4HC压缩\r\n    [SerializeField] private bool buildAppBundle = false; //构建应用包\r\n    \r\n    [Header(\"构建状态\")]\r\n    [SerializeField] private string buildState = \"未构建\"; //构建状态\r\n    [SerializeField] private bool isBuilding = false; //是否正在构建\r\n    [SerializeField] private float buildProgress = 0f; //构建进度\r\n    [SerializeField] private string buildMessage = \"\"; //构建消息\r\n    [SerializeField] private BuildResult lastBuildResult = BuildResult.Unknown; //最后构建结果\r\n    [SerializeField] private string lastBuildPath = \"\"; //最后构建路径\r\n    [SerializeField] private long lastBuildSize = 0; //最后构建大小\r\n    \r\n    [Header(\"构建历史\")]\r\n    [SerializeField] private BuildHistoryEntry[] buildHistory = new BuildHistoryEntry[10]; //构建历史\r\n    [SerializeField] private int buildHistoryIndex = 0; //构建历史索引\r\n    [SerializeField] private bool enableBuildHistory = true; //启用构建历史\r\n    \r\n    [Header(\"性能监控\")]\r\n    [SerializeField] private bool enablePerformanceMonitoring = true; //启用性能监控\r\n    [SerializeField] private float[] buildTimeHistory = new float[100]; //构建时间历史\r\n    [SerializeField] private int buildTimeIndex = 0; //构建时间索引\r\n    [SerializeField] private float averageBuildTime = 0f; //平均构建时间\r\n    [SerializeField] private float maxBuildTime = 0f; //最大构建时间\r\n    [SerializeField] private float totalBuildTime = 0f; //总构建时间\r\n    [SerializeField] private int totalBuildCount = 0; //总构建次数\r\n    \r\n    [Header(\"构建报告\")]\r\n    [SerializeField] private BuildReport lastBuildReport; //最后构建报告\r\n    [SerializeField] private string buildSummary = \"\"; //构建摘要\r\n    [SerializeField] private int totalErrors = 0; //总错误数\r\n    [SerializeField] private int totalWarnings = 0; //总警告数\r\n    [SerializeField] private int totalSteps = 0; //总步骤数\r\n    [SerializeField] private float totalDuration = 0f; //总持续时间\r\n    \r\n    private bool isInitialized = false;\r\n    private float buildStartTime = 0f;\r\n    private System.Action<float, string> buildProgressCallback;\r\n\r\n    // IPreprocessBuildWithReport 接口实现\r\n    public int callbackOrder => 0;\r\n\r\n    private void Start()\r\n    {\r\n        InitializeBuildSystem();\r\n    }\r\n\r\n    /// <summary>\r\n    /// 初始化构建系统\r\n    /// </summary>\r\n    private void InitializeBuildSystem()\r\n    {\r\n        if (!enableBuildSystem) return;\r\n        \r\n        // 初始化构建路径\r\n        InitializeBuildPath();\r\n        \r\n        // 初始化构建选项\r\n        InitializeBuildOptions();\r\n        \r\n        // 初始化性能监控\r\n        InitializePerformanceMonitoring();\r\n        \r\n        // 设置构建进度回调\r\n        buildProgressCallback = OnBuildProgress;\r\n        \r\n        isInitialized = true;\r\n        buildState = \"已初始化\";\r\n        Debug.Log(\"构建系统初始化完成\");\r\n    }\r\n\r\n    /// <summary>\r\n    /// 初始化构建路径\r\n    /// </summary>\r\n    private void InitializeBuildPath()\r\n    {\r\n        if (string.IsNullOrEmpty(buildPath))\r\n        {\r\n            buildPath = \"Builds/\";\r\n        }\r\n        \r\n        // 确保构建路径存在\r\n        if (!System.IO.Directory.Exists(buildPath))\r\n        {\r\n            System.IO.Directory.CreateDirectory(buildPath);\r\n        }\r\n        \r\n        Debug.Log($\"构建路径已设置: {buildPath}\");\r\n    }\r\n\r\n    /// <summary>\r\n    /// 初始化构建选项\r\n    /// </summary>\r\n    private void InitializeBuildOptions()\r\n    {\r\n        buildOptions = BuildOptions.None;\r\n        \r\n        if (developmentBuild)\r\n        {\r\n            buildOptions |= BuildOptions.Development;\r\n        }\r\n        \r\n        if (debugBuild)\r\n        {\r\n            buildOptions |= BuildOptions.Development;\r\n        }\r\n        \r\n        if (allowDebugging)\r\n        {\r\n            buildOptions |= BuildOptions.AllowDebugging;\r\n        }\r\n        \r\n        if (compressWithLz4)\r\n        {\r\n            buildOptions |= BuildOptions.CompressWithLz4;\r\n        }\r\n        \r\n        if (compressWithLz4HC)\r\n        {\r\n            buildOptions |= BuildOptions.CompressWithLz4HC;\r\n        }\r\n        \r\n        if (buildAppBundle)\r\n        {\r\n            buildOptions |= BuildOptions.BuildAppBundle;\r\n        }\r\n        \r\n        Debug.Log($\"构建选项已设置: {buildOptions}\");\r\n    }\r\n\r\n    /// <summary>\r\n    /// 初始化性能监控\r\n    /// </summary>\r\n    private void InitializePerformanceMonitoring()\r\n    {\r\n        if (enablePerformanceMonitoring)\r\n        {\r\n            buildTimeHistory = new float[100];\r\n            buildTimeIndex = 0;\r\n            averageBuildTime = 0f;\r\n            maxBuildTime = 0f;\r\n            totalBuildTime = 0f;\r\n            totalBuildCount = 0;\r\n            \r\n            Debug.Log(\"性能监控初始化完成\");\r\n        }\r\n    }\r\n\r\n    private void Update()\r\n    {\r\n        if (!isInitialized) return;\r\n        \r\n        // 更新构建状态\r\n        UpdateBuildStatus();\r\n        \r\n        // 性能监控\r\n        if (enablePerformanceMonitoring)\r\n        {\r\n            UpdatePerformanceMonitoring();\r\n        }\r\n    }\r\n\r\n    /// <summary>\r\n    /// 更新构建状态\r\n    /// </summary>\r\n    private void UpdateBuildStatus()\r\n    {\r\n        if (isBuilding)\r\n        {\r\n            buildState = \"构建中\";\r\n        }\r\n        else\r\n        {\r\n            buildState = \"空闲\";\r\n        }\r\n    }\r\n\r\n    /// <summary>\r\n    /// 更新性能监控\r\n    /// </summary>\r\n    private void UpdatePerformanceMonitoring()\r\n    {\r\n        // 计算平均构建时间\r\n        if (totalBuildCount > 0)\r\n        {\r\n            averageBuildTime = totalBuildTime / totalBuildCount;\r\n        }\r\n    }\r\n\r\n    /// <summary>\r\n    /// 构建进度回调\r\n    /// </summary>\r\n    /// <param name=\"progress\">进度 (0-1)</param>\r\n    /// <param name=\"message\">消息</param>\r\n    private void OnBuildProgress(float progress, string message)\r\n    {\r\n        buildProgress = progress;\r\n        buildMessage = message;\r\n        \r\n        if (enableBuildLogging)\r\n        {\r\n            Debug.Log($\"构建进度: {progress * 100:F1}% - {message}\");\r\n        }\r\n    }\r\n\r\n    /// <summary>\r\n    /// 开始构建\r\n    /// </summary>\r\n    public void StartBuild()\r\n    {\r\n        if (isBuilding)\r\n        {\r\n            Debug.LogWarning(\"构建正在进行中，请等待完成\");\r\n            return;\r\n        }\r\n        \r\n        if (!enableBuildValidation || ValidateBuild())\r\n        {\r\n            isBuilding = true;\r\n            buildStartTime = Time.realtimeSinceStartup;\r\n            buildProgress = 0f;\r\n            buildMessage = \"开始构建...\";\r\n            \r\n            // 设置构建选项\r\n            InitializeBuildOptions();\r\n            \r\n            // 开始构建\r\n            BuildPlayer();\r\n        }\r\n    }\r\n\r\n    /// <summary>\r\n    /// 验证构建\r\n    /// </summary>\r\n    /// <returns>是否通过验证</returns>\r\n    private bool ValidateBuild()\r\n    {\r\n        bool isValid = true;\r\n        \r\n        // 检查构建路径\r\n        if (string.IsNullOrEmpty(buildPath))\r\n        {\r\n            Debug.LogError(\"构建路径不能为空\");\r\n            isValid = false;\r\n        }\r\n        \r\n        // 检查构建名称\r\n        if (string.IsNullOrEmpty(buildName))\r\n        {\r\n            Debug.LogError(\"构建名称不能为空\");\r\n            isValid = false;\r\n        }\r\n        \r\n        // 检查场景\r\n        if (EditorBuildSettings.scenes.Length == 0)\r\n        {\r\n            Debug.LogWarning(\"没有场景添加到构建设置中\");\r\n        }\r\n        \r\n        return isValid;\r\n    }\r\n\r\n    /// <summary>\r\n    /// 构建玩家\r\n    /// </summary>\r\n    private void BuildPlayer()\r\n    {\r\n        try\r\n        {\r\n            // 获取构建路径\r\n            string fullBuildPath = GetFullBuildPath();\r\n            \r\n            // 获取场景路径\r\n            string[] scenePaths = GetScenePaths();\r\n            \r\n            // 开始构建\r\n            BuildReport report = BuildPipeline.BuildPlayer(scenePaths, fullBuildPath, buildTarget, buildOptions);\r\n            \r\n            // 处理构建结果\r\n            ProcessBuildResult(report);\r\n        }\r\n        catch (System.Exception e)\r\n        {\r\n            Debug.LogError($\"构建失败: {e.Message}\");\r\n            ProcessBuildError(e);\r\n        }\r\n    }\r\n\r\n    /// <summary>\r\n    /// 获取完整构建路径\r\n    /// </summary>\r\n    /// <returns>完整构建路径</returns>\r\n    private string GetFullBuildPath()\r\n    {\r\n        string extension = GetBuildExtension();\r\n        return System.IO.Path.Combine(buildPath, $\"{buildName}{extension}\");\r\n    }\r\n\r\n    /// <summary>\r\n    /// 获取构建扩展名\r\n    /// </summary>\r\n    /// <returns>构建扩展名</returns>\r\n    private string GetBuildExtension()\r\n    {\r\n        switch (buildTarget)\r\n        {\r\n            case BuildTarget.StandaloneWindows:\r\n            case BuildTarget.StandaloneWindows64:\r\n                return \".exe\";\r\n            case BuildTarget.StandaloneOSX:\r\n                return \".app\";\r\n            case BuildTarget.StandaloneLinux64:\r\n                return \".x86_64\";\r\n            case BuildTarget.Android:\r\n                return buildAppBundle ? \".aab\" : \".apk\";\r\n            case BuildTarget.iOS:\r\n                return \"\"; // iOS 构建到文件夹\r\n            default:\r\n                return \"\";\r\n        }\r\n    }\r\n\r\n    /// <summary>\r\n    /// 获取场景路径\r\n    /// </summary>\r\n    /// <returns>场景路径数组</returns>\r\n    private string[] GetScenePaths()\r\n    {\r\n        List<string> scenePaths = new List<string>();\r\n        \r\n        foreach (EditorBuildSettingsScene scene in EditorBuildSettings.scenes)\r\n        {\r\n            if (scene.enabled)\r\n            {\r\n                scenePaths.Add(scene.path);\r\n            }\r\n        }\r\n        \r\n        if (scenePaths.Count == 0)\r\n        {\r\n            // 如果没有场景，添加当前场景\r\n            scenePaths.Add(UnityEditor.SceneManagement.EditorSceneManager.GetActiveScene().path);\r\n        }\r\n        \r\n        return scenePaths.ToArray();\r\n    }\r\n\r\n    /// <summary>\r\n    /// 处理构建结果\r\n    /// </summary>\r\n    /// <param name=\"report\">构建报告</param>\r\n    private void ProcessBuildResult(BuildReport report)\r\n    {\r\n        lastBuildReport = report;\r\n        lastBuildResult = report.summary.result;\r\n        \r\n        float buildTime = Time.realtimeSinceStartup - buildStartTime;\r\n        \r\n        // 更新构建信息\r\n        if (report.summary.result == BuildResult.Succeeded)\r\n        {\r\n            lastBuildPath = report.summary.outputPath;\r\n            lastBuildSize = GetBuildSize(lastBuildPath);\r\n            buildMessage = \"构建成功\";\r\n            \r\n            // 记录到历史\r\n            if (enableBuildHistory)\r\n            {\r\n                AddBuildHistoryEntry(report, buildTime);\r\n            }\r\n            \r\n            Debug.Log($\"构建成功: {lastBuildPath} (大小: {FormatFileSize(lastBuildSize)})\");\r\n        }\r\n        else\r\n        {\r\n            buildMessage = \"构建失败\";\r\n            Debug.LogError($\"构建失败: {report.summary.result}\");\r\n        }\r\n        \r\n        // 更新性能数据\r\n        UpdateBuildPerformance(buildTime);\r\n        \r\n        // 生成构建摘要\r\n        GenerateBuildSummary(report);\r\n        \r\n        isBuilding = false;\r\n        buildProgress = 1f;\r\n    }\r\n\r\n    /// <summary>\r\n    /// 处理构建错误\r\n    /// </summary>\r\n    /// <param name=\"exception\">异常</param>\r\n    private void ProcessBuildError(System.Exception exception)\r\n    {\r\n        lastBuildResult = BuildResult.Failed;\r\n        buildMessage = $\"构建错误: {exception.Message}\";\r\n        isBuilding = false;\r\n        buildProgress = 0f;\r\n        \r\n        Debug.LogError($\"构建过程中发生错误: {exception}\");\r\n    }\r\n\r\n    /// <summary>\r\n    /// 获取构建大小\r\n    /// </summary>\r\n    /// <param name=\"buildPath\">构建路径</param>\r\n    /// <returns>构建大小（字节）</returns>\r\n    private long GetBuildSize(string buildPath)\r\n    {\r\n        if (System.IO.File.Exists(buildPath))\r\n        {\r\n            return new System.IO.FileInfo(buildPath).Length;\r\n        }\r\n        else if (System.IO.Directory.Exists(buildPath))\r\n        {\r\n            return GetDirectorySize(buildPath);\r\n        }\r\n        \r\n        return 0;\r\n    }\r\n\r\n    /// <summary>\r\n    /// 获取目录大小\r\n    /// </summary>\r\n    /// <param name=\"directoryPath\">目录路径</param>\r\n    /// <returns>目录大小（字节）</returns>\r\n    private long GetDirectorySize(string directoryPath)\r\n    {\r\n        long size = 0;\r\n        \r\n        try\r\n        {\r\n            string[] files = System.IO.Directory.GetFiles(directoryPath, \"*\", System.IO.SearchOption.AllDirectories);\r\n            foreach (string file in files)\r\n            {\r\n                size += new System.IO.FileInfo(file).Length;\r\n            }\r\n        }\r\n        catch (System.Exception e)\r\n        {\r\n            Debug.LogWarning($\"计算目录大小时出错: {e.Message}\");\r\n        }\r\n        \r\n        return size;\r\n    }\r\n\r\n    /// <summary>\r\n    /// 格式化文件大小\r\n    /// </summary>\r\n    /// <param name=\"bytes\">字节数</param>\r\n    /// <returns>格式化的文件大小字符串</returns>\r\n    private string FormatFileSize(long bytes)\r\n    {\r\n        string[] sizes = { \"B\", \"KB\", \"MB\", \"GB\" };\r\n        double len = bytes;\r\n        int order = 0;\r\n        \r\n        while (len >= 1024 && order < sizes.Length - 1)\r\n        {\r\n            order++;\r\n            len = len / 1024;\r\n        }\r\n        \r\n        return $\"{len:0.##} {sizes[order]}\";\r\n    }\r\n\r\n    /// <summary>\r\n    /// 添加构建历史条目\r\n    /// </summary>\r\n    /// <param name=\"report\">构建报告</param>\r\n    /// <param name=\"buildTime\">构建时间</param>\r\n    private void AddBuildHistoryEntry(BuildReport report, float buildTime)\r\n    {\r\n        var entry = new BuildHistoryEntry\r\n        {\r\n            timestamp = System.DateTime.Now.ToString(),\r\n            buildTarget = buildTarget.ToString(),\r\n            buildResult = report.summary.result.ToString(),\r\n            buildPath = report.summary.outputPath,\r\n            buildSize = GetBuildSize(report.summary.outputPath),\r\n            buildTime = buildTime,\r\n            totalErrors = report.summary.totalErrors,\r\n            totalWarnings = report.summary.totalWarnings\r\n        };\r\n        \r\n        buildHistory[buildHistoryIndex] = entry;\r\n        buildHistoryIndex = (buildHistoryIndex + 1) % buildHistory.Length;\r\n    }\r\n\r\n    /// <summary>\r\n    /// 更新构建性能数据\r\n    /// </summary>\r\n    /// <param name=\"buildTime\">构建时间</param>\r\n    private void UpdateBuildPerformance(float buildTime)\r\n    {\r\n        if (enablePerformanceMonitoring)\r\n        {\r\n            buildTimeHistory[buildTimeIndex] = buildTime;\r\n            buildTimeIndex = (buildTimeIndex + 1) % 100;\r\n            \r\n            totalBuildTime += buildTime;\r\n            totalBuildCount++;\r\n            \r\n            if (buildTime > maxBuildTime)\r\n            {\r\n                maxBuildTime = buildTime;\r\n            }\r\n        }\r\n    }\r\n\r\n    /// <summary>\r\n    /// 生成构建摘要\r\n    /// </summary>\r\n    /// <param name=\"report\">构建报告</param>\r\n    private void GenerateBuildSummary(BuildReport report)\r\n    {\r\n        totalErrors = report.summary.totalErrors;\r\n        totalWarnings = report.summary.totalWarnings;\r\n        totalSteps = report.steps.Length;\r\n        totalDuration = report.summary.totalTime.TotalSeconds;\r\n        \r\n        buildSummary = $\"构建结果: {report.summary.result}\\n\" +\r\n                      $\"总时间: {totalDuration:F2}秒\\n\" +\r\n                      $\"总步骤: {totalSteps}\\n\" +\r\n                      $\"总错误: {totalErrors}\\n\" +\r\n                      $\"总警告: {totalWarnings}\\n\" +\r\n                      $\"输出路径: {report.summary.outputPath}\";\r\n    }\r\n\r\n    /// <summary>\r\n    /// 清理构建\r\n    /// </summary>\r\n    public void CleanBuild()\r\n    {\r\n        if (isBuilding)\r\n        {\r\n            Debug.LogWarning(\"构建正在进行中，无法清理\");\r\n            return;\r\n        }\r\n        \r\n        try\r\n        {\r\n            if (System.IO.Directory.Exists(buildPath))\r\n            {\r\n                System.IO.Directory.Delete(buildPath, true);\r\n                System.IO.Directory.CreateDirectory(buildPath);\r\n            }\r\n            \r\n            Debug.Log(\"构建目录已清理\");\r\n        }\r\n        catch (System.Exception e)\r\n        {\r\n            Debug.LogError($\"清理构建目录时出错: {e.Message}\");\r\n        }\r\n    }\r\n\r\n    /// <summary>\r\n    /// 生成构建报告\r\n    /// </summary>\r\n    public void GenerateBuildReport()\r\n    {\r\n        Debug.Log(\"=== 构建系统报告 ===\");\r\n        Debug.Log($\"构建系统状态: {buildState}\");\r\n        Debug.Log($\"构建目标: {buildTarget}\");\r\n        Debug.Log($\"构建路径: {buildPath}\");\r\n        Debug.Log($\"构建名称: {buildName}\");\r\n        Debug.Log($\"构建选项: {buildOptions}\");\r\n        Debug.Log($\"最后构建结果: {lastBuildResult}\");\r\n        Debug.Log($\"最后构建路径: {lastBuildPath}\");\r\n        Debug.Log($\"最后构建大小: {FormatFileSize(lastBuildSize)}\");\r\n        Debug.Log($\"总构建次数: {totalBuildCount}\");\r\n        Debug.Log($\"平均构建时间: {averageBuildTime:F2}秒\");\r\n        Debug.Log($\"最大构建时间: {maxBuildTime:F2}秒\");\r\n        Debug.Log($\"总构建时间: {totalBuildTime:F2}秒\");\r\n        \r\n        if (lastBuildReport != null)\r\n        {\r\n            Debug.Log(\"=== 最后构建报告 ===\");\r\n            Debug.Log(buildSummary);\r\n        }\r\n    }\r\n\r\n    /// <summary>\r\n    /// 清除构建历史\r\n    /// </summary>\r\n    public void ClearBuildHistory()\r\n    {\r\n        buildHistory = new BuildHistoryEntry[10];\r\n        buildHistoryIndex = 0;\r\n        Debug.Log(\"构建历史已清除\");\r\n    }\r\n\r\n    // IPreprocessBuildWithReport 接口实现\r\n    public void OnPreprocessBuild(BuildReport report)\r\n    {\r\n        Debug.Log(\"构建预处理开始\");\r\n        \r\n        // 在这里可以添加构建前的准备工作\r\n        // 例如：清理临时文件、验证资源等\r\n    }\r\n\r\n    // IPostprocessBuildWithReport 接口实现\r\n    public void OnPostprocessBuild(BuildReport report)\r\n    {\r\n        Debug.Log(\"构建后处理开始\");\r\n        \r\n        // 在这里可以添加构建后的处理工作\r\n        // 例如：复制额外文件、设置权限等\r\n    }\r\n\r\n    private void OnGUI()\r\n    {\r\n        GUILayout.BeginArea(new Rect(10, 10, 400, 800));\r\n        GUILayout.Label(\"Build 构建系统演示\", UnityEditor.EditorStyles.boldLabel);\r\n        \r\n        GUILayout.Space(10);\r\n        GUILayout.Label(\"构建系统配置:\");\r\n        enableBuildSystem = GUILayout.Toggle(enableBuildSystem, \"启用构建系统\");\r\n        enableBuildLogging = GUILayout.Toggle(enableBuildLogging, \"启用构建日志\");\r\n        enableBuildValidation = GUILayout.Toggle(enableBuildValidation, \"启用构建验证\");\r\n        enableBuildOptimization = GUILayout.Toggle(enableBuildOptimization, \"启用构建优化\");\r\n        enableBuildCompression = GUILayout.Toggle(enableBuildCompression, \"启用构建压缩\");\r\n        \r\n        GUILayout.Space(10);\r\n        GUILayout.Label(\"构建目标:\");\r\n        buildTarget = (BuildTarget)System.Enum.Parse(typeof(BuildTarget), GUILayout.TextField(\"构建目标\", buildTarget.ToString()));\r\n        buildPath = GUILayout.TextField(\"构建路径\", buildPath);\r\n        buildName = GUILayout.TextField(\"构建名称\", buildName);\r\n        \r\n        GUILayout.Space(10);\r\n        GUILayout.Label(\"构建配置:\");\r\n        developmentBuild = GUILayout.Toggle(developmentBuild, \"开发构建\");\r\n        debugBuild = GUILayout.Toggle(debugBuild, \"调试构建\");\r\n        allowDebugging = GUILayout.Toggle(allowDebugging, \"允许调试\");\r\n        compressWithLz4 = GUILayout.Toggle(compressWithLz4, \"使用LZ4压缩\");\r\n        compressWithLz4HC = GUILayout.Toggle(compressWithLz4HC, \"使用LZ4HC压缩\");\r\n        buildAppBundle = GUILayout.Toggle(buildAppBundle, \"构建应用包\");\r\n        \r\n        GUILayout.Space(10);\r\n        GUILayout.Label(\"构建状态:\");\r\n        GUILayout.Label($\"构建状态: {buildState}\");\r\n        GUILayout.Label($\"构建进度: {buildProgress * 100:F1}%\");\r\n        GUILayout.Label($\"构建消息: {buildMessage}\");\r\n        GUILayout.Label($\"最后结果: {lastBuildResult}\");\r\n        GUILayout.Label($\"最后路径: {lastBuildPath}\");\r\n        GUILayout.Label($\"最后大小: {FormatFileSize(lastBuildSize)}\");\r\n        GUILayout.Label($\"总构建次数: {totalBuildCount}\");\r\n        GUILayout.Label($\"平均构建时间: {averageBuildTime:F2}秒\");\r\n        \r\n        GUILayout.Space(10);\r\n        \r\n        if (GUILayout.Button(\"开始构建\"))\r\n        {\r\n            StartBuild();\r\n        }\r\n        \r\n        if (GUILayout.Button(\"清理构建\"))\r\n        {\r\n            CleanBuild();\r\n        }\r\n        \r\n        if (GUILayout.Button(\"生成构建报告\"))\r\n        {\r\n            GenerateBuildReport();\r\n        }\r\n        \r\n        if (GUILayout.Button(\"清除构建历史\"))\r\n        {\r\n            ClearBuildHistory();\r\n        }\r\n        \r\n        GUILayout.Space(10);\r\n        GUILayout.Label(\"构建历史:\");\r\n        for (int i = 0; i < buildHistory.Length; i++)\r\n        {\r\n            if (buildHistory[i] != null && !string.IsNullOrEmpty(buildHistory[i].timestamp))\r\n            {\r\n                GUILayout.Label($\"{buildHistory[i].timestamp} - {buildHistory[i].buildTarget} - {buildHistory[i].buildResult}\");\r\n            }\r\n        }\r\n        \r\n        GUILayout.EndArea();\r\n    }\r\n}\r\n\r\n/// <summary>\r\n/// 构建历史条目\r\n/// </summary>\r\n[System.Serializable]\r\npublic class BuildHistoryEntry\r\n{\r\n    public string timestamp;\r\n    public string buildTarget;\r\n    public string buildResult;\r\n    public string buildPath;\r\n    public long buildSize;\r\n    public float buildTime;\r\n    public int totalErrors;\r\n    public int totalWarnings;\r\n} "
        }
    ]
}