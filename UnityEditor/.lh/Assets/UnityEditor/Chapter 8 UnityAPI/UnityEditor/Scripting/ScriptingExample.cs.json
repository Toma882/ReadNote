{
    "sourceFile": "Assets/UnityEditor/Chapter 8 UnityAPI/UnityEditor/Scripting/ScriptingExample.cs",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 2,
            "patches": [
                {
                    "date": 1750939679423,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1750939726717,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -12,9 +12,9 @@\n /// </summary>\r\n public class ScriptingExample : MonoBehaviour\r\n {\r\n     [Header(\"脚本系统配置\")]\r\n-    [SerializeField] private bool enableScripting = true; \r\n+    [SerializeField] private bool enableScripting = true; /\r\n     [SerializeField] private bool enableCompilation = true;\r\n     [SerializeField] private bool enableCodeGeneration = true;\r\n     [SerializeField] private bool enableScriptValidation = true;\r\n     [SerializeField] private bool enableScriptAnalysis = true;\r\n"
                },
                {
                    "date": 1750939733980,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -20,10 +20,10 @@\n     [SerializeField] private bool enableScriptAnalysis = true; // 是否启用脚本分析\r\n     [SerializeField] private bool enableScriptProfiling = true; // 是否启用脚本分析\r\n     [SerializeField] private bool enableScriptDebugging = true; // 是否启用脚本调试\r\n     [SerializeField] private bool enableScriptOptimization = true; // 是否启用脚本优化\r\n-    [SerializeField] private bool enableScriptHotReload = true;\r\n-    [SerializeField] private bool enableScriptBackup = true;\r\n+    [SerializeField] private bool enableScriptHotReload = true; // 是否启用脚本热重载\r\n+    [SerializeField] private bool enableScriptBackup = true; // 是否启用脚本备份\r\n     \r\n     [Header(\"编译配置\")]\r\n     [SerializeField] private ScriptCompilationOptions compilationOptions = ScriptCompilationOptions.None;\r\n     [SerializeField] private ScriptingBackend scriptingBackend = ScriptingBackend.Mono2x;\r\n"
                }
            ],
            "date": 1750939679423,
            "name": "Commit-0",
            "content": "using UnityEngine;\r\nusing UnityEditor;\r\nusing UnityEditor.Scripting;\r\nusing UnityEditor.Scripting.ScriptCompilation;\r\nusing System.Collections.Generic;\r\nusing System.IO;\r\nusing System.Text;\r\n\r\n/// <summary>\r\n/// UnityEditor.Scripting 命名空间案例演示\r\n/// 展示脚本系统的使用，包括编译、脚本管理、代码生成等\r\n/// </summary>\r\npublic class ScriptingExample : MonoBehaviour\r\n{\r\n    [Header(\"脚本系统配置\")]\r\n    [SerializeField] private bool enableScripting = true;\r\n    [SerializeField] private bool enableCompilation = true;\r\n    [SerializeField] private bool enableCodeGeneration = true;\r\n    [SerializeField] private bool enableScriptValidation = true;\r\n    [SerializeField] private bool enableScriptAnalysis = true;\r\n    [SerializeField] private bool enableScriptProfiling = true;\r\n    [SerializeField] private bool enableScriptDebugging = true;\r\n    [SerializeField] private bool enableScriptOptimization = true;\r\n    [SerializeField] private bool enableScriptHotReload = true;\r\n    [SerializeField] private bool enableScriptBackup = true;\r\n    \r\n    [Header(\"编译配置\")]\r\n    [SerializeField] private ScriptCompilationOptions compilationOptions = ScriptCompilationOptions.None;\r\n    [SerializeField] private ScriptingBackend scriptingBackend = ScriptingBackend.Mono2x;\r\n    [SerializeField] private ApiCompatibilityLevel apiCompatibilityLevel = ApiCompatibilityLevel.NET_4_6;\r\n    [SerializeField] private bool enableUnsafeCode = false;\r\n    [SerializeField] private bool enableDeterministicCompilation = false;\r\n    [SerializeField] private bool enableScriptDebugging = true;\r\n    [SerializeField] private bool enableScriptOptimization = false;\r\n    [SerializeField] private bool enableIncrementalCompilation = true;\r\n    [SerializeField] private bool enableAssemblyValidation = true;\r\n    [SerializeField] private bool enableScriptUpdater = true;\r\n    \r\n    [Header(\"脚本状态\")]\r\n    [SerializeField] private ScriptingStatus scriptingStatus = ScriptingStatus.Idle;\r\n    [SerializeField] private bool isCompiling = false;\r\n    [SerializeField] private bool isGeneratingCode = false;\r\n    [SerializeField] private bool isAnalyzingScripts = false;\r\n    [SerializeField] private float compilationProgress = 0f;\r\n    [SerializeField] private string compilationMessage = \"\";\r\n    [SerializeField] private int totalScripts = 0;\r\n    [SerializeField] private int compiledScripts = 0;\r\n    [SerializeField] private int failedScripts = 0;\r\n    [SerializeField] private int warningsCount = 0;\r\n    [SerializeField] private int errorsCount = 0;\r\n    \r\n    [Header(\"脚本信息\")]\r\n    [SerializeField] private ScriptInfo[] scriptInfos = new ScriptInfo[0];\r\n    [SerializeField] private ScriptInfo[] compiledScriptInfos = new ScriptInfo[0];\r\n    [SerializeField] private ScriptInfo[] failedScriptInfos = new ScriptInfo[0];\r\n    [SerializeField] private string[] scriptPaths = new string[0];\r\n    [SerializeField] private string[] scriptNames = new string[0];\r\n    [SerializeField] private ScriptType[] scriptTypes = new ScriptType[0];\r\n    [SerializeField] private bool[] scriptEnabled = new bool[0];\r\n    \r\n    [Header(\"编译统计\")]\r\n    [SerializeField] private CompilationStatistics compilationStats = new CompilationStatistics();\r\n    [SerializeField] private Dictionary<string, float> scriptCompileTimes = new Dictionary<string, float>();\r\n    [SerializeField] private Dictionary<string, int> scriptErrorCounts = new Dictionary<string, int>();\r\n    [SerializeField] private Dictionary<string, int> scriptWarningCounts = new Dictionary<string, int>();\r\n    [SerializeField] private List<CompilationError> compilationErrors = new List<CompilationError>();\r\n    [SerializeField] private List<CompilationWarning> compilationWarnings = new List<CompilationWarning>();\r\n    \r\n    [Header(\"代码生成\")]\r\n    [SerializeField] private bool enableAutoCodeGeneration = true;\r\n    [SerializeField] private bool enableTemplateCodeGeneration = true;\r\n    [SerializeField] private bool enableScriptableObjectGeneration = true;\r\n    [SerializeField] private bool enableEditorScriptGeneration = true;\r\n    [SerializeField] private bool enableRuntimeScriptGeneration = true;\r\n    [SerializeField] private string codeGenerationPath = \"GeneratedScripts/\";\r\n    [SerializeField] private string templatePath = \"ScriptTemplates/\";\r\n    [SerializeField] private string[] codeTemplates = new string[0];\r\n    [SerializeField] private string[] generatedScripts = new string[0];\r\n    \r\n    [Header(\"脚本分析\")]\r\n    [SerializeField] private bool enableCodeAnalysis = true;\r\n    [SerializeField] private bool enablePerformanceAnalysis = true;\r\n    [SerializeField] private bool enableMemoryAnalysis = true;\r\n    [SerializeField] private bool enableSecurityAnalysis = true;\r\n    [SerializeField] private bool enableStyleAnalysis = true;\r\n    [SerializeField] private List<CodeAnalysisResult> analysisResults = new List<CodeAnalysisResult>();\r\n    [SerializeField] private List<PerformanceIssue> performanceIssues = new List<PerformanceIssue>();\r\n    [SerializeField] private List<MemoryIssue> memoryIssues = new List<MemoryIssue>();\r\n    [SerializeField] private List<SecurityIssue> securityIssues = new List<SecurityIssue>();\r\n    [SerializeField] private List<StyleIssue> styleIssues = new List<StyleIssue>();\r\n    \r\n    [Header(\"脚本优化\")]\r\n    [SerializeField] private bool enableCodeOptimization = true;\r\n    [SerializeField] private bool enableDeadCodeElimination = true;\r\n    [SerializeField] private bool enableConstantFolding = true;\r\n    [SerializeField] private bool enableInlining = true;\r\n    [SerializeField] private bool enableLoopOptimization = true;\r\n    [SerializeField] private bool enableMemoryOptimization = true;\r\n    [SerializeField] private List<OptimizationResult> optimizationResults = new List<OptimizationResult>();\r\n    [SerializeField] private float optimizationScore = 0f;\r\n    [SerializeField] private int optimizationSuggestions = 0;\r\n    \r\n    [Header(\"脚本调试\")]\r\n    [SerializeField] private bool enableDebugging = true;\r\n    [SerializeField] private bool enableBreakpoints = true;\r\n    [SerializeField] private bool enableStepThrough = true;\r\n    [SerializeField] private bool enableVariableInspection = true;\r\n    [SerializeField] private bool enableCallStack = true;\r\n    [SerializeField] private List<DebugBreakpoint> breakpoints = new List<DebugBreakpoint>();\r\n    [SerializeField] private List<DebugVariable> debugVariables = new List<DebugVariable>();\r\n    [SerializeField] private List<DebugCallStack> callStacks = new List<DebugCallStack>();\r\n    \r\n    private bool isInitialized = false;\r\n    private float compilationStartTime = 0f;\r\n    private StringBuilder reportBuilder = new StringBuilder();\r\n    private List<string> pendingScripts = new List<string>();\r\n    private List<string> compiledScriptsList = new List<string>();\r\n    private List<string> failedScriptsList = new List<string>();\r\n\r\n    private void Start()\r\n    {\r\n        InitializeScripting();\r\n    }\r\n\r\n    private void InitializeScripting()\r\n    {\r\n        if (!enableScripting) return;\r\n        \r\n        InitializeScriptState();\r\n        InitializeCompilationSettings();\r\n        InitializeCodeGeneration();\r\n        InitializeScriptAnalysis();\r\n        RegisterScriptingCallbacks();\r\n        \r\n        isInitialized = true;\r\n        scriptingStatus = ScriptingStatus.Idle;\r\n        Debug.Log(\"脚本系统初始化完成\");\r\n    }\r\n\r\n    private void InitializeScriptState()\r\n    {\r\n        scriptingStatus = ScriptingStatus.Idle;\r\n        isCompiling = false;\r\n        isGeneratingCode = false;\r\n        isAnalyzingScripts = false;\r\n        compilationProgress = 0f;\r\n        compilationMessage = \"就绪\";\r\n        totalScripts = 0;\r\n        compiledScripts = 0;\r\n        failedScripts = 0;\r\n        warningsCount = 0;\r\n        errorsCount = 0;\r\n        \r\n        Debug.Log(\"脚本状态已初始化\");\r\n    }\r\n\r\n    private void InitializeCompilationSettings()\r\n    {\r\n        compilationOptions = ScriptCompilationOptions.None;\r\n        scriptingBackend = ScriptingBackend.Mono2x;\r\n        apiCompatibilityLevel = ApiCompatibilityLevel.NET_4_6;\r\n        enableUnsafeCode = false;\r\n        enableDeterministicCompilation = false;\r\n        enableScriptDebugging = true;\r\n        enableScriptOptimization = false;\r\n        enableIncrementalCompilation = true;\r\n        enableAssemblyValidation = true;\r\n        enableScriptUpdater = true;\r\n        \r\n        Debug.Log(\"编译设置已初始化\");\r\n    }\r\n\r\n    private void InitializeCodeGeneration()\r\n    {\r\n        if (enableCodeGeneration)\r\n        {\r\n            codeGenerationPath = \"GeneratedScripts/\";\r\n            templatePath = \"ScriptTemplates/\";\r\n            codeTemplates = new string[0];\r\n            generatedScripts = new string[0];\r\n            \r\n            // 创建目录\r\n            if (!Directory.Exists(codeGenerationPath))\r\n            {\r\n                Directory.CreateDirectory(codeGenerationPath);\r\n            }\r\n            \r\n            if (!Directory.Exists(templatePath))\r\n            {\r\n                Directory.CreateDirectory(templatePath);\r\n            }\r\n            \r\n            Debug.Log(\"代码生成已初始化\");\r\n        }\r\n    }\r\n\r\n    private void InitializeScriptAnalysis()\r\n    {\r\n        if (enableScriptAnalysis)\r\n        {\r\n            analysisResults.Clear();\r\n            performanceIssues.Clear();\r\n            memoryIssues.Clear();\r\n            securityIssues.Clear();\r\n            styleIssues.Clear();\r\n            \r\n            Debug.Log(\"脚本分析已初始化\");\r\n        }\r\n    }\r\n\r\n    private void RegisterScriptingCallbacks()\r\n    {\r\n        // 注册编译回调\r\n        if (enableCompilation)\r\n        {\r\n            CompilationPipeline.compilationStarted += OnCompilationStarted;\r\n            CompilationPipeline.compilationFinished += OnCompilationFinished;\r\n        }\r\n        \r\n        Debug.Log(\"脚本回调已注册\");\r\n    }\r\n\r\n    private void Update()\r\n    {\r\n        if (!isInitialized) return;\r\n        \r\n        UpdateScriptingStatus();\r\n        UpdateCompilationProgress();\r\n        UpdateScriptInfo();\r\n        \r\n        if (enableAutoCodeGeneration)\r\n        {\r\n            CheckCodeGeneration();\r\n        }\r\n        \r\n        if (enableScriptAnalysis)\r\n        {\r\n            CheckScriptAnalysis();\r\n        }\r\n    }\r\n\r\n    private void UpdateScriptingStatus()\r\n    {\r\n        if (isCompiling)\r\n        {\r\n            scriptingStatus = ScriptingStatus.Compiling;\r\n        }\r\n        else if (isGeneratingCode)\r\n        {\r\n            scriptingStatus = ScriptingStatus.GeneratingCode;\r\n        }\r\n        else if (isAnalyzingScripts)\r\n        {\r\n            scriptingStatus = ScriptingStatus.Analyzing;\r\n        }\r\n        else\r\n        {\r\n            scriptingStatus = ScriptingStatus.Idle;\r\n        }\r\n    }\r\n\r\n    private void UpdateCompilationProgress()\r\n    {\r\n        if (isCompiling)\r\n        {\r\n            // 模拟编译进度\r\n            compilationProgress = Mathf.Clamp01((Time.time - compilationStartTime) / 5f);\r\n        }\r\n        else\r\n        {\r\n            compilationProgress = 0f;\r\n        }\r\n    }\r\n\r\n    private void UpdateScriptInfo()\r\n    {\r\n        // 更新脚本信息\r\n        UpdateScriptInfos();\r\n        \r\n        // 更新编译统计\r\n        UpdateCompilationStatistics();\r\n    }\r\n\r\n    private void UpdateScriptInfos()\r\n    {\r\n        var scripts = FindAllScripts();\r\n        scriptInfos = new ScriptInfo[scripts.Length];\r\n        scriptPaths = new string[scripts.Length];\r\n        scriptNames = new string[scripts.Length];\r\n        scriptTypes = new ScriptType[scripts.Length];\r\n        scriptEnabled = new bool[scripts.Length];\r\n        \r\n        for (int i = 0; i < scripts.Length; i++)\r\n        {\r\n            var scriptPath = scripts[i];\r\n            var scriptName = Path.GetFileNameWithoutExtension(scriptPath);\r\n            var scriptType = GetScriptType(scriptPath);\r\n            \r\n            scriptInfos[i] = new ScriptInfo\r\n            {\r\n                path = scriptPath,\r\n                name = scriptName,\r\n                type = scriptType,\r\n                enabled = true,\r\n                lastModified = File.GetLastWriteTime(scriptPath),\r\n                size = new FileInfo(scriptPath).Length\r\n            };\r\n            \r\n            scriptPaths[i] = scriptPath;\r\n            scriptNames[i] = scriptName;\r\n            scriptTypes[i] = scriptType;\r\n            scriptEnabled[i] = true;\r\n        }\r\n        \r\n        totalScripts = scripts.Length;\r\n        \r\n        // 更新已编译脚本信息\r\n        compiledScriptInfos = new ScriptInfo[compiledScriptsList.Count];\r\n        for (int i = 0; i < compiledScriptsList.Count; i++)\r\n        {\r\n            var scriptPath = compiledScriptsList[i];\r\n            var scriptName = Path.GetFileNameWithoutExtension(scriptPath);\r\n            \r\n            compiledScriptInfos[i] = new ScriptInfo\r\n            {\r\n                path = scriptPath,\r\n                name = scriptName,\r\n                type = GetScriptType(scriptPath),\r\n                enabled = true,\r\n                lastModified = File.GetLastWriteTime(scriptPath),\r\n                size = new FileInfo(scriptPath).Length\r\n            };\r\n        }\r\n        \r\n        compiledScripts = compiledScriptsList.Count;\r\n        \r\n        // 更新失败脚本信息\r\n        failedScriptInfos = new ScriptInfo[failedScriptsList.Count];\r\n        for (int i = 0; i < failedScriptsList.Count; i++)\r\n        {\r\n            var scriptPath = failedScriptsList[i];\r\n            var scriptName = Path.GetFileNameWithoutExtension(scriptPath);\r\n            \r\n            failedScriptInfos[i] = new ScriptInfo\r\n            {\r\n                path = scriptPath,\r\n                name = scriptName,\r\n                type = GetScriptType(scriptPath),\r\n                enabled = false,\r\n                lastModified = File.GetLastWriteTime(scriptPath),\r\n                size = new FileInfo(scriptPath).Length\r\n            };\r\n        }\r\n        \r\n        failedScripts = failedScriptsList.Count;\r\n    }\r\n\r\n    private string[] FindAllScripts()\r\n    {\r\n        var scripts = new List<string>();\r\n        var searchPatterns = new[] { \"*.cs\", \"*.js\", \"*.boo\" };\r\n        \r\n        foreach (var pattern in searchPatterns)\r\n        {\r\n            var files = Directory.GetFiles(Application.dataPath, pattern, SearchOption.AllDirectories);\r\n            scripts.AddRange(files);\r\n        }\r\n        \r\n        return scripts.ToArray();\r\n    }\r\n\r\n    private ScriptType GetScriptType(string scriptPath)\r\n    {\r\n        var extension = Path.GetExtension(scriptPath).ToLower();\r\n        \r\n        switch (extension)\r\n        {\r\n            case \".cs\":\r\n                return ScriptType.CSharp;\r\n            case \".js\":\r\n                return ScriptType.JavaScript;\r\n            case \".boo\":\r\n                return ScriptType.Boo;\r\n            default:\r\n                return ScriptType.Unknown;\r\n        }\r\n    }\r\n\r\n    private void UpdateCompilationStatistics()\r\n    {\r\n        compilationStats.totalScripts = totalScripts;\r\n        compilationStats.compiledScripts = compiledScripts;\r\n        compilationStats.failedScripts = failedScripts;\r\n        compilationStats.warningsCount = warningsCount;\r\n        compilationStats.errorsCount = errorsCount;\r\n        \r\n        if (totalScripts > 0)\r\n        {\r\n            compilationStats.successRate = (float)compiledScripts / totalScripts * 100f;\r\n        }\r\n        else\r\n        {\r\n            compilationStats.successRate = 0f;\r\n        }\r\n    }\r\n\r\n    private void CheckCodeGeneration()\r\n    {\r\n        if (enableAutoCodeGeneration && !isGeneratingCode)\r\n        {\r\n            // 检查是否需要生成代码\r\n            var scriptsToGenerate = FindScriptsNeedingGeneration();\r\n            if (scriptsToGenerate.Length > 0)\r\n            {\r\n                GenerateCodeForScripts(scriptsToGenerate);\r\n            }\r\n        }\r\n    }\r\n\r\n    private string[] FindScriptsNeedingGeneration()\r\n    {\r\n        var scripts = new List<string>();\r\n        \r\n        // 查找需要生成代码的脚本\r\n        foreach (var scriptPath in scriptPaths)\r\n        {\r\n            if (NeedsCodeGeneration(scriptPath))\r\n            {\r\n                scripts.Add(scriptPath);\r\n            }\r\n        }\r\n        \r\n        return scripts.ToArray();\r\n    }\r\n\r\n    private bool NeedsCodeGeneration(string scriptPath)\r\n    {\r\n        // 检查脚本是否需要代码生成\r\n        var content = File.ReadAllText(scriptPath);\r\n        \r\n        // 检查是否包含代码生成标记\r\n        return content.Contains(\"[GenerateCode]\") || \r\n               content.Contains(\"// GENERATE_CODE\") ||\r\n               content.Contains(\"/* GENERATE_CODE */\");\r\n    }\r\n\r\n    private void CheckScriptAnalysis()\r\n    {\r\n        if (enableScriptAnalysis && !isAnalyzingScripts)\r\n        {\r\n            // 检查是否需要分析脚本\r\n            var scriptsToAnalyze = FindScriptsNeedingAnalysis();\r\n            if (scriptsToAnalyze.Length > 0)\r\n            {\r\n                AnalyzeScripts(scriptsToAnalyze);\r\n            }\r\n        }\r\n    }\r\n\r\n    private string[] FindScriptsNeedingAnalysis()\r\n    {\r\n        var scripts = new List<string>();\r\n        \r\n        // 查找需要分析的脚本\r\n        foreach (var scriptPath in scriptPaths)\r\n        {\r\n            if (NeedsAnalysis(scriptPath))\r\n            {\r\n                scripts.Add(scriptPath);\r\n            }\r\n        }\r\n        \r\n        return scripts.ToArray();\r\n    }\r\n\r\n    private bool NeedsAnalysis(string scriptPath)\r\n    {\r\n        // 检查脚本是否需要分析\r\n        var lastModified = File.GetLastWriteTime(scriptPath);\r\n        var lastAnalyzed = GetLastAnalyzedTime(scriptPath);\r\n        \r\n        return lastModified > lastAnalyzed;\r\n    }\r\n\r\n    private System.DateTime GetLastAnalyzedTime(string scriptPath)\r\n    {\r\n        // 获取脚本最后分析时间（这里简化处理）\r\n        return System.DateTime.MinValue;\r\n    }\r\n\r\n    private void OnCompilationStarted(object obj)\r\n    {\r\n        isCompiling = true;\r\n        compilationStartTime = Time.time;\r\n        compilationProgress = 0f;\r\n        compilationMessage = \"编译已开始\";\r\n        \r\n        Debug.Log(\"脚本编译已开始\");\r\n    }\r\n\r\n    private void OnCompilationFinished(object obj)\r\n    {\r\n        isCompiling = false;\r\n        compilationProgress = 1f;\r\n        compilationMessage = \"编译已完成\";\r\n        \r\n        // 更新编译结果\r\n        UpdateCompilationResults();\r\n        \r\n        Debug.Log(\"脚本编译已完成\");\r\n    }\r\n\r\n    private void UpdateCompilationResults()\r\n    {\r\n        // 更新编译结果\r\n        var results = CompilationPipeline.GetCompilationDefines(compilationOptions);\r\n        \r\n        // 检查编译错误和警告\r\n        CheckCompilationErrors();\r\n        CheckCompilationWarnings();\r\n        \r\n        // 更新脚本列表\r\n        UpdateScriptLists();\r\n    }\r\n\r\n    private void CheckCompilationErrors()\r\n    {\r\n        compilationErrors.Clear();\r\n        errorsCount = 0;\r\n        \r\n        // 检查编译错误（这里简化处理）\r\n        var errorLogs = GetCompilationErrorLogs();\r\n        foreach (var error in errorLogs)\r\n        {\r\n            compilationErrors.Add(new CompilationError\r\n            {\r\n                message = error,\r\n                severity = ErrorSeverity.Error,\r\n                scriptPath = \"\",\r\n                lineNumber = 0\r\n            });\r\n            errorsCount++;\r\n        }\r\n    }\r\n\r\n    private void CheckCompilationWarnings()\r\n    {\r\n        compilationWarnings.Clear();\r\n        warningsCount = 0;\r\n        \r\n        // 检查编译警告（这里简化处理）\r\n        var warningLogs = GetCompilationWarningLogs();\r\n        foreach (var warning in warningLogs)\r\n        {\r\n            compilationWarnings.Add(new CompilationWarning\r\n            {\r\n                message = warning,\r\n                severity = WarningSeverity.Warning,\r\n                scriptPath = \"\",\r\n                lineNumber = 0\r\n            });\r\n            warningsCount++;\r\n        }\r\n    }\r\n\r\n    private string[] GetCompilationErrorLogs()\r\n    {\r\n        // 获取编译错误日志（这里简化处理）\r\n        return new string[0];\r\n    }\r\n\r\n    private string[] GetCompilationWarningLogs()\r\n    {\r\n        // 获取编译警告日志（这里简化处理）\r\n        return new string[0];\r\n    }\r\n\r\n    private void UpdateScriptLists()\r\n    {\r\n        compiledScriptsList.Clear();\r\n        failedScriptsList.Clear();\r\n        \r\n        foreach (var scriptPath in scriptPaths)\r\n        {\r\n            if (IsScriptCompiled(scriptPath))\r\n            {\r\n                compiledScriptsList.Add(scriptPath);\r\n            }\r\n            else\r\n            {\r\n                failedScriptsList.Add(scriptPath);\r\n            }\r\n        }\r\n    }\r\n\r\n    private bool IsScriptCompiled(string scriptPath)\r\n    {\r\n        // 检查脚本是否编译成功（这里简化处理）\r\n        return !scriptPath.Contains(\"Error\") && !scriptPath.Contains(\"Failed\");\r\n    }\r\n\r\n    public void CompileScripts()\r\n    {\r\n        if (isCompiling)\r\n        {\r\n            Debug.LogWarning(\"脚本正在编译中，请等待完成\");\r\n            return;\r\n        }\r\n        \r\n        isCompiling = true;\r\n        compilationStartTime = Time.time;\r\n        compilationProgress = 0f;\r\n        compilationMessage = \"正在编译脚本...\";\r\n        \r\n        Debug.Log(\"开始编译脚本\");\r\n    }\r\n\r\n    public void GenerateCodeForScripts(string[] scriptPaths)\r\n    {\r\n        if (isGeneratingCode)\r\n        {\r\n            Debug.LogWarning(\"代码正在生成中，请等待完成\");\r\n            return;\r\n        }\r\n        \r\n        isGeneratingCode = true;\r\n        compilationMessage = \"正在生成代码...\";\r\n        \r\n        try\r\n        {\r\n            foreach (var scriptPath in scriptPaths)\r\n            {\r\n                GenerateCodeForScript(scriptPath);\r\n            }\r\n            \r\n            Debug.Log($\"代码生成完成，共生成 {scriptPaths.Length} 个脚本\");\r\n        }\r\n        catch (System.Exception e)\r\n        {\r\n            Debug.LogError($\"代码生成失败: {e.Message}\");\r\n        }\r\n        finally\r\n        {\r\n            isGeneratingCode = false;\r\n        }\r\n    }\r\n\r\n    private void GenerateCodeForScript(string scriptPath)\r\n    {\r\n        var scriptName = Path.GetFileNameWithoutExtension(scriptPath);\r\n        var generatedPath = Path.Combine(codeGenerationPath, $\"{scriptName}_Generated.cs\");\r\n        \r\n        var template = GetCodeTemplate(scriptName);\r\n        var generatedCode = ProcessCodeTemplate(template, scriptName);\r\n        \r\n        File.WriteAllText(generatedPath, generatedCode);\r\n        \r\n        if (!generatedScripts.Contains(generatedPath))\r\n        {\r\n            var newGeneratedScripts = new string[generatedScripts.Length + 1];\r\n            generatedScripts.CopyTo(newGeneratedScripts, 0);\r\n            newGeneratedScripts[generatedScripts.Length] = generatedPath;\r\n            generatedScripts = newGeneratedScripts;\r\n        }\r\n        \r\n        Debug.Log($\"代码已生成: {generatedPath}\");\r\n    }\r\n\r\n    private string GetCodeTemplate(string scriptName)\r\n    {\r\n        return $@\"using UnityEngine;\r\n\r\n/// <summary>\r\n/// 自动生成的脚本: {scriptName}\r\n/// </summary>\r\npublic class {scriptName}_Generated : MonoBehaviour\r\n{{\r\n    [Header(\"\"自动生成配置\"\")]\r\n    [SerializeField] private bool enableAutoGeneration = true;\r\n    [SerializeField] private string generatedBy = \"\"ScriptingExample\"\";\r\n    [SerializeField] private System.DateTime generatedAt = System.DateTime.Now;\r\n    \r\n    private void Start()\r\n    {{\r\n        Debug.Log($\"\"自动生成的脚本已启动: {{generatedBy}} at {{generatedAt}}\"\");\r\n    }}\r\n    \r\n    private void Update()\r\n    {{\r\n        if (enableAutoGeneration)\r\n        {{\r\n            // 自动生成的更新逻辑\r\n        }}\r\n    }}\r\n}}\";\r\n    }\r\n\r\n    private string ProcessCodeTemplate(string template, string scriptName)\r\n    {\r\n        return template.Replace(\"{scriptName}\", scriptName)\r\n                      .Replace(\"{generatedBy}\", \"ScriptingExample\")\r\n                      .Replace(\"{generatedAt}\", System.DateTime.Now.ToString());\r\n    }\r\n\r\n    public void AnalyzeScripts(string[] scriptPaths)\r\n    {\r\n        if (isAnalyzingScripts)\r\n        {\r\n            Debug.LogWarning(\"脚本正在分析中，请等待完成\");\r\n            return;\r\n        }\r\n        \r\n        isAnalyzingScripts = true;\r\n        compilationMessage = \"正在分析脚本...\";\r\n        \r\n        try\r\n        {\r\n            foreach (var scriptPath in scriptPaths)\r\n            {\r\n                AnalyzeScript(scriptPath);\r\n            }\r\n            \r\n            Debug.Log($\"脚本分析完成，共分析 {scriptPaths.Length} 个脚本\");\r\n        }\r\n        catch (System.Exception e)\r\n        {\r\n            Debug.LogError($\"脚本分析失败: {e.Message}\");\r\n        }\r\n        finally\r\n        {\r\n            isAnalyzingScripts = false;\r\n        }\r\n    }\r\n\r\n    private void AnalyzeScript(string scriptPath)\r\n    {\r\n        var content = File.ReadAllText(scriptPath);\r\n        var scriptName = Path.GetFileNameWithoutExtension(scriptPath);\r\n        \r\n        var result = new CodeAnalysisResult\r\n        {\r\n            scriptPath = scriptPath,\r\n            scriptName = scriptName,\r\n            analysisTime = System.DateTime.Now,\r\n            lineCount = content.Split('\\n').Length,\r\n            characterCount = content.Length,\r\n            complexity = CalculateComplexity(content),\r\n            performanceScore = CalculatePerformanceScore(content),\r\n            memoryScore = CalculateMemoryScore(content),\r\n            securityScore = CalculateSecurityScore(content),\r\n            styleScore = CalculateStyleScore(content)\r\n        };\r\n        \r\n        analysisResults.Add(result);\r\n        \r\n        // 检查性能问题\r\n        CheckPerformanceIssues(scriptPath, content);\r\n        \r\n        // 检查内存问题\r\n        CheckMemoryIssues(scriptPath, content);\r\n        \r\n        // 检查安全问题\r\n        CheckSecurityIssues(scriptPath, content);\r\n        \r\n        // 检查样式问题\r\n        CheckStyleIssues(scriptPath, content);\r\n        \r\n        Debug.Log($\"脚本分析完成: {scriptName}\");\r\n    }\r\n\r\n    private int CalculateComplexity(string content)\r\n    {\r\n        // 计算代码复杂度（简化版本）\r\n        int complexity = 0;\r\n        complexity += content.Split(\"if\").Length - 1;\r\n        complexity += content.Split(\"for\").Length - 1;\r\n        complexity += content.Split(\"while\").Length - 1;\r\n        complexity += content.Split(\"foreach\").Length - 1;\r\n        complexity += content.Split(\"switch\").Length - 1;\r\n        return complexity;\r\n    }\r\n\r\n    private float CalculatePerformanceScore(string content)\r\n    {\r\n        // 计算性能评分（简化版本）\r\n        float score = 100f;\r\n        \r\n        if (content.Contains(\"FindObjectOfType\"))\r\n            score -= 10f;\r\n        if (content.Contains(\"GetComponent\"))\r\n            score -= 5f;\r\n        if (content.Contains(\"Instantiate\"))\r\n            score -= 15f;\r\n        if (content.Contains(\"Destroy\"))\r\n            score -= 10f;\r\n        \r\n        return Mathf.Max(0f, score);\r\n    }\r\n\r\n    private float CalculateMemoryScore(string content)\r\n    {\r\n        // 计算内存评分（简化版本）\r\n        float score = 100f;\r\n        \r\n        if (content.Contains(\"new \"))\r\n            score -= 5f;\r\n        if (content.Contains(\"GC.Collect\"))\r\n            score -= 20f;\r\n        if (content.Contains(\"string +\"))\r\n            score -= 10f;\r\n        \r\n        return Mathf.Max(0f, score);\r\n    }\r\n\r\n    private float CalculateSecurityScore(string content)\r\n    {\r\n        // 计算安全评分（简化版本）\r\n        float score = 100f;\r\n        \r\n        if (content.Contains(\"eval\"))\r\n            score -= 50f;\r\n        if (content.Contains(\"System.IO.File\"))\r\n            score -= 10f;\r\n        if (content.Contains(\"System.Net\"))\r\n            score -= 15f;\r\n        \r\n        return Mathf.Max(0f, score);\r\n    }\r\n\r\n    private float CalculateStyleScore(string content)\r\n    {\r\n        // 计算样式评分（简化版本）\r\n        float score = 100f;\r\n        \r\n        if (content.Contains(\"    \"))\r\n            score -= 5f;\r\n        if (content.Contains(\"// TODO\"))\r\n            score -= 10f;\r\n        if (content.Contains(\"// FIXME\"))\r\n            score -= 15f;\r\n        \r\n        return Mathf.Max(0f, score);\r\n    }\r\n\r\n    private void CheckPerformanceIssues(string scriptPath, string content)\r\n    {\r\n        var issues = new List<PerformanceIssue>();\r\n        \r\n        if (content.Contains(\"FindObjectOfType\"))\r\n        {\r\n            issues.Add(new PerformanceIssue\r\n            {\r\n                type = PerformanceIssueType.FindObjectOfType,\r\n                severity = PerformanceIssueSeverity.Medium,\r\n                message = \"使用了FindObjectOfType，建议缓存引用\",\r\n                lineNumber = FindLineNumber(content, \"FindObjectOfType\")\r\n            });\r\n        }\r\n        \r\n        if (content.Contains(\"GetComponent\"))\r\n        {\r\n            issues.Add(new PerformanceIssue\r\n            {\r\n                type = PerformanceIssueType.GetComponent,\r\n                severity = PerformanceIssueSeverity.Low,\r\n                message = \"频繁使用GetComponent，建议缓存引用\",\r\n                lineNumber = FindLineNumber(content, \"GetComponent\")\r\n            });\r\n        }\r\n        \r\n        performanceIssues.AddRange(issues);\r\n    }\r\n\r\n    private void CheckMemoryIssues(string scriptPath, string content)\r\n    {\r\n        var issues = new List<MemoryIssue>();\r\n        \r\n        if (content.Contains(\"GC.Collect\"))\r\n        {\r\n            issues.Add(new MemoryIssue\r\n            {\r\n                type = MemoryIssueType.GCCollect,\r\n                severity = MemoryIssueSeverity.High,\r\n                message = \"手动调用GC.Collect，可能导致性能问题\",\r\n                lineNumber = FindLineNumber(content, \"GC.Collect\")\r\n            });\r\n        }\r\n        \r\n        memoryIssues.AddRange(issues);\r\n    }\r\n\r\n    private void CheckSecurityIssues(string scriptPath, string content)\r\n    {\r\n        var issues = new List<SecurityIssue>();\r\n        \r\n        if (content.Contains(\"eval\"))\r\n        {\r\n            issues.Add(new SecurityIssue\r\n            {\r\n                type = SecurityIssueType.Eval,\r\n                severity = SecurityIssueSeverity.Critical,\r\n                message = \"使用了eval，存在安全风险\",\r\n                lineNumber = FindLineNumber(content, \"eval\")\r\n            });\r\n        }\r\n        \r\n        securityIssues.AddRange(issues);\r\n    }\r\n\r\n    private void CheckStyleIssues(string scriptPath, string content)\r\n    {\r\n        var issues = new List<StyleIssue>();\r\n        \r\n        if (content.Contains(\"// TODO\"))\r\n        {\r\n            issues.Add(new StyleIssue\r\n            {\r\n                type = StyleIssueType.TODO,\r\n                severity = StyleIssueSeverity.Low,\r\n                message = \"存在TODO注释，需要完成\",\r\n                lineNumber = FindLineNumber(content, \"// TODO\")\r\n            });\r\n        }\r\n        \r\n        styleIssues.AddRange(issues);\r\n    }\r\n\r\n    private int FindLineNumber(string content, string searchTerm)\r\n    {\r\n        var lines = content.Split('\\n');\r\n        for (int i = 0; i < lines.Length; i++)\r\n        {\r\n            if (lines[i].Contains(searchTerm))\r\n            {\r\n                return i + 1;\r\n            }\r\n        }\r\n        return 0;\r\n    }\r\n\r\n    public void GenerateScriptingReport()\r\n    {\r\n        reportBuilder.Clear();\r\n        reportBuilder.AppendLine(\"=== 脚本系统报告 ===\");\r\n        reportBuilder.AppendLine($\"生成时间: {System.DateTime.Now}\");\r\n        reportBuilder.AppendLine($\"脚本系统状态: {scriptingStatus}\");\r\n        reportBuilder.AppendLine($\"总脚本数: {totalScripts}\");\r\n        reportBuilder.AppendLine($\"已编译脚本数: {compiledScripts}\");\r\n        reportBuilder.AppendLine($\"失败脚本数: {failedScripts}\");\r\n        reportBuilder.AppendLine($\"警告数: {warningsCount}\");\r\n        reportBuilder.AppendLine($\"错误数: {errorsCount}\");\r\n        reportBuilder.AppendLine($\"编译成功率: {compilationStats.successRate:F1}%\");\r\n        reportBuilder.AppendLine();\r\n        \r\n        reportBuilder.AppendLine(\"=== 编译统计 ===\");\r\n        reportBuilder.AppendLine($\"总编译时间: {compilationStats.totalCompileTime:F3}秒\");\r\n        reportBuilder.AppendLine($\"平均编译时间: {compilationStats.averageCompileTime:F3}秒\");\r\n        reportBuilder.AppendLine($\"最大编译时间: {compilationStats.maxCompileTime:F3}秒\");\r\n        reportBuilder.AppendLine($\"编译次数: {compilationStats.compileCount}\");\r\n        reportBuilder.AppendLine();\r\n        \r\n        reportBuilder.AppendLine(\"=== 代码生成 ===\");\r\n        reportBuilder.AppendLine($\"已生成脚本数: {generatedScripts.Length}\");\r\n        foreach (var script in generatedScripts)\r\n        {\r\n            reportBuilder.AppendLine($\"- {Path.GetFileName(script)}\");\r\n        }\r\n        reportBuilder.AppendLine();\r\n        \r\n        reportBuilder.AppendLine(\"=== 脚本分析 ===\");\r\n        reportBuilder.AppendLine($\"已分析脚本数: {analysisResults.Count}\");\r\n        if (analysisResults.Count > 0)\r\n        {\r\n            var avgComplexity = 0f;\r\n            var avgPerformance = 0f;\r\n            var avgMemory = 0f;\r\n            var avgSecurity = 0f;\r\n            var avgStyle = 0f;\r\n            \r\n            foreach (var result in analysisResults)\r\n            {\r\n                avgComplexity += result.complexity;\r\n                avgPerformance += result.performanceScore;\r\n                avgMemory += result.memoryScore;\r\n                avgSecurity += result.securityScore;\r\n                avgStyle += result.styleScore;\r\n            }\r\n            \r\n            avgComplexity /= analysisResults.Count;\r\n            avgPerformance /= analysisResults.Count;\r\n            avgMemory /= analysisResults.Count;\r\n            avgSecurity /= analysisResults.Count;\r\n            avgStyle /= analysisResults.Count;\r\n            \r\n            reportBuilder.AppendLine($\"平均复杂度: {avgComplexity:F1}\");\r\n            reportBuilder.AppendLine($\"平均性能评分: {avgPerformance:F1}\");\r\n            reportBuilder.AppendLine($\"平均内存评分: {avgMemory:F1}\");\r\n            reportBuilder.AppendLine($\"平均安全评分: {avgSecurity:F1}\");\r\n            reportBuilder.AppendLine($\"平均样式评分: {avgStyle:F1}\");\r\n        }\r\n        reportBuilder.AppendLine();\r\n        \r\n        reportBuilder.AppendLine(\"=== 性能问题 ===\");\r\n        foreach (var issue in performanceIssues)\r\n        {\r\n            reportBuilder.AppendLine($\"[{issue.severity}] {issue.message} (行: {issue.lineNumber})\");\r\n        }\r\n        reportBuilder.AppendLine();\r\n        \r\n        reportBuilder.AppendLine(\"=== 内存问题 ===\");\r\n        foreach (var issue in memoryIssues)\r\n        {\r\n            reportBuilder.AppendLine($\"[{issue.severity}] {issue.message} (行: {issue.lineNumber})\");\r\n        }\r\n        reportBuilder.AppendLine();\r\n        \r\n        reportBuilder.AppendLine(\"=== 安全问题 ===\");\r\n        foreach (var issue in securityIssues)\r\n        {\r\n            reportBuilder.AppendLine($\"[{issue.severity}] {issue.message} (行: {issue.lineNumber})\");\r\n        }\r\n        reportBuilder.AppendLine();\r\n        \r\n        reportBuilder.AppendLine(\"=== 样式问题 ===\");\r\n        foreach (var issue in styleIssues)\r\n        {\r\n            reportBuilder.AppendLine($\"[{issue.severity}] {issue.message} (行: {issue.lineNumber})\");\r\n        }\r\n        \r\n        string report = reportBuilder.ToString();\r\n        Debug.Log(report);\r\n        \r\n        if (enableDataExport)\r\n        {\r\n            ExportReport(report);\r\n        }\r\n    }\r\n\r\n    private void ExportReport(string report)\r\n    {\r\n        try\r\n        {\r\n            string fileName = $\"ScriptingReport_{System.DateTime.Now:yyyyMMdd_HHmmss}.txt\";\r\n            string filePath = Path.Combine(codeGenerationPath, fileName);\r\n            \r\n            Directory.CreateDirectory(codeGenerationPath);\r\n            File.WriteAllText(filePath, report);\r\n            \r\n            Debug.Log($\"脚本系统报告已导出: {filePath}\");\r\n        }\r\n        catch (System.Exception e)\r\n        {\r\n            Debug.LogError($\"导出脚本系统报告失败: {e.Message}\");\r\n        }\r\n    }\r\n\r\n    public void OpenScriptingWindow()\r\n    {\r\n        if (enableScripting)\r\n        {\r\n            EditorWindow.GetWindow<UnityEditor.ScriptingWindow>();\r\n            Debug.Log(\"脚本窗口已打开\");\r\n        }\r\n    }\r\n\r\n    public void ResetScriptingData()\r\n    {\r\n        InitializeScriptState();\r\n        InitializeCompilationSettings();\r\n        InitializeCodeGeneration();\r\n        InitializeScriptAnalysis();\r\n        \r\n        analysisResults.Clear();\r\n        performanceIssues.Clear();\r\n        memoryIssues.Clear();\r\n        securityIssues.Clear();\r\n        styleIssues.Clear();\r\n        compilationErrors.Clear();\r\n        compilationWarnings.Clear();\r\n        \r\n        Debug.Log(\"脚本系统数据已重置\");\r\n    }\r\n\r\n    private void OnDestroy()\r\n    {\r\n        CompilationPipeline.compilationStarted -= OnCompilationStarted;\r\n        CompilationPipeline.compilationFinished -= OnCompilationFinished;\r\n        \r\n        Debug.Log(\"脚本回调已清理\");\r\n    }\r\n\r\n    private void OnGUI()\r\n    {\r\n        GUILayout.BeginArea(new Rect(10, 10, 400, 800));\r\n        GUILayout.Label(\"Scripting 脚本系统演示\", UnityEditor.EditorStyles.boldLabel);\r\n        \r\n        GUILayout.Space(10);\r\n        GUILayout.Label(\"脚本系统配置:\");\r\n        enableScripting = GUILayout.Toggle(enableScripting, \"启用脚本系统\");\r\n        enableCompilation = GUILayout.Toggle(enableCompilation, \"启用编译\");\r\n        enableCodeGeneration = GUILayout.Toggle(enableCodeGeneration, \"启用代码生成\");\r\n        enableScriptAnalysis = GUILayout.Toggle(enableScriptAnalysis, \"启用脚本分析\");\r\n        enableAutoCodeGeneration = GUILayout.Toggle(enableAutoCodeGeneration, \"启用自动代码生成\");\r\n        \r\n        GUILayout.Space(10);\r\n        GUILayout.Label(\"脚本状态:\");\r\n        GUILayout.Label($\"脚本状态: {scriptingStatus}\");\r\n        GUILayout.Label($\"是否正在编译: {isCompiling}\");\r\n        GUILayout.Label($\"是否正在生成代码: {isGeneratingCode}\");\r\n        GUILayout.Label($\"是否正在分析: {isAnalyzingScripts}\");\r\n        GUILayout.Label($\"编译进度: {compilationProgress * 100:F1}%\");\r\n        GUILayout.Label($\"编译消息: {compilationMessage}\");\r\n        GUILayout.Label($\"总脚本数: {totalScripts}\");\r\n        GUILayout.Label($\"已编译脚本数: {compiledScripts}\");\r\n        GUILayout.Label($\"失败脚本数: {failedScripts}\");\r\n        GUILayout.Label($\"警告数: {warningsCount}\");\r\n        GUILayout.Label($\"错误数: {errorsCount}\");\r\n        GUILayout.Label($\"编译成功率: {compilationStats.successRate:F1}%\");\r\n        \r\n        GUILayout.Space(10);\r\n        \r\n        if (GUILayout.Button(\"编译脚本\"))\r\n        {\r\n            CompileScripts();\r\n        }\r\n        \r\n        if (GUILayout.Button(\"生成代码\"))\r\n        {\r\n            var scriptsToGenerate = FindScriptsNeedingGeneration();\r\n            GenerateCodeForScripts(scriptsToGenerate);\r\n        }\r\n        \r\n        if (GUILayout.Button(\"分析脚本\"))\r\n        {\r\n            var scriptsToAnalyze = FindScriptsNeedingAnalysis();\r\n            AnalyzeScripts(scriptsToAnalyze);\r\n        }\r\n        \r\n        if (GUILayout.Button(\"生成脚本报告\"))\r\n        {\r\n            GenerateScriptingReport();\r\n        }\r\n        \r\n        if (GUILayout.Button(\"打开脚本窗口\"))\r\n        {\r\n            OpenScriptingWindow();\r\n        }\r\n        \r\n        if (GUILayout.Button(\"重置脚本数据\"))\r\n        {\r\n            ResetScriptingData();\r\n        }\r\n        \r\n        GUILayout.Space(10);\r\n        GUILayout.Label(\"性能问题:\");\r\n        foreach (var issue in performanceIssues)\r\n        {\r\n            string color = issue.severity == PerformanceIssueSeverity.High ? \"red\" : \"yellow\";\r\n            GUILayout.Label($\"<color={color}>[{issue.severity}] {issue.message}</color>\");\r\n        }\r\n        \r\n        GUILayout.Space(10);\r\n        GUILayout.Label(\"内存问题:\");\r\n        foreach (var issue in memoryIssues)\r\n        {\r\n            string color = issue.severity == MemoryIssueSeverity.High ? \"red\" : \"yellow\";\r\n            GUILayout.Label($\"<color={color}>[{issue.severity}] {issue.message}</color>\");\r\n        }\r\n        \r\n        GUILayout.EndArea();\r\n    }\r\n}\r\n\r\npublic enum ScriptingStatus\r\n{\r\n    Idle,\r\n    Compiling,\r\n    GeneratingCode,\r\n    Analyzing,\r\n    Completed,\r\n    Failed\r\n}\r\n\r\npublic enum ScriptType\r\n{\r\n    Unknown,\r\n    CSharp,\r\n    JavaScript,\r\n    Boo\r\n}\r\n\r\npublic enum PerformanceIssueType\r\n{\r\n    FindObjectOfType,\r\n    GetComponent,\r\n    Instantiate,\r\n    Destroy,\r\n    Update,\r\n    FixedUpdate\r\n}\r\n\r\npublic enum PerformanceIssueSeverity\r\n{\r\n    Low,\r\n    Medium,\r\n    High,\r\n    Critical\r\n}\r\n\r\npublic enum MemoryIssueType\r\n{\r\n    GCCollect,\r\n    MemoryLeak,\r\n    LargeAllocation\r\n}\r\n\r\npublic enum MemoryIssueSeverity\r\n{\r\n    Low,\r\n    Medium,\r\n    High,\r\n    Critical\r\n}\r\n\r\npublic enum SecurityIssueType\r\n{\r\n    Eval,\r\n    FileAccess,\r\n    NetworkAccess\r\n}\r\n\r\npublic enum SecurityIssueSeverity\r\n{\r\n    Low,\r\n    Medium,\r\n    High,\r\n    Critical\r\n}\r\n\r\npublic enum StyleIssueType\r\n{\r\n    TODO,\r\n    FIXME,\r\n    Indentation,\r\n    Naming\r\n}\r\n\r\npublic enum StyleIssueSeverity\r\n{\r\n    Low,\r\n    Medium,\r\n    High,\r\n    Critical\r\n}\r\n\r\npublic enum ErrorSeverity\r\n{\r\n    Error,\r\n    Fatal\r\n}\r\n\r\npublic enum WarningSeverity\r\n{\r\n    Warning,\r\n    Info\r\n}\r\n\r\n[System.Serializable]\r\npublic class ScriptInfo\r\n{\r\n    public string path;\r\n    public string name;\r\n    public ScriptType type;\r\n    public bool enabled;\r\n    public System.DateTime lastModified;\r\n    public long size;\r\n}\r\n\r\n[System.Serializable]\r\npublic class CompilationStatistics\r\n{\r\n    public int totalScripts;\r\n    public int compiledScripts;\r\n    public int failedScripts;\r\n    public int warningsCount;\r\n    public int errorsCount;\r\n    public float successRate;\r\n    public float totalCompileTime;\r\n    public float averageCompileTime;\r\n    public float maxCompileTime;\r\n    public int compileCount;\r\n}\r\n\r\n[System.Serializable]\r\npublic class CompilationError\r\n{\r\n    public string message;\r\n    public ErrorSeverity severity;\r\n    public string scriptPath;\r\n    public int lineNumber;\r\n}\r\n\r\n[System.Serializable]\r\npublic class CompilationWarning\r\n{\r\n    public string message;\r\n    public WarningSeverity severity;\r\n    public string scriptPath;\r\n    public int lineNumber;\r\n}\r\n\r\n[System.Serializable]\r\npublic class CodeAnalysisResult\r\n{\r\n    public string scriptPath;\r\n    public string scriptName;\r\n    public System.DateTime analysisTime;\r\n    public int lineCount;\r\n    public int characterCount;\r\n    public int complexity;\r\n    public float performanceScore;\r\n    public float memoryScore;\r\n    public float securityScore;\r\n    public float styleScore;\r\n}\r\n\r\n[System.Serializable]\r\npublic class PerformanceIssue\r\n{\r\n    public PerformanceIssueType type;\r\n    public PerformanceIssueSeverity severity;\r\n    public string message;\r\n    public int lineNumber;\r\n}\r\n\r\n[System.Serializable]\r\npublic class MemoryIssue\r\n{\r\n    public MemoryIssueType type;\r\n    public MemoryIssueSeverity severity;\r\n    public string message;\r\n    public int lineNumber;\r\n}\r\n\r\n[System.Serializable]\r\npublic class SecurityIssue\r\n{\r\n    public SecurityIssueType type;\r\n    public SecurityIssueSeverity severity;\r\n    public string message;\r\n    public int lineNumber;\r\n}\r\n\r\n[System.Serializable]\r\npublic class StyleIssue\r\n{\r\n    public StyleIssueType type;\r\n    public StyleIssueSeverity severity;\r\n    public string message;\r\n    public int lineNumber;\r\n}\r\n\r\n[System.Serializable]\r\npublic class OptimizationResult\r\n{\r\n    public string scriptPath;\r\n    public string optimizationType;\r\n    public float improvement;\r\n    public string description;\r\n}\r\n\r\n[System.Serializable]\r\npublic class DebugBreakpoint\r\n{\r\n    public string scriptPath;\r\n    public int lineNumber;\r\n    public bool enabled;\r\n    public string condition;\r\n}\r\n\r\n[System.Serializable]\r\npublic class DebugVariable\r\n{\r\n    public string name;\r\n    public string value;\r\n    public string type;\r\n    public bool isWatched;\r\n}\r\n\r\n[System.Serializable]\r\npublic class DebugCallStack\r\n{\r\n    public string functionName;\r\n    public string scriptPath;\r\n    public int lineNumber;\r\n    public System.DateTime timestamp;\r\n} "
        }
    ]
}