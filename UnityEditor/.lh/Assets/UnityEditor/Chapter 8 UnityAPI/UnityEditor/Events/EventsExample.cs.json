{
    "sourceFile": "Assets/UnityEditor/Chapter 8 UnityAPI/UnityEditor/Events/EventsExample.cs",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1750940527456,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1750940527456,
            "name": "Commit-0",
            "content": "using UnityEngine;\r\nusing UnityEditor;\r\nusing UnityEditor.Events;\r\nusing UnityEngine.Events;\r\nusing System.Collections.Generic;\r\n\r\nnamespace UnityEditor.Events.Examples\r\n{\r\n    /// <summary>\r\n    /// UnityEditor.Events 命名空间使用示例\r\n    /// 演示编辑器事件系统的动态事件绑定和管理功能\r\n    /// </summary>\r\n    public class EventsExample : MonoBehaviour\r\n    {\r\n        [Header(\"事件配置\")]\r\n        [SerializeField] private bool enableDynamicEvents = true;\r\n        [SerializeField] private int maxEventListeners = 10;\r\n        [SerializeField] private string eventName = \"CustomEvent\";\r\n        \r\n        [Header(\"事件状态\")]\r\n        [SerializeField] private int currentListenerCount = 0;\r\n        [SerializeField] private bool isEventActive = false;\r\n        [SerializeField] private string lastEventData = \"\";\r\n        \r\n        [Header(\"目标对象\")]\r\n        [SerializeField] private GameObject targetObject;\r\n        [SerializeField] private MonoBehaviour targetComponent;\r\n        \r\n        private UnityEvent customEvent;\r\n        private List<UnityAction> registeredListeners = new List<UnityAction>();\r\n        private Dictionary<string, UnityEvent> eventRegistry = new Dictionary<string, UnityEvent>();\r\n        \r\n        /// <summary>\r\n        /// 初始化事件系统\r\n        /// </summary>\r\n        private void Start()\r\n        {\r\n            InitializeEventSystem();\r\n        }\r\n        \r\n        /// <summary>\r\n        /// 初始化事件系统\r\n        /// </summary>\r\n        private void InitializeEventSystem()\r\n        {\r\n            // 创建主事件\r\n            customEvent = new UnityEvent();\r\n            \r\n            // 注册到事件注册表\r\n            eventRegistry[eventName] = customEvent;\r\n            \r\n            // 添加默认监听器\r\n            AddDefaultListeners();\r\n            \r\n            isEventActive = true;\r\n            Debug.Log(\"事件系统初始化完成\");\r\n        }\r\n        \r\n        /// <summary>\r\n        /// 添加默认监听器\r\n        /// </summary>\r\n        private void AddDefaultListeners()\r\n        {\r\n            // 添加日志监听器\r\n            UnityAction logAction = () => Debug.Log($\"事件 '{eventName}' 被触发\");\r\n            AddListener(eventName, logAction);\r\n            \r\n            // 添加状态更新监听器\r\n            UnityAction statusAction = () => UpdateEventStatus();\r\n            AddListener(eventName, statusAction);\r\n        }\r\n        \r\n        /// <summary>\r\n        /// 添加事件监听器\r\n        /// </summary>\r\n        public void AddListener(string eventName, UnityAction listener)\r\n        {\r\n            if (!eventRegistry.ContainsKey(eventName))\r\n            {\r\n                eventRegistry[eventName] = new UnityEvent();\r\n            }\r\n            \r\n            if (registeredListeners.Count >= maxEventListeners)\r\n            {\r\n                Debug.LogWarning($\"已达到最大监听器数量限制: {maxEventListeners}\");\r\n                return;\r\n            }\r\n            \r\n            eventRegistry[eventName].AddListener(listener);\r\n            registeredListeners.Add(listener);\r\n            currentListenerCount = registeredListeners.Count;\r\n            \r\n            Debug.Log($\"添加监听器到事件 '{eventName}': {listener.Method.Name}\");\r\n        }\r\n        \r\n        /// <summary>\r\n        /// 移除事件监听器\r\n        /// </summary>\r\n        public void RemoveListener(string eventName, UnityAction listener)\r\n        {\r\n            if (eventRegistry.ContainsKey(eventName))\r\n            {\r\n                eventRegistry[eventName].RemoveListener(listener);\r\n                registeredListeners.Remove(listener);\r\n                currentListenerCount = registeredListeners.Count;\r\n                \r\n                Debug.Log($\"从事件 '{eventName}' 移除监听器: {listener.Method.Name}\");\r\n            }\r\n        }\r\n        \r\n        /// <summary>\r\n        /// 移除所有监听器\r\n        /// </summary>\r\n        public void RemoveAllListeners(string eventName)\r\n        {\r\n            if (eventRegistry.ContainsKey(eventName))\r\n            {\r\n                eventRegistry[eventName].RemoveAllListeners();\r\n                registeredListeners.Clear();\r\n                currentListenerCount = 0;\r\n                \r\n                Debug.Log($\"移除事件 '{eventName}' 的所有监听器\");\r\n            }\r\n        }\r\n        \r\n        /// <summary>\r\n        /// 触发事件\r\n        /// </summary>\r\n        public void TriggerEvent(string eventName)\r\n        {\r\n            if (eventRegistry.ContainsKey(eventName))\r\n            {\r\n                lastEventData = $\"事件 '{eventName}' 在 {System.DateTime.Now:HH:mm:ss} 被触发\";\r\n                eventRegistry[eventName].Invoke();\r\n                \r\n                Debug.Log($\"触发事件: {eventName}\");\r\n            }\r\n            else\r\n            {\r\n                Debug.LogWarning($\"事件 '{eventName}' 不存在\");\r\n            }\r\n        }\r\n        \r\n        /// <summary>\r\n        /// 创建新事件\r\n        /// </summary>\r\n        public void CreateEvent(string newEventName)\r\n        {\r\n            if (eventRegistry.ContainsKey(newEventName))\r\n            {\r\n                Debug.LogWarning($\"事件 '{newEventName}' 已存在\");\r\n                return;\r\n            }\r\n            \r\n            eventRegistry[newEventName] = new UnityEvent();\r\n            Debug.Log($\"创建新事件: {newEventName}\");\r\n        }\r\n        \r\n        /// <summary>\r\n        /// 删除事件\r\n        /// </summary>\r\n        public void DeleteEvent(string eventName)\r\n        {\r\n            if (eventRegistry.ContainsKey(eventName))\r\n            {\r\n                RemoveAllListeners(eventName);\r\n                eventRegistry.Remove(eventName);\r\n                Debug.Log($\"删除事件: {eventName}\");\r\n            }\r\n        }\r\n        \r\n        /// <summary>\r\n        /// 获取事件信息\r\n        /// </summary>\r\n        public string GetEventInfo(string eventName)\r\n        {\r\n            if (eventRegistry.ContainsKey(eventName))\r\n            {\r\n                var evt = eventRegistry[eventName];\r\n                return $\"事件: {eventName}, 监听器数量: {evt.GetPersistentEventCount()}\";\r\n            }\r\n            return $\"事件 '{eventName}' 不存在\";\r\n        }\r\n        \r\n        /// <summary>\r\n        /// 动态绑定组件方法\r\n        /// </summary>\r\n        public void BindComponentMethod(string eventName, MonoBehaviour component, string methodName)\r\n        {\r\n            if (component == null)\r\n            {\r\n                Debug.LogError(\"目标组件为空\");\r\n                return;\r\n            }\r\n            \r\n            var method = component.GetType().GetMethod(methodName);\r\n            if (method == null)\r\n            {\r\n                Debug.LogError($\"方法 '{methodName}' 在组件 '{component.GetType().Name}' 中不存在\");\r\n                return;\r\n            }\r\n            \r\n            // 创建动态调用\r\n            UnityAction dynamicAction = () => method.Invoke(component, null);\r\n            AddListener(eventName, dynamicAction);\r\n            \r\n            Debug.Log($\"动态绑定方法: {component.GetType().Name}.{methodName} 到事件 '{eventName}'\");\r\n        }\r\n        \r\n        /// <summary>\r\n        /// 使用UnityEditor.Events进行持久化绑定\r\n        /// </summary>\r\n        public void PersistEventBinding(string eventName, MonoBehaviour target, string methodName)\r\n        {\r\n            if (target == null)\r\n            {\r\n                Debug.LogError(\"目标对象为空\");\r\n                return;\r\n            }\r\n            \r\n            if (!eventRegistry.ContainsKey(eventName))\r\n            {\r\n                Debug.LogError($\"事件 '{eventName}' 不存在\");\r\n                return;\r\n            }\r\n            \r\n            try\r\n            {\r\n                // 使用UnityEditor.Events进行持久化绑定\r\n                UnityEventTools.AddPersistentListener(eventRegistry[eventName], \r\n                    new UnityAction(() => target.SendMessage(methodName)));\r\n                \r\n                Debug.Log($\"持久化绑定: {target.GetType().Name}.{methodName} 到事件 '{eventName}'\");\r\n            }\r\n            catch (System.Exception e)\r\n            {\r\n                Debug.LogError($\"持久化绑定失败: {e.Message}\");\r\n            }\r\n        }\r\n        \r\n        /// <summary>\r\n        /// 移除持久化绑定\r\n        /// </summary>\r\n        public void RemovePersistentBinding(string eventName, int index)\r\n        {\r\n            if (eventRegistry.ContainsKey(eventName))\r\n            {\r\n                try\r\n                {\r\n                    UnityEventTools.RemovePersistentListener(eventRegistry[eventName], index);\r\n                    Debug.Log($\"移除持久化绑定: 事件 '{eventName}' 索引 {index}\");\r\n                }\r\n                catch (System.Exception e)\r\n                {\r\n                    Debug.LogError($\"移除持久化绑定失败: {e.Message}\");\r\n                }\r\n            }\r\n        }\r\n        \r\n        /// <summary>\r\n        /// 更新事件状态\r\n        /// </summary>\r\n        private void UpdateEventStatus()\r\n        {\r\n            currentListenerCount = registeredListeners.Count;\r\n            isEventActive = eventRegistry.Count > 0;\r\n        }\r\n        \r\n        /// <summary>\r\n        /// 获取所有事件名称\r\n        /// </summary>\r\n        public string[] GetAllEventNames()\r\n        {\r\n            string[] names = new string[eventRegistry.Count];\r\n            eventRegistry.Keys.CopyTo(names, 0);\r\n            return names;\r\n        }\r\n        \r\n        /// <summary>\r\n        /// 清理事件系统\r\n        /// </summary>\r\n        private void OnDestroy()\r\n        {\r\n            foreach (var evt in eventRegistry.Values)\r\n            {\r\n                evt.RemoveAllListeners();\r\n            }\r\n            eventRegistry.Clear();\r\n            registeredListeners.Clear();\r\n        }\r\n        \r\n        /// <summary>\r\n        /// 在编辑器中显示GUI\r\n        /// </summary>\r\n        private void OnGUI()\r\n        {\r\n            if (!Application.isPlaying) return;\r\n            \r\n            GUILayout.BeginArea(new Rect(10, 10, 500, 700));\r\n            GUILayout.Label(\"UnityEditor.Events 示例\", EditorStyles.boldLabel);\r\n            \r\n            GUILayout.Space(10);\r\n            GUILayout.Label($\"状态: {(isEventActive ? \"活跃\" : \"非活跃\")}\");\r\n            GUILayout.Label($\"监听器数量: {currentListenerCount}\");\r\n            GUILayout.Label($\"最后事件: {lastEventData}\");\r\n            \r\n            GUILayout.Space(10);\r\n            GUILayout.Label(\"事件控制\", EditorStyles.boldLabel);\r\n            \r\n            eventName = GUILayout.TextField(\"事件名称\", eventName);\r\n            \r\n            if (GUILayout.Button(\"触发事件\"))\r\n            {\r\n                TriggerEvent(eventName);\r\n            }\r\n            \r\n            if (GUILayout.Button(\"创建事件\"))\r\n            {\r\n                CreateEvent(eventName);\r\n            }\r\n            \r\n            if (GUILayout.Button(\"删除事件\"))\r\n            {\r\n                DeleteEvent(eventName);\r\n            }\r\n            \r\n            GUILayout.Space(10);\r\n            GUILayout.Label(\"监听器管理\", EditorStyles.boldLabel);\r\n            \r\n            if (GUILayout.Button(\"添加测试监听器\"))\r\n            {\r\n                UnityAction testAction = () => Debug.Log(\"测试监听器被调用\");\r\n                AddListener(eventName, testAction);\r\n            }\r\n            \r\n            if (GUILayout.Button(\"移除所有监听器\"))\r\n            {\r\n                RemoveAllListeners(eventName);\r\n            }\r\n            \r\n            GUILayout.Space(10);\r\n            GUILayout.Label(\"动态绑定\", EditorStyles.boldLabel);\r\n            \r\n            targetComponent = (MonoBehaviour)EditorGUILayout.ObjectField(\"目标组件\", targetComponent, typeof(MonoBehaviour), true);\r\n            \r\n            if (targetComponent != null)\r\n            {\r\n                if (GUILayout.Button(\"绑定Start方法\"))\r\n                {\r\n                    BindComponentMethod(eventName, targetComponent, \"Start\");\r\n                }\r\n                \r\n                if (GUILayout.Button(\"绑定Update方法\"))\r\n                {\r\n                    BindComponentMethod(eventName, targetComponent, \"Update\");\r\n                }\r\n                \r\n                if (GUILayout.Button(\"持久化绑定Start方法\"))\r\n                {\r\n                    PersistEventBinding(eventName, targetComponent, \"Start\");\r\n                }\r\n            }\r\n            \r\n            GUILayout.Space(10);\r\n            GUILayout.Label(\"事件信息\", EditorStyles.boldLabel);\r\n            \r\n            string[] eventNames = GetAllEventNames();\r\n            foreach (string name in eventNames)\r\n            {\r\n                GUILayout.Label(GetEventInfo(name));\r\n            }\r\n            \r\n            GUILayout.Space(10);\r\n            GUILayout.Label(\"配置\", EditorStyles.boldLabel);\r\n            \r\n            enableDynamicEvents = EditorGUILayout.Toggle(\"启用动态事件\", enableDynamicEvents);\r\n            maxEventListeners = EditorGUILayout.IntField(\"最大监听器数量\", maxEventListeners);\r\n            \r\n            GUILayout.EndArea();\r\n        }\r\n    }\r\n} "
        }
    ]
}