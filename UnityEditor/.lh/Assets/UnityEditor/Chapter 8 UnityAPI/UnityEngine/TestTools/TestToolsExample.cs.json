{
    "sourceFile": "Assets/UnityEditor/Chapter 8 UnityAPI/UnityEngine/TestTools/TestToolsExample.cs",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1750932984314,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1750932984314,
            "name": "Commit-0",
            "content": "using UnityEngine;\r\n#if UNITY_INCLUDE_TESTS\r\nusing UnityEditor.TestTools;\r\nusing NUnit.Framework;\r\nusing UnityEngine.TestTools;\r\n#endif\r\n\r\n/// <summary>\r\n/// UnityEngine.TestTools 命名空间案例演示\r\n/// 展示TestRunner、TestAttribute、Assert等核心功能\r\n/// </summary>\r\npublic class TestToolsExample : MonoBehaviour\r\n{\r\n    [Header(\"测试工具设置\")]\r\n    [SerializeField] private bool enableTestTools = true; //是否启用测试工具\r\n    [SerializeField] private string testResult = \"\"; //测试结果\r\n    [SerializeField] private int testCount = 0; //测试数量\r\n    [SerializeField] private int passedTests = 0; //通过测试数量\r\n\r\n    private void Start()\r\n    {\r\n#if UNITY_INCLUDE_TESTS\r\n        if (enableTestTools)\r\n        {\r\n            Debug.Log(\"Test Tools 已启用\");\r\n            RunBasicTests();\r\n        }\r\n#endif\r\n    }\r\n\r\n#if UNITY_INCLUDE_TESTS\r\n    /// <summary>\r\n    /// 运行基础测试\r\n    /// </summary>\r\n    private void RunBasicTests()\r\n    {\r\n        testCount = 0;\r\n        passedTests = 0;\r\n\r\n        // 测试1: 基本断言\r\n        testCount++;\r\n        try\r\n        {\r\n            Assert.IsTrue(true, \"基本断言测试\");\r\n            passedTests++;\r\n        }\r\n        catch (AssertionException ex)\r\n        {\r\n            Debug.LogError($\"测试1失败: {ex.Message}\");\r\n        }\r\n\r\n        // 测试2: 数值比较\r\n        testCount++;\r\n        try\r\n        {\r\n            Assert.AreEqual(5, 5, \"数值比较测试\");\r\n            passedTests++;\r\n        }\r\n        catch (AssertionException ex)\r\n        {\r\n            Debug.LogError($\"测试2失败: {ex.Message}\");\r\n        }\r\n\r\n        // 测试3: 字符串比较\r\n        testCount++;\r\n        try\r\n        {\r\n            Assert.AreEqual(\"Hello\", \"Hello\", \"字符串比较测试\");\r\n            passedTests++;\r\n        }\r\n        catch (AssertionException ex)\r\n        {\r\n            Debug.LogError($\"测试3失败: {ex.Message}\");\r\n        }\r\n\r\n        // 测试4: 对象比较\r\n        testCount++;\r\n        try\r\n        {\r\n            GameObject obj1 = new GameObject(\"TestObject1\");\r\n            GameObject obj2 = new GameObject(\"TestObject2\");\r\n            Assert.AreNotEqual(obj1, obj2, \"对象比较测试\");\r\n            DestroyImmediate(obj1);\r\n            DestroyImmediate(obj2);\r\n            passedTests++;\r\n        }\r\n        catch (AssertionException ex)\r\n        {\r\n            Debug.LogError($\"测试4失败: {ex.Message}\");\r\n        }\r\n\r\n        // 测试5: 异常测试\r\n        testCount++;\r\n        try\r\n        {\r\n            Assert.Throws<System.ArgumentException>(() => {\r\n                throw new System.ArgumentException(\"测试异常\");\r\n            }, \"异常测试\");\r\n            passedTests++;\r\n        }\r\n        catch (AssertionException ex)\r\n        {\r\n            Debug.LogError($\"测试5失败: {ex.Message}\");\r\n        }\r\n\r\n        testResult = $\"测试完成: {passedTests}/{testCount} 通过\";\r\n        Debug.Log(testResult);\r\n    }\r\n\r\n    /// <summary>\r\n    /// 测试方法示例\r\n    /// </summary>\r\n    [Test]\r\n    public void ExampleTest()\r\n    {\r\n        // 这是一个可以被TestRunner自动发现的测试方法\r\n        Assert.IsTrue(true, \"示例测试\");\r\n    }\r\n\r\n    /// <summary>\r\n    /// 异步测试方法示例\r\n    /// </summary>\r\n    [UnityTest]\r\n    public System.Collections.IEnumerator ExampleAsyncTest()\r\n    {\r\n        // 这是一个异步测试方法\r\n        yield return null; // 等待一帧\r\n        Assert.IsTrue(true, \"异步示例测试\");\r\n    }\r\n\r\n    /// <summary>\r\n    /// 性能测试示例\r\n    /// </summary>\r\n    [Test]\r\n    [Performance]\r\n    public void ExamplePerformanceTest()\r\n    {\r\n        // 这是一个性能测试方法\r\n        Measure.Method(() => {\r\n            // 执行需要测试性能的代码\r\n            for (int i = 0; i < 1000; i++)\r\n            {\r\n                Mathf.Sin(i);\r\n            }\r\n        })\r\n        .WarmupCount(3)\r\n        .MeasurementCount(10)\r\n        .Run();\r\n    }\r\n#endif\r\n\r\n    /// <summary>\r\n    /// 获取测试信息\r\n    /// </summary>\r\n    public void GetTestInfo()\r\n    {\r\n        Debug.Log(\"=== 测试工具信息 ===\");\r\n        Debug.Log($\"测试工具启用: {enableTestTools}\");\r\n        Debug.Log($\"测试结果: {testResult}\");\r\n        Debug.Log($\"测试数量: {testCount}\");\r\n        Debug.Log($\"通过测试: {passedTests}\");\r\n        \r\n#if UNITY_INCLUDE_TESTS\r\n        Debug.Log(\"TestRunner 可用\");\r\n#else\r\n        Debug.Log(\"TestRunner 不可用 (需要包含测试模块)\");\r\n#endif\r\n    }\r\n\r\n    /// <summary>\r\n    /// 重新运行测试\r\n    /// </summary>\r\n    public void RerunTests()\r\n    {\r\n#if UNITY_INCLUDE_TESTS\r\n        RunBasicTests();\r\n#else\r\n        Debug.LogWarning(\"测试模块未包含，无法运行测试\");\r\n#endif\r\n    }\r\n\r\n    private void OnGUI()\r\n    {\r\n        GUILayout.BeginArea(new Rect(10, 10, 350, 250));\r\n        GUILayout.Label(\"Test Tools 测试工具演示\", UnityEditor.EditorStyles.boldLabel);\r\n        \r\n        enableTestTools = GUILayout.Toggle(enableTestTools, \"启用测试工具\");\r\n        GUILayout.Label($\"测试结果: {testResult}\");\r\n        GUILayout.Label($\"测试数量: {testCount}\");\r\n        GUILayout.Label($\"通过测试: {passedTests}\");\r\n        \r\n        if (GUILayout.Button(\"获取测试信息\"))\r\n        {\r\n            GetTestInfo();\r\n        }\r\n        \r\n        if (GUILayout.Button(\"重新运行测试\"))\r\n        {\r\n            RerunTests();\r\n        }\r\n        \r\n        GUILayout.Space(10);\r\n        GUILayout.Label(\"测试说明:\");\r\n        GUILayout.Label(\"• 需要包含Unity Test Framework\");\r\n        GUILayout.Label(\"• 使用[Test]标记测试方法\");\r\n        GUILayout.Label(\"• 使用[UnityTest]标记异步测试\");\r\n        GUILayout.Label(\"• 使用[Performance]标记性能测试\");\r\n        \r\n        GUILayout.EndArea();\r\n    }\r\n} "
        }
    ]
}