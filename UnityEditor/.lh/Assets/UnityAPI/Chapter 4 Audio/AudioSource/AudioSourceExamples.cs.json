{
    "sourceFile": "Assets/UnityAPI/Chapter 4 Audio/AudioSource/AudioSourceExamples.cs",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1750928249398,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1750928249398,
            "name": "Commit-0",
            "content": "using UnityEngine;\r\nusing System.Collections;\r\n\r\n/// <summary>\r\n/// AudioSource API使用案例\r\n/// 演示音频源组件的各种功能\r\n/// </summary>\r\npublic class AudioSourceExamples : MonoBehaviour\r\n{\r\n    [Header(\"音频源设置\")]\r\n    [SerializeField] private AudioSource targetAudioSource;\r\n    [SerializeField] private AudioClip[] audioClips;\r\n    [SerializeField] private AudioClip backgroundMusic;\r\n    \r\n    [Header(\"播放控制\")]\r\n    [SerializeField] private float volume = 1f;\r\n    [SerializeField] private float pitch = 1f;\r\n    [SerializeField] private bool loop = false;\r\n    [SerializeField] private bool playOnAwake = false;\r\n    \r\n    [Header(\"3D音频设置\")]\r\n    [SerializeField] private bool use3DSound = false;\r\n    [SerializeField] private float minDistance = 1f;\r\n    [SerializeField] private float maxDistance = 500f;\r\n    [SerializeField] private AudioRolloffMode rolloffMode = AudioRolloffMode.Linear;\r\n    \r\n    [Header(\"音频效果\")]\r\n    [SerializeField] private bool useReverb = false;\r\n    [SerializeField] private bool useEcho = false;\r\n    [SerializeField] private bool useChorus = false;\r\n    \r\n    [Header(\"音频可视化\")]\r\n    [SerializeField] private bool showAudioVisualization = true;\r\n    [SerializeField] private int spectrumDataSize = 256;\r\n    \r\n    private float[] spectrumData;\r\n    private bool isInitialized = false;\r\n    private int currentClipIndex = 0;\r\n    private float originalVolume;\r\n    private float originalPitch;\r\n    \r\n    private void Start()\r\n    {\r\n        InitializeAudioSource();\r\n        DemonstrateAudioSourceBasics();\r\n        DemonstrateAudioSource3D();\r\n        DemonstrateAudioSourceEffects();\r\n        DemonstrateAudioSourceControl();\r\n    }\r\n    \r\n    /// <summary>\r\n    /// 初始化音频源\r\n    /// </summary>\r\n    private void InitializeAudioSource()\r\n    {\r\n        // 如果没有指定目标音频源，使用自身的音频源\r\n        if (targetAudioSource == null)\r\n        {\r\n            targetAudioSource = GetComponent<AudioSource>();\r\n            \r\n            // 如果没有音频源组件，添加一个\r\n            if (targetAudioSource == null)\r\n            {\r\n                targetAudioSource = gameObject.AddComponent<AudioSource>();\r\n            }\r\n        }\r\n        \r\n        // 保存原始设置\r\n        originalVolume = targetAudioSource.volume;\r\n        originalPitch = targetAudioSource.pitch;\r\n        \r\n        // 配置音频源\r\n        ConfigureAudioSource();\r\n        \r\n        // 初始化频谱数据数组\r\n        spectrumData = new float[spectrumDataSize];\r\n        \r\n        isInitialized = true;\r\n    }\r\n    \r\n    /// <summary>\r\n    /// 配置音频源\r\n    /// </summary>\r\n    private void ConfigureAudioSource()\r\n    {\r\n        targetAudioSource.volume = volume;\r\n        targetAudioSource.pitch = pitch;\r\n        targetAudioSource.loop = loop;\r\n        targetAudioSource.playOnAwake = playOnAwake;\r\n        \r\n        // 设置3D音频\r\n        if (use3DSound)\r\n        {\r\n            targetAudioSource.spatialBlend = 1f; // 完全3D\r\n            targetAudioSource.minDistance = minDistance;\r\n            targetAudioSource.maxDistance = maxDistance;\r\n            targetAudioSource.rolloffMode = rolloffMode;\r\n        }\r\n        else\r\n        {\r\n            targetAudioSource.spatialBlend = 0f; // 完全2D\r\n        }\r\n        \r\n        // 设置音频效果\r\n        if (useReverb)\r\n        {\r\n            targetAudioSource.reverbZoneMix = 1f;\r\n        }\r\n        \r\n        // 设置第一个音频片段\r\n        if (audioClips != null && audioClips.Length > 0)\r\n        {\r\n            targetAudioSource.clip = audioClips[0];\r\n        }\r\n    }\r\n    \r\n    /// <summary>\r\n    /// 演示音频源基础功能\r\n    /// </summary>\r\n    private void DemonstrateAudioSourceBasics()\r\n    {\r\n        Debug.Log(\"=== AudioSource基础功能示例 ===\");\r\n        \r\n        // 1. 基础属性\r\n        Debug.Log($\"音量: {targetAudioSource.volume}\");\r\n        Debug.Log($\"音调: {targetAudioSource.pitch}\");\r\n        Debug.Log($\"循环: {targetAudioSource.loop}\");\r\n        Debug.Log($\"播放中: {targetAudioSource.isPlaying}\");\r\n        Debug.Log($\"暂停: {targetAudioSource.isPaused}\");\r\n        \r\n        // 2. 时间信息\r\n        Debug.Log($\"当前时间: {targetAudioSource.time:F2}秒\");\r\n        Debug.Log($\"总时长: {targetAudioSource.clip?.length:F2}秒\");\r\n        Debug.Log($\"时间样本: {targetAudioSource.timeSamples}\");\r\n        \r\n        // 3. 音频片段信息\r\n        if (targetAudioSource.clip != null)\r\n        {\r\n            Debug.Log($\"音频片段: {targetAudioSource.clip.name}\");\r\n            Debug.Log($\"采样率: {targetAudioSource.clip.frequency}Hz\");\r\n            Debug.Log($\"声道数: {targetAudioSource.clip.channels}\");\r\n            Debug.Log($\"长度: {targetAudioSource.clip.length:F2}秒\");\r\n        }\r\n        \r\n        // 4. 播放状态\r\n        Debug.Log($\"播放状态: {targetAudioSource.isPlaying}\");\r\n        Debug.Log($\"暂停状态: {targetAudioSource.isPaused}\");\r\n        Debug.Log($\"静音状态: {targetAudioSource.mute}\");\r\n    }\r\n    \r\n    /// <summary>\r\n    /// 演示3D音频功能\r\n    /// </summary>\r\n    private void DemonstrateAudioSource3D()\r\n    {\r\n        Debug.Log(\"=== AudioSource 3D音频示例 ===\");\r\n        \r\n        // 1. 空间混合\r\n        targetAudioSource.spatialBlend = 1f;\r\n        Debug.Log($\"空间混合设置为3D: {targetAudioSource.spatialBlend}\");\r\n        \r\n        // 2. 距离设置\r\n        targetAudioSource.minDistance = minDistance;\r\n        targetAudioSource.maxDistance = maxDistance;\r\n        Debug.Log($\"最小距离: {targetAudioSource.minDistance}, 最大距离: {targetAudioSource.maxDistance}\");\r\n        \r\n        // 3. 衰减模式\r\n        targetAudioSource.rolloffMode = rolloffMode;\r\n        Debug.Log($\"衰减模式: {targetAudioSource.rolloffMode}\");\r\n        \r\n        // 4. 多普勒效应\r\n        targetAudioSource.dopplerLevel = 1f;\r\n        Debug.Log($\"多普勒级别: {targetAudioSource.dopplerLevel}\");\r\n        \r\n        // 5. 传播延迟\r\n        targetAudioSource.spread = 0f;\r\n        Debug.Log($\"传播角度: {targetAudioSource.spread}\");\r\n        \r\n        // 6. 优先级\r\n        targetAudioSource.priority = 128;\r\n        Debug.Log($\"优先级: {targetAudioSource.priority}\");\r\n    }\r\n    \r\n    /// <summary>\r\n    /// 演示音频效果\r\n    /// </summary>\r\n    private void DemonstrateAudioSourceEffects()\r\n    {\r\n        Debug.Log(\"=== AudioSource音频效果示例 ===\");\r\n        \r\n        // 1. 混响区域混合\r\n        if (useReverb)\r\n        {\r\n            targetAudioSource.reverbZoneMix = 1f;\r\n            Debug.Log($\"混响区域混合: {targetAudioSource.reverbZoneMix}\");\r\n        }\r\n        \r\n        // 2. 输出音频混合器组\r\n        // targetAudioSource.outputAudioMixerGroup = mixerGroup;\r\n        Debug.Log(\"音频混合器组功能需要AudioMixer组件\");\r\n        \r\n        // 3. 音频过滤器\r\n        if (useEcho)\r\n        {\r\n            AudioEchoFilter echoFilter = gameObject.AddComponent<AudioEchoFilter>();\r\n            echoFilter.delay = 500f;\r\n            echoFilter.decayRatio = 0.5f;\r\n            Debug.Log(\"添加了回声过滤器\");\r\n        }\r\n        \r\n        if (useChorus)\r\n        {\r\n            AudioChorusFilter chorusFilter = gameObject.AddComponent<AudioChorusFilter>();\r\n            chorusFilter.dryMix = 0.5f;\r\n            chorusFilter.wetMix1 = 0.5f;\r\n            chorusFilter.wetMix2 = 0.5f;\r\n            Debug.Log(\"添加了合唱过滤器\");\r\n        }\r\n    }\r\n    \r\n    /// <summary>\r\n    /// 演示音频源控制\r\n    /// </summary>\r\n    private void DemonstrateAudioSourceControl()\r\n    {\r\n        Debug.Log(\"=== AudioSource控制示例 ===\");\r\n        \r\n        // 1. 播放控制\r\n        if (targetAudioSource.clip != null)\r\n        {\r\n            targetAudioSource.Play();\r\n            Debug.Log(\"开始播放音频\");\r\n            \r\n            // 延迟停止演示\r\n            StartCoroutine(DelayedStop());\r\n        }\r\n        \r\n        // 2. 音量渐变\r\n        StartCoroutine(VolumeFadeDemo());\r\n        \r\n        // 3. 音调变化\r\n        StartCoroutine(PitchChangeDemo());\r\n    }\r\n    \r\n    /// <summary>\r\n    /// 延迟停止演示\r\n    /// </summary>\r\n    private IEnumerator DelayedStop()\r\n    {\r\n        yield return new WaitForSeconds(3f);\r\n        targetAudioSource.Stop();\r\n        Debug.Log(\"停止播放音频\");\r\n    }\r\n    \r\n    /// <summary>\r\n    /// 音量渐变演示\r\n    /// </summary>\r\n    private IEnumerator VolumeFadeDemo()\r\n    {\r\n        yield return new WaitForSeconds(5f);\r\n        \r\n        // 淡入\r\n        float fadeTime = 2f;\r\n        float startVolume = 0f;\r\n        float endVolume = 1f;\r\n        \r\n        targetAudioSource.volume = startVolume;\r\n        targetAudioSource.Play();\r\n        \r\n        float elapsedTime = 0f;\r\n        while (elapsedTime < fadeTime)\r\n        {\r\n            elapsedTime += Time.deltaTime;\r\n            float currentVolume = Mathf.Lerp(startVolume, endVolume, elapsedTime / fadeTime);\r\n            targetAudioSource.volume = currentVolume;\r\n            yield return null;\r\n        }\r\n        \r\n        targetAudioSource.volume = endVolume;\r\n        Debug.Log(\"音量渐变完成\");\r\n    }\r\n    \r\n    /// <summary>\r\n    /// 音调变化演示\r\n    /// </summary>\r\n    private IEnumerator PitchChangeDemo()\r\n    {\r\n        yield return new WaitForSeconds(8f);\r\n        \r\n        // 音调变化\r\n        float[] pitches = { 0.5f, 1f, 1.5f, 2f };\r\n        \r\n        foreach (float pitch in pitches)\r\n        {\r\n            targetAudioSource.pitch = pitch;\r\n            Debug.Log($\"音调设置为: {pitch}\");\r\n            yield return new WaitForSeconds(1f);\r\n        }\r\n        \r\n        targetAudioSource.pitch = 1f;\r\n        Debug.Log(\"音调恢复正常\");\r\n    }\r\n    \r\n    /// <summary>\r\n    /// 在Update中处理输入和更新\r\n    /// </summary>\r\n    private void Update()\r\n    {\r\n        if (!isInitialized) return;\r\n        \r\n        HandleInput();\r\n        UpdateAudioVisualization();\r\n        UpdateAudioSourceInfo();\r\n    }\r\n    \r\n    /// <summary>\r\n    /// 处理输入\r\n    /// </summary>\r\n    private void HandleInput()\r\n    {\r\n        // 空格键 - 播放/暂停\r\n        if (Input.GetKeyDown(KeyCode.Space))\r\n        {\r\n            TogglePlayPause();\r\n        }\r\n        \r\n        // P键 - 播放\r\n        if (Input.GetKeyDown(KeyCode.P))\r\n        {\r\n            PlayAudio();\r\n        }\r\n        \r\n        // S键 - 停止\r\n        if (Input.GetKeyDown(KeyCode.S))\r\n        {\r\n            StopAudio();\r\n        }\r\n        \r\n        // R键 - 重新开始\r\n        if (Input.GetKeyDown(KeyCode.R))\r\n        {\r\n            RestartAudio();\r\n        }\r\n        \r\n        // 数字键 - 切换音频片段\r\n        for (int i = 0; i < Mathf.Min(10, audioClips?.Length ?? 0); i++)\r\n        {\r\n            if (Input.GetKeyDown(KeyCode.Alpha0 + i))\r\n            {\r\n                PlayAudioClip(i);\r\n            }\r\n        }\r\n        \r\n        // 方向键 - 控制音量\r\n        if (Input.GetKey(KeyCode.UpArrow))\r\n        {\r\n            IncreaseVolume();\r\n        }\r\n        if (Input.GetKey(KeyCode.DownArrow))\r\n        {\r\n            DecreaseVolume();\r\n        }\r\n        \r\n        // 左右方向键 - 控制音调\r\n        if (Input.GetKey(KeyCode.LeftArrow))\r\n        {\r\n            DecreasePitch();\r\n        }\r\n        if (Input.GetKey(KeyCode.RightArrow))\r\n        {\r\n            IncreasePitch();\r\n        }\r\n        \r\n        // L键 - 切换循环\r\n        if (Input.GetKeyDown(KeyCode.L))\r\n        {\r\n            ToggleLoop();\r\n        }\r\n        \r\n        // M键 - 切换静音\r\n        if (Input.GetKeyDown(KeyCode.M))\r\n        {\r\n            ToggleMute();\r\n        }\r\n    }\r\n    \r\n    /// <summary>\r\n    /// 更新音频可视化\r\n    /// </summary>\r\n    private void UpdateAudioVisualization()\r\n    {\r\n        if (!showAudioVisualization || targetAudioSource.clip == null) return;\r\n        \r\n        // 获取频谱数据\r\n        targetAudioSource.GetSpectrumData(spectrumData, 0, FFTWindow.BlackmanHarris);\r\n    }\r\n    \r\n    /// <summary>\r\n    /// 更新音频源信息\r\n    /// </summary>\r\n    private void UpdateAudioSourceInfo()\r\n    {\r\n        // 检查播放状态变化\r\n        if (targetAudioSource.isPlaying && !targetAudioSource.isPaused)\r\n        {\r\n            // 音频正在播放\r\n        }\r\n    }\r\n    \r\n    /// <summary>\r\n    /// 切换播放/暂停\r\n    /// </summary>\r\n    private void TogglePlayPause()\r\n    {\r\n        if (targetAudioSource.isPlaying)\r\n        {\r\n            targetAudioSource.Pause();\r\n            Debug.Log(\"音频已暂停\");\r\n        }\r\n        else\r\n        {\r\n            if (targetAudioSource.isPaused)\r\n            {\r\n                targetAudioSource.UnPause();\r\n                Debug.Log(\"音频已恢复播放\");\r\n            }\r\n            else\r\n            {\r\n                targetAudioSource.Play();\r\n                Debug.Log(\"音频开始播放\");\r\n            }\r\n        }\r\n    }\r\n    \r\n    /// <summary>\r\n    /// 播放音频\r\n    /// </summary>\r\n    private void PlayAudio()\r\n    {\r\n        if (targetAudioSource.clip != null)\r\n        {\r\n            targetAudioSource.Play();\r\n            Debug.Log(\"播放音频\");\r\n        }\r\n    }\r\n    \r\n    /// <summary>\r\n    /// 停止音频\r\n    /// </summary>\r\n    private void StopAudio()\r\n    {\r\n        targetAudioSource.Stop();\r\n        Debug.Log(\"停止音频\");\r\n    }\r\n    \r\n    /// <summary>\r\n    /// 重新开始音频\r\n    /// </summary>\r\n    private void RestartAudio()\r\n    {\r\n        targetAudioSource.Stop();\r\n        targetAudioSource.time = 0f;\r\n        targetAudioSource.Play();\r\n        Debug.Log(\"重新开始音频\");\r\n    }\r\n    \r\n    /// <summary>\r\n    /// 播放指定音频片段\r\n    /// </summary>\r\n    private void PlayAudioClip(int index)\r\n    {\r\n        if (audioClips != null && index >= 0 && index < audioClips.Length)\r\n        {\r\n            targetAudioSource.clip = audioClips[index];\r\n            targetAudioSource.Play();\r\n            currentClipIndex = index;\r\n            Debug.Log($\"播放音频片段 {index}: {audioClips[index].name}\");\r\n        }\r\n    }\r\n    \r\n    /// <summary>\r\n    /// 增加音量\r\n    /// </summary>\r\n    private void IncreaseVolume()\r\n    {\r\n        targetAudioSource.volume = Mathf.Min(1f, targetAudioSource.volume + Time.deltaTime);\r\n    }\r\n    \r\n    /// <summary>\r\n    /// 减少音量\r\n    /// </summary>\r\n    private void DecreaseVolume()\r\n    {\r\n        targetAudioSource.volume = Mathf.Max(0f, targetAudioSource.volume - Time.deltaTime);\r\n    }\r\n    \r\n    /// <summary>\r\n    /// 增加音调\r\n    /// </summary>\r\n    private void IncreasePitch()\r\n    {\r\n        targetAudioSource.pitch = Mathf.Min(3f, targetAudioSource.pitch + Time.deltaTime);\r\n    }\r\n    \r\n    /// <summary>\r\n    /// 减少音调\r\n    /// </summary>\r\n    private void DecreasePitch()\r\n    {\r\n        targetAudioSource.pitch = Mathf.Max(0.1f, targetAudioSource.pitch - Time.deltaTime);\r\n    }\r\n    \r\n    /// <summary>\r\n    /// 切换循环\r\n    /// </summary>\r\n    private void ToggleLoop()\r\n    {\r\n        targetAudioSource.loop = !targetAudioSource.loop;\r\n        Debug.Log($\"循环模式: {(targetAudioSource.loop ? \"开启\" : \"关闭\")}\");\r\n    }\r\n    \r\n    /// <summary>\r\n    /// 切换静音\r\n    /// </summary>\r\n    private void ToggleMute()\r\n    {\r\n        targetAudioSource.mute = !targetAudioSource.mute;\r\n        Debug.Log($\"静音状态: {(targetAudioSource.mute ? \"开启\" : \"关闭\")}\");\r\n    }\r\n    \r\n    /// <summary>\r\n    /// 播放背景音乐\r\n    /// </summary>\r\n    public void PlayBackgroundMusic()\r\n    {\r\n        if (backgroundMusic != null)\r\n        {\r\n            targetAudioSource.clip = backgroundMusic;\r\n            targetAudioSource.loop = true;\r\n            targetAudioSource.Play();\r\n            Debug.Log(\"播放背景音乐\");\r\n        }\r\n    }\r\n    \r\n    /// <summary>\r\n    /// 播放一次性音效\r\n    /// </summary>\r\n    public void PlayOneShot(AudioClip clip, float volumeScale = 1f)\r\n    {\r\n        if (clip != null)\r\n        {\r\n            targetAudioSource.PlayOneShot(clip, volumeScale);\r\n            Debug.Log($\"播放一次性音效: {clip.name}\");\r\n        }\r\n    }\r\n    \r\n    /// <summary>\r\n    /// 设置播放位置\r\n    /// </summary>\r\n    public void SetPlayPosition(float time)\r\n    {\r\n        if (targetAudioSource.clip != null)\r\n        {\r\n            targetAudioSource.time = Mathf.Clamp(time, 0f, targetAudioSource.clip.length);\r\n            Debug.Log($\"设置播放位置: {time:F2}秒\");\r\n        }\r\n    }\r\n    \r\n    /// <summary>\r\n    /// 在OnGUI中显示音频信息\r\n    /// </summary>\r\n    private void OnGUI()\r\n    {\r\n        if (!isInitialized) return;\r\n        \r\n        GUILayout.BeginArea(new Rect(10, 10, 400, 500));\r\n        \r\n        GUILayout.Label(\"AudioSource信息\", EditorStyles.boldLabel);\r\n        GUILayout.Space(5);\r\n        \r\n        // 基础信息\r\n        GUILayout.Label($\"播放状态: {(targetAudioSource.isPlaying ? \"播放中\" : \"停止\")}\");\r\n        GUILayout.Label($\"暂停状态: {targetAudioSource.isPaused}\");\r\n        GUILayout.Label($\"音量: {targetAudioSource.volume:F2}\");\r\n        GUILayout.Label($\"音调: {targetAudioSource.pitch:F2}\");\r\n        GUILayout.Label($\"循环: {targetAudioSource.loop}\");\r\n        GUILayout.Label($\"静音: {targetAudioSource.mute}\");\r\n        \r\n        if (targetAudioSource.clip != null)\r\n        {\r\n            GUILayout.Label($\"当前音频: {targetAudioSource.clip.name}\");\r\n            GUILayout.Label($\"播放时间: {targetAudioSource.time:F1}/{targetAudioSource.clip.length:F1}秒\");\r\n            GUILayout.Label($\"播放进度: {(targetAudioSource.time / targetAudioSource.clip.length * 100):F1}%\");\r\n        }\r\n        \r\n        GUILayout.Space(10);\r\n        \r\n        // 3D音频信息\r\n        if (use3DSound)\r\n        {\r\n            GUILayout.Label(\"3D音频设置\", EditorStyles.boldLabel);\r\n            GUILayout.Label($\"空间混合: {targetAudioSource.spatialBlend:F2}\");\r\n            GUILayout.Label($\"最小距离: {targetAudioSource.minDistance}\");\r\n            GUILayout.Label($\"最大距离: {targetAudioSource.maxDistance}\");\r\n            GUILayout.Label($\"衰减模式: {targetAudioSource.rolloffMode}\");\r\n        }\r\n        \r\n        GUILayout.Space(10);\r\n        \r\n        // 音频可视化\r\n        if (showAudioVisualization && spectrumData != null)\r\n        {\r\n            GUILayout.Label(\"音频频谱\", EditorStyles.boldLabel);\r\n            \r\n            // 简单的频谱显示\r\n            for (int i = 0; i < Mathf.Min(20, spectrumData.Length); i++)\r\n            {\r\n                float height = spectrumData[i] * 100f;\r\n                GUILayout.Label($\"频段 {i}: {height:F2}\");\r\n            }\r\n        }\r\n        \r\n        GUILayout.Space(10);\r\n        \r\n        // 控制说明\r\n        GUILayout.Label(\"控制说明:\", EditorStyles.boldLabel);\r\n        GUILayout.Label(\"空格 - 播放/暂停\");\r\n        GUILayout.Label(\"P - 播放\");\r\n        GUILayout.Label(\"S - 停止\");\r\n        GUILayout.Label(\"R - 重新开始\");\r\n        GUILayout.Label(\"L - 切换循环\");\r\n        GUILayout.Label(\"M - 切换静音\");\r\n        GUILayout.Label(\"上下箭头 - 音量\");\r\n        GUILayout.Label(\"左右箭头 - 音调\");\r\n        GUILayout.Label(\"数字键 - 切换音频\");\r\n        \r\n        GUILayout.EndArea();\r\n    }\r\n} "
        }
    ]
}