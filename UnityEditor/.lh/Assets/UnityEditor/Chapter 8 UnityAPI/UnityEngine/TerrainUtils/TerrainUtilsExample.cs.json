{
    "sourceFile": "Assets/UnityEditor/Chapter 8 UnityAPI/UnityEngine/TerrainUtils/TerrainUtilsExample.cs",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1750937940645,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1750937940645,
            "name": "Commit-0",
            "content": "using UnityEngine;\r\nusing UnityEngine.TerrainUtils;\r\nusing System.Collections.Generic;\r\n\r\nnamespace UnityEditor.Chapter8.TerrainUtils\r\n{\r\n    /// <summary>\r\n    /// UnityEngine.TerrainUtils 地形工具系统案例\r\n    /// 演示地形生成、地形修改、地形数据操作等功能\r\n    /// </summary>\r\n    public class TerrainUtilsExample : MonoBehaviour\r\n    {\r\n        [Header(\"地形设置\")]\r\n        [SerializeField] private Terrain terrain;\r\n        [SerializeField] private TerrainData terrainData;\r\n        [SerializeField] private bool autoCreateTerrain = true;\r\n        \r\n        [Header(\"地形尺寸\")]\r\n        [SerializeField] private int terrainWidth = 513;\r\n        [SerializeField] private int terrainHeight = 513;\r\n        [SerializeField] private int terrainLength = 513;\r\n        [SerializeField] private float terrainScale = 1f;\r\n        \r\n        [Header(\"高度图设置\")]\r\n        [SerializeField] private float[,] heightMap;\r\n        [SerializeField] private float maxHeight = 100f;\r\n        [SerializeField] private float noiseScale = 0.01f;\r\n        [SerializeField] private int noiseOctaves = 4;\r\n        \r\n        [Header(\"地形生成\")]\r\n        [SerializeField] private bool usePerlinNoise = true;\r\n        [SerializeField] private bool useFractalNoise = false;\r\n        [SerializeField] private bool useVoronoiNoise = false;\r\n        [SerializeField] private float noiseAmplitude = 1f;\r\n        \r\n        [Header(\"地形修改\")]\r\n        [SerializeField] private float brushSize = 10f;\r\n        [SerializeField] private float brushStrength = 1f;\r\n        [SerializeField] private Vector3 brushPosition = Vector3.zero;\r\n        [SerializeField] private bool isModifying = false;\r\n        \r\n        [Header(\"纹理设置\")]\r\n        [SerializeField] private List<TerrainLayer> terrainLayers = new List<TerrainLayer>();\r\n        [SerializeField] private int currentLayerIndex = 0;\r\n        \r\n        [Header(\"UI控制\")]\r\n        [SerializeField] private bool showControls = true;\r\n        \r\n        private Vector3 lastMousePosition;\r\n        private bool isMouseDown = false;\r\n        \r\n        private void Start()\r\n        {\r\n            InitializeTerrain();\r\n        }\r\n        \r\n        /// <summary>\r\n        /// 初始化地形\r\n        /// </summary>\r\n        private void InitializeTerrain()\r\n        {\r\n            if (autoCreateTerrain)\r\n            {\r\n                CreateTerrain();\r\n            }\r\n            else\r\n            {\r\n                // 获取现有地形\r\n                terrain = GetComponent<Terrain>();\r\n                if (terrain != null)\r\n                {\r\n                    terrainData = terrain.terrainData;\r\n                }\r\n            }\r\n            \r\n            if (terrainData != null)\r\n            {\r\n                heightMap = terrainData.GetHeights(0, 0, terrainData.heightmapResolution, terrainData.heightmapResolution);\r\n            }\r\n        }\r\n        \r\n        /// <summary>\r\n        /// 创建地形\r\n        /// </summary>\r\n        public void CreateTerrain()\r\n        {\r\n            // 创建TerrainData\r\n            terrainData = new TerrainData();\r\n            terrainData.heightmapResolution = terrainWidth;\r\n            terrainData.size = new Vector3(terrainLength, maxHeight, terrainHeight);\r\n            \r\n            // 创建Terrain\r\n            if (terrain == null)\r\n            {\r\n                terrain = gameObject.AddComponent<Terrain>();\r\n            }\r\n            \r\n            terrain.terrainData = terrainData;\r\n            terrain.transform.position = Vector3.zero;\r\n            terrain.transform.localScale = Vector3.one * terrainScale;\r\n            \r\n            // 初始化高度图\r\n            heightMap = new float[terrainData.heightmapResolution, terrainData.heightmapResolution];\r\n            \r\n            Debug.Log($\"创建地形: {terrainWidth} x {terrainHeight} x {terrainLength}\");\r\n        }\r\n        \r\n        /// <summary>\r\n        /// 生成Perlin噪声地形\r\n        /// </summary>\r\n        public void GeneratePerlinNoise()\r\n        {\r\n            if (terrainData == null) return;\r\n            \r\n            int resolution = terrainData.heightmapResolution;\r\n            heightMap = new float[resolution, resolution];\r\n            \r\n            for (int x = 0; x < resolution; x++)\r\n            {\r\n                for (int y = 0; y < resolution; y++)\r\n                {\r\n                    float xCoord = x * noiseScale;\r\n                    float yCoord = y * noiseScale;\r\n                    float height = Mathf.PerlinNoise(xCoord, yCoord) * noiseAmplitude;\r\n                    heightMap[x, y] = height;\r\n                }\r\n            }\r\n            \r\n            terrainData.SetHeights(0, 0, heightMap);\r\n            Debug.Log(\"生成Perlin噪声地形\");\r\n        }\r\n        \r\n        /// <summary>\r\n        /// 生成分形噪声地形\r\n        /// </summary>\r\n        public void GenerateFractalNoise()\r\n        {\r\n            if (terrainData == null) return;\r\n            \r\n            int resolution = terrainData.heightmapResolution;\r\n            heightMap = new float[resolution, resolution];\r\n            \r\n            for (int x = 0; x < resolution; x++)\r\n            {\r\n                for (int y = 0; y < resolution; y++)\r\n                {\r\n                    float height = 0f;\r\n                    float amplitude = noiseAmplitude;\r\n                    float frequency = noiseScale;\r\n                    \r\n                    for (int i = 0; i < noiseOctaves; i++)\r\n                    {\r\n                        float xCoord = x * frequency;\r\n                        float yCoord = y * frequency;\r\n                        height += Mathf.PerlinNoise(xCoord, yCoord) * amplitude;\r\n                        \r\n                        amplitude *= 0.5f;\r\n                        frequency *= 2f;\r\n                    }\r\n                    \r\n                    heightMap[x, y] = height;\r\n                }\r\n            }\r\n            \r\n            terrainData.SetHeights(0, 0, heightMap);\r\n            Debug.Log(\"生成分形噪声地形\");\r\n        }\r\n        \r\n        /// <summary>\r\n        /// 生成Voronoi噪声地形\r\n        /// </summary>\r\n        public void GenerateVoronoiNoise()\r\n        {\r\n            if (terrainData == null) return;\r\n            \r\n            int resolution = terrainData.heightmapResolution;\r\n            heightMap = new float[resolution, resolution];\r\n            \r\n            Vector2[] points = new Vector2[10];\r\n            for (int i = 0; i < points.Length; i++)\r\n            {\r\n                points[i] = new Vector2(Random.Range(0f, 1f), Random.Range(0f, 1f));\r\n            }\r\n            \r\n            for (int x = 0; x < resolution; x++)\r\n            {\r\n                for (int y = 0; y < resolution; y++)\r\n                {\r\n                    float minDistance = float.MaxValue;\r\n                    Vector2 currentPoint = new Vector2((float)x / resolution, (float)y / resolution);\r\n                    \r\n                    foreach (Vector2 point in points)\r\n                    {\r\n                        float distance = Vector2.Distance(currentPoint, point);\r\n                        minDistance = Mathf.Min(minDistance, distance);\r\n                    }\r\n                    \r\n                    heightMap[x, y] = minDistance * noiseAmplitude;\r\n                }\r\n            }\r\n            \r\n            terrainData.SetHeights(0, 0, heightMap);\r\n            Debug.Log(\"生成Voronoi噪声地形\");\r\n        }\r\n        \r\n        /// <summary>\r\n        /// 平滑地形\r\n        /// </summary>\r\n        public void SmoothTerrain()\r\n        {\r\n            if (terrainData == null) return;\r\n            \r\n            int resolution = terrainData.heightmapResolution;\r\n            float[,] smoothedHeights = new float[resolution, resolution];\r\n            \r\n            for (int x = 1; x < resolution - 1; x++)\r\n            {\r\n                for (int y = 1; y < resolution - 1; y++)\r\n                {\r\n                    float sum = 0f;\r\n                    int count = 0;\r\n                    \r\n                    // 3x3 平滑\r\n                    for (int dx = -1; dx <= 1; dx++)\r\n                    {\r\n                        for (int dy = -1; dy <= 1; dy++)\r\n                        {\r\n                            sum += heightMap[x + dx, y + dy];\r\n                            count++;\r\n                        }\r\n                    }\r\n                    \r\n                    smoothedHeights[x, y] = sum / count;\r\n                }\r\n            }\r\n            \r\n            heightMap = smoothedHeights;\r\n            terrainData.SetHeights(0, 0, heightMap);\r\n            Debug.Log(\"地形已平滑\");\r\n        }\r\n        \r\n        /// <summary>\r\n        /// 应用高度修改\r\n        /// </summary>\r\n        public void ApplyHeightModification(Vector3 worldPosition, float strength, float size)\r\n        {\r\n            if (terrainData == null) return;\r\n            \r\n            Vector3 terrainPosition = terrain.transform.position;\r\n            Vector3 localPosition = worldPosition - terrainPosition;\r\n            \r\n            int x = Mathf.RoundToInt((localPosition.x / terrainData.size.x) * terrainData.heightmapResolution);\r\n            int z = Mathf.RoundToInt((localPosition.z / terrainData.size.z) * terrainData.heightmapResolution);\r\n            \r\n            int brushRadius = Mathf.RoundToInt(size);\r\n            \r\n            for (int dx = -brushRadius; dx <= brushRadius; dx++)\r\n            {\r\n                for (int dz = -brushRadius; dz <= brushRadius; dz++)\r\n                {\r\n                    int sampleX = x + dx;\r\n                    int sampleZ = z + dz;\r\n                    \r\n                    if (sampleX >= 0 && sampleX < terrainData.heightmapResolution &&\r\n                        sampleZ >= 0 && sampleZ < terrainData.heightmapResolution)\r\n                    {\r\n                        float distance = Mathf.Sqrt(dx * dx + dz * dz);\r\n                        if (distance <= brushRadius)\r\n                        {\r\n                            float falloff = 1f - (distance / brushRadius);\r\n                            float modification = strength * falloff;\r\n                            \r\n                            heightMap[sampleX, sampleZ] += modification;\r\n                            heightMap[sampleX, sampleZ] = Mathf.Clamp01(heightMap[sampleX, sampleZ]);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            \r\n            terrainData.SetHeights(0, 0, heightMap);\r\n        }\r\n        \r\n        /// <summary>\r\n        /// 添加地形层\r\n        /// </summary>\r\n        public void AddTerrainLayer(TerrainLayer layer)\r\n        {\r\n            if (terrainData != null && layer != null)\r\n            {\r\n                TerrainLayer[] layers = terrainData.terrainLayers;\r\n                System.Array.Resize(ref layers, layers.Length + 1);\r\n                layers[layers.Length - 1] = layer;\r\n                terrainData.terrainLayers = layers;\r\n                \r\n                Debug.Log($\"添加地形层: {layer.name}\");\r\n            }\r\n        }\r\n        \r\n        /// <summary>\r\n        /// 移除地形层\r\n        /// </summary>\r\n        public void RemoveTerrainLayer(int index)\r\n        {\r\n            if (terrainData != null && index >= 0 && index < terrainData.terrainLayers.Length)\r\n            {\r\n                TerrainLayer[] layers = terrainData.terrainLayers;\r\n                for (int i = index; i < layers.Length - 1; i++)\r\n                {\r\n                    layers[i] = layers[i + 1];\r\n                }\r\n                System.Array.Resize(ref layers, layers.Length - 1);\r\n                terrainData.terrainLayers = layers;\r\n                \r\n                Debug.Log($\"移除地形层: {index}\");\r\n            }\r\n        }\r\n        \r\n        /// <summary>\r\n        /// 获取地形高度\r\n        /// </summary>\r\n        public float GetTerrainHeight(Vector3 worldPosition)\r\n        {\r\n            if (terrain != null)\r\n            {\r\n                return terrain.SampleHeight(worldPosition);\r\n            }\r\n            return 0f;\r\n        }\r\n        \r\n        /// <summary>\r\n        /// 设置地形高度\r\n        /// </summary>\r\n        public void SetTerrainHeight(Vector3 worldPosition, float height)\r\n        {\r\n            if (terrainData == null) return;\r\n            \r\n            Vector3 terrainPosition = terrain.transform.position;\r\n            Vector3 localPosition = worldPosition - terrainPosition;\r\n            \r\n            int x = Mathf.RoundToInt((localPosition.x / terrainData.size.x) * terrainData.heightmapResolution);\r\n            int z = Mathf.RoundToInt((localPosition.z / terrainData.size.z) * terrainData.heightmapResolution);\r\n            \r\n            if (x >= 0 && x < terrainData.heightmapResolution &&\r\n                z >= 0 && z < terrainData.heightmapResolution)\r\n            {\r\n                heightMap[x, z] = Mathf.Clamp01(height / maxHeight);\r\n                terrainData.SetHeights(0, 0, heightMap);\r\n            }\r\n        }\r\n        \r\n        /// <summary>\r\n        /// 重置地形\r\n        /// </summary>\r\n        public void ResetTerrain()\r\n        {\r\n            if (terrainData != null)\r\n            {\r\n                int resolution = terrainData.heightmapResolution;\r\n                heightMap = new float[resolution, resolution];\r\n                terrainData.SetHeights(0, 0, heightMap);\r\n                Debug.Log(\"地形已重置\");\r\n            }\r\n        }\r\n        \r\n        /// <summary>\r\n        /// 导出高度图\r\n        /// </summary>\r\n        public void ExportHeightmap()\r\n        {\r\n            if (terrainData == null) return;\r\n            \r\n            int resolution = terrainData.heightmapResolution;\r\n            Texture2D heightmapTexture = new Texture2D(resolution, resolution, TextureFormat.RFloat, false);\r\n            \r\n            for (int x = 0; x < resolution; x++)\r\n            {\r\n                for (int y = 0; y < resolution; y++)\r\n                {\r\n                    float height = heightMap[x, y];\r\n                    heightmapTexture.SetPixel(x, y, new Color(height, height, height, 1f));\r\n                }\r\n            }\r\n            \r\n            heightmapTexture.Apply();\r\n            \r\n            byte[] bytes = heightmapTexture.EncodeToPNG();\r\n            string filename = $\"Heightmap_{System.DateTime.Now:yyyyMMdd_HHmmss}.png\";\r\n            System.IO.File.WriteAllBytes(Application.persistentDataPath + \"/\" + filename, bytes);\r\n            \r\n            Debug.Log($\"高度图已导出: {filename}\");\r\n            DestroyImmediate(heightmapTexture);\r\n        }\r\n        \r\n        /// <summary>\r\n        /// 获取地形信息\r\n        /// </summary>\r\n        public void GetTerrainInfo()\r\n        {\r\n            if (terrainData != null)\r\n            {\r\n                Debug.Log(\"=== 地形信息 ===\");\r\n                Debug.Log($\"尺寸: {terrainData.size}\");\r\n                Debug.Log($\"高度图分辨率: {terrainData.heightmapResolution}\");\r\n                Debug.Log($\"地形层数量: {terrainData.terrainLayers.Length}\");\r\n                Debug.Log($\"最大高度: {maxHeight}\");\r\n                Debug.Log($\"地形缩放: {terrainScale}\");\r\n            }\r\n        }\r\n        \r\n        private void Update()\r\n        {\r\n            HandleMouseInput();\r\n        }\r\n        \r\n        /// <summary>\r\n        /// 处理鼠标输入\r\n        /// </summary>\r\n        private void HandleMouseInput()\r\n        {\r\n            if (Camera.main == null || !isModifying) return;\r\n            \r\n            Ray ray = Camera.main.ScreenPointToRay(Input.mousePosition);\r\n            RaycastHit hit;\r\n            \r\n            if (Physics.Raycast(ray, out hit))\r\n            {\r\n                if (hit.collider.GetComponent<Terrain>() == terrain)\r\n                {\r\n                    brushPosition = hit.point;\r\n                    \r\n                    if (Input.GetMouseButton(0))\r\n                    {\r\n                        ApplyHeightModification(hit.point, brushStrength, brushSize);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        \r\n        private void OnGUI()\r\n        {\r\n            if (!showControls) return;\r\n            \r\n            GUILayout.BeginArea(new Rect(10, 10, 400, 700));\r\n            GUILayout.Label(\"UnityEngine.TerrainUtils 地形工具系统案例\", EditorStyles.boldLabel);\r\n            \r\n            GUILayout.Space(10);\r\n            \r\n            // 地形创建\r\n            GUILayout.Label(\"地形创建\", EditorStyles.boldLabel);\r\n            if (GUILayout.Button(\"创建地形\"))\r\n            {\r\n                CreateTerrain();\r\n            }\r\n            \r\n            GUILayout.Space(10);\r\n            \r\n            // 地形生成\r\n            GUILayout.Label(\"地形生成\", EditorStyles.boldLabel);\r\n            GUILayout.BeginHorizontal();\r\n            if (GUILayout.Button(\"Perlin噪声\")) GeneratePerlinNoise();\r\n            if (GUILayout.Button(\"分形噪声\")) GenerateFractalNoise();\r\n            GUILayout.EndHorizontal();\r\n            \r\n            if (GUILayout.Button(\"Voronoi噪声\"))\r\n            {\r\n                GenerateVoronoiNoise();\r\n            }\r\n            \r\n            if (GUILayout.Button(\"平滑地形\"))\r\n            {\r\n                SmoothTerrain();\r\n            }\r\n            \r\n            if (GUILayout.Button(\"重置地形\"))\r\n            {\r\n                ResetTerrain();\r\n            }\r\n            \r\n            GUILayout.Space(10);\r\n            \r\n            // 地形修改\r\n            GUILayout.Label(\"地形修改\", EditorStyles.boldLabel);\r\n            isModifying = GUILayout.Toggle(isModifying, \"启用地形修改\");\r\n            \r\n            float newBrushSize = GUILayout.HorizontalSlider(brushSize, 1f, 50f);\r\n            if (Mathf.Abs(newBrushSize - brushSize) > 0.1f)\r\n            {\r\n                brushSize = newBrushSize;\r\n            }\r\n            GUILayout.Label($\"画笔大小: {brushSize:F1}\");\r\n            \r\n            float newBrushStrength = GUILayout.HorizontalSlider(brushStrength, 0.01f, 1f);\r\n            if (Mathf.Abs(newBrushStrength - brushStrength) > 0.01f)\r\n            {\r\n                brushStrength = newBrushStrength;\r\n            }\r\n            GUILayout.Label($\"画笔强度: {brushStrength:F2}\");\r\n            \r\n            GUILayout.Space(10);\r\n            \r\n            // 地形设置\r\n            GUILayout.Label(\"地形设置\", EditorStyles.boldLabel);\r\n            \r\n            Vector3Int newTerrainSize = new Vector3Int(terrainWidth, terrainHeight, terrainLength);\r\n            newTerrainSize.x = (int)GUILayout.HorizontalSlider(newTerrainSize.x, 129, 1025);\r\n            newTerrainSize.y = (int)GUILayout.HorizontalSlider(newTerrainSize.y, 129, 1025);\r\n            newTerrainSize.z = (int)GUILayout.HorizontalSlider(newTerrainSize.z, 129, 1025);\r\n            GUILayout.Label($\"地形尺寸: {newTerrainSize.x} x {newTerrainSize.y} x {newTerrainSize.z}\");\r\n            \r\n            if (newTerrainSize != new Vector3Int(terrainWidth, terrainHeight, terrainLength))\r\n            {\r\n                terrainWidth = newTerrainSize.x;\r\n                terrainHeight = newTerrainSize.y;\r\n                terrainLength = newTerrainSize.z;\r\n            }\r\n            \r\n            float newMaxHeight = GUILayout.HorizontalSlider(maxHeight, 10f, 1000f);\r\n            if (Mathf.Abs(newMaxHeight - maxHeight) > 1f)\r\n            {\r\n                maxHeight = newMaxHeight;\r\n            }\r\n            GUILayout.Label($\"最大高度: {maxHeight:F1}\");\r\n            \r\n            float newNoiseScale = GUILayout.HorizontalSlider(noiseScale, 0.001f, 0.1f);\r\n            if (Mathf.Abs(newNoiseScale - noiseScale) > 0.001f)\r\n            {\r\n                noiseScale = newNoiseScale;\r\n            }\r\n            GUILayout.Label($\"噪声缩放: {noiseScale:F3}\");\r\n            \r\n            float newNoiseAmplitude = GUILayout.HorizontalSlider(noiseAmplitude, 0.1f, 2f);\r\n            if (Mathf.Abs(newNoiseAmplitude - noiseAmplitude) > 0.01f)\r\n            {\r\n                noiseAmplitude = newNoiseAmplitude;\r\n            }\r\n            GUILayout.Label($\"噪声幅度: {noiseAmplitude:F2}\");\r\n            \r\n            int newOctaves = (int)GUILayout.HorizontalSlider(noiseOctaves, 1, 8);\r\n            if (newOctaves != noiseOctaves)\r\n            {\r\n                noiseOctaves = newOctaves;\r\n            }\r\n            GUILayout.Label($\"噪声八度: {noiseOctaves}\");\r\n            \r\n            GUILayout.Space(10);\r\n            \r\n            // 功能按钮\r\n            GUILayout.Label(\"功能\", EditorStyles.boldLabel);\r\n            if (GUILayout.Button(\"导出高度图\"))\r\n            {\r\n                ExportHeightmap();\r\n            }\r\n            \r\n            if (GUILayout.Button(\"获取地形信息\"))\r\n            {\r\n                GetTerrainInfo();\r\n            }\r\n            \r\n            GUILayout.Space(10);\r\n            \r\n            // 信息显示\r\n            GUILayout.Label(\"信息\", EditorStyles.boldLabel);\r\n            GUILayout.Label($\"画笔位置: {brushPosition}\");\r\n            GUILayout.Label($\"修改模式: {(isModifying ? \"开启\" : \"关闭\")}\");\r\n            \r\n            if (terrainData != null)\r\n            {\r\n                GUILayout.Label($\"地形层数量: {terrainData.terrainLayers.Length}\");\r\n            }\r\n            \r\n            GUILayout.Space(10);\r\n            \r\n            // 操作提示\r\n            GUILayout.Label(\"操作提示\", EditorStyles.boldLabel);\r\n            GUILayout.Label(\"启用地形修改后，按住鼠标左键\");\r\n            GUILayout.Label(\"在地形上拖拽即可修改地形高度\");\r\n            \r\n            GUILayout.EndArea();\r\n        }\r\n        \r\n        private void OnDrawGizmos()\r\n        {\r\n            if (isModifying)\r\n            {\r\n                Gizmos.color = Color.yellow;\r\n                Gizmos.DrawWireSphere(brushPosition, brushSize);\r\n            }\r\n        }\r\n    }\r\n} "
        }
    ]
}