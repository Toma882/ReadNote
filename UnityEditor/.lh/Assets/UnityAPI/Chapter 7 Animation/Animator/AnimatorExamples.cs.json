{
    "sourceFile": "Assets/UnityAPI/Chapter 7 Animation/Animator/AnimatorExamples.cs",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1750928729446,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1750928729446,
            "name": "Commit-0",
            "content": "using UnityEngine;\r\nusing System.Collections;\r\nusing System.Collections.Generic;\r\n\r\n/// <summary>\r\n/// Animator API使用案例\r\n/// 演示动画控制器的各种功能\r\n/// </summary>\r\npublic class AnimatorExamples : MonoBehaviour\r\n{\r\n    [Header(\"动画控制器\")]\r\n    [SerializeField] private Animator targetAnimator;\r\n    [SerializeField] private RuntimeAnimatorController animatorController;\r\n    [SerializeField] private Avatar avatar;\r\n    \r\n    [Header(\"动画参数\")]\r\n    [SerializeField] private string speedParameter = \"Speed\";\r\n    [SerializeField] private string jumpParameter = \"Jump\";\r\n    [SerializeField] private string attackParameter = \"Attack\";\r\n    [SerializeField] private string isGroundedParameter = \"IsGrounded\";\r\n    [SerializeField] private string healthParameter = \"Health\";\r\n    \r\n    [Header(\"动画层\")]\r\n    [SerializeField] private int baseLayerIndex = 0;\r\n    [SerializeField] private int upperBodyLayerIndex = 1;\r\n    [SerializeField] private float layerWeight = 1f;\r\n    [SerializeField] private AvatarMask upperBodyMask;\r\n    \r\n    [Header(\"动画状态\")]\r\n    [SerializeField] private string idleStateName = \"Idle\";\r\n    [SerializeField] private string walkStateName = \"Walk\";\r\n    [SerializeField] private string runStateName = \"Run\";\r\n    [SerializeField] private string jumpStateName = \"Jump\";\r\n    [SerializeField] private string attackStateName = \"Attack\";\r\n    \r\n    [Header(\"动画控制\")]\r\n    [SerializeField] private bool enableAnimations = true;\r\n    [SerializeField] private float animationSpeed = 1f;\r\n    [SerializeField] private bool updateMode = true;\r\n    [SerializeField] private bool cullingMode = true;\r\n    \r\n    [Header(\"IK设置\")]\r\n    [SerializeField] private bool enableIK = false;\r\n    [SerializeField] private Transform leftHandTarget;\r\n    [SerializeField] private Transform rightHandTarget;\r\n    [SerializeField] private Transform lookAtTarget;\r\n    [SerializeField] private float ikWeight = 1f;\r\n    \r\n    [Header(\"动画事件\")]\r\n    [SerializeField] private bool enableAnimationEvents = true;\r\n    [SerializeField] private string[] eventNames = { \"FootStep\", \"AttackHit\", \"JumpStart\" };\r\n    \r\n    private bool isInitialized = false;\r\n    private Dictionary<string, int> parameterHashes = new Dictionary<string, int>();\r\n    private Dictionary<string, int> stateHashes = new Dictionary<string, int>();\r\n    private float currentSpeed = 0f;\r\n    private bool isGrounded = true;\r\n    private float health = 100f;\r\n    \r\n    private void Start()\r\n    {\r\n        InitializeAnimator();\r\n        DemonstrateAnimatorBasics();\r\n        DemonstrateAnimatorParameters();\r\n        DemonstrateAnimatorLayers();\r\n        DemonstrateAnimatorStates();\r\n        DemonstrateAnimatorIK();\r\n        DemonstrateAnimationEvents();\r\n    }\r\n    \r\n    /// <summary>\r\n    /// 初始化动画控制器\r\n    /// </summary>\r\n    private void InitializeAnimator()\r\n    {\r\n        // 如果没有指定目标动画控制器，使用自身的\r\n        if (targetAnimator == null)\r\n        {\r\n            targetAnimator = GetComponent<Animator>();\r\n            \r\n            if (targetAnimator == null)\r\n            {\r\n                targetAnimator = gameObject.AddComponent<Animator>();\r\n            }\r\n        }\r\n        \r\n        // 设置动画控制器\r\n        if (animatorController != null)\r\n        {\r\n            targetAnimator.runtimeAnimatorController = animatorController;\r\n        }\r\n        \r\n        // 设置Avatar\r\n        if (avatar != null)\r\n        {\r\n            targetAnimator.avatar = avatar;\r\n        }\r\n        \r\n        // 配置动画控制器\r\n        ConfigureAnimator();\r\n        \r\n        // 初始化参数哈希\r\n        InitializeParameterHashes();\r\n        \r\n        // 初始化状态哈希\r\n        InitializeStateHashes();\r\n        \r\n        isInitialized = true;\r\n    }\r\n    \r\n    /// <summary>\r\n    /// 配置动画控制器\r\n    /// </summary>\r\n    private void ConfigureAnimator()\r\n    {\r\n        targetAnimator.enabled = enableAnimations;\r\n        targetAnimator.speed = animationSpeed;\r\n        targetAnimator.updateMode = updateMode ? AnimatorUpdateMode.Normal : AnimatorUpdateMode.UnscaledTime;\r\n        targetAnimator.cullingMode = cullingMode ? AnimatorCullingMode.CullUpdateTransforms : AnimatorCullingMode.AlwaysAnimate;\r\n        \r\n        // 设置层权重\r\n        if (targetAnimator.layerCount > upperBodyLayerIndex)\r\n        {\r\n            targetAnimator.SetLayerWeight(upperBodyLayerIndex, layerWeight);\r\n        }\r\n        \r\n        // 设置Avatar遮罩\r\n        if (upperBodyMask != null && targetAnimator.layerCount > upperBodyLayerIndex)\r\n        {\r\n            targetAnimator.SetLayerAvatarMask(upperBodyLayerIndex, upperBodyMask);\r\n        }\r\n    }\r\n    \r\n    /// <summary>\r\n    /// 初始化参数哈希\r\n    /// </summary>\r\n    private void InitializeParameterHashes()\r\n    {\r\n        parameterHashes[speedParameter] = Animator.StringToHash(speedParameter);\r\n        parameterHashes[jumpParameter] = Animator.StringToHash(jumpParameter);\r\n        parameterHashes[attackParameter] = Animator.StringToHash(attackParameter);\r\n        parameterHashes[isGroundedParameter] = Animator.StringToHash(isGroundedParameter);\r\n        parameterHashes[healthParameter] = Animator.StringToHash(healthParameter);\r\n    }\r\n    \r\n    /// <summary>\r\n    /// 初始化状态哈希\r\n    /// </summary>\r\n    private void InitializeStateHashes()\r\n    {\r\n        stateHashes[idleStateName] = Animator.StringToHash(idleStateName);\r\n        stateHashes[walkStateName] = Animator.StringToHash(walkStateName);\r\n        stateHashes[runStateName] = Animator.StringToHash(runStateName);\r\n        stateHashes[jumpStateName] = Animator.StringToHash(jumpStateName);\r\n        stateHashes[attackStateName] = Animator.StringToHash(attackStateName);\r\n    }\r\n    \r\n    /// <summary>\r\n    /// 演示动画控制器基础功能\r\n    /// </summary>\r\n    private void DemonstrateAnimatorBasics()\r\n    {\r\n        Debug.Log(\"=== Animator基础功能示例 ===\");\r\n        \r\n        // 1. 基础属性\r\n        Debug.Log($\"动画控制器名称: {targetAnimator.name}\");\r\n        Debug.Log($\"是否启用: {targetAnimator.enabled}\");\r\n        Debug.Log($\"动画速度: {targetAnimator.speed}\");\r\n        Debug.Log($\"更新模式: {targetAnimator.updateMode}\");\r\n        Debug.Log($\"剔除模式: {targetAnimator.cullingMode}\");\r\n        \r\n        // 2. 动画控制器\r\n        if (targetAnimator.runtimeAnimatorController != null)\r\n        {\r\n            Debug.Log($\"动画控制器: {targetAnimator.runtimeAnimatorController.name}\");\r\n        }\r\n        else\r\n        {\r\n            Debug.Log(\"动画控制器: 无\");\r\n        }\r\n        \r\n        // 3. Avatar\r\n        if (targetAnimator.avatar != null)\r\n        {\r\n            Debug.Log($\"Avatar: {targetAnimator.avatar.name}\");\r\n        }\r\n        else\r\n        {\r\n            Debug.Log(\"Avatar: 无\");\r\n        }\r\n        \r\n        // 4. 层信息\r\n        Debug.Log($\"动画层数量: {targetAnimator.layerCount}\");\r\n        for (int i = 0; i < targetAnimator.layerCount; i++)\r\n        {\r\n            Debug.Log($\"层 {i}: {targetAnimator.GetLayerName(i)}\");\r\n        }\r\n        \r\n        // 5. 参数信息\r\n        AnimatorControllerParameter[] parameters = targetAnimator.parameters;\r\n        Debug.Log($\"参数数量: {parameters.Length}\");\r\n        foreach (AnimatorControllerParameter param in parameters)\r\n        {\r\n            Debug.Log($\"参数: {param.name} (类型: {param.type})\");\r\n        }\r\n        \r\n        // 6. 状态机信息\r\n        Debug.Log($\"根状态机: {targetAnimator.hasRootMotion}\");\r\n        Debug.Log($\"应用根运动: {targetAnimator.applyRootMotion}\");\r\n    }\r\n    \r\n    /// <summary>\r\n    /// 演示动画参数\r\n    /// </summary>\r\n    private void DemonstrateAnimatorParameters()\r\n    {\r\n        Debug.Log(\"=== Animator参数示例 ===\");\r\n        \r\n        // 1. 设置浮点参数\r\n        targetAnimator.SetFloat(speedParameter, currentSpeed);\r\n        Debug.Log($\"设置速度参数: {currentSpeed}\");\r\n        \r\n        // 2. 设置布尔参数\r\n        targetAnimator.SetBool(isGroundedParameter, isGrounded);\r\n        Debug.Log($\"设置着地参数: {isGrounded}\");\r\n        \r\n        // 3. 设置整数参数\r\n        targetAnimator.SetInteger(healthParameter, (int)health);\r\n        Debug.Log($\"设置生命值参数: {(int)health}\");\r\n        \r\n        // 4. 设置触发器参数\r\n        // targetAnimator.SetTrigger(jumpParameter);\r\n        // Debug.Log(\"设置跳跃触发器\");\r\n        \r\n        // 5. 获取参数值\r\n        float speed = targetAnimator.GetFloat(speedParameter);\r\n        bool grounded = targetAnimator.GetBool(isGroundedParameter);\r\n        int healthValue = targetAnimator.GetInteger(healthParameter);\r\n        \r\n        Debug.Log($\"当前速度: {speed}\");\r\n        Debug.Log($\"当前着地状态: {grounded}\");\r\n        Debug.Log($\"当前生命值: {healthValue}\");\r\n        \r\n        // 6. 使用哈希值设置参数\r\n        int speedHash = parameterHashes[speedParameter];\r\n        targetAnimator.SetFloat(speedHash, currentSpeed);\r\n        Debug.Log($\"使用哈希值设置速度参数: {currentSpeed}\");\r\n    }\r\n    \r\n    /// <summary>\r\n    /// 演示动画层\r\n    /// </summary>\r\n    private void DemonstrateAnimatorLayers()\r\n    {\r\n        Debug.Log(\"=== Animator层示例 ===\");\r\n        \r\n        // 1. 层信息\r\n        for (int i = 0; i < targetAnimator.layerCount; i++)\r\n        {\r\n            string layerName = targetAnimator.GetLayerName(i);\r\n            float layerWeight = targetAnimator.GetLayerWeight(i);\r\n            bool layerEnabled = targetAnimator.GetLayerWeight(i) > 0f;\r\n            \r\n            Debug.Log($\"层 {i} ({layerName}): 权重={layerWeight}, 启用={layerEnabled}\");\r\n        }\r\n        \r\n        // 2. 设置层权重\r\n        if (targetAnimator.layerCount > upperBodyLayerIndex)\r\n        {\r\n            targetAnimator.SetLayerWeight(upperBodyLayerIndex, layerWeight);\r\n            Debug.Log($\"设置上层身体层权重: {layerWeight}\");\r\n        }\r\n        \r\n        // 3. 获取层权重\r\n        if (targetAnimator.layerCount > upperBodyLayerIndex)\r\n        {\r\n            float weight = targetAnimator.GetLayerWeight(upperBodyLayerIndex);\r\n            Debug.Log($\"上层身体层权重: {weight}\");\r\n        }\r\n        \r\n        // 4. 设置层Avatar遮罩\r\n        if (upperBodyMask != null && targetAnimator.layerCount > upperBodyLayerIndex)\r\n        {\r\n            targetAnimator.SetLayerAvatarMask(upperBodyLayerIndex, upperBodyMask);\r\n            Debug.Log($\"设置上层身体层Avatar遮罩: {upperBodyMask.name}\");\r\n        }\r\n        \r\n        // 5. 获取层Avatar遮罩\r\n        if (targetAnimator.layerCount > upperBodyLayerIndex)\r\n        {\r\n            AvatarMask mask = targetAnimator.GetLayerAvatarMask(upperBodyLayerIndex);\r\n            if (mask != null)\r\n            {\r\n                Debug.Log($\"上层身体层Avatar遮罩: {mask.name}\");\r\n            }\r\n        }\r\n    }\r\n    \r\n    /// <summary>\r\n    /// 演示动画状态\r\n    /// </summary>\r\n    private void DemonstrateAnimatorStates()\r\n    {\r\n        Debug.Log(\"=== Animator状态示例 ===\");\r\n        \r\n        // 1. 当前状态信息\r\n        AnimatorStateInfo currentState = targetAnimator.GetCurrentAnimatorStateInfo(baseLayerIndex);\r\n        Debug.Log($\"当前状态: {currentState.fullPathHash}\");\r\n        Debug.Log($\"状态名称哈希: {currentState.shortNameHash}\");\r\n        Debug.Log($\"状态标签哈希: {currentState.tagHash}\");\r\n        Debug.Log($\"状态长度: {currentState.length}\");\r\n        Debug.Log($\"状态标准化时间: {currentState.normalizedTime}\");\r\n        Debug.Log($\"状态循环次数: {currentState.loop}\");\r\n        \r\n        // 2. 检查状态\r\n        bool isIdle = currentState.IsName(idleStateName);\r\n        bool isWalking = currentState.IsName(walkStateName);\r\n        bool isRunning = currentState.IsName(runStateName);\r\n        \r\n        Debug.Log($\"是否空闲: {isIdle}\");\r\n        Debug.Log($\"是否行走: {isWalking}\");\r\n        Debug.Log($\"是否奔跑: {isRunning}\");\r\n        \r\n        // 3. 检查标签\r\n        bool hasTag = currentState.IsTag(\"Movement\");\r\n        Debug.Log($\"是否有Movement标签: {hasTag}\");\r\n        \r\n        // 4. 下一状态信息\r\n        AnimatorStateInfo nextState = targetAnimator.GetNextAnimatorStateInfo(baseLayerIndex);\r\n        if (nextState.fullPathHash != 0)\r\n        {\r\n            Debug.Log($\"下一状态: {nextState.fullPathHash}\");\r\n        }\r\n        \r\n        // 5. 过渡信息\r\n        AnimatorTransitionInfo transitionInfo = targetAnimator.GetAnimatorTransitionInfo(baseLayerIndex);\r\n        if (transitionInfo.fullPathHash != 0)\r\n        {\r\n            Debug.Log($\"过渡状态: {transitionInfo.fullPathHash}\");\r\n            Debug.Log($\"过渡标准化时间: {transitionInfo.normalizedTime}\");\r\n        }\r\n        \r\n        // 6. 播放状态\r\n        // targetAnimator.Play(idleStateName, baseLayerIndex, 0f);\r\n        // Debug.Log($\"播放状态: {idleStateName}\");\r\n        \r\n        // 7. 交叉淡入\r\n        // targetAnimator.CrossFade(walkStateName, 0.5f, baseLayerIndex, 0f);\r\n        // Debug.Log($\"交叉淡入状态: {walkStateName}\");\r\n    }\r\n    \r\n    /// <summary>\r\n    /// 演示动画IK\r\n    /// </summary>\r\n    private void DemonstrateAnimatorIK()\r\n    {\r\n        Debug.Log(\"=== Animator IK示例 ===\");\r\n        \r\n        if (enableIK)\r\n        {\r\n            // 1. 设置手部IK\r\n            if (leftHandTarget != null)\r\n            {\r\n                targetAnimator.SetIKPosition(AvatarIKGoal.LeftHand, leftHandTarget.position);\r\n                targetAnimator.SetIKRotation(AvatarIKGoal.LeftHand, leftHandTarget.rotation);\r\n                targetAnimator.SetIKPositionWeight(AvatarIKGoal.LeftHand, ikWeight);\r\n                targetAnimator.SetIKRotationWeight(AvatarIKGoal.LeftHand, ikWeight);\r\n                Debug.Log(\"设置左手IK\");\r\n            }\r\n            \r\n            if (rightHandTarget != null)\r\n            {\r\n                targetAnimator.SetIKPosition(AvatarIKGoal.RightHand, rightHandTarget.position);\r\n                targetAnimator.SetIKRotation(AvatarIKGoal.RightHand, rightHandTarget.rotation);\r\n                targetAnimator.SetIKPositionWeight(AvatarIKGoal.RightHand, ikWeight);\r\n                targetAnimator.SetIKRotationWeight(AvatarIKGoal.RightHand, ikWeight);\r\n                Debug.Log(\"设置右手IK\");\r\n            }\r\n            \r\n            // 2. 设置脚部IK\r\n            targetAnimator.SetIKPositionWeight(AvatarIKGoal.LeftFoot, ikWeight);\r\n            targetAnimator.SetIKRotationWeight(AvatarIKGoal.LeftFoot, ikWeight);\r\n            targetAnimator.SetIKPositionWeight(AvatarIKGoal.RightFoot, ikWeight);\r\n            targetAnimator.SetIKRotationWeight(AvatarIKGoal.RightFoot, ikWeight);\r\n            \r\n            // 3. 设置LookAt\r\n            if (lookAtTarget != null)\r\n            {\r\n                targetAnimator.SetLookAtPosition(lookAtTarget.position);\r\n                targetAnimator.SetLookAtWeight(ikWeight);\r\n                Debug.Log(\"设置LookAt目标\");\r\n            }\r\n        }\r\n    }\r\n    \r\n    /// <summary>\r\n    /// 演示动画事件\r\n    /// </summary>\r\n    private void DemonstrateAnimationEvents()\r\n    {\r\n        Debug.Log(\"=== Animator动画事件示例 ===\");\r\n        \r\n        if (enableAnimationEvents)\r\n        {\r\n            // 1. 注册动画事件回调\r\n            targetAnimator.SetBool(\"EnableEvents\", true);\r\n            Debug.Log(\"启用动画事件\");\r\n            \r\n            // 2. 播放特定动画\r\n            // targetAnimator.Play(\"Attack\", baseLayerIndex, 0f);\r\n            // Debug.Log(\"播放攻击动画\");\r\n        }\r\n    }\r\n    \r\n    /// <summary>\r\n    /// 动画事件回调 - 脚步声\r\n    /// </summary>\r\n    public void OnFootStep()\r\n    {\r\n        if (enableAnimationEvents)\r\n        {\r\n            Debug.Log(\"播放脚步声\");\r\n            // 这里可以播放音效\r\n        }\r\n    }\r\n    \r\n    /// <summary>\r\n    /// 动画事件回调 - 攻击命中\r\n    /// </summary>\r\n    public void OnAttackHit()\r\n    {\r\n        if (enableAnimationEvents)\r\n        {\r\n            Debug.Log(\"攻击命中\");\r\n            // 这里可以处理攻击逻辑\r\n        }\r\n    }\r\n    \r\n    /// <summary>\r\n    /// 动画事件回调 - 跳跃开始\r\n    /// </summary>\r\n    public void OnJumpStart()\r\n    {\r\n        if (enableAnimationEvents)\r\n        {\r\n            Debug.Log(\"跳跃开始\");\r\n            // 这里可以播放跳跃音效\r\n        }\r\n    }\r\n    \r\n    /// <summary>\r\n    /// 在Update中处理输入和更新\r\n    /// </summary>\r\n    private void Update()\r\n    {\r\n        if (!isInitialized) return;\r\n        \r\n        HandleInput();\r\n        UpdateAnimatorParameters();\r\n        UpdateAnimatorIK();\r\n    }\r\n    \r\n    /// <summary>\r\n    /// 处理输入\r\n    /// </summary>\r\n    private void HandleInput()\r\n    {\r\n        // WASD控制移动\r\n        float horizontal = Input.GetAxis(\"Horizontal\");\r\n        float vertical = Input.GetAxis(\"Vertical\");\r\n        \r\n        Vector3 movement = new Vector3(horizontal, 0f, vertical);\r\n        currentSpeed = movement.magnitude;\r\n        \r\n        // 空格键跳跃\r\n        if (Input.GetKeyDown(KeyCode.Space))\r\n        {\r\n            TriggerJump();\r\n        }\r\n        \r\n        // 鼠标左键攻击\r\n        if (Input.GetMouseButtonDown(0))\r\n        {\r\n            TriggerAttack();\r\n        }\r\n        \r\n        // 数字键切换状态\r\n        if (Input.GetKeyDown(KeyCode.Alpha1))\r\n        {\r\n            PlayState(idleStateName);\r\n        }\r\n        else if (Input.GetKeyDown(KeyCode.Alpha2))\r\n        {\r\n            PlayState(walkStateName);\r\n        }\r\n        else if (Input.GetKeyDown(KeyCode.Alpha3))\r\n        {\r\n            PlayState(runStateName);\r\n        }\r\n        else if (Input.GetKeyDown(KeyCode.Alpha4))\r\n        {\r\n            PlayState(jumpStateName);\r\n        }\r\n        else if (Input.GetKeyDown(KeyCode.Alpha5))\r\n        {\r\n            PlayState(attackStateName);\r\n        }\r\n        \r\n        // R键重置动画\r\n        if (Input.GetKeyDown(KeyCode.R))\r\n        {\r\n            ResetAnimator();\r\n        }\r\n        \r\n        // S键切换动画速度\r\n        if (Input.GetKeyDown(KeyCode.S))\r\n        {\r\n            ToggleAnimationSpeed();\r\n        }\r\n        \r\n        // I键切换IK\r\n        if (Input.GetKeyDown(KeyCode.I))\r\n        {\r\n            ToggleIK();\r\n        }\r\n        \r\n        // E键切换动画事件\r\n        if (Input.GetKeyDown(KeyCode.E))\r\n        {\r\n            ToggleAnimationEvents();\r\n        }\r\n    }\r\n    \r\n    /// <summary>\r\n    /// 更新动画参数\r\n    /// </summary>\r\n    private void UpdateAnimatorParameters()\r\n    {\r\n        // 更新速度参数\r\n        targetAnimator.SetFloat(speedParameter, currentSpeed);\r\n        \r\n        // 更新着地状态\r\n        targetAnimator.SetBool(isGroundedParameter, isGrounded);\r\n        \r\n        // 更新生命值\r\n        targetAnimator.SetInteger(healthParameter, (int)health);\r\n        \r\n        // 模拟着地状态变化\r\n        if (Input.GetKey(KeyCode.Space))\r\n        {\r\n            isGrounded = false;\r\n        }\r\n        else\r\n        {\r\n            isGrounded = true;\r\n        }\r\n    }\r\n    \r\n    /// <summary>\r\n    /// 更新动画IK\r\n    /// </summary>\r\n    private void UpdateAnimatorIK()\r\n    {\r\n        if (enableIK)\r\n        {\r\n            // 更新手部IK位置\r\n            if (leftHandTarget != null)\r\n            {\r\n                targetAnimator.SetIKPosition(AvatarIKGoal.LeftHand, leftHandTarget.position);\r\n                targetAnimator.SetIKRotation(AvatarIKGoal.LeftHand, leftHandTarget.rotation);\r\n            }\r\n            \r\n            if (rightHandTarget != null)\r\n            {\r\n                targetAnimator.SetIKPosition(AvatarIKGoal.RightHand, rightHandTarget.position);\r\n                targetAnimator.SetIKRotation(AvatarIKGoal.RightHand, rightHandTarget.rotation);\r\n            }\r\n            \r\n            // 更新LookAt\r\n            if (lookAtTarget != null)\r\n            {\r\n                targetAnimator.SetLookAtPosition(lookAtTarget.position);\r\n            }\r\n        }\r\n    }\r\n    \r\n    /// <summary>\r\n    /// 触发跳跃\r\n    /// </summary>\r\n    private void TriggerJump()\r\n    {\r\n        targetAnimator.SetTrigger(jumpParameter);\r\n        Debug.Log(\"触发跳跃动画\");\r\n    }\r\n    \r\n    /// <summary>\r\n    /// 触发攻击\r\n    /// </summary>\r\n    private void TriggerAttack()\r\n    {\r\n        targetAnimator.SetTrigger(attackParameter);\r\n        Debug.Log(\"触发攻击动画\");\r\n    }\r\n    \r\n    /// <summary>\r\n    /// 播放状态\r\n    /// </summary>\r\n    private void PlayState(string stateName)\r\n    {\r\n        if (stateHashes.ContainsKey(stateName))\r\n        {\r\n            targetAnimator.Play(stateName, baseLayerIndex, 0f);\r\n            Debug.Log($\"播放状态: {stateName}\");\r\n        }\r\n    }\r\n    \r\n    /// <summary>\r\n    /// 重置动画控制器\r\n    /// </summary>\r\n    private void ResetAnimator()\r\n    {\r\n        targetAnimator.Rebind();\r\n        targetAnimator.Update(0f);\r\n        Debug.Log(\"重置动画控制器\");\r\n    }\r\n    \r\n    /// <summary>\r\n    /// 切换动画速度\r\n    /// </summary>\r\n    private void ToggleAnimationSpeed()\r\n    {\r\n        if (targetAnimator.speed > 0f)\r\n        {\r\n            targetAnimator.speed = 0f;\r\n            Debug.Log(\"暂停动画\");\r\n        }\r\n        else\r\n        {\r\n            targetAnimator.speed = animationSpeed;\r\n            Debug.Log(\"恢复动画\");\r\n        }\r\n    }\r\n    \r\n    /// <summary>\r\n    /// 切换IK\r\n    /// </summary>\r\n    private void ToggleIK()\r\n    {\r\n        enableIK = !enableIK;\r\n        Debug.Log($\"IK: {(enableIK ? \"开启\" : \"关闭\")}\");\r\n    }\r\n    \r\n    /// <summary>\r\n    /// 切换动画事件\r\n    /// </summary>\r\n    private void ToggleAnimationEvents()\r\n    {\r\n        enableAnimationEvents = !enableAnimationEvents;\r\n        targetAnimator.SetBool(\"EnableEvents\", enableAnimationEvents);\r\n        Debug.Log($\"动画事件: {(enableAnimationEvents ? \"开启\" : \"关闭\")}\");\r\n    }\r\n    \r\n    /// <summary>\r\n    /// 获取动画信息\r\n    /// </summary>\r\n    public AnimatorInfo GetAnimatorInfo()\r\n    {\r\n        AnimatorStateInfo currentState = targetAnimator.GetCurrentAnimatorStateInfo(baseLayerIndex);\r\n        \r\n        return new AnimatorInfo\r\n        {\r\n            name = targetAnimator.name,\r\n            enabled = targetAnimator.enabled,\r\n            speed = targetAnimator.speed,\r\n            layerCount = targetAnimator.layerCount,\r\n            currentStateName = currentState.IsName(idleStateName) ? idleStateName : \"Unknown\",\r\n            normalizedTime = currentState.normalizedTime,\r\n            isGrounded = isGrounded,\r\n            health = health\r\n        };\r\n    }\r\n    \r\n    /// <summary>\r\n    /// 设置动画速度\r\n    /// </summary>\r\n    public void SetAnimationSpeed(float speed)\r\n    {\r\n        targetAnimator.speed = speed;\r\n    }\r\n    \r\n    /// <summary>\r\n    /// 设置IK权重\r\n    /// </summary>\r\n    public void SetIKWeight(float weight)\r\n    {\r\n        ikWeight = weight;\r\n    }\r\n    \r\n    /// <summary>\r\n    /// 在OnGUI中显示动画信息\r\n    /// </summary>\r\n    private void OnGUI()\r\n    {\r\n        if (!isInitialized) return;\r\n        \r\n        GUILayout.BeginArea(new Rect(10, 10, 400, 500));\r\n        \r\n        GUILayout.Label(\"Animator信息\", EditorStyles.boldLabel);\r\n        GUILayout.Space(5);\r\n        \r\n        // 基础信息\r\n        GUILayout.Label($\"动画控制器: {targetAnimator.name}\");\r\n        GUILayout.Label($\"是否启用: {targetAnimator.enabled}\");\r\n        GUILayout.Label($\"动画速度: {targetAnimator.speed:F2}\");\r\n        GUILayout.Label($\"层数量: {targetAnimator.layerCount}\");\r\n        \r\n        // 当前状态信息\r\n        AnimatorStateInfo currentState = targetAnimator.GetCurrentAnimatorStateInfo(baseLayerIndex);\r\n        GUILayout.Label($\"当前状态: {currentState.fullPathHash}\");\r\n        GUILayout.Label($\"标准化时间: {currentState.normalizedTime:F2}\");\r\n        GUILayout.Label($\"状态长度: {currentState.length:F2}\");\r\n        \r\n        GUILayout.Space(10);\r\n        \r\n        // 参数信息\r\n        GUILayout.Label(\"参数信息\", EditorStyles.boldLabel);\r\n        GUILayout.Label($\"速度: {currentSpeed:F2}\");\r\n        GUILayout.Label($\"着地状态: {isGrounded}\");\r\n        GUILayout.Label($\"生命值: {health:F0}\");\r\n        \r\n        GUILayout.Space(10);\r\n        \r\n        // 设置信息\r\n        GUILayout.Label(\"设置信息\", EditorStyles.boldLabel);\r\n        GUILayout.Label($\"IK: {(enableIK ? \"开启\" : \"关闭\")}\");\r\n        GUILayout.Label($\"动画事件: {(enableAnimationEvents ? \"开启\" : \"关闭\")}\");\r\n        GUILayout.Label($\"IK权重: {ikWeight:F2}\");\r\n        \r\n        GUILayout.Space(10);\r\n        \r\n        // 控制说明\r\n        GUILayout.Label(\"控制说明:\", EditorStyles.boldLabel);\r\n        GUILayout.Label(\"WASD - 移动\");\r\n        GUILayout.Label(\"空格 - 跳跃\");\r\n        GUILayout.Label(\"鼠标左键 - 攻击\");\r\n        GUILayout.Label(\"1-5 - 切换状态\");\r\n        GUILayout.Label(\"R - 重置\");\r\n        GUILayout.Label(\"S - 切换速度\");\r\n        GUILayout.Label(\"I - 切换IK\");\r\n        GUILayout.Label(\"E - 切换事件\");\r\n        \r\n        GUILayout.EndArea();\r\n    }\r\n    \r\n    /// <summary>\r\n    /// 动画信息结构\r\n    /// </summary>\r\n    [System.Serializable]\r\n    public struct AnimatorInfo\r\n    {\r\n        public string name;\r\n        public bool enabled;\r\n        public float speed;\r\n        public int layerCount;\r\n        public string currentStateName;\r\n        public float normalizedTime;\r\n        public bool isGrounded;\r\n        public float health;\r\n    }\r\n} "
        }
    ]
}