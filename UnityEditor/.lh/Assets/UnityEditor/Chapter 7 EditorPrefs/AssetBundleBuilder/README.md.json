{
    "sourceFile": "Assets/UnityEditor/Chapter 7 EditorPrefs/AssetBundleBuilder/README.md",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 1,
            "patches": [
                {
                    "date": 1746900012402,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1746900160386,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -245,5 +245,5 @@\n ## 相关资源\r\n - [Unity文档: AssetBundle](https://docs.unity3d.com/Manual/AssetBundlesIntro.html)\r\n - [Unity文档: BuildPipeline.BuildAssetBundles](https://docs.unity3d.com/ScriptReference/BuildPipeline.BuildAssetBundles.html)\r\n - [Unity文档: BuildAssetBundleOptions](https://docs.unity3d.com/ScriptReference/BuildAssetBundleOptions.html)\r\n-- [Unity文档: EditorWindow](https://docs.unity3d.com/ScriptReference/EditorWindow.html)\n\\ No newline at end of file\n+- [Unity文档: EditorWindow](https://docs.unity3d.com/ScriptReference/EditorWindow.html)\r\n"
                }
            ],
            "date": 1746900012402,
            "name": "Commit-0",
            "content": "# AssetBundleBuilder 模块\r\n\r\n## 概述\r\nAssetBundleBuilder 模块提供了一个功能完善的AssetBundle构建工具，通过可视化界面让开发者配置和执行AssetBundle打包过程。该工具支持多种构建选项，如目标平台选择、压缩方式设置、输出路径配置等，并提供了丰富的构建选项控制，使开发者能够根据项目需求灵活定制AssetBundle的构建过程。此外，该工具还支持将构建设置持久化保存，以便在不同的编辑器会话中复用相同的构建配置。\r\n\r\n## 核心功能\r\n- **可视化构建界面**：提供直观的编辑器窗口配置AssetBundle构建参数\r\n- **多平台构建支持**：支持为不同目标平台构建AssetBundle\r\n- **多种压缩类型**：支持Uncompressed、LZMA和LZ4压缩格式\r\n- **丰富的构建选项**：提供多种构建选项以满足不同需求\r\n- **构建设置持久化**：自动保存构建设置，跨会话保持配置一致性\r\n- **构建结果处理**：支持将构建结果复制到StreamingAssets文件夹等功能\r\n\r\n## 重要接口和类\r\n\r\n### `AssetBundleBuilder` 类\r\n主要的编辑器窗口类，提供AssetBundle构建的界面和逻辑。\r\n\r\n| 方法 | 说明 |\r\n|------|------|\r\n| `Open()` | 打开AssetBundle构建窗口的静态方法 |\r\n| `OnGUI()` | 绘制编辑器窗口的GUI |\r\n| `BuildAssetBundle()` | 根据当前设置执行AssetBundle的构建 |\r\n| `CopyDirectory(string sourceDir, string destDir)` | 将构建结果从源目录复制到目标目录 |\r\n\r\n### `BuildTabData` 类\r\n存储AssetBundle构建设置的数据类，支持序列化。\r\n\r\n| 属性/字段 | 说明 |\r\n|---------|------|\r\n| `outputPath` | AssetBundle构建输出路径 |\r\n| `buildTarget` | 目标构建平台 |\r\n| `compressionType` | 压缩类型（无压缩、LZMA、LZ4） |\r\n| `copy2StreamingAssets` | 是否将构建结果复制到StreamingAssets文件夹 |\r\n| `disableWriteTypeTree` | 是否禁用类型树写入 |\r\n| `forceRebuildAssetBundle` | 是否强制重新构建所有AssetBundle |\r\n| `ignoreTypeTreeChanges` | 是否忽略类型树变化 |\r\n| `appendHashToAssetBundleName` | 是否为AssetBundle名称附加哈希 |\r\n| `strictMode` | 是否启用严格模式 |\r\n| `dryRunBuild` | 是否执行构建预演(不实际生成文件) |\r\n\r\n### `AssetInfo` 和 `AssetsInfo` 类\r\n用于在构建过程中保存和管理资源信息的辅助类。\r\n\r\n| 类/方法 | 说明 |\r\n|---------|------|\r\n| `AssetInfo` | 存储单个资源的路径和AssetBundle名称 |\r\n| `AssetsInfo` | 包含多个AssetInfo的集合类 |\r\n\r\n## UML类图\r\n\r\n```\r\n+--------------------+       +--------------------+\r\n| AssetBundleBuilder |------>|    BuildTabData    |\r\n+--------------------+       +--------------------+\r\n| -data: BuildTabData|       | +outputPath: string|\r\n| -scroll: Vector2   |       | +buildTarget       |\r\n| +Open()            |       | +compressionType   |\r\n| +OnGUI()           |       | +copy2StreamingAssets|\r\n| +BuildAssetBundle()|       | +disableWriteTypeTree|\r\n| +CopyDirectory()   |       | +forceRebuildAssetBundle|\r\n+--------------------+       | +ignoreTypeTreeChanges|\r\n        |                    | +appendHashToAssetBundleName|\r\n        |                    | +strictMode        |\r\n        |                    | +dryRunBuild       |\r\n        |                    +--------------------+\r\n        |                       ^\r\n        |                       | 使用\r\n        v                       |\r\n+--------------------+       +--------------------+\r\n|     AssetsInfo     |<------|     AssetInfo      |\r\n+--------------------+       +--------------------+\r\n| +list: List<>      |       | +path: string      |\r\n| +AssetsInfo()      |       | +abName: string    |\r\n+--------------------+       | +AssetInfo()       |\r\n                            +--------------------+\r\n\r\n+--------------------+\r\n|    GUIContents     |\r\n+--------------------+\r\n| +copy2StreamingAssets|\r\n| +disableWriteTypeTree|\r\n| +forceRebuildAssetBundle|\r\n| +ignoreTypeTreeChanges|\r\n| +appendHash        |\r\n| +strictMode        |\r\n| +dryRunBuild       |\r\n+--------------------+\r\n```\r\n\r\n## 构建流程图\r\n\r\n```\r\n配置构建参数 --> 设置目标平台 --> 选择输出路径 --> 配置压缩类型 --> 设置构建选项 --> 点击\"Build\"按钮 --> 执行BuildAssetBundle() --> 生成资源映射表 --> 复制到StreamingAssets(可选)\r\n```\r\n\r\n## 思维导图\r\n\r\n```\r\nAssetBundleBuilder\r\n├── 界面组件\r\n│   ├── 构建设置\r\n│   │   ├── 目标平台选择\r\n│   │   ├── 输出路径配置\r\n│   │   └── 压缩方式选择\r\n│   ├── 构建选项\r\n│   │   ├── 复制到StreamingAssets\r\n│   │   ├── 禁用类型树写入\r\n│   │   ├── 强制重新构建\r\n│   │   ├── 忽略类型树变化\r\n│   │   ├── 添加哈希值\r\n│   │   ├── 严格模式\r\n│   │   └── 构建预演\r\n│   └── 操作按钮\r\n│       └── 构建按钮\r\n├── 数据管理\r\n│   ├── BuildTabData\r\n│   │   ├── 序列化保存\r\n│   │   └── 反序列化加载\r\n│   └── 资源信息\r\n│       ├── AssetInfo\r\n│       └── AssetsInfo\r\n├── 构建流程\r\n│   ├── 参数验证\r\n│   ├── 构建选项转换\r\n│   ├── AssetBundle构建\r\n│   ├── 资源映射表生成\r\n│   └── 构建后处理\r\n│       └── 复制到StreamingAssets\r\n└── 工具辅助功能\r\n    ├── 目录复制\r\n    ├── 配置保存\r\n    └── 界面提示\r\n```\r\n\r\n## 应用场景\r\n1. **游戏资源打包**：为游戏打包AssetBundle，实现资源分离和动态加载\r\n2. **多平台发布**：为不同目标平台构建优化的AssetBundle\r\n3. **热更新支持**：准备可热更新的资源包，支持游戏内容的动态更新\r\n4. **资源管理优化**：通过不同的构建选项优化资源加载性能和包体大小\r\n5. **自动化构建流程**：集成到CI/CD系统中，实现资源的自动化构建\r\n\r\n## 最佳实践\r\n1. **平台特定设置**：针对不同目标平台选择最合适的压缩方式\r\n   - 移动平台：推荐使用LZ4压缩，兼顾解压速度和包体大小\r\n   - PC平台：如果优先考虑加载速度，可使用Uncompressed；如果优先考虑包体大小，可使用LZMA\r\n\r\n2. **构建选项指南**：\r\n   - `forceRebuildAssetBundle`：在资源有重大变化时使用，确保完全重新构建\r\n   - `appendHashToAssetBundleName`：在实现热更新系统时使用，便于版本控制\r\n   - `ignoreTypeTreeChanges`：在开发阶段可启用，加快迭代速度；正式发布前应禁用\r\n\r\n3. **目录结构规划**：\r\n   - 为不同平台构建结果使用不同的输出目录\r\n   - 使用有意义的命名约定，便于识别和管理\r\n\r\n4. **资源映射管理**：\r\n   - 妥善保管和版本控制map.dat文件\r\n   - 确保资源加载系统能正确解析资源映射表\r\n\r\n5. **StreamingAssets使用**：\r\n   - 开发测试阶段，启用copy2StreamingAssets选项便于在编辑器中测试\r\n   - 发布前，根据实际部署策略决定是否需要此选项\r\n\r\n## 构建设置说明\r\n\r\n### 基本设置\r\n- **Build Target**：选择目标构建平台\r\n- **Output Path**：设置AssetBundle的输出路径\r\n- **Compression**：选择压缩类型\r\n  - `Uncompressed`：无压缩，文件较大但加载速度最快\r\n  - `LZMA`：高压缩率，文件最小但解压缩较慢\r\n  - `LZ4`：平衡的压缩率和解压缩速度，推荐用于大多数情况\r\n\r\n### 选项设置\r\n- **Copy to StreamingAssets**：构建完成后将AssetBundle复制到StreamingAssets文件夹\r\n- **Disable Write Type Tree**：禁用类型树信息写入，减小包体但牺牲兼容性\r\n- **Force Rebuild AssetBundle**：强制重新构建所有AssetBundle，忽略缓存\r\n- **Ignore Type Tree Changes**：忽略类型树变化，加快增量构建\r\n- **Append Hash To AssetBundle Name**：为AssetBundle名称附加内容哈希，便于版本控制\r\n- **Strict Mode**：启用严格模式，对资源引用进行严格检查\r\n- **Dry Run Build**：执行构建预演，不实际生成文件\r\n\r\n## 代码示例\r\n```csharp\r\n// 如何通过代码触发AssetBundle构建\r\nusing UnityEngine;\r\nusing UnityEditor;\r\nusing System.IO;\r\n\r\npublic class AssetBundleBuilderUtility\r\n{\r\n    [MenuItem(\"Tools/Build AssetBundles/Windows\")]\r\n    public static void BuildAssetBundlesForWindows()\r\n    {\r\n        // 设置输出路径\r\n        string outputPath = Path.Combine(Application.dataPath, \"../AssetBundles/Windows\");\r\n        \r\n        // 确保输出目录存在\r\n        if (!Directory.Exists(outputPath))\r\n        {\r\n            Directory.CreateDirectory(outputPath);\r\n        }\r\n        \r\n        // 构建AssetBundle\r\n        BuildPipeline.BuildAssetBundles(\r\n            outputPath,\r\n            BuildAssetBundleOptions.ChunkBasedCompression, // 使用LZ4压缩\r\n            BuildTarget.StandaloneWindows64\r\n        );\r\n        \r\n        Debug.Log(\"Windows AssetBundles built successfully: \" + outputPath);\r\n        \r\n        // 刷新资源数据库\r\n        AssetDatabase.Refresh();\r\n    }\r\n    \r\n    [MenuItem(\"Tools/Build AssetBundles/Android\")]\r\n    public static void BuildAssetBundlesForAndroid()\r\n    {\r\n        // 设置输出路径\r\n        string outputPath = Path.Combine(Application.dataPath, \"../AssetBundles/Android\");\r\n        \r\n        // 确保输出目录存在\r\n        if (!Directory.Exists(outputPath))\r\n        {\r\n            Directory.CreateDirectory(outputPath);\r\n        }\r\n        \r\n        // 构建AssetBundle\r\n        BuildPipeline.BuildAssetBundles(\r\n            outputPath,\r\n            BuildAssetBundleOptions.ChunkBasedCompression, // 使用LZ4压缩\r\n            BuildTarget.Android\r\n        );\r\n        \r\n        Debug.Log(\"Android AssetBundles built successfully: \" + outputPath);\r\n        \r\n        // 刷新资源数据库\r\n        AssetDatabase.Refresh();\r\n    }\r\n}\r\n```\r\n\r\n## 相关资源\r\n- [Unity文档: AssetBundle](https://docs.unity3d.com/Manual/AssetBundlesIntro.html)\r\n- [Unity文档: BuildPipeline.BuildAssetBundles](https://docs.unity3d.com/ScriptReference/BuildPipeline.BuildAssetBundles.html)\r\n- [Unity文档: BuildAssetBundleOptions](https://docs.unity3d.com/ScriptReference/BuildAssetBundleOptions.html)\r\n- [Unity文档: EditorWindow](https://docs.unity3d.com/ScriptReference/EditorWindow.html)"
        }
    ]
}