{
    "sourceFile": "Assets/UnityEditor/Chapter 7 EditorPrefs/AudioDatabase/README.md",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 1,
            "patches": [
                {
                    "date": 1746899971892,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1746900176389,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -172,5 +172,5 @@\n ## 相关资源\r\n - [Unity文档: ScriptableObject](https://docs.unity3d.com/ScriptReference/ScriptableObject.html)\r\n - [Unity文档: CustomEditor](https://docs.unity3d.com/ScriptReference/CustomEditor.html)\r\n - [Unity文档: AudioClip](https://docs.unity3d.com/ScriptReference/AudioClip.html)\r\n-- [Unity文档: AssetDatabase](https://docs.unity3d.com/ScriptReference/AssetDatabase.html)\n\\ No newline at end of file\n+- [Unity文档: AssetDatabase](https://docs.unity3d.com/ScriptReference/AssetDatabase.html)\r\n"
                }
            ],
            "date": 1746899971892,
            "name": "Commit-0",
            "content": "# AudioDatabase 模块\r\n\r\n## 概述\r\nAudioDatabase 模块提供了一套用于管理游戏音频资源的系统，通过分层的数据结构组织和管理音频剪辑，便于在游戏开发中对音频资源进行集中化管理、快速索引和实时编辑。该模块通过ScriptableObject实现数据持久化，并提供了丰富的编辑器扩展功能，支持音频试听、拖放操作和批量管理。\r\n\r\n## 核心功能\r\n- **分层音频资源管理**：通过组和数据两级结构管理音频资源\r\n- **编辑器集成**：提供自定义编辑器窗口，实现直观的音频资源管理\r\n- **实时音频预览**：在编辑器中直接预览音频资源\r\n- **索引式访问**：通过ID快速访问特定音频资源\r\n\r\n## 重要接口和类\r\n\r\n### `AudioDatabase` 类\r\n核心数据库类，继承自ScriptableObject，用于存储所有音频组的容器。\r\n\r\n| 属性/方法 | 说明 |\r\n|---------|------|\r\n| `groups` | 存储所有音频组的列表 |\r\n| `this[int id]` | 索引器，通过ID快速访问特定音频组 |\r\n\r\n### `AudioGroup` 类\r\n音频组类，继承自ScriptableObject，表示一组相关的音频资源。\r\n\r\n| 属性/方法 | 说明 |\r\n|---------|------|\r\n| `id` | 音频组的唯一标识符 |\r\n| `datas` | 存储该组中所有音频数据的列表 |\r\n| `this[int id]` | 索引器，通过ID快速访问组内的特定音频剪辑 |\r\n\r\n### `AudioData` 类\r\n音频数据类，表示单个音频资源的封装。\r\n\r\n| 属性/方法 | 说明 |\r\n|---------|------|\r\n| `id` | 音频数据的唯一标识符 |\r\n| `clip` | 音频剪辑资源引用 |\r\n\r\n### `AudioDatabaseEditor` 类\r\n自定义编辑器类，为AudioDatabase提供可视化编辑界面。\r\n\r\n| 方法 | 说明 |\r\n|-----|------|\r\n| `OnInspectorGUI()` | 绘制Inspector界面 |\r\n| `OnAudioGroupGUI()` | 绘制音频组界面 |\r\n| `OnAudioDataGUI()` | 绘制音频数据界面 |\r\n| `PlayAudio()` | 播放选中的音频 |\r\n| `StopAudio()` | 停止正在播放的音频 |\r\n\r\n## UML类图\r\n\r\n```\r\n+------------------+       +-------------------+       +-------------+\r\n|  AudioDatabase   |1-----*|    AudioGroup     |1-----*|  AudioData  |\r\n+------------------+       +-------------------+       +-------------+\r\n| +groups: List    |       | +id: int          |       | +id: int    |\r\n| +this[int]: Group|       | +datas: List      |       | +clip:Audio |\r\n+------------------+       | +this[int]: Clip  |       +-------------+\r\n         ^                 +-------------------+\r\n         |                          ^\r\n         |                          |\r\n+----------------------+   +------------------------+\r\n| AudioDatabaseEditor  |   |    ScriptableObject    |\r\n+----------------------+   +------------------------+\r\n| -database: Database  |   | +hideFlags            |\r\n| -players: Dictionary |   | +name                 |\r\n| +OnInspectorGUI()    |   +------------------------+\r\n| +OnAudioGroupGUI()   |             ^\r\n| +OnAudioDataGUI()    |             |\r\n| +PlayAudio()         |             |\r\n| +StopAudio()         |   +------------------+    +--------------+\r\n+----------------------+   |   AudioDatabase   |----| CustomEditor |\r\n                           +------------------+    +--------------+\r\n```\r\n\r\n## 音频管理系统架构图\r\n\r\n```\r\n+------------------------------------------+\r\n|            AudioDatabase资产文件            |\r\n+------------------------------------------+\r\n|                                          |\r\n|  +---------------+    +---------------+  |\r\n|  |  AudioGroup1  |    |  AudioGroup2  |  |\r\n|  +---------------+    +---------------+  |\r\n|  | ID: 100       |    | ID: 101       |  |\r\n|  |               |    |               |  |\r\n|  | +-----------+ |    | +-----------+ |  |\r\n|  | | AudioData1| |    | | AudioData1| |  |\r\n|  | | ID: 1000  | |    | | ID: 1000  | |  |\r\n|  | +-----------+ |    | +-----------+ |  |\r\n|  |               |    |               |  |\r\n|  | +-----------+ |    | +-----------+ |  |\r\n|  | | AudioData2| |    | | AudioData2| |  |\r\n|  | | ID: 1001  | |    | | ID: 1001  | |  |\r\n|  | +-----------+ |    | +-----------+ |  |\r\n|  +---------------+    +---------------+  |\r\n|                                          |\r\n+------------------------------------------+\r\n```\r\n\r\n## 思维导图\r\n\r\n```\r\nAudioDatabase模块\r\n├── 数据结构\r\n│   ├── AudioDatabase (ScriptableObject)\r\n│   │   └── 管理多个AudioGroup\r\n│   ├── AudioGroup (ScriptableObject)\r\n│   │   └── 管理多个AudioData\r\n│   └── AudioData (可序列化类)\r\n│       └── 封装单个AudioClip\r\n├── 编辑器扩展\r\n│   ├── AudioDatabaseEditor\r\n│   │   ├── 自定义Inspector界面\r\n│   │   ├── 拖放音频添加功能\r\n│   │   ├── 音频试听功能\r\n│   │   └── 批量管理功能\r\n│   └── 编辑器工具集成\r\n│       ├── Undo/Redo支持\r\n│       ├── 脏数据检测\r\n│       └── 资产保存\r\n└── 应用场景\r\n    ├── 游戏音频管理\r\n    ├── 多语言音频支持\r\n    ├── 音效组织与分类\r\n    └── 程序化音频访问\r\n```\r\n\r\n## 应用场景\r\n1. **游戏音频统一管理**：集中管理所有游戏音频资源，便于维护和更新\r\n2. **音频模块化**：通过分组实现音频的模块化管理，如UI音效、环境音效、角色音效等\r\n3. **运行时快速访问**：通过ID快速访问特定音频资源，无需字符串查找\r\n4. **本地化音频支持**：为不同语言环境提供不同的音频组，实现音频本地化\r\n\r\n## 最佳实践\r\n1. **合理的分组规划**：根据游戏需求和逻辑设计合理的音频分组\r\n2. **唯一ID管理**：确保每个音频组和音频数据的ID保持唯一，避免冲突\r\n3. **资源命名规范**：为音频资源制定清晰的命名规范，便于管理和查找\r\n4. **定期资源整理**：定期检查和清理未使用的音频资源，减小游戏包体\r\n5. **预加载策略**：设计合理的音频资源预加载策略，平衡内存占用和加载性能\r\n\r\n## 代码示例\r\n```csharp\r\n// 1. 通过AudioDatabase访问音频\r\npublic class AudioManager : MonoBehaviour\r\n{\r\n    public AudioDatabase database;\r\n    private AudioSource audioSource;\r\n    \r\n    private void Start()\r\n    {\r\n        audioSource = GetComponent<AudioSource>();\r\n    }\r\n    \r\n    // 通过组ID和音频ID播放特定音频\r\n    public void PlaySound(int groupId, int clipId)\r\n    {\r\n        AudioGroup group = database[groupId];\r\n        if (group != null)\r\n        {\r\n            AudioClip clip = group[clipId];\r\n            if (clip != null)\r\n            {\r\n                audioSource.PlayOneShot(clip);\r\n            }\r\n        }\r\n    }\r\n}\r\n```\r\n\r\n## 相关资源\r\n- [Unity文档: ScriptableObject](https://docs.unity3d.com/ScriptReference/ScriptableObject.html)\r\n- [Unity文档: CustomEditor](https://docs.unity3d.com/ScriptReference/CustomEditor.html)\r\n- [Unity文档: AudioClip](https://docs.unity3d.com/ScriptReference/AudioClip.html)\r\n- [Unity文档: AssetDatabase](https://docs.unity3d.com/ScriptReference/AssetDatabase.html)"
        }
    ]
}