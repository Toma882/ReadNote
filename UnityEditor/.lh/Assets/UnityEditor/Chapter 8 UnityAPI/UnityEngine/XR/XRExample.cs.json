{
    "sourceFile": "Assets/UnityEditor/Chapter 8 UnityAPI/UnityEngine/XR/XRExample.cs",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 1,
            "patches": [
                {
                    "date": 1750930098614,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1750933223119,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,9 +4,9 @@\n using System.Collections.Generic;\r\n \r\n /// <summary>\r\n /// UnityEngine.XR 命名空间案例演示\r\n-/// 展示扩展现实(XR)系统的核心功能\r\n+/// 展示XR设备检测、输入处理、空间定位等核心功能\r\n /// </summary>\r\n public class XRExample : MonoBehaviour\r\n {\r\n     [Header(\"XR设置\")]\r\n@@ -21,23 +21,38 @@\n     [SerializeField] private XRDisplaySubsystem xrDisplay;\r\n     [SerializeField] private XRInputSubsystem xrInput;\r\n     \r\n     [Header(\"XR设备信息\")]\r\n-    [SerializeField] private Vector3 headsetPosition = Vector3.zero;\r\n-    [SerializeField] private Quaternion headsetRotation = Quaternion.identity;\r\n-    [SerializeField] private Vector3 leftControllerPosition = Vector3.zero;\r\n-    [SerializeField] private Quaternion leftControllerRotation = Quaternion.identity;\r\n-    [SerializeField] private Vector3 rightControllerPosition = Vector3.zero;\r\n-    [SerializeField] private Quaternion rightControllerRotation = Quaternion.identity;\r\n+    [SerializeField] private bool isXRDevicePresent = false; //是否有XR设备\r\n+    [SerializeField] private string deviceName = \"\"; //设备名称\r\n+    [SerializeField] private string deviceModel = \"\"; //设备型号\r\n+    [SerializeField] private bool isActive = false; //设备是否激活\r\n     \r\n-    [Header(\"XR输入\")]\r\n-    [SerializeField] private bool leftTriggerPressed = false;\r\n-    [SerializeField] private bool rightTriggerPressed = false;\r\n-    [SerializeField] private bool leftGripPressed = false;\r\n-    [SerializeField] private bool rightGripPressed = false;\r\n-    [SerializeField] private Vector2 leftThumbstick = Vector2.zero;\r\n-    [SerializeField] private Vector2 rightThumbstick = Vector2.zero;\r\n+    [Header(\"控制器输入\")]\r\n+    [SerializeField] private Vector2 leftThumbstick = Vector2.zero; //左手摇杆\r\n+    [SerializeField] private Vector2 rightThumbstick = Vector2.zero; //右手摇杆\r\n+    [SerializeField] private bool leftTriggerPressed = false; //左手扳机\r\n+    [SerializeField] private bool rightTriggerPressed = false; //右手扳机\r\n+    [SerializeField] private bool leftGripPressed = false; //左手握把\r\n+    [SerializeField] private bool rightGripPressed = false; //右手握把\r\n     \r\n+    [Header(\"头部追踪\")]\r\n+    [SerializeField] private Vector3 headPosition = Vector3.zero; //头部位置\r\n+    [SerializeField] private Quaternion headRotation = Quaternion.identity; //头部旋转\r\n+    [SerializeField] private bool headTrackingActive = false; //头部追踪是否激活\r\n+    \r\n+    [Header(\"手部追踪\")]\r\n+    [SerializeField] private Vector3 leftHandPosition = Vector3.zero; //左手位置\r\n+    [SerializeField] private Quaternion leftHandRotation = Quaternion.identity; //左手旋转\r\n+    [SerializeField] private Vector3 rightHandPosition = Vector3.zero; //右手位置\r\n+    [SerializeField] private Quaternion rightHandRotation = Quaternion.identity; //右手旋转\r\n+    [SerializeField] private bool handTrackingActive = false; //手部追踪是否激活\r\n+    \r\n+    [Header(\"空间定位\")]\r\n+    [SerializeField] private bool trackingSpaceActive = false; //追踪空间是否激活\r\n+    [SerializeField] private Vector3 trackingOriginPosition = Vector3.zero; //追踪原点位置\r\n+    [SerializeField] private Quaternion trackingOriginRotation = Quaternion.identity; //追踪原点旋转\r\n+    \r\n     [Header(\"XR渲染\")]\r\n     [SerializeField] private float renderScale = 1.0f;\r\n     [SerializeField] private bool enableMSAA = true;\r\n     [SerializeField] private int msaaLevel = 4;\r\n@@ -48,8 +63,12 @@\n     private System.Action<bool> onXRStarted;\r\n     private System.Action<InputDevice> onDeviceConnected;\r\n     private System.Action<InputDevice> onDeviceDisconnected;\r\n     \r\n+    private InputDevice leftController;\r\n+    private InputDevice rightController;\r\n+    private InputDevice hmd;\r\n+    \r\n     private void Start()\r\n     {\r\n         InitializeXRSystem();\r\n     }\r\n@@ -64,14 +83,23 @@\n             Debug.Log(\"XR已禁用\");\r\n             return;\r\n         }\r\n         \r\n-        // 检查XR是否可用\r\n-        if (!XRSettings.isDeviceActive)\r\n+        // 检查XR设备\r\n+        isXRDevicePresent = XRSettings.isDeviceActive;\r\n+        deviceName = XRSettings.loadedDeviceName;\r\n+        deviceModel = XRSettings.loadedDeviceName;\r\n+        isActive = XRSettings.enabled;\r\n+\r\n+        if (isXRDevicePresent)\r\n         {\r\n-            Debug.Log(\"XR设备不可用\");\r\n-            return;\r\n+            Debug.Log(\"XR设备已检测到\");\r\n+            SetupInputDevices();\r\n         }\r\n+        else\r\n+        {\r\n+            Debug.Log(\"未检测到XR设备\");\r\n+        }\r\n         \r\n         // 初始化XR管理器\r\n         var xrManagerSettings = XRGeneralSettings.Instance.Manager;\r\n         if (xrManagerSettings == null)\r\n@@ -98,8 +126,41 @@\n         Debug.Log(\"XR系统初始化完成\");\r\n     }\r\n     \r\n     /// <summary>\r\n+    /// 设置输入设备\r\n+    /// </summary>\r\n+    private void SetupInputDevices()\r\n+    {\r\n+        // 获取HMD设备\r\n+        var hmdDevices = new List<InputDevice>();\r\n+        InputDevices.GetDevicesWithCharacteristics(InputDeviceCharacteristics.HeadMounted, hmdDevices);\r\n+        if (hmdDevices.Count > 0)\r\n+        {\r\n+            hmd = hmdDevices[0];\r\n+            Debug.Log($\"HMD设备: {hmd.name}\");\r\n+        }\r\n+\r\n+        // 获取左手控制器\r\n+        var leftHandDevices = new List<InputDevice>();\r\n+        InputDevices.GetDevicesWithCharacteristics(InputDeviceCharacteristics.Left | InputDeviceCharacteristics.Controller, leftHandDevices);\r\n+        if (leftHandDevices.Count > 0)\r\n+        {\r\n+            leftController = leftHandDevices[0];\r\n+            Debug.Log($\"左手控制器: {leftController.name}\");\r\n+        }\r\n+\r\n+        // 获取右手控制器\r\n+        var rightHandDevices = new List<InputDevice>();\r\n+        InputDevices.GetDevicesWithCharacteristics(InputDeviceCharacteristics.Right | InputDeviceCharacteristics.Controller, rightHandDevices);\r\n+        if (rightHandDevices.Count > 0)\r\n+        {\r\n+            rightController = rightHandDevices[0];\r\n+            Debug.Log($\"右手控制器: {rightController.name}\");\r\n+        }\r\n+    }\r\n+    \r\n+    /// <summary>\r\n     /// 启动XR\r\n     /// </summary>\r\n     public void StartXR()\r\n     {\r\n@@ -216,91 +277,200 @@\n     /// </summary>\r\n     public void GetXRDeviceInfo()\r\n     {\r\n         Debug.Log(\"=== XR设备信息 ===\");\r\n-        Debug.Log($\"XR启用: {enableXR}\");\r\n-        Debug.Log($\"XR运行中: {isXRRunning}\");\r\n-        Debug.Log($\"XR设备活跃: {XRSettings.isDeviceActive}\");\r\n-        Debug.Log($\"当前XR设备: {XRSettings.loadedDeviceName}\");\r\n-        Debug.Log($\"XR设备模型: {XRSettings.deviceModel}\");\r\n-        Debug.Log($\"渲染比例: {XRSettings.eyeTextureResolutionScale}\");\r\n-        Debug.Log($\"显示频率: {XRSettings.refreshRate}\");\r\n-        Debug.Log($\"立体渲染: {XRSettings.stereoRenderingMode}\");\r\n+        Debug.Log($\"XR设备存在: {isXRDevicePresent}\");\r\n+        Debug.Log($\"设备名称: {deviceName}\");\r\n+        Debug.Log($\"设备型号: {deviceModel}\");\r\n+        Debug.Log($\"XR已启用: {isActive}\");\r\n+        Debug.Log($\"当前设备: {XRSettings.loadedDeviceName}\");\r\n+        Debug.Log($\"支持设备: {string.Join(\", \", XRSettings.supportedDevices)}\");\r\n+        Debug.Log($\"渲染比例: {XRSettings.renderScale}\");\r\n+        Debug.Log($\"视场角: {XRSettings.fieldOfView}\");\r\n+        Debug.Log($\"眼睛纹理分辨率: {XRSettings.eyeTextureResolutionScale}\");\r\n+    }\r\n+    \r\n+    /// <summary>\r\n+    /// 获取输入设备信息\r\n+    /// </summary>\r\n+    public void GetInputDeviceInfo()\r\n+    {\r\n+        Debug.Log(\"=== 输入设备信息 ===\");\r\n         \r\n-        // 获取所有输入设备\r\n         var devices = new List<InputDevice>();\r\n         InputDevices.GetDevices(devices);\r\n         \r\n-        Debug.Log($\"输入设备数量: {devices.Count}\");\r\n         foreach (var device in devices)\r\n         {\r\n-            Debug.Log($\"  - {device.name} ({device.characteristics})\");\r\n+            Debug.Log($\"设备: {device.name} - {device.characteristics}\");\r\n         }\r\n     }\r\n     \r\n     /// <summary>\r\n-    /// 更新XR设备位置\r\n+    /// 获取控制器输入信息\r\n     /// </summary>\r\n-    private void UpdateXRDevicePositions()\r\n+    public void GetControllerInputInfo()\r\n     {\r\n-        // 更新头显位置\r\n-        var headset = InputDevices.GetDeviceAtXRNode(XRNode.Head);\r\n-        if (headset.isValid)\r\n+        Debug.Log(\"=== 控制器输入信息 ===\");\r\n+        Debug.Log($\"左手摇杆: {leftThumbstick}\");\r\n+        Debug.Log($\"右手摇杆: {rightThumbstick}\");\r\n+        Debug.Log($\"左手扳机: {leftTriggerPressed}\");\r\n+        Debug.Log($\"右手扳机: {rightTriggerPressed}\");\r\n+        Debug.Log($\"左手握把: {leftGripPressed}\");\r\n+        Debug.Log($\"右手握把: {rightGripPressed}\");\r\n+    }\r\n+    \r\n+    /// <summary>\r\n+    /// 获取追踪信息\r\n+    /// </summary>\r\n+    public void GetTrackingInfo()\r\n+    {\r\n+        Debug.Log(\"=== 追踪信息 ===\");\r\n+        Debug.Log($\"头部位置: {headPosition}\");\r\n+        Debug.Log($\"头部旋转: {headRotation.eulerAngles}\");\r\n+        Debug.Log($\"头部追踪激活: {headTrackingActive}\");\r\n+        Debug.Log($\"左手位置: {leftHandPosition}\");\r\n+        Debug.Log($\"左手旋转: {leftHandRotation.eulerAngles}\");\r\n+        Debug.Log($\"右手位置: {rightHandPosition}\");\r\n+        Debug.Log($\"右手旋转: {rightHandRotation.eulerAngles}\");\r\n+        Debug.Log($\"手部追踪激活: {handTrackingActive}\");\r\n+        Debug.Log($\"追踪空间激活: {trackingSpaceActive}\");\r\n+    }\r\n+    \r\n+    /// <summary>\r\n+    /// 重置XR设置\r\n+    /// </summary>\r\n+    public void ResetXRSettings()\r\n+    {\r\n+        // 重置输入值\r\n+        leftThumbstick = Vector2.zero;\r\n+        rightThumbstick = Vector2.zero;\r\n+        leftTriggerPressed = false;\r\n+        rightTriggerPressed = false;\r\n+        leftGripPressed = false;\r\n+        rightGripPressed = false;\r\n+\r\n+        // 重置追踪数据\r\n+        headPosition = Vector3.zero;\r\n+        headRotation = Quaternion.identity;\r\n+        leftHandPosition = Vector3.zero;\r\n+        leftHandRotation = Quaternion.identity;\r\n+        rightHandPosition = Vector3.zero;\r\n+        rightHandRotation = Quaternion.identity;\r\n+\r\n+        Debug.Log(\"XR设置已重置\");\r\n+    }\r\n+    \r\n+    /// <summary>\r\n+    /// 检查特定输入\r\n+    /// </summary>\r\n+    /// <param name=\"inputName\">输入名称</param>\r\n+    /// <returns>是否按下</returns>\r\n+    public bool CheckInput(string inputName)\r\n+    {\r\n+        switch (inputName.ToLower())\r\n         {\r\n-            headset.TryGetFeatureValue(CommonUsages.devicePosition, out headsetPosition);\r\n-            headset.TryGetFeatureValue(CommonUsages.deviceRotation, out headsetRotation);\r\n+            case \"lefttrigger\":\r\n+                return leftTriggerPressed;\r\n+            case \"righttrigger\":\r\n+                return rightTriggerPressed;\r\n+            case \"leftgrip\":\r\n+                return leftGripPressed;\r\n+            case \"rightgrip\":\r\n+                return rightGripPressed;\r\n+            default:\r\n+                return false;\r\n         }\r\n-        \r\n-        // 更新左手控制器位置\r\n-        var leftController = InputDevices.GetDeviceAtXRNode(XRNode.LeftHand);\r\n-        if (leftController.isValid)\r\n+    }\r\n+    \r\n+    /// <summary>\r\n+    /// 获取摇杆输入\r\n+    /// </summary>\r\n+    /// <param name=\"hand\">手部（left/right）</param>\r\n+    /// <returns>摇杆值</returns>\r\n+    public Vector2 GetThumbstickInput(string hand)\r\n+    {\r\n+        switch (hand.ToLower())\r\n         {\r\n-            leftController.TryGetFeatureValue(CommonUsages.devicePosition, out leftControllerPosition);\r\n-            leftController.TryGetFeatureValue(CommonUsages.deviceRotation, out leftControllerRotation);\r\n+            case \"left\":\r\n+                return leftThumbstick;\r\n+            case \"right\":\r\n+                return rightThumbstick;\r\n+            default:\r\n+                return Vector2.zero;\r\n         }\r\n-        \r\n-        // 更新右手控制器位置\r\n-        var rightController = InputDevices.GetDeviceAtXRNode(XRNode.RightHand);\r\n-        if (rightController.isValid)\r\n+    }\r\n+    \r\n+    private void Update()\r\n+    {\r\n+        if (isXRRunning)\r\n         {\r\n-            rightController.TryGetFeatureValue(CommonUsages.devicePosition, out rightControllerPosition);\r\n-            rightController.TryGetFeatureValue(CommonUsages.deviceRotation, out rightControllerRotation);\r\n+            UpdateXRInput();\r\n+            UpdateTrackingData();\r\n         }\r\n     }\r\n     \r\n     /// <summary>\r\n-    /// 更新XR输入状态\r\n+    /// 更新XR输入\r\n     /// </summary>\r\n     private void UpdateXRInput()\r\n     {\r\n-        // 左手控制器输入\r\n-        var leftController = InputDevices.GetDeviceAtXRNode(XRNode.LeftHand);\r\n+        // 更新左手控制器输入\r\n         if (leftController.isValid)\r\n         {\r\n-            leftController.TryGetFeatureValue(CommonUsages.trigger, out float leftTrigger);\r\n-            leftTriggerPressed = leftTrigger > 0.5f;\r\n-            \r\n-            leftController.TryGetFeatureValue(CommonUsages.grip, out float leftGrip);\r\n-            leftGripPressed = leftGrip > 0.5f;\r\n-            \r\n             leftController.TryGetFeatureValue(CommonUsages.primary2DAxis, out leftThumbstick);\r\n+            leftController.TryGetFeatureValue(CommonUsages.triggerButton, out leftTriggerPressed);\r\n+            leftController.TryGetFeatureValue(CommonUsages.gripButton, out leftGripPressed);\r\n         }\r\n-        \r\n-        // 右手控制器输入\r\n-        var rightController = InputDevices.GetDeviceAtXRNode(XRNode.RightHand);\r\n+\r\n+        // 更新右手控制器输入\r\n         if (rightController.isValid)\r\n         {\r\n-            rightController.TryGetFeatureValue(CommonUsages.trigger, out float rightTrigger);\r\n-            rightTriggerPressed = rightTrigger > 0.5f;\r\n-            \r\n-            rightController.TryGetFeatureValue(CommonUsages.grip, out float rightGrip);\r\n-            rightGripPressed = rightGrip > 0.5f;\r\n-            \r\n             rightController.TryGetFeatureValue(CommonUsages.primary2DAxis, out rightThumbstick);\r\n+            rightController.TryGetFeatureValue(CommonUsages.triggerButton, out rightTriggerPressed);\r\n+            rightController.TryGetFeatureValue(CommonUsages.gripButton, out rightGripPressed);\r\n         }\r\n     }\r\n     \r\n     /// <summary>\r\n+    /// 更新追踪数据\r\n+    /// </summary>\r\n+    private void UpdateTrackingData()\r\n+    {\r\n+        // 更新头部追踪\r\n+        if (hmd.isValid)\r\n+        {\r\n+            hmd.TryGetFeatureValue(CommonUsages.devicePosition, out headPosition);\r\n+            hmd.TryGetFeatureValue(CommonUsages.deviceRotation, out headRotation);\r\n+            headTrackingActive = hmd.isValid;\r\n+        }\r\n+\r\n+        // 更新左手追踪\r\n+        if (leftController.isValid)\r\n+        {\r\n+            leftController.TryGetFeatureValue(CommonUsages.devicePosition, out leftHandPosition);\r\n+            leftController.TryGetFeatureValue(CommonUsages.deviceRotation, out leftHandRotation);\r\n+        }\r\n+\r\n+        // 更新右手追踪\r\n+        if (rightController.isValid)\r\n+        {\r\n+            rightController.TryGetFeatureValue(CommonUsages.devicePosition, out rightHandPosition);\r\n+            rightController.TryGetFeatureValue(CommonUsages.deviceRotation, out rightHandRotation);\r\n+        }\r\n+\r\n+        handTrackingActive = leftController.isValid || rightController.isValid;\r\n+\r\n+        // 更新追踪空间\r\n+        trackingSpaceActive = XRSettings.isDeviceActive;\r\n+        if (trackingSpaceActive)\r\n+        {\r\n+            trackingOriginPosition = InputTracking.GetLocalPosition(XRNode.TrackingReference);\r\n+            trackingOriginRotation = InputTracking.GetLocalRotation(XRNode.TrackingReference);\r\n+        }\r\n+    }\r\n+    \r\n+    /// <summary>\r\n     /// 设置渲染比例\r\n     /// </summary>\r\n     /// <param name=\"scale\">渲染比例</param>\r\n     public void SetRenderScale(float scale)\r\n@@ -376,32 +546,8 @@\n         }\r\n     }\r\n     \r\n     /// <summary>\r\n-    /// 重置XR设置\r\n-    /// </summary>\r\n-    public void ResetXRSettings()\r\n-    {\r\n-        // 重置渲染设置\r\n-        renderScale = 1.0f;\r\n-        XRSettings.eyeTextureResolutionScale = renderScale;\r\n-        \r\n-        // 重置MSAA\r\n-        enableMSAA = true;\r\n-        msaaLevel = 4;\r\n-        QualitySettings.antiAliasing = 4;\r\n-        \r\n-        // 重置HDR\r\n-        enableHDR = false;\r\n-        if (Camera.main != null)\r\n-        {\r\n-            Camera.main.allowHDR = false;\r\n-        }\r\n-        \r\n-        Debug.Log(\"XR设置已重置\");\r\n-    }\r\n-    \r\n-    /// <summary>\r\n     /// 检查XR功能支持\r\n     /// </summary>\r\n     public void CheckXRFeatureSupport()\r\n     {\r\n@@ -450,118 +596,58 @@\n             }\r\n         }\r\n     }\r\n     \r\n-    private void Update()\r\n-    {\r\n-        if (isXRRunning)\r\n-        {\r\n-            // 更新XR设备位置\r\n-            UpdateXRDevicePositions();\r\n-            \r\n-            // 更新XR输入状态\r\n-            UpdateXRInput();\r\n-        }\r\n-    }\r\n-    \r\n     private void OnGUI()\r\n     {\r\n-        // 简单的GUI界面用于测试\r\n-        GUILayout.BeginArea(new Rect(10, 10, 400, 800));\r\n-        GUILayout.Label(\"XR系统演示\", EditorStyles.boldLabel);\r\n+        GUILayout.BeginArea(new Rect(10, 10, 400, 600));\r\n+        GUILayout.Label(\"XR 扩展现实系统演示\", UnityEditor.EditorStyles.boldLabel);\r\n         \r\n         GUILayout.Space(10);\r\n+        GUILayout.Label(\"设备状态:\");\r\n+        GUILayout.Label($\"XR设备: {(isXRDevicePresent ? \"已连接\" : \"未连接\")}\");\r\n+        GUILayout.Label($\"设备名称: {deviceName}\");\r\n+        GUILayout.Label($\"设备激活: {isActive}\");\r\n         \r\n-        // XR状态\r\n-        GUILayout.Label($\"XR启用: {enableXR}\");\r\n-        GUILayout.Label($\"XR运行中: {isXRRunning}\");\r\n-        GUILayout.Label($\"XR设备: {XRSettings.loadedDeviceName}\");\r\n-        GUILayout.Label($\"渲染比例: {renderScale:F2}\");\r\n-        \r\n         GUILayout.Space(10);\r\n+        GUILayout.Label(\"控制器输入:\");\r\n+        GUILayout.Label($\"左手摇杆: {leftThumbstick}\");\r\n+        GUILayout.Label($\"右手摇杆: {rightThumbstick}\");\r\n+        GUILayout.Label($\"左手扳机: {(leftTriggerPressed ? \"按下\" : \"释放\")}\");\r\n+        GUILayout.Label($\"右手扳机: {(rightTriggerPressed ? \"按下\" : \"释放\")}\");\r\n+        GUILayout.Label($\"左手握把: {(leftGripPressed ? \"按下\" : \"释放\")}\");\r\n+        GUILayout.Label($\"右手握把: {(rightGripPressed ? \"按下\" : \"释放\")}\");\r\n         \r\n-        // XR控制\r\n-        if (GUILayout.Button(\"启动XR\"))\r\n-        {\r\n-            StartXR();\r\n-        }\r\n-        \r\n-        if (GUILayout.Button(\"停止XR\"))\r\n-        {\r\n-            StopXR();\r\n-        }\r\n-        \r\n         GUILayout.Space(10);\r\n+        GUILayout.Label(\"追踪状态:\");\r\n+        GUILayout.Label($\"头部追踪: {(headTrackingActive ? \"激活\" : \"未激活\")}\");\r\n+        GUILayout.Label($\"手部追踪: {(handTrackingActive ? \"激活\" : \"未激活\")}\");\r\n+        GUILayout.Label($\"追踪空间: {(trackingSpaceActive ? \"激活\" : \"未激活\")}\");\r\n         \r\n-        // 设备位置\r\n-        GUILayout.Label(\"头显位置:\");\r\n-        GUILayout.Label($\"  位置: {headsetPosition}\");\r\n-        GUILayout.Label($\"  旋转: {headsetRotation.eulerAngles}\");\r\n-        \r\n-        GUILayout.Label(\"左手控制器:\");\r\n-        GUILayout.Label($\"  位置: {leftControllerPosition}\");\r\n-        GUILayout.Label($\"  旋转: {leftControllerRotation.eulerAngles}\");\r\n-        GUILayout.Label($\"  触发器: {leftTriggerPressed}\");\r\n-        GUILayout.Label($\"  握把: {leftGripPressed}\");\r\n-        GUILayout.Label($\"  摇杆: {leftThumbstick}\");\r\n-        \r\n-        GUILayout.Label(\"右手控制器:\");\r\n-        GUILayout.Label($\"  位置: {rightControllerPosition}\");\r\n-        GUILayout.Label($\"  旋转: {rightControllerRotation.eulerAngles}\");\r\n-        GUILayout.Label($\"  触发器: {rightTriggerPressed}\");\r\n-        GUILayout.Label($\"  握把: {rightGripPressed}\");\r\n-        GUILayout.Label($\"  摇杆: {rightThumbstick}\");\r\n-        \r\n         GUILayout.Space(10);\r\n         \r\n-        // 渲染设置\r\n-        GUILayout.Label(\"渲染比例:\");\r\n-        renderScale = GUILayout.HorizontalSlider(renderScale, 0.1f, 2.0f);\r\n-        if (GUILayout.Button(\"设置渲染比例\"))\r\n+        if (GUILayout.Button(\"获取XR设备信息\"))\r\n         {\r\n-            SetRenderScale(renderScale);\r\n+            GetXRDeviceInfo();\r\n         }\r\n         \r\n-        GUILayout.Space(5);\r\n-        \r\n-        enableMSAA = GUILayout.Toggle(enableMSAA, \"启用MSAA\");\r\n-        if (enableMSAA)\r\n+        if (GUILayout.Button(\"获取输入设备信息\"))\r\n         {\r\n-            GUILayout.Label($\"MSAA级别: {msaaLevel}\");\r\n-            msaaLevel = (int)GUILayout.HorizontalSlider(msaaLevel, 2, 8);\r\n+            GetInputDeviceInfo();\r\n         }\r\n-        if (GUILayout.Button(\"设置MSAA\"))\r\n-        {\r\n-            SetMSAA(enableMSAA, msaaLevel);\r\n-        }\r\n         \r\n-        GUILayout.Space(5);\r\n-        \r\n-        enableHDR = GUILayout.Toggle(enableHDR, \"启用HDR\");\r\n-        if (GUILayout.Button(\"设置HDR\"))\r\n+        if (GUILayout.Button(\"获取控制器输入信息\"))\r\n         {\r\n-            SetHDR(enableHDR);\r\n+            GetControllerInputInfo();\r\n         }\r\n         \r\n-        GUILayout.Space(10);\r\n-        \r\n-        if (GUILayout.Button(\"获取XR信息\"))\r\n+        if (GUILayout.Button(\"获取追踪信息\"))\r\n         {\r\n-            GetXRDeviceInfo();\r\n+            GetTrackingInfo();\r\n         }\r\n         \r\n-        if (GUILayout.Button(\"获取性能信息\"))\r\n+        if (GUILayout.Button(\"重置XR设置\"))\r\n         {\r\n-            GetXRPerformanceInfo();\r\n-        }\r\n-        \r\n-        if (GUILayout.Button(\"检查功能支持\"))\r\n-        {\r\n-            CheckXRFeatureSupport();\r\n-        }\r\n-        \r\n-        if (GUILayout.Button(\"重置设置\"))\r\n-        {\r\n             ResetXRSettings();\r\n         }\r\n         \r\n         GUILayout.EndArea();\r\n@@ -578,5 +664,6 @@\n         {\r\n             StopXR();\r\n         }\r\n     }\r\n+} \r\n } \n\\ No newline at end of file\n"
                }
            ],
            "date": 1750930098614,
            "name": "Commit-0",
            "content": "using UnityEngine;\r\nusing UnityEngine.XR;\r\nusing UnityEngine.XR.Management;\r\nusing System.Collections.Generic;\r\n\r\n/// <summary>\r\n/// UnityEngine.XR 命名空间案例演示\r\n/// 展示扩展现实(XR)系统的核心功能\r\n/// </summary>\r\npublic class XRExample : MonoBehaviour\r\n{\r\n    [Header(\"XR设置\")]\r\n    [SerializeField] private bool enableXR = true;\r\n    [SerializeField] private bool autoStartXR = true;\r\n    [SerializeField] private XRLoader xrLoader;\r\n    \r\n    [Header(\"XR状态\")]\r\n    [SerializeField] private bool isXRInitialized = false;\r\n    [SerializeField] private bool isXRRunning = false;\r\n    [SerializeField] private string currentXRDevice = \"\";\r\n    [SerializeField] private XRDisplaySubsystem xrDisplay;\r\n    [SerializeField] private XRInputSubsystem xrInput;\r\n    \r\n    [Header(\"XR设备信息\")]\r\n    [SerializeField] private Vector3 headsetPosition = Vector3.zero;\r\n    [SerializeField] private Quaternion headsetRotation = Quaternion.identity;\r\n    [SerializeField] private Vector3 leftControllerPosition = Vector3.zero;\r\n    [SerializeField] private Quaternion leftControllerRotation = Quaternion.identity;\r\n    [SerializeField] private Vector3 rightControllerPosition = Vector3.zero;\r\n    [SerializeField] private Quaternion rightControllerRotation = Quaternion.identity;\r\n    \r\n    [Header(\"XR输入\")]\r\n    [SerializeField] private bool leftTriggerPressed = false;\r\n    [SerializeField] private bool rightTriggerPressed = false;\r\n    [SerializeField] private bool leftGripPressed = false;\r\n    [SerializeField] private bool rightGripPressed = false;\r\n    [SerializeField] private Vector2 leftThumbstick = Vector2.zero;\r\n    [SerializeField] private Vector2 rightThumbstick = Vector2.zero;\r\n    \r\n    [Header(\"XR渲染\")]\r\n    [SerializeField] private float renderScale = 1.0f;\r\n    [SerializeField] private bool enableMSAA = true;\r\n    [SerializeField] private int msaaLevel = 4;\r\n    [SerializeField] private bool enableHDR = false;\r\n    \r\n    // XR事件\r\n    private System.Action<bool> onXRInitialized;\r\n    private System.Action<bool> onXRStarted;\r\n    private System.Action<InputDevice> onDeviceConnected;\r\n    private System.Action<InputDevice> onDeviceDisconnected;\r\n    \r\n    private void Start()\r\n    {\r\n        InitializeXRSystem();\r\n    }\r\n    \r\n    /// <summary>\r\n    /// 初始化XR系统\r\n    /// </summary>\r\n    private void InitializeXRSystem()\r\n    {\r\n        if (!enableXR)\r\n        {\r\n            Debug.Log(\"XR已禁用\");\r\n            return;\r\n        }\r\n        \r\n        // 检查XR是否可用\r\n        if (!XRSettings.isDeviceActive)\r\n        {\r\n            Debug.Log(\"XR设备不可用\");\r\n            return;\r\n        }\r\n        \r\n        // 初始化XR管理器\r\n        var xrManagerSettings = XRGeneralSettings.Instance.Manager;\r\n        if (xrManagerSettings == null)\r\n        {\r\n            Debug.LogError(\"XR管理器设置不可用\");\r\n            return;\r\n        }\r\n        \r\n        // 设置XR加载器\r\n        if (xrLoader != null)\r\n        {\r\n            xrManagerSettings.TryAddLoader(xrLoader);\r\n        }\r\n        \r\n        // 启动XR\r\n        if (autoStartXR)\r\n        {\r\n            StartXR();\r\n        }\r\n        \r\n        // 设置设备事件\r\n        SetupDeviceEvents();\r\n        \r\n        Debug.Log(\"XR系统初始化完成\");\r\n    }\r\n    \r\n    /// <summary>\r\n    /// 启动XR\r\n    /// </summary>\r\n    public void StartXR()\r\n    {\r\n        if (!enableXR)\r\n        {\r\n            Debug.Log(\"XR已禁用\");\r\n            return;\r\n        }\r\n        \r\n        var xrManagerSettings = XRGeneralSettings.Instance.Manager;\r\n        if (xrManagerSettings == null)\r\n        {\r\n            Debug.LogError(\"XR管理器设置不可用\");\r\n            return;\r\n        }\r\n        \r\n        // 启动XR\r\n        if (xrManagerSettings.activeLoader == null)\r\n        {\r\n            Debug.LogError(\"没有活动的XR加载器\");\r\n            return;\r\n        }\r\n        \r\n        xrManagerSettings.StartSubsystems();\r\n        isXRRunning = true;\r\n        \r\n        // 获取XR子系统\r\n        GetXRSubsystems();\r\n        \r\n        Debug.Log(\"XR已启动\");\r\n        \r\n        onXRStarted?.Invoke(true);\r\n    }\r\n    \r\n    /// <summary>\r\n    /// 停止XR\r\n    /// </summary>\r\n    public void StopXR()\r\n    {\r\n        var xrManagerSettings = XRGeneralSettings.Instance.Manager;\r\n        if (xrManagerSettings == null)\r\n        {\r\n            return;\r\n        }\r\n        \r\n        xrManagerSettings.StopSubsystems();\r\n        isXRRunning = false;\r\n        \r\n        Debug.Log(\"XR已停止\");\r\n        \r\n        onXRStarted?.Invoke(false);\r\n    }\r\n    \r\n    /// <summary>\r\n    /// 获取XR子系统\r\n    /// </summary>\r\n    private void GetXRSubsystems()\r\n    {\r\n        // 获取显示子系统\r\n        var displaySubsystems = new List<XRDisplaySubsystem>();\r\n        SubsystemManager.GetInstances(displaySubsystems);\r\n        if (displaySubsystems.Count > 0)\r\n        {\r\n            xrDisplay = displaySubsystems[0];\r\n        }\r\n        \r\n        // 获取输入子系统\r\n        var inputSubsystems = new List<XRInputSubsystem>();\r\n        SubsystemManager.GetInstances(inputSubsystems);\r\n        if (inputSubsystems.Count > 0)\r\n        {\r\n            xrInput = inputSubsystems[0];\r\n        }\r\n        \r\n        Debug.Log($\"获取到 {displaySubsystems.Count} 个显示子系统, {inputSubsystems.Count} 个输入子系统\");\r\n    }\r\n    \r\n    /// <summary>\r\n    /// 设置设备事件\r\n    /// </summary>\r\n    private void SetupDeviceEvents()\r\n    {\r\n        // 设备连接事件\r\n        InputDevices.deviceConnected += OnDeviceConnected;\r\n        InputDevices.deviceDisconnected += OnDeviceDisconnected;\r\n        \r\n        Debug.Log(\"设备事件设置完成\");\r\n    }\r\n    \r\n    /// <summary>\r\n    /// 设备连接事件\r\n    /// </summary>\r\n    /// <param name=\"device\">连接的设备</param>\r\n    private void OnDeviceConnected(InputDevice device)\r\n    {\r\n        Debug.Log($\"设备已连接: {device.name} ({device.characteristics})\");\r\n        \r\n        onDeviceConnected?.Invoke(device);\r\n    }\r\n    \r\n    /// <summary>\r\n    /// 设备断开连接事件\r\n    /// </summary>\r\n    /// <param name=\"device\">断开的设备</param>\r\n    private void OnDeviceDisconnected(InputDevice device)\r\n    {\r\n        Debug.Log($\"设备已断开: {device.name}\");\r\n        \r\n        onDeviceDisconnected?.Invoke(device);\r\n    }\r\n    \r\n    /// <summary>\r\n    /// 获取XR设备信息\r\n    /// </summary>\r\n    public void GetXRDeviceInfo()\r\n    {\r\n        Debug.Log(\"=== XR设备信息 ===\");\r\n        Debug.Log($\"XR启用: {enableXR}\");\r\n        Debug.Log($\"XR运行中: {isXRRunning}\");\r\n        Debug.Log($\"XR设备活跃: {XRSettings.isDeviceActive}\");\r\n        Debug.Log($\"当前XR设备: {XRSettings.loadedDeviceName}\");\r\n        Debug.Log($\"XR设备模型: {XRSettings.deviceModel}\");\r\n        Debug.Log($\"渲染比例: {XRSettings.eyeTextureResolutionScale}\");\r\n        Debug.Log($\"显示频率: {XRSettings.refreshRate}\");\r\n        Debug.Log($\"立体渲染: {XRSettings.stereoRenderingMode}\");\r\n        \r\n        // 获取所有输入设备\r\n        var devices = new List<InputDevice>();\r\n        InputDevices.GetDevices(devices);\r\n        \r\n        Debug.Log($\"输入设备数量: {devices.Count}\");\r\n        foreach (var device in devices)\r\n        {\r\n            Debug.Log($\"  - {device.name} ({device.characteristics})\");\r\n        }\r\n    }\r\n    \r\n    /// <summary>\r\n    /// 更新XR设备位置\r\n    /// </summary>\r\n    private void UpdateXRDevicePositions()\r\n    {\r\n        // 更新头显位置\r\n        var headset = InputDevices.GetDeviceAtXRNode(XRNode.Head);\r\n        if (headset.isValid)\r\n        {\r\n            headset.TryGetFeatureValue(CommonUsages.devicePosition, out headsetPosition);\r\n            headset.TryGetFeatureValue(CommonUsages.deviceRotation, out headsetRotation);\r\n        }\r\n        \r\n        // 更新左手控制器位置\r\n        var leftController = InputDevices.GetDeviceAtXRNode(XRNode.LeftHand);\r\n        if (leftController.isValid)\r\n        {\r\n            leftController.TryGetFeatureValue(CommonUsages.devicePosition, out leftControllerPosition);\r\n            leftController.TryGetFeatureValue(CommonUsages.deviceRotation, out leftControllerRotation);\r\n        }\r\n        \r\n        // 更新右手控制器位置\r\n        var rightController = InputDevices.GetDeviceAtXRNode(XRNode.RightHand);\r\n        if (rightController.isValid)\r\n        {\r\n            rightController.TryGetFeatureValue(CommonUsages.devicePosition, out rightControllerPosition);\r\n            rightController.TryGetFeatureValue(CommonUsages.deviceRotation, out rightControllerRotation);\r\n        }\r\n    }\r\n    \r\n    /// <summary>\r\n    /// 更新XR输入状态\r\n    /// </summary>\r\n    private void UpdateXRInput()\r\n    {\r\n        // 左手控制器输入\r\n        var leftController = InputDevices.GetDeviceAtXRNode(XRNode.LeftHand);\r\n        if (leftController.isValid)\r\n        {\r\n            leftController.TryGetFeatureValue(CommonUsages.trigger, out float leftTrigger);\r\n            leftTriggerPressed = leftTrigger > 0.5f;\r\n            \r\n            leftController.TryGetFeatureValue(CommonUsages.grip, out float leftGrip);\r\n            leftGripPressed = leftGrip > 0.5f;\r\n            \r\n            leftController.TryGetFeatureValue(CommonUsages.primary2DAxis, out leftThumbstick);\r\n        }\r\n        \r\n        // 右手控制器输入\r\n        var rightController = InputDevices.GetDeviceAtXRNode(XRNode.RightHand);\r\n        if (rightController.isValid)\r\n        {\r\n            rightController.TryGetFeatureValue(CommonUsages.trigger, out float rightTrigger);\r\n            rightTriggerPressed = rightTrigger > 0.5f;\r\n            \r\n            rightController.TryGetFeatureValue(CommonUsages.grip, out float rightGrip);\r\n            rightGripPressed = rightGrip > 0.5f;\r\n            \r\n            rightController.TryGetFeatureValue(CommonUsages.primary2DAxis, out rightThumbstick);\r\n        }\r\n    }\r\n    \r\n    /// <summary>\r\n    /// 设置渲染比例\r\n    /// </summary>\r\n    /// <param name=\"scale\">渲染比例</param>\r\n    public void SetRenderScale(float scale)\r\n    {\r\n        renderScale = Mathf.Clamp(scale, 0.1f, 2.0f);\r\n        XRSettings.eyeTextureResolutionScale = renderScale;\r\n        \r\n        Debug.Log($\"渲染比例已设置为: {renderScale}\");\r\n    }\r\n    \r\n    /// <summary>\r\n    /// 设置MSAA\r\n    /// </summary>\r\n    /// <param name=\"enabled\">是否启用MSAA</param>\r\n    /// <param name=\"level\">MSAA级别</param>\r\n    public void SetMSAA(bool enabled, int level = 4)\r\n    {\r\n        enableMSAA = enabled;\r\n        msaaLevel = level;\r\n        \r\n        if (enabled)\r\n        {\r\n            QualitySettings.antiAliasing = level;\r\n        }\r\n        else\r\n        {\r\n            QualitySettings.antiAliasing = 0;\r\n        }\r\n        \r\n        Debug.Log($\"MSAA已设置为: {(enabled ? $\"启用({level}x)\" : \"禁用\")}\");\r\n    }\r\n    \r\n    /// <summary>\r\n    /// 设置HDR\r\n    /// </summary>\r\n    /// <param name=\"enabled\">是否启用HDR</param>\r\n    public void SetHDR(bool enabled)\r\n    {\r\n        enableHDR = enabled;\r\n        \r\n        // 设置HDR\r\n        if (Camera.main != null)\r\n        {\r\n            Camera.main.allowHDR = enabled;\r\n        }\r\n        \r\n        Debug.Log($\"HDR已设置为: {enabled}\");\r\n    }\r\n    \r\n    /// <summary>\r\n    /// 获取XR性能信息\r\n    /// </summary>\r\n    public void GetXRPerformanceInfo()\r\n    {\r\n        Debug.Log(\"=== XR性能信息 ===\");\r\n        Debug.Log($\"渲染比例: {XRSettings.eyeTextureResolutionScale}\");\r\n        Debug.Log($\"显示频率: {XRSettings.refreshRate}\");\r\n        Debug.Log($\"立体渲染模式: {XRSettings.stereoRenderingMode}\");\r\n        Debug.Log($\"VR设备: {XRSettings.isDeviceActive}\");\r\n        Debug.Log($\"VR设备名称: {XRSettings.loadedDeviceName}\");\r\n        Debug.Log($\"VR设备模型: {XRSettings.deviceModel}\");\r\n        \r\n        if (xrDisplay != null)\r\n        {\r\n            Debug.Log($\"显示子系统运行中: {xrDisplay.running}\");\r\n            Debug.Log($\"显示子系统初始化: {xrDisplay.initialized}\");\r\n        }\r\n        \r\n        if (xrInput != null)\r\n        {\r\n            Debug.Log($\"输入子系统运行中: {xrInput.running}\");\r\n            Debug.Log($\"输入子系统初始化: {xrInput.initialized}\");\r\n        }\r\n    }\r\n    \r\n    /// <summary>\r\n    /// 重置XR设置\r\n    /// </summary>\r\n    public void ResetXRSettings()\r\n    {\r\n        // 重置渲染设置\r\n        renderScale = 1.0f;\r\n        XRSettings.eyeTextureResolutionScale = renderScale;\r\n        \r\n        // 重置MSAA\r\n        enableMSAA = true;\r\n        msaaLevel = 4;\r\n        QualitySettings.antiAliasing = 4;\r\n        \r\n        // 重置HDR\r\n        enableHDR = false;\r\n        if (Camera.main != null)\r\n        {\r\n            Camera.main.allowHDR = false;\r\n        }\r\n        \r\n        Debug.Log(\"XR设置已重置\");\r\n    }\r\n    \r\n    /// <summary>\r\n    /// 检查XR功能支持\r\n    /// </summary>\r\n    public void CheckXRFeatureSupport()\r\n    {\r\n        Debug.Log(\"=== XR功能支持检查 ===\");\r\n        \r\n        // 检查基本XR支持\r\n        Debug.Log($\"XR支持: {XRSettings.supportedDevices.Length > 0}\");\r\n        Debug.Log($\"支持的设备: {string.Join(\", \", XRSettings.supportedDevices)}\");\r\n        \r\n        // 检查特定功能\r\n        var devices = new List<InputDevice>();\r\n        InputDevices.GetDevices(devices);\r\n        \r\n        foreach (var device in devices)\r\n        {\r\n            Debug.Log($\"设备: {device.name}\");\r\n            \r\n            // 检查位置追踪\r\n            if (device.TryGetFeatureValue(CommonUsages.devicePosition, out Vector3 position))\r\n            {\r\n                Debug.Log($\"  位置追踪: 支持\");\r\n            }\r\n            \r\n            // 检查旋转追踪\r\n            if (device.TryGetFeatureValue(CommonUsages.deviceRotation, out Quaternion rotation))\r\n            {\r\n                Debug.Log($\"  旋转追踪: 支持\");\r\n            }\r\n            \r\n            // 检查触发器\r\n            if (device.TryGetFeatureValue(CommonUsages.trigger, out float trigger))\r\n            {\r\n                Debug.Log($\"  触发器: 支持\");\r\n            }\r\n            \r\n            // 检查握把\r\n            if (device.TryGetFeatureValue(CommonUsages.grip, out float grip))\r\n            {\r\n                Debug.Log($\"  握把: 支持\");\r\n            }\r\n            \r\n            // 检查摇杆\r\n            if (device.TryGetFeatureValue(CommonUsages.primary2DAxis, out Vector2 thumbstick))\r\n            {\r\n                Debug.Log($\"  摇杆: 支持\");\r\n            }\r\n        }\r\n    }\r\n    \r\n    private void Update()\r\n    {\r\n        if (isXRRunning)\r\n        {\r\n            // 更新XR设备位置\r\n            UpdateXRDevicePositions();\r\n            \r\n            // 更新XR输入状态\r\n            UpdateXRInput();\r\n        }\r\n    }\r\n    \r\n    private void OnGUI()\r\n    {\r\n        // 简单的GUI界面用于测试\r\n        GUILayout.BeginArea(new Rect(10, 10, 400, 800));\r\n        GUILayout.Label(\"XR系统演示\", EditorStyles.boldLabel);\r\n        \r\n        GUILayout.Space(10);\r\n        \r\n        // XR状态\r\n        GUILayout.Label($\"XR启用: {enableXR}\");\r\n        GUILayout.Label($\"XR运行中: {isXRRunning}\");\r\n        GUILayout.Label($\"XR设备: {XRSettings.loadedDeviceName}\");\r\n        GUILayout.Label($\"渲染比例: {renderScale:F2}\");\r\n        \r\n        GUILayout.Space(10);\r\n        \r\n        // XR控制\r\n        if (GUILayout.Button(\"启动XR\"))\r\n        {\r\n            StartXR();\r\n        }\r\n        \r\n        if (GUILayout.Button(\"停止XR\"))\r\n        {\r\n            StopXR();\r\n        }\r\n        \r\n        GUILayout.Space(10);\r\n        \r\n        // 设备位置\r\n        GUILayout.Label(\"头显位置:\");\r\n        GUILayout.Label($\"  位置: {headsetPosition}\");\r\n        GUILayout.Label($\"  旋转: {headsetRotation.eulerAngles}\");\r\n        \r\n        GUILayout.Label(\"左手控制器:\");\r\n        GUILayout.Label($\"  位置: {leftControllerPosition}\");\r\n        GUILayout.Label($\"  旋转: {leftControllerRotation.eulerAngles}\");\r\n        GUILayout.Label($\"  触发器: {leftTriggerPressed}\");\r\n        GUILayout.Label($\"  握把: {leftGripPressed}\");\r\n        GUILayout.Label($\"  摇杆: {leftThumbstick}\");\r\n        \r\n        GUILayout.Label(\"右手控制器:\");\r\n        GUILayout.Label($\"  位置: {rightControllerPosition}\");\r\n        GUILayout.Label($\"  旋转: {rightControllerRotation.eulerAngles}\");\r\n        GUILayout.Label($\"  触发器: {rightTriggerPressed}\");\r\n        GUILayout.Label($\"  握把: {rightGripPressed}\");\r\n        GUILayout.Label($\"  摇杆: {rightThumbstick}\");\r\n        \r\n        GUILayout.Space(10);\r\n        \r\n        // 渲染设置\r\n        GUILayout.Label(\"渲染比例:\");\r\n        renderScale = GUILayout.HorizontalSlider(renderScale, 0.1f, 2.0f);\r\n        if (GUILayout.Button(\"设置渲染比例\"))\r\n        {\r\n            SetRenderScale(renderScale);\r\n        }\r\n        \r\n        GUILayout.Space(5);\r\n        \r\n        enableMSAA = GUILayout.Toggle(enableMSAA, \"启用MSAA\");\r\n        if (enableMSAA)\r\n        {\r\n            GUILayout.Label($\"MSAA级别: {msaaLevel}\");\r\n            msaaLevel = (int)GUILayout.HorizontalSlider(msaaLevel, 2, 8);\r\n        }\r\n        if (GUILayout.Button(\"设置MSAA\"))\r\n        {\r\n            SetMSAA(enableMSAA, msaaLevel);\r\n        }\r\n        \r\n        GUILayout.Space(5);\r\n        \r\n        enableHDR = GUILayout.Toggle(enableHDR, \"启用HDR\");\r\n        if (GUILayout.Button(\"设置HDR\"))\r\n        {\r\n            SetHDR(enableHDR);\r\n        }\r\n        \r\n        GUILayout.Space(10);\r\n        \r\n        if (GUILayout.Button(\"获取XR信息\"))\r\n        {\r\n            GetXRDeviceInfo();\r\n        }\r\n        \r\n        if (GUILayout.Button(\"获取性能信息\"))\r\n        {\r\n            GetXRPerformanceInfo();\r\n        }\r\n        \r\n        if (GUILayout.Button(\"检查功能支持\"))\r\n        {\r\n            CheckXRFeatureSupport();\r\n        }\r\n        \r\n        if (GUILayout.Button(\"重置设置\"))\r\n        {\r\n            ResetXRSettings();\r\n        }\r\n        \r\n        GUILayout.EndArea();\r\n    }\r\n    \r\n    private void OnDestroy()\r\n    {\r\n        // 清理事件\r\n        InputDevices.deviceConnected -= OnDeviceConnected;\r\n        InputDevices.deviceDisconnected -= OnDeviceDisconnected;\r\n        \r\n        // 停止XR\r\n        if (isXRRunning)\r\n        {\r\n            StopXR();\r\n        }\r\n    }\r\n} "
        }
    ]
}