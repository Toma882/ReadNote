{
    "sourceFile": "Assets/UnityEditor/Chapter 8 UnityAPI/UnityEngine/Diagnostics/DiagnosticsExample.cs",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1750934612620,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1750934612620,
            "name": "Commit-0",
            "content": "using UnityEngine;\r\nusing UnityEngine.Diagnostics;\r\n\r\n/// <summary>\r\n/// UnityEngine.Diagnostics 命名空间案例演示\r\n/// 展示性能诊断、内存分析、错误报告等核心功能\r\n/// </summary>\r\npublic class DiagnosticsExample : MonoBehaviour\r\n{\r\n    [Header(\"性能诊断\")]\r\n    [SerializeField] private bool enablePerformanceDiagnostics = true; //启用性能诊断\r\n    [SerializeField] private float diagnosticsInterval = 1f; //诊断间隔\r\n    [SerializeField] private bool logPerformanceData = false; //记录性能数据\r\n    [SerializeField] private int maxLogEntries = 100; //最大日志条目数\r\n    \r\n    [Header(\"内存分析\")]\r\n    [SerializeField] private bool enableMemoryAnalysis = true; //启用内存分析\r\n    [SerializeField] private bool trackMemoryLeaks = false; //跟踪内存泄漏\r\n    [SerializeField] private float memoryThreshold = 100f; //内存阈值(MB)\r\n    [SerializeField] private bool forceGarbageCollection = false; //强制垃圾回收\r\n    \r\n    [Header(\"错误报告\")]\r\n    [SerializeField] private bool enableErrorReporting = true; //启用错误报告\r\n    [SerializeField] private bool captureScreenshots = false; //捕获截图\r\n    [SerializeField] private bool sendErrorReports = false; //发送错误报告\r\n    [SerializeField] private string errorReportServer = \"https://api.example.com/errors\"; //错误报告服务器\r\n    \r\n    [Header(\"诊断结果\")]\r\n    [SerializeField] private float currentFPS = 0f; //当前帧率\r\n    [SerializeField] private float averageFPS = 0f; //平均帧率\r\n    [SerializeField] private float minFPS = 0f; //最低帧率\r\n    [SerializeField] private float maxFPS = 0f; //最高帧率\r\n    [SerializeField] private long totalMemory = 0; //总内存\r\n    [SerializeField] private long usedMemory = 0; //已用内存\r\n    [SerializeField] private long reservedMemory = 0; //保留内存\r\n    [SerializeField] private int errorCount = 0; //错误数量\r\n    [SerializeField] private string lastError = \"\"; //最后错误\r\n    \r\n    [Header(\"性能计数器\")]\r\n    [SerializeField] private float[] fpsHistory = new float[60]; //帧率历史\r\n    [SerializeField] private int fpsIndex = 0; //帧率索引\r\n    [SerializeField] private float[] memoryHistory = new float[60]; //内存历史\r\n    [SerializeField] private int memoryIndex = 0; //内存索引\r\n    \r\n    private float lastDiagnosticsTime = 0f;\r\n    private float fpsSum = 0f;\r\n    private int fpsCount = 0;\r\n    private bool isDiagnosticsRunning = false;\r\n    private System.Collections.Generic.List<string> errorLog = new System.Collections.Generic.List<string>();\r\n\r\n    private void Start()\r\n    {\r\n        InitializeDiagnostics();\r\n    }\r\n\r\n    /// <summary>\r\n    /// 初始化诊断系统\r\n    /// </summary>\r\n    private void InitializeDiagnostics()\r\n    {\r\n        // 初始化性能计数器\r\n        InitializePerformanceCounters();\r\n        \r\n        // 设置错误处理\r\n        SetupErrorHandling();\r\n        \r\n        // 启动诊断\r\n        StartDiagnostics();\r\n        \r\n        Debug.Log(\"诊断系统初始化完成\");\r\n    }\r\n\r\n    /// <summary>\r\n    /// 初始化性能计数器\r\n    /// </summary>\r\n    private void InitializePerformanceCounters()\r\n    {\r\n        fpsHistory = new float[maxLogEntries];\r\n        memoryHistory = new float[maxLogEntries];\r\n        fpsIndex = 0;\r\n        memoryIndex = 0;\r\n        fpsSum = 0f;\r\n        fpsCount = 0;\r\n        \r\n        Debug.Log(\"性能计数器初始化完成\");\r\n    }\r\n\r\n    /// <summary>\r\n    /// 设置错误处理\r\n    /// </summary>\r\n    private void SetupErrorHandling()\r\n    {\r\n        if (enableErrorReporting)\r\n        {\r\n            Application.logMessageReceived += OnLogMessageReceived;\r\n            Debug.Log(\"错误处理已设置\");\r\n        }\r\n    }\r\n\r\n    /// <summary>\r\n    /// 启动诊断\r\n    /// </summary>\r\n    public void StartDiagnostics()\r\n    {\r\n        isDiagnosticsRunning = true;\r\n        Debug.Log(\"诊断系统已启动\");\r\n    }\r\n\r\n    /// <summary>\r\n    /// 停止诊断\r\n    /// </summary>\r\n    public void StopDiagnostics()\r\n    {\r\n        isDiagnosticsRunning = false;\r\n        Debug.Log(\"诊断系统已停止\");\r\n    }\r\n\r\n    private void Update()\r\n    {\r\n        if (!isDiagnosticsRunning) return;\r\n        \r\n        // 更新性能数据\r\n        UpdatePerformanceData();\r\n        \r\n        // 定期诊断\r\n        if (Time.time - lastDiagnosticsTime > diagnosticsInterval)\r\n        {\r\n            RunDiagnostics();\r\n            lastDiagnosticsTime = Time.time;\r\n        }\r\n        \r\n        // 内存分析\r\n        if (enableMemoryAnalysis)\r\n        {\r\n            AnalyzeMemory();\r\n        }\r\n    }\r\n\r\n    /// <summary>\r\n    /// 更新性能数据\r\n    /// </summary>\r\n    private void UpdatePerformanceData()\r\n    {\r\n        // 计算当前帧率\r\n        currentFPS = 1f / Time.deltaTime;\r\n        \r\n        // 更新帧率历史\r\n        fpsHistory[fpsIndex] = currentFPS;\r\n        fpsIndex = (fpsIndex + 1) % maxLogEntries;\r\n        \r\n        // 计算平均帧率\r\n        fpsSum += currentFPS;\r\n        fpsCount++;\r\n        \r\n        if (fpsCount > 0)\r\n        {\r\n            averageFPS = fpsSum / fpsCount;\r\n        }\r\n        \r\n        // 更新最大最小帧率\r\n        if (currentFPS > maxFPS) maxFPS = currentFPS;\r\n        if (currentFPS < minFPS || minFPS == 0) minFPS = currentFPS;\r\n    }\r\n\r\n    /// <summary>\r\n    /// 运行诊断\r\n    /// </summary>\r\n    private void RunDiagnostics()\r\n    {\r\n        // 性能诊断\r\n        if (enablePerformanceDiagnostics)\r\n        {\r\n            DiagnosePerformance();\r\n        }\r\n        \r\n        // 内存分析\r\n        if (enableMemoryAnalysis)\r\n        {\r\n            AnalyzeMemory();\r\n        }\r\n        \r\n        // 错误检查\r\n        if (enableErrorReporting)\r\n        {\r\n            CheckForErrors();\r\n        }\r\n        \r\n        if (logPerformanceData)\r\n        {\r\n            LogPerformanceData();\r\n        }\r\n    }\r\n\r\n    /// <summary>\r\n    /// 性能诊断\r\n    /// </summary>\r\n    private void DiagnosePerformance()\r\n    {\r\n        // 检查帧率\r\n        if (currentFPS < 30f)\r\n        {\r\n            Debug.LogWarning($\"性能警告: 帧率过低 ({currentFPS:F1} FPS)\");\r\n        }\r\n        \r\n        // 检查内存使用\r\n        if (usedMemory > memoryThreshold * 1024 * 1024)\r\n        {\r\n            Debug.LogWarning($\"性能警告: 内存使用过高 ({usedMemory / (1024 * 1024):F1} MB)\");\r\n        }\r\n        \r\n        // 检查CPU使用率\r\n        float cpuUsage = GetCPUUsage();\r\n        if (cpuUsage > 80f)\r\n        {\r\n            Debug.LogWarning($\"性能警告: CPU使用率过高 ({cpuUsage:F1}%)\");\r\n        }\r\n    }\r\n\r\n    /// <summary>\r\n    /// 内存分析\r\n    /// </summary>\r\n    private void AnalyzeMemory()\r\n    {\r\n        // 获取内存信息\r\n        totalMemory = SystemInfo.systemMemorySize * 1024 * 1024;\r\n        usedMemory = System.GC.GetTotalMemory(false);\r\n        reservedMemory = System.GC.GetTotalMemory(true);\r\n        \r\n        // 更新内存历史\r\n        memoryHistory[memoryIndex] = usedMemory / (1024 * 1024);\r\n        memoryIndex = (memoryIndex + 1) % maxLogEntries;\r\n        \r\n        // 检查内存泄漏\r\n        if (trackMemoryLeaks)\r\n        {\r\n            CheckMemoryLeaks();\r\n        }\r\n        \r\n        // 强制垃圾回收\r\n        if (forceGarbageCollection)\r\n        {\r\n            System.GC.Collect();\r\n            Debug.Log(\"强制垃圾回收已执行\");\r\n        }\r\n    }\r\n\r\n    /// <summary>\r\n    /// 检查内存泄漏\r\n    /// </summary>\r\n    private void CheckMemoryLeaks()\r\n    {\r\n        // 简单的内存泄漏检测\r\n        long currentMemory = System.GC.GetTotalMemory(false);\r\n        \r\n        // 这里可以实现更复杂的内存泄漏检测逻辑\r\n        if (currentMemory > usedMemory * 1.5f)\r\n        {\r\n            Debug.LogWarning(\"可能检测到内存泄漏\");\r\n        }\r\n    }\r\n\r\n    /// <summary>\r\n    /// 检查错误\r\n    /// </summary>\r\n    private void CheckForErrors()\r\n    {\r\n        // 检查是否有未处理的异常\r\n        if (errorCount > 0)\r\n        {\r\n            Debug.LogWarning($\"检测到 {errorCount} 个错误\");\r\n        }\r\n    }\r\n\r\n    /// <summary>\r\n    /// 记录性能数据\r\n    /// </summary>\r\n    private void LogPerformanceData()\r\n    {\r\n        Debug.Log($\"性能数据: FPS={currentFPS:F1}, 内存={usedMemory / (1024 * 1024):F1}MB, CPU={GetCPUUsage():F1}%\");\r\n    }\r\n\r\n    /// <summary>\r\n    /// 获取CPU使用率\r\n    /// </summary>\r\n    /// <returns>CPU使用率百分比</returns>\r\n    private float GetCPUUsage()\r\n    {\r\n        // 这是一个简化的CPU使用率计算\r\n        // 在实际项目中，可能需要使用更复杂的计算方法\r\n        return Random.Range(10f, 90f); // 模拟数据\r\n    }\r\n\r\n    /// <summary>\r\n    /// 日志消息接收处理\r\n    /// </summary>\r\n    private void OnLogMessageReceived(string logString, string stackTrace, LogType type)\r\n    {\r\n        if (type == LogType.Error || type == LogType.Exception)\r\n        {\r\n            errorCount++;\r\n            lastError = logString;\r\n            \r\n            // 添加到错误日志\r\n            errorLog.Add($\"[{System.DateTime.Now:HH:mm:ss}] {logString}\");\r\n            \r\n            // 限制错误日志大小\r\n            if (errorLog.Count > maxLogEntries)\r\n            {\r\n                errorLog.RemoveAt(0);\r\n            }\r\n            \r\n            // 发送错误报告\r\n            if (sendErrorReports)\r\n            {\r\n                SendErrorReport(logString, stackTrace, type);\r\n            }\r\n            \r\n            // 捕获截图\r\n            if (captureScreenshots)\r\n            {\r\n                CaptureScreenshot();\r\n            }\r\n        }\r\n    }\r\n\r\n    /// <summary>\r\n    /// 发送错误报告\r\n    /// </summary>\r\n    private void SendErrorReport(string error, string stackTrace, LogType type)\r\n    {\r\n        var report = new ErrorReport\r\n        {\r\n            error = error,\r\n            stackTrace = stackTrace,\r\n            type = type.ToString(),\r\n            timestamp = System.DateTime.Now.ToString(),\r\n            deviceInfo = GetDeviceInfo(),\r\n            performanceData = GetPerformanceData()\r\n        };\r\n        \r\n        string json = JsonUtility.ToJson(report, true);\r\n        \r\n        // 这里应该发送到实际的错误报告服务器\r\n        Debug.Log($\"错误报告已准备: {json}\");\r\n    }\r\n\r\n    /// <summary>\r\n    /// 捕获截图\r\n    /// </summary>\r\n    private void CaptureScreenshot()\r\n    {\r\n        string filename = $\"screenshot_{System.DateTime.Now:yyyyMMdd_HHmmss}.png\";\r\n        ScreenCapture.CaptureScreenshotAsTexture();\r\n        Debug.Log($\"截图已保存: {filename}\");\r\n    }\r\n\r\n    /// <summary>\r\n    /// 获取设备信息\r\n    /// </summary>\r\n    /// <returns>设备信息字符串</returns>\r\n    private string GetDeviceInfo()\r\n    {\r\n        return $\"Device: {SystemInfo.deviceModel}, OS: {SystemInfo.operatingSystem}, Memory: {SystemInfo.systemMemorySize}MB\";\r\n    }\r\n\r\n    /// <summary>\r\n    /// 获取性能数据\r\n    /// </summary>\r\n    /// <returns>性能数据字符串</returns>\r\n    private string GetPerformanceData()\r\n    {\r\n        return $\"FPS: {currentFPS:F1}, Memory: {usedMemory / (1024 * 1024):F1}MB, CPU: {GetCPUUsage():F1}%\";\r\n    }\r\n\r\n    /// <summary>\r\n    /// 生成性能报告\r\n    /// </summary>\r\n    public void GeneratePerformanceReport()\r\n    {\r\n        Debug.Log(\"=== 性能诊断报告 ===\");\r\n        Debug.Log($\"当前帧率: {currentFPS:F1} FPS\");\r\n        Debug.Log($\"平均帧率: {averageFPS:F1} FPS\");\r\n        Debug.Log($\"最低帧率: {minFPS:F1} FPS\");\r\n        Debug.Log($\"最高帧率: {maxFPS:F1} FPS\");\r\n        Debug.Log($\"总内存: {totalMemory / (1024 * 1024):F1} MB\");\r\n        Debug.Log($\"已用内存: {usedMemory / (1024 * 1024):F1} MB\");\r\n        Debug.Log($\"保留内存: {reservedMemory / (1024 * 1024):F1} MB\");\r\n        Debug.Log($\"CPU使用率: {GetCPUUsage():F1}%\");\r\n        Debug.Log($\"错误数量: {errorCount}\");\r\n        \r\n        if (errorCount > 0)\r\n        {\r\n            Debug.Log($\"最后错误: {lastError}\");\r\n        }\r\n    }\r\n\r\n    /// <summary>\r\n    /// 生成内存报告\r\n    /// </summary>\r\n    public void GenerateMemoryReport()\r\n    {\r\n        Debug.Log(\"=== 内存分析报告 ===\");\r\n        Debug.Log($\"系统内存: {SystemInfo.systemMemorySize} MB\");\r\n        Debug.Log($\"图形内存: {SystemInfo.graphicsMemorySize} MB\");\r\n        Debug.Log($\"当前内存使用: {usedMemory / (1024 * 1024):F1} MB\");\r\n        Debug.Log($\"内存使用率: {(float)usedMemory / totalMemory * 100:F1}%\");\r\n        \r\n        // 分析内存历史\r\n        float avgMemory = 0f;\r\n        for (int i = 0; i < maxLogEntries; i++)\r\n        {\r\n            avgMemory += memoryHistory[i];\r\n        }\r\n        avgMemory /= maxLogEntries;\r\n        \r\n        Debug.Log($\"平均内存使用: {avgMemory:F1} MB\");\r\n    }\r\n\r\n    /// <summary>\r\n    /// 清理内存\r\n    /// </summary>\r\n    public void CleanupMemory()\r\n    {\r\n        System.GC.Collect();\r\n        System.GC.WaitForPendingFinalizers();\r\n        System.GC.Collect();\r\n        \r\n        Debug.Log(\"内存清理完成\");\r\n    }\r\n\r\n    /// <summary>\r\n    /// 重置性能计数器\r\n    /// </summary>\r\n    public void ResetPerformanceCounters()\r\n    {\r\n        fpsSum = 0f;\r\n        fpsCount = 0;\r\n        minFPS = 0f;\r\n        maxFPS = 0f;\r\n        errorCount = 0;\r\n        errorLog.Clear();\r\n        \r\n        Debug.Log(\"性能计数器已重置\");\r\n    }\r\n\r\n    /// <summary>\r\n    /// 导出诊断数据\r\n    /// </summary>\r\n    public void ExportDiagnosticsData()\r\n    {\r\n        var data = new DiagnosticsData\r\n        {\r\n            timestamp = System.DateTime.Now.ToString(),\r\n            performanceData = new PerformanceData\r\n            {\r\n                currentFPS = currentFPS,\r\n                averageFPS = averageFPS,\r\n                minFPS = minFPS,\r\n                maxFPS = maxFPS,\r\n                totalMemory = totalMemory,\r\n                usedMemory = usedMemory,\r\n                reservedMemory = reservedMemory\r\n            },\r\n            errors = errorLog.ToArray(),\r\n            deviceInfo = GetDeviceInfo()\r\n        };\r\n        \r\n        string json = JsonUtility.ToJson(data, true);\r\n        string filename = $\"diagnostics_{System.DateTime.Now:yyyyMMdd_HHmmss}.json\";\r\n        \r\n        System.IO.File.WriteAllText(filename, json);\r\n        Debug.Log($\"诊断数据已导出: {filename}\");\r\n    }\r\n\r\n    private void OnGUI()\r\n    {\r\n        GUILayout.BeginArea(new Rect(10, 10, 400, 800));\r\n        GUILayout.Label(\"Diagnostics 诊断工具演示\", UnityEditor.EditorStyles.boldLabel);\r\n        \r\n        GUILayout.Space(10);\r\n        GUILayout.Label(\"诊断设置:\");\r\n        enablePerformanceDiagnostics = GUILayout.Toggle(enablePerformanceDiagnostics, \"启用性能诊断\");\r\n        enableMemoryAnalysis = GUILayout.Toggle(enableMemoryAnalysis, \"启用内存分析\");\r\n        enableErrorReporting = GUILayout.Toggle(enableErrorReporting, \"启用错误报告\");\r\n        logPerformanceData = GUILayout.Toggle(logPerformanceData, \"记录性能数据\");\r\n        trackMemoryLeaks = GUILayout.Toggle(trackMemoryLeaks, \"跟踪内存泄漏\");\r\n        captureScreenshots = GUILayout.Toggle(captureScreenshots, \"捕获截图\");\r\n        sendErrorReports = GUILayout.Toggle(sendErrorReports, \"发送错误报告\");\r\n        \r\n        GUILayout.Space(10);\r\n        GUILayout.Label(\"配置参数:\");\r\n        diagnosticsInterval = float.TryParse(GUILayout.TextField(\"诊断间隔\", diagnosticsInterval.ToString()), out var interval) ? interval : diagnosticsInterval;\r\n        memoryThreshold = float.TryParse(GUILayout.TextField(\"内存阈值(MB)\", memoryThreshold.ToString()), out var threshold) ? threshold : memoryThreshold;\r\n        maxLogEntries = int.TryParse(GUILayout.TextField(\"最大日志条目\", maxLogEntries.ToString()), out var maxEntries) ? maxEntries : maxLogEntries;\r\n        \r\n        GUILayout.Space(10);\r\n        GUILayout.Label(\"性能数据:\");\r\n        GUILayout.Label($\"当前帧率: {currentFPS:F1} FPS\");\r\n        GUILayout.Label($\"平均帧率: {averageFPS:F1} FPS\");\r\n        GUILayout.Label($\"最低帧率: {minFPS:F1} FPS\");\r\n        GUILayout.Label($\"最高帧率: {maxFPS:F1} FPS\");\r\n        GUILayout.Label($\"已用内存: {usedMemory / (1024 * 1024):F1} MB\");\r\n        GUILayout.Label($\"内存使用率: {(float)usedMemory / totalMemory * 100:F1}%\");\r\n        GUILayout.Label($\"CPU使用率: {GetCPUUsage():F1}%\");\r\n        GUILayout.Label($\"错误数量: {errorCount}\");\r\n        \r\n        GUILayout.Space(10);\r\n        \r\n        if (!isDiagnosticsRunning)\r\n        {\r\n            if (GUILayout.Button(\"启动诊断\"))\r\n            {\r\n                StartDiagnostics();\r\n            }\r\n        }\r\n        else\r\n        {\r\n            if (GUILayout.Button(\"停止诊断\"))\r\n            {\r\n                StopDiagnostics();\r\n            }\r\n        }\r\n        \r\n        if (GUILayout.Button(\"生成性能报告\"))\r\n        {\r\n            GeneratePerformanceReport();\r\n        }\r\n        \r\n        if (GUILayout.Button(\"生成内存报告\"))\r\n        {\r\n            GenerateMemoryReport();\r\n        }\r\n        \r\n        if (GUILayout.Button(\"清理内存\"))\r\n        {\r\n            CleanupMemory();\r\n        }\r\n        \r\n        if (GUILayout.Button(\"重置计数器\"))\r\n        {\r\n            ResetPerformanceCounters();\r\n        }\r\n        \r\n        if (GUILayout.Button(\"导出诊断数据\"))\r\n        {\r\n            ExportDiagnosticsData();\r\n        }\r\n        \r\n        if (GUILayout.Button(\"强制垃圾回收\"))\r\n        {\r\n            System.GC.Collect();\r\n        }\r\n        \r\n        GUILayout.EndArea();\r\n    }\r\n\r\n    private void OnDestroy()\r\n    {\r\n        if (enableErrorReporting)\r\n        {\r\n            Application.logMessageReceived -= OnLogMessageReceived;\r\n        }\r\n    }\r\n}\r\n\r\n/// <summary>\r\n/// 错误报告类\r\n/// </summary>\r\n[System.Serializable]\r\npublic class ErrorReport\r\n{\r\n    public string error;\r\n    public string stackTrace;\r\n    public string type;\r\n    public string timestamp;\r\n    public string deviceInfo;\r\n    public string performanceData;\r\n}\r\n\r\n/// <summary>\r\n/// 诊断数据类\r\n/// </summary>\r\n[System.Serializable]\r\npublic class DiagnosticsData\r\n{\r\n    public string timestamp;\r\n    public PerformanceData performanceData;\r\n    public string[] errors;\r\n    public string deviceInfo;\r\n}\r\n\r\n/// <summary>\r\n/// 性能数据类\r\n/// </summary>\r\n[System.Serializable]\r\npublic class PerformanceData\r\n{\r\n    public float currentFPS;\r\n    public float averageFPS;\r\n    public float minFPS;\r\n    public float maxFPS;\r\n    public long totalMemory;\r\n    public long usedMemory;\r\n    public long reservedMemory;\r\n} "
        }
    ]
}