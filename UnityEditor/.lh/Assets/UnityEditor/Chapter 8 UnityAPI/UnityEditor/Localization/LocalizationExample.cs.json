{
    "sourceFile": "Assets/UnityEditor/Chapter 8 UnityAPI/UnityEditor/Localization/LocalizationExample.cs",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1750940647899,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1750940647899,
            "name": "Commit-0",
            "content": "using UnityEngine;\r\nusing UnityEditor;\r\nusing UnityEditor.Localization;\r\nusing UnityEngine.Localization;\r\nusing UnityEngine.Localization.Settings;\r\nusing System.Collections.Generic;\r\nusing System.Linq;\r\n\r\nnamespace UnityEditor.Localization.Examples\r\n{\r\n    /// <summary>\r\n    /// UnityEditor.Localization 命名空间使用示例\r\n    /// 演示本地化系统的配置、管理和使用功能\r\n    /// </summary>\r\n    public class LocalizationExample : MonoBehaviour\r\n    {\r\n        [Header(\"本地化配置\")]\r\n        [SerializeField] private bool enableLocalization = true;\r\n        [SerializeField] private string defaultLocale = \"en\";\r\n        [SerializeField] private string[] supportedLocales = { \"en\", \"zh-CN\", \"ja\", \"ko\" };\r\n        \r\n        [Header(\"本地化状态\")]\r\n        [SerializeField] private string currentLocale = \"en\";\r\n        [SerializeField] private bool isInitialized = false;\r\n        [SerializeField] private int localeCount = 0;\r\n        [SerializeField] private string lastLocalizedText = \"\";\r\n        \r\n        [Header(\"测试文本\")]\r\n        [SerializeField] private string testKey = \"hello_world\";\r\n        [SerializeField] private string testText = \"Hello World\";\r\n        [SerializeField] private LocalizedString localizedString;\r\n        \r\n        private LocalizationSettings localizationSettings;\r\n        private List<Locale> availableLocales = new List<Locale>();\r\n        private Dictionary<string, string> customTranslations = new Dictionary<string, string>();\r\n        \r\n        /// <summary>\r\n        /// 初始化本地化系统\r\n        /// </summary>\r\n        private void Start()\r\n        {\r\n            InitializeLocalizationSystem();\r\n        }\r\n        \r\n        /// <summary>\r\n        /// 初始化本地化系统\r\n        /// </summary>\r\n        private void InitializeLocalizationSystem()\r\n        {\r\n            if (!enableLocalization)\r\n            {\r\n                Debug.Log(\"本地化系统已禁用\");\r\n                return;\r\n            }\r\n            \r\n            try\r\n            {\r\n                // 获取本地化设置\r\n                localizationSettings = LocalizationSettings.Instance;\r\n                \r\n                // 等待本地化系统初始化\r\n                StartCoroutine(WaitForLocalizationInitialization());\r\n                \r\n                // 初始化自定义翻译\r\n                InitializeCustomTranslations();\r\n                \r\n                Debug.Log(\"本地化系统初始化完成\");\r\n            }\r\n            catch (System.Exception e)\r\n            {\r\n                Debug.LogError($\"本地化系统初始化失败: {e.Message}\");\r\n            }\r\n        }\r\n        \r\n        /// <summary>\r\n        /// 等待本地化系统初始化\r\n        /// </summary>\r\n        private System.Collections.IEnumerator WaitForLocalizationInitialization()\r\n        {\r\n            yield return LocalizationSettings.InitializationOperation;\r\n            \r\n            isInitialized = true;\r\n            localeCount = LocalizationSettings.AvailableLocales.Locales.Count;\r\n            \r\n            // 设置默认语言\r\n            SetLocale(defaultLocale);\r\n            \r\n            Debug.Log($\"本地化系统已就绪，支持 {localeCount} 种语言\");\r\n        }\r\n        \r\n        /// <summary>\r\n        /// 初始化自定义翻译\r\n        /// </summary>\r\n        private void InitializeCustomTranslations()\r\n        {\r\n            customTranslations.Clear();\r\n            \r\n            // 英文翻译\r\n            customTranslations[\"en:hello_world\"] = \"Hello World\";\r\n            customTranslations[\"en:welcome\"] = \"Welcome to Unity\";\r\n            customTranslations[\"en:goodbye\"] = \"Goodbye\";\r\n            \r\n            // 中文翻译\r\n            customTranslations[\"zh-CN:hello_world\"] = \"你好世界\";\r\n            customTranslations[\"zh-CN:welcome\"] = \"欢迎使用Unity\";\r\n            customTranslations[\"zh-CN:goodbye\"] = \"再见\";\r\n            \r\n            // 日文翻译\r\n            customTranslations[\"ja:hello_world\"] = \"こんにちは世界\";\r\n            customTranslations[\"ja:welcome\"] = \"Unityへようこそ\";\r\n            customTranslations[\"ja:goodbye\"] = \"さようなら\";\r\n            \r\n            // 韩文翻译\r\n            customTranslations[\"ko:hello_world\"] = \"안녕하세요 세계\";\r\n            customTranslations[\"ko:welcome\"] = \"Unity에 오신 것을 환영합니다\";\r\n            customTranslations[\"ko:goodbye\"] = \"안녕히 가세요\";\r\n        }\r\n        \r\n        /// <summary>\r\n        /// 设置当前语言\r\n        /// </summary>\r\n        public void SetLocale(string localeCode)\r\n        {\r\n            if (!isInitialized)\r\n            {\r\n                Debug.LogWarning(\"本地化系统尚未初始化\");\r\n                return;\r\n            }\r\n            \r\n            var locale = LocalizationSettings.AvailableLocales.Locales.FirstOrDefault(l => l.Identifier.Code == localeCode);\r\n            if (locale != null)\r\n            {\r\n                LocalizationSettings.SelectedLocale = locale;\r\n                currentLocale = localeCode;\r\n                Debug.Log($\"语言已切换到: {localeCode}\");\r\n            }\r\n            else\r\n            {\r\n                Debug.LogWarning($\"不支持的语言: {localeCode}\");\r\n            }\r\n        }\r\n        \r\n        /// <summary>\r\n        /// 获取本地化文本\r\n        /// </summary>\r\n        public string GetLocalizedText(string key)\r\n        {\r\n            if (!isInitialized)\r\n            {\r\n                return key;\r\n            }\r\n            \r\n            string translationKey = $\"{currentLocale}:{key}\";\r\n            if (customTranslations.ContainsKey(translationKey))\r\n            {\r\n                lastLocalizedText = customTranslations[translationKey];\r\n                return lastLocalizedText;\r\n            }\r\n            \r\n            // 如果没有找到翻译，返回键名\r\n            lastLocalizedText = key;\r\n            return key;\r\n        }\r\n        \r\n        /// <summary>\r\n        /// 添加自定义翻译\r\n        /// </summary>\r\n        public void AddTranslation(string locale, string key, string translation)\r\n        {\r\n            string translationKey = $\"{locale}:{key}\";\r\n            customTranslations[translationKey] = translation;\r\n            Debug.Log($\"添加翻译: {translationKey} = {translation}\");\r\n        }\r\n        \r\n        /// <summary>\r\n        /// 移除翻译\r\n        /// </summary>\r\n        public void RemoveTranslation(string locale, string key)\r\n        {\r\n            string translationKey = $\"{locale}:{key}\";\r\n            if (customTranslations.Remove(translationKey))\r\n            {\r\n                Debug.Log($\"移除翻译: {translationKey}\");\r\n            }\r\n        }\r\n        \r\n        /// <summary>\r\n        /// 获取所有可用语言\r\n        /// </summary>\r\n        public string[] GetAvailableLocales()\r\n        {\r\n            if (!isInitialized)\r\n            {\r\n                return new string[0];\r\n            }\r\n            \r\n            return LocalizationSettings.AvailableLocales.Locales\r\n                .Select(l => l.Identifier.Code)\r\n                .ToArray();\r\n        }\r\n        \r\n        /// <summary>\r\n        /// 获取当前语言信息\r\n        /// </summary>\r\n        public string GetCurrentLocaleInfo()\r\n        {\r\n            if (!isInitialized)\r\n            {\r\n                return \"本地化系统未初始化\";\r\n            }\r\n            \r\n            var currentLocaleObj = LocalizationSettings.SelectedLocale;\r\n            if (currentLocaleObj != null)\r\n            {\r\n                return $\"当前语言: {currentLocaleObj.Identifier.Code} ({currentLocaleObj.Identifier.CultureInfo.NativeName})\";\r\n            }\r\n            \r\n            return \"未设置语言\";\r\n        }\r\n        \r\n        /// <summary>\r\n        /// 创建本地化字符串\r\n        /// </summary>\r\n        public LocalizedString CreateLocalizedString(string tableName, string key)\r\n        {\r\n            var localizedString = new LocalizedString(tableName, key);\r\n            return localizedString;\r\n        }\r\n        \r\n        /// <summary>\r\n        /// 导出翻译数据\r\n        /// </summary>\r\n        public void ExportTranslations()\r\n        {\r\n            if (!isInitialized)\r\n            {\r\n                Debug.LogWarning(\"本地化系统尚未初始化\");\r\n                return;\r\n            }\r\n            \r\n            string exportPath = EditorUtility.SaveFilePanel(\"导出翻译\", \"\", \"translations\", \"json\");\r\n            if (string.IsNullOrEmpty(exportPath))\r\n                return;\r\n            \r\n            try\r\n            {\r\n                var exportData = new Dictionary<string, Dictionary<string, string>>();\r\n                \r\n                foreach (string locale in supportedLocales)\r\n                {\r\n                    exportData[locale] = new Dictionary<string, string>();\r\n                    foreach (string key in customTranslations.Keys.Where(k => k.StartsWith(locale + \":\")))\r\n                    {\r\n                        string cleanKey = key.Substring(locale.Length + 1);\r\n                        exportData[locale][cleanKey] = customTranslations[key];\r\n                    }\r\n                }\r\n                \r\n                string json = JsonUtility.ToJson(new { translations = exportData }, true);\r\n                System.IO.File.WriteAllText(exportPath, json);\r\n                \r\n                Debug.Log($\"翻译数据已导出到: {exportPath}\");\r\n            }\r\n            catch (System.Exception e)\r\n            {\r\n                Debug.LogError($\"导出翻译失败: {e.Message}\");\r\n            }\r\n        }\r\n        \r\n        /// <summary>\r\n        /// 导入翻译数据\r\n        /// </summary>\r\n        public void ImportTranslations()\r\n        {\r\n            string importPath = EditorUtility.OpenFilePanel(\"导入翻译\", \"\", \"json\");\r\n            if (string.IsNullOrEmpty(importPath))\r\n                return;\r\n            \r\n            try\r\n            {\r\n                string json = System.IO.File.ReadAllText(importPath);\r\n                var importData = JsonUtility.FromJson<Dictionary<string, Dictionary<string, string>>>(json);\r\n                \r\n                foreach (var locale in importData.Keys)\r\n                {\r\n                    foreach (var translation in importData[locale])\r\n                    {\r\n                        AddTranslation(locale, translation.Key, translation.Value);\r\n                    }\r\n                }\r\n                \r\n                Debug.Log($\"翻译数据已从 {importPath} 导入\");\r\n            }\r\n            catch (System.Exception e)\r\n            {\r\n                Debug.LogError($\"导入翻译失败: {e.Message}\");\r\n            }\r\n        }\r\n        \r\n        /// <summary>\r\n        /// 验证翻译完整性\r\n        /// </summary>\r\n        public void ValidateTranslations()\r\n        {\r\n            var missingTranslations = new List<string>();\r\n            \r\n            foreach (string locale in supportedLocales)\r\n            {\r\n                foreach (string key in customTranslations.Keys.Where(k => k.StartsWith(\"en:\")))\r\n                {\r\n                    string cleanKey = key.Substring(3);\r\n                    string translationKey = $\"{locale}:{cleanKey}\";\r\n                    \r\n                    if (!customTranslations.ContainsKey(translationKey))\r\n                    {\r\n                        missingTranslations.Add($\"{locale}:{cleanKey}\");\r\n                    }\r\n                }\r\n            }\r\n            \r\n            if (missingTranslations.Count > 0)\r\n            {\r\n                Debug.LogWarning($\"发现缺失的翻译: {string.Join(\", \", missingTranslations)}\");\r\n            }\r\n            else\r\n            {\r\n                Debug.Log(\"所有翻译都完整\");\r\n            }\r\n        }\r\n        \r\n        /// <summary>\r\n        /// 在编辑器中显示GUI\r\n        /// </summary>\r\n        private void OnGUI()\r\n        {\r\n            if (!Application.isPlaying) return;\r\n            \r\n            GUILayout.BeginArea(new Rect(10, 10, 500, 700));\r\n            GUILayout.Label(\"UnityEditor.Localization 示例\", EditorStyles.boldLabel);\r\n            \r\n            GUILayout.Space(10);\r\n            GUILayout.Label($\"状态: {(isInitialized ? \"已初始化\" : \"初始化中...\")}\");\r\n            GUILayout.Label($\"当前语言: {currentLocale}\");\r\n            GUILayout.Label($\"支持语言数量: {localeCount}\");\r\n            GUILayout.Label($\"最后翻译: {lastLocalizedText}\");\r\n            \r\n            GUILayout.Space(10);\r\n            GUILayout.Label(\"语言控制\", EditorStyles.boldLabel);\r\n            \r\n            string[] availableLocales = GetAvailableLocales();\r\n            if (availableLocales.Length > 0)\r\n            {\r\n                int currentIndex = System.Array.IndexOf(availableLocales, currentLocale);\r\n                int newIndex = EditorGUILayout.Popup(\"选择语言\", currentIndex, availableLocales);\r\n                if (newIndex != currentIndex && newIndex >= 0)\r\n                {\r\n                    SetLocale(availableLocales[newIndex]);\r\n                }\r\n            }\r\n            \r\n            GUILayout.Space(10);\r\n            GUILayout.Label(\"翻译测试\", EditorStyles.boldLabel);\r\n            \r\n            testKey = GUILayout.TextField(\"翻译键\", testKey);\r\n            if (GUILayout.Button(\"获取翻译\"))\r\n            {\r\n                string translation = GetLocalizedText(testKey);\r\n                Debug.Log($\"翻译结果: {translation}\");\r\n            }\r\n            \r\n            GUILayout.Space(10);\r\n            GUILayout.Label(\"翻译管理\", EditorStyles.boldLabel);\r\n            \r\n            string newLocale = GUILayout.TextField(\"语言代码\", \"en\");\r\n            string newKey = GUILayout.TextField(\"翻译键\", \"new_key\");\r\n            string newTranslation = GUILayout.TextField(\"翻译文本\", \"New Translation\");\r\n            \r\n            if (GUILayout.Button(\"添加翻译\"))\r\n            {\r\n                AddTranslation(newLocale, newKey, newTranslation);\r\n            }\r\n            \r\n            if (GUILayout.Button(\"验证翻译完整性\"))\r\n            {\r\n                ValidateTranslations();\r\n            }\r\n            \r\n            GUILayout.Space(10);\r\n            GUILayout.Label(\"导入导出\", EditorStyles.boldLabel);\r\n            \r\n            if (GUILayout.Button(\"导出翻译\"))\r\n            {\r\n                ExportTranslations();\r\n            }\r\n            \r\n            if (GUILayout.Button(\"导入翻译\"))\r\n            {\r\n                ImportTranslations();\r\n            }\r\n            \r\n            GUILayout.Space(10);\r\n            GUILayout.Label(\"配置\", EditorStyles.boldLabel);\r\n            \r\n            enableLocalization = EditorGUILayout.Toggle(\"启用本地化\", enableLocalization);\r\n            defaultLocale = EditorGUILayout.TextField(\"默认语言\", defaultLocale);\r\n            \r\n            GUILayout.EndArea();\r\n        }\r\n    }\r\n} "
        }
    ]
}