{
    "sourceFile": "Assets/UnityEditor/Chapter 8 UnityAPI/UnityEngine/ParticleSystem/ParticleSystemExample.cs",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 7,
            "patches": [
                {
                    "date": 1750930583987,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1750935545286,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,9 +7,9 @@\n /// </summary>\r\n public class ParticleSystemExample : MonoBehaviour\r\n {\r\n     [Header(\"粒子系统组件\")]\r\n-    [SerializeField] private ParticleSystem mainParticleSystem;\r\n+    [SerializeField] private ParticleSystem mainParticleSystem; \r\n     [SerializeField] private ParticleSystem[] subParticleSystems;\r\n     [SerializeField] private ParticleSystemRenderer particleRenderer;\r\n     \r\n     [Header(\"粒子系统设置\")]\r\n"
                },
                {
                    "date": 1750935551892,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,11 +7,11 @@\n /// </summary>\r\n public class ParticleSystemExample : MonoBehaviour\r\n {\r\n     [Header(\"粒子系统组件\")]\r\n-    [SerializeField] private ParticleSystem mainParticleSystem; \r\n-    [SerializeField] private ParticleSystem[] subParticleSystems;\r\n-    [SerializeField] private ParticleSystemRenderer particleRenderer;\r\n+    [SerializeField] private ParticleSystem mainParticleSystem;    //主粒子系统\r\n+    [SerializeField] private ParticleSystem[] subParticleSystems; //子粒子系统\r\n+    [SerializeField] private ParticleSystemRenderer particleRenderer; //粒子系统渲染器\r\n     \r\n     [Header(\"粒子系统设置\")]\r\n     [SerializeField] private bool enableParticleSystem = true;\r\n     [SerializeField] private bool autoStart = true;\r\n"
                },
                {
                    "date": 1750935558678,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -12,24 +12,24 @@\n     [SerializeField] private ParticleSystem[] subParticleSystems; //子粒子系统\r\n     [SerializeField] private ParticleSystemRenderer particleRenderer; //粒子系统渲染器\r\n     \r\n     [Header(\"粒子系统设置\")]\r\n-    [SerializeField] private bool enableParticleSystem = true;\r\n-    [SerializeField] private bool autoStart = true;\r\n-    [SerializeField] private bool loop = true;\r\n-    [SerializeField] private float duration = 5f;\r\n-    [SerializeField] private float startLifetime = 2f;\r\n-    [SerializeField] private int maxParticles = 1000;\r\n+    [SerializeField] private bool enableParticleSystem = true; //是否启用粒子系统\r\n+    [SerializeField] private bool autoStart = true; //是否自动开始\r\n+    [SerializeField] private bool loop = true; //是否循环\r\n+    [SerializeField] private float duration = 5f; //持续时间\r\n+    [SerializeField] private float startLifetime = 2f; //起始生命周期\r\n+    [SerializeField] private int maxParticles = 1000; //最大粒子数\r\n     \r\n     [Header(\"发射设置\")]\r\n-    [SerializeField] private float emissionRate = 10f;\r\n-    [SerializeField] private float burstCount = 5f;\r\n-    [SerializeField] private float burstTime = 0.5f;\r\n-    [SerializeField] private ParticleSystemShapeType shapeType = ParticleSystemShapeType.Sphere;\r\n-    [SerializeField] private float shapeRadius = 1f;\r\n+    [SerializeField] private float emissionRate = 10f; //发射率\r\n+    [SerializeField] private float burstCount = 5f; //爆发数量\r\n+    [SerializeField] private float burstTime = 0.5f; //爆发时间\r\n+    [SerializeField] private ParticleSystemShapeType shapeType = ParticleSystemShapeType.Sphere; //形状类型\r\n+    [SerializeField] private float shapeRadius = 1f; //形状半径\r\n     \r\n     [Header(\"粒子属性\")]\r\n-    [SerializeField] private float startSpeed = 5f;\r\n+        [SerializeField] private float startSpeed = 5f;\r\n     [SerializeField] private float startSize = 0.1f;\r\n     [SerializeField] private Color startColor = Color.white;\r\n     [SerializeField] private float gravityModifier = 1f;\r\n     [SerializeField] private bool useWorldSpace = true;\r\n"
                },
                {
                    "date": 1750935565334,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -27,16 +27,16 @@\n     [SerializeField] private ParticleSystemShapeType shapeType = ParticleSystemShapeType.Sphere; //形状类型\r\n     [SerializeField] private float shapeRadius = 1f; //形状半径\r\n     \r\n     [Header(\"粒子属性\")]\r\n-        [SerializeField] private float startSpeed = 5f;\r\n-    [SerializeField] private float startSize = 0.1f;\r\n-    [SerializeField] private Color startColor = Color.white;\r\n-    [SerializeField] private float gravityModifier = 1f;\r\n-    [SerializeField] private bool useWorldSpace = true;\r\n+    [SerializeField] private float startSpeed = 5f; //起始速度\r\n+    [SerializeField] private float startSize = 0.1f; //起始大小\r\n+    [SerializeField] private Color startColor = Color.white; //起始颜色\r\n+    [SerializeField] private float gravityModifier = 1f; //重力修改器\r\n+    [SerializeField] private bool useWorldSpace = true; //是否使用世界空间\r\n     \r\n     [Header(\"粒子系统状态\")]\r\n-    [SerializeField] private bool isPlaying = false;\r\n+    [SerializeField] private bool isPlaying = false; //是否播放\r\n     [SerializeField] private bool isPaused = false;\r\n     [SerializeField] private float currentTime = 0f;\r\n     [SerializeField] private int particleCount = 0;\r\n     [SerializeField] private float emissionRateOverTime = 0f;\r\n"
                },
                {
                    "date": 1750935583637,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -35,20 +35,20 @@\n     [SerializeField] private bool useWorldSpace = true; //是否使用世界空间\r\n     \r\n     [Header(\"粒子系统状态\")]\r\n     [SerializeField] private bool isPlaying = false; //是否播放\r\n-    [SerializeField] private bool isPaused = false;\r\n-    [SerializeField] private float currentTime = 0f;\r\n-    [SerializeField] private int particleCount = 0;\r\n-    [SerializeField] private float emissionRateOverTime = 0f;\r\n+    [SerializeField] private bool isPaused = false; //是否暂停\r\n+    [SerializeField] private float currentTime = 0f; //当前时间\r\n+    [SerializeField] private int particleCount = 0; //粒子数量\r\n+    [SerializeField] private float emissionRateOverTime = 0f; //发射率\r\n     \r\n     [Header(\"效果设置\")]\r\n-    [SerializeField] private bool enableTrails = false;\r\n-    [SerializeField] private bool enableCollision = false;\r\n-    [SerializeField] private bool enableSubEmitters = false;\r\n-    [SerializeField] private bool enableForceOverLifetime = false;\r\n-    [SerializeField] private bool enableColorOverLifetime = false;\r\n-    [SerializeField] private bool enableSizeOverLifetime = false;\r\n+    [SerializeField] private bool enableTrails = false; //是否启用轨迹\r\n+    [SerializeField] private bool enableCollision = false; //是否启用碰撞\r\n+    [SerializeField] private bool enableSubEmitters = false; //是否启用子发射器\r\n+    [SerializeField] private bool enableForceOverLifetime = false; //是否启用力随时间变化\r\n+    [SerializeField] private bool enableColorOverLifetime = false;  //\r\n+    [SerializeField] private bool enableSizeOverLifetime = false; // \r\n     \r\n     // 粒子系统事件\r\n     private System.Action<ParticleSystem> onParticleSystemStart;\r\n     private System.Action<ParticleSystem> onParticleSystemStop;\r\n"
                },
                {
                    "date": 1750935598022,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -45,13 +45,13 @@\n     [SerializeField] private bool enableTrails = false; //是否启用轨迹\r\n     [SerializeField] private bool enableCollision = false; //是否启用碰撞\r\n     [SerializeField] private bool enableSubEmitters = false; //是否启用子发射器\r\n     [SerializeField] private bool enableForceOverLifetime = false; //是否启用力随时间变化\r\n-    [SerializeField] private bool enableColorOverLifetime = false;  //\r\n-    [SerializeField] private bool enableSizeOverLifetime = false; // \r\n+    [SerializeField] private bool enableColorOverLifetime = false;  //是否启用颜色随时间变化\r\n+    [SerializeField] private bool enableSizeOverLifetime = false; //是否启用大小随时间变化\r\n     \r\n     // 粒子系统事件\r\n-    private System.Action<ParticleSystem> onParticleSystemStart;\r\n+    private System.Action<ParticleSystem> onParticleSystemStart; \r\n     private System.Action<ParticleSystem> onParticleSystemStop;\r\n     private System.Action<ParticleSystem> onParticleSystemPause;\r\n     \r\n     private void Start()\r\n"
                },
                {
                    "date": 1750935615737,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -49,9 +49,9 @@\n     [SerializeField] private bool enableColorOverLifetime = false;  //是否启用颜色随时间变化\r\n     [SerializeField] private bool enableSizeOverLifetime = false; //是否启用大小随时间变化\r\n     \r\n     // 粒子系统事件\r\n-    private System.Action<ParticleSystem> onParticleSystemStart; \r\n+    private System.Action<ParticleSystem> onParticleSystemStart;  //    \r\n     private System.Action<ParticleSystem> onParticleSystemStop;\r\n     private System.Action<ParticleSystem> onParticleSystemPause;\r\n     \r\n     private void Start()\r\n"
                }
            ],
            "date": 1750930583987,
            "name": "Commit-0",
            "content": "using UnityEngine;\r\nusing System.Collections.Generic;\r\n\r\n/// <summary>\r\n/// UnityEngine.ParticleSystem 命名空间案例演示\r\n/// 展示粒子系统的核心功能\r\n/// </summary>\r\npublic class ParticleSystemExample : MonoBehaviour\r\n{\r\n    [Header(\"粒子系统组件\")]\r\n    [SerializeField] private ParticleSystem mainParticleSystem;\r\n    [SerializeField] private ParticleSystem[] subParticleSystems;\r\n    [SerializeField] private ParticleSystemRenderer particleRenderer;\r\n    \r\n    [Header(\"粒子系统设置\")]\r\n    [SerializeField] private bool enableParticleSystem = true;\r\n    [SerializeField] private bool autoStart = true;\r\n    [SerializeField] private bool loop = true;\r\n    [SerializeField] private float duration = 5f;\r\n    [SerializeField] private float startLifetime = 2f;\r\n    [SerializeField] private int maxParticles = 1000;\r\n    \r\n    [Header(\"发射设置\")]\r\n    [SerializeField] private float emissionRate = 10f;\r\n    [SerializeField] private float burstCount = 5f;\r\n    [SerializeField] private float burstTime = 0.5f;\r\n    [SerializeField] private ParticleSystemShapeType shapeType = ParticleSystemShapeType.Sphere;\r\n    [SerializeField] private float shapeRadius = 1f;\r\n    \r\n    [Header(\"粒子属性\")]\r\n    [SerializeField] private float startSpeed = 5f;\r\n    [SerializeField] private float startSize = 0.1f;\r\n    [SerializeField] private Color startColor = Color.white;\r\n    [SerializeField] private float gravityModifier = 1f;\r\n    [SerializeField] private bool useWorldSpace = true;\r\n    \r\n    [Header(\"粒子系统状态\")]\r\n    [SerializeField] private bool isPlaying = false;\r\n    [SerializeField] private bool isPaused = false;\r\n    [SerializeField] private float currentTime = 0f;\r\n    [SerializeField] private int particleCount = 0;\r\n    [SerializeField] private float emissionRateOverTime = 0f;\r\n    \r\n    [Header(\"效果设置\")]\r\n    [SerializeField] private bool enableTrails = false;\r\n    [SerializeField] private bool enableCollision = false;\r\n    [SerializeField] private bool enableSubEmitters = false;\r\n    [SerializeField] private bool enableForceOverLifetime = false;\r\n    [SerializeField] private bool enableColorOverLifetime = false;\r\n    [SerializeField] private bool enableSizeOverLifetime = false;\r\n    \r\n    // 粒子系统事件\r\n    private System.Action<ParticleSystem> onParticleSystemStart;\r\n    private System.Action<ParticleSystem> onParticleSystemStop;\r\n    private System.Action<ParticleSystem> onParticleSystemPause;\r\n    \r\n    private void Start()\r\n    {\r\n        InitializeParticleSystem();\r\n    }\r\n    \r\n    /// <summary>\r\n    /// 初始化粒子系统\r\n    /// </summary>\r\n    private void InitializeParticleSystem()\r\n    {\r\n        // 获取或创建主粒子系统\r\n        if (mainParticleSystem == null)\r\n        {\r\n            mainParticleSystem = GetComponent<ParticleSystem>();\r\n            if (mainParticleSystem == null)\r\n            {\r\n                mainParticleSystem = gameObject.AddComponent<ParticleSystem>();\r\n            }\r\n        }\r\n        \r\n        // 获取粒子系统渲染器\r\n        if (particleRenderer == null)\r\n        {\r\n            particleRenderer = GetComponent<ParticleSystemRenderer>();\r\n            if (particleRenderer == null)\r\n            {\r\n                particleRenderer = gameObject.GetComponent<ParticleSystemRenderer>();\r\n            }\r\n        }\r\n        \r\n        // 配置粒子系统\r\n        ConfigureParticleSystem();\r\n        \r\n        // 设置粒子系统事件\r\n        SetupParticleSystemEvents();\r\n        \r\n        // 创建子粒子系统\r\n        CreateSubParticleSystems();\r\n        \r\n        Debug.Log(\"粒子系统初始化完成\");\r\n    }\r\n    \r\n    /// <summary>\r\n    /// 配置粒子系统\r\n    /// </summary>\r\n    private void ConfigureParticleSystem()\r\n    {\r\n        if (mainParticleSystem == null) return;\r\n        \r\n        var main = mainParticleSystem.main;\r\n        var emission = mainParticleSystem.emission;\r\n        var shape = mainParticleSystem.shape;\r\n        var velocityOverLifetime = mainParticleSystem.velocityOverLifetime;\r\n        var colorOverLifetime = mainParticleSystem.colorOverLifetime;\r\n        var sizeOverLifetime = mainParticleSystem.sizeOverLifetime;\r\n        var trails = mainParticleSystem.trails;\r\n        var collision = mainParticleSystem.collision;\r\n        var subEmitters = mainParticleSystem.subEmitters;\r\n        var forceOverLifetime = mainParticleSystem.forceOverLifetime;\r\n        \r\n        // 主模块设置\r\n        main.duration = duration;\r\n        main.loop = loop;\r\n        main.startLifetime = startLifetime;\r\n        main.startSpeed = startSpeed;\r\n        main.startSize = startSize;\r\n        main.startColor = startColor;\r\n        main.gravityModifier = gravityModifier;\r\n        main.maxParticles = maxParticles;\r\n        main.simulationSpace = useWorldSpace ? ParticleSystemSimulationSpace.World : ParticleSystemSimulationSpace.Local;\r\n        \r\n        // 发射模块设置\r\n        emission.enabled = true;\r\n        emission.rateOverTime = emissionRate;\r\n        \r\n        // 添加爆发\r\n        var burst = new ParticleSystem.Burst(burstTime, burstCount);\r\n        emission.SetBursts(new ParticleSystem.Burst[] { burst });\r\n        \r\n        // 形状模块设置\r\n        shape.enabled = true;\r\n        shape.shapeType = shapeType;\r\n        shape.radius = shapeRadius;\r\n        \r\n        // 速度随时间变化\r\n        velocityOverLifetime.enabled = true;\r\n        velocityOverLifetime.space = ParticleSystemSimulationSpace.Local;\r\n        \r\n        // 颜色随时间变化\r\n        if (enableColorOverLifetime)\r\n        {\r\n            colorOverLifetime.enabled = true;\r\n            var colorGradient = new Gradient();\r\n            colorGradient.SetKeys(\r\n                new GradientColorKey[] { new GradientColorKey(Color.red, 0.0f), new GradientColorKey(Color.blue, 1.0f) },\r\n                new GradientAlphaKey[] { new GradientAlphaKey(1.0f, 0.0f), new GradientAlphaKey(0.0f, 1.0f) }\r\n            );\r\n            colorOverLifetime.color = colorGradient;\r\n        }\r\n        \r\n        // 大小随时间变化\r\n        if (enableSizeOverLifetime)\r\n        {\r\n            sizeOverLifetime.enabled = true;\r\n            var sizeCurve = new AnimationCurve();\r\n            sizeCurve.AddKey(0f, 0.1f);\r\n            sizeCurve.AddKey(0.5f, 1f);\r\n            sizeCurve.AddKey(1f, 0.1f);\r\n            sizeOverLifetime.size = new ParticleSystem.MinMaxCurve(1f, sizeCurve);\r\n        }\r\n        \r\n        // 轨迹设置\r\n        if (enableTrails)\r\n        {\r\n            trails.enabled = true;\r\n            trails.mode = ParticleSystemTrailMode.PerParticle;\r\n            trails.ratio = 1f;\r\n            trails.lifetime = 0.5f;\r\n        }\r\n        \r\n        // 碰撞设置\r\n        if (enableCollision)\r\n        {\r\n            collision.enabled = true;\r\n            collision.type = ParticleSystemCollisionType.World;\r\n            collision.mode = ParticleSystemCollisionMode.Collision3D;\r\n        }\r\n        \r\n        // 力随时间变化\r\n        if (enableForceOverLifetime)\r\n        {\r\n            forceOverLifetime.enabled = true;\r\n            forceOverLifetime.space = ParticleSystemSimulationSpace.World;\r\n            forceOverLifetime.x = new ParticleSystem.MinMaxCurve(0f, 1f);\r\n            forceOverLifetime.y = new ParticleSystem.MinMaxCurve(0f, 1f);\r\n            forceOverLifetime.z = new ParticleSystem.MinMaxCurve(0f, 1f);\r\n        }\r\n        \r\n        Debug.Log(\"粒子系统配置完成\");\r\n    }\r\n    \r\n    /// <summary>\r\n    /// 设置粒子系统事件\r\n    /// </summary>\r\n    private void SetupParticleSystemEvents()\r\n    {\r\n        if (mainParticleSystem == null) return;\r\n        \r\n        // 监听粒子系统事件\r\n        mainParticleSystem.Stop();\r\n        mainParticleSystem.Clear();\r\n        \r\n        Debug.Log(\"粒子系统事件设置完成\");\r\n    }\r\n    \r\n    /// <summary>\r\n    /// 创建子粒子系统\r\n    /// </summary>\r\n    private void CreateSubParticleSystems()\r\n    {\r\n        if (subParticleSystems == null || subParticleSystems.Length == 0)\r\n        {\r\n            // 创建默认的子粒子系统\r\n            subParticleSystems = new ParticleSystem[2];\r\n            \r\n            // 创建爆炸效果\r\n            GameObject explosionObj = new GameObject(\"ExplosionParticles\");\r\n            explosionObj.transform.SetParent(transform);\r\n            explosionObj.transform.localPosition = Vector3.zero;\r\n            \r\n            var explosionPS = explosionObj.AddComponent<ParticleSystem>();\r\n            var explosionMain = explosionPS.main;\r\n            explosionMain.startLifetime = 1f;\r\n            explosionMain.startSpeed = 3f;\r\n            explosionMain.startSize = 0.2f;\r\n            explosionMain.startColor = Color.yellow;\r\n            explosionMain.maxParticles = 50;\r\n            \r\n            var explosionEmission = explosionPS.emission;\r\n            explosionEmission.rateOverTime = 0;\r\n            explosionEmission.SetBursts(new ParticleSystem.Burst[] { new ParticleSystem.Burst(0f, 20) });\r\n            \r\n            subParticleSystems[0] = explosionPS;\r\n            \r\n            // 创建烟雾效果\r\n            GameObject smokeObj = new GameObject(\"SmokeParticles\");\r\n            smokeObj.transform.SetParent(transform);\r\n            smokeObj.transform.localPosition = Vector3.zero;\r\n            \r\n            var smokePS = smokeObj.AddComponent<ParticleSystem>();\r\n            var smokeMain = smokePS.main;\r\n            smokeMain.startLifetime = 3f;\r\n            smokeMain.startSpeed = 1f;\r\n            smokeMain.startSize = 0.5f;\r\n            smokeMain.startColor = Color.gray;\r\n            smokeMain.maxParticles = 100;\r\n            \r\n            var smokeEmission = smokePS.emission;\r\n            smokeEmission.rateOverTime = 5f;\r\n            \r\n            subParticleSystems[1] = smokePS;\r\n        }\r\n        \r\n        Debug.Log($\"创建了 {subParticleSystems.Length} 个子粒子系统\");\r\n    }\r\n    \r\n    /// <summary>\r\n    /// 播放粒子系统\r\n    /// </summary>\r\n    public void PlayParticleSystem()\r\n    {\r\n        if (mainParticleSystem != null)\r\n        {\r\n            mainParticleSystem.Play();\r\n            isPlaying = true;\r\n            isPaused = false;\r\n        }\r\n        \r\n        // 播放子粒子系统\r\n        foreach (var subPS in subParticleSystems)\r\n        {\r\n            if (subPS != null)\r\n            {\r\n                subPS.Play();\r\n            }\r\n        }\r\n        \r\n        Debug.Log(\"粒子系统开始播放\");\r\n        onParticleSystemStart?.Invoke(mainParticleSystem);\r\n    }\r\n    \r\n    /// <summary>\r\n    /// 暂停粒子系统\r\n    /// </summary>\r\n    public void PauseParticleSystem()\r\n    {\r\n        if (mainParticleSystem != null)\r\n        {\r\n            mainParticleSystem.Pause();\r\n            isPaused = true;\r\n        }\r\n        \r\n        // 暂停子粒子系统\r\n        foreach (var subPS in subParticleSystems)\r\n        {\r\n            if (subPS != null)\r\n            {\r\n                subPS.Pause();\r\n            }\r\n        }\r\n        \r\n        Debug.Log(\"粒子系统已暂停\");\r\n        onParticleSystemPause?.Invoke(mainParticleSystem);\r\n    }\r\n    \r\n    /// <summary>\r\n    /// 停止粒子系统\r\n    /// </summary>\r\n    public void StopParticleSystem()\r\n    {\r\n        if (mainParticleSystem != null)\r\n        {\r\n            mainParticleSystem.Stop();\r\n            isPlaying = false;\r\n            isPaused = false;\r\n        }\r\n        \r\n        // 停止子粒子系统\r\n        foreach (var subPS in subParticleSystems)\r\n        {\r\n            if (subPS != null)\r\n            {\r\n                subPS.Stop();\r\n            }\r\n        }\r\n        \r\n        Debug.Log(\"粒子系统已停止\");\r\n        onParticleSystemStop?.Invoke(mainParticleSystem);\r\n    }\r\n    \r\n    /// <summary>\r\n    /// 清除粒子系统\r\n    /// </summary>\r\n    public void ClearParticleSystem()\r\n    {\r\n        if (mainParticleSystem != null)\r\n        {\r\n            mainParticleSystem.Clear();\r\n        }\r\n        \r\n        // 清除子粒子系统\r\n        foreach (var subPS in subParticleSystems)\r\n        {\r\n            if (subPS != null)\r\n            {\r\n                subPS.Clear();\r\n            }\r\n        }\r\n        \r\n        Debug.Log(\"粒子系统已清除\");\r\n    }\r\n    \r\n    /// <summary>\r\n    /// 设置发射率\r\n    /// </summary>\r\n    /// <param name=\"rate\">发射率</param>\r\n    public void SetEmissionRate(float rate)\r\n    {\r\n        emissionRate = Mathf.Max(0f, rate);\r\n        \r\n        if (mainParticleSystem != null)\r\n        {\r\n            var emission = mainParticleSystem.emission;\r\n            emission.rateOverTime = emissionRate;\r\n        }\r\n        \r\n        Debug.Log($\"发射率已设置为: {emissionRate}\");\r\n    }\r\n    \r\n    /// <summary>\r\n    /// 设置粒子速度\r\n    /// </summary>\r\n    /// <param name=\"speed\">速度</param>\r\n    public void SetParticleSpeed(float speed)\r\n    {\r\n        startSpeed = Mathf.Max(0f, speed);\r\n        \r\n        if (mainParticleSystem != null)\r\n        {\r\n            var main = mainParticleSystem.main;\r\n            main.startSpeed = startSpeed;\r\n        }\r\n        \r\n        Debug.Log($\"粒子速度已设置为: {startSpeed}\");\r\n    }\r\n    \r\n    /// <summary>\r\n    /// 设置粒子大小\r\n    /// </summary>\r\n    /// <param name=\"size\">大小</param>\r\n    public void SetParticleSize(float size)\r\n    {\r\n        startSize = Mathf.Max(0f, size);\r\n        \r\n        if (mainParticleSystem != null)\r\n        {\r\n            var main = mainParticleSystem.main;\r\n            main.startSize = startSize;\r\n        }\r\n        \r\n        Debug.Log($\"粒子大小已设置为: {startSize}\");\r\n    }\r\n    \r\n    /// <summary>\r\n    /// 设置粒子颜色\r\n    /// </summary>\r\n    /// <param name=\"color\">颜色</param>\r\n    public void SetParticleColor(Color color)\r\n    {\r\n        startColor = color;\r\n        \r\n        if (mainParticleSystem != null)\r\n        {\r\n            var main = mainParticleSystem.main;\r\n            main.startColor = startColor;\r\n        }\r\n        \r\n        Debug.Log($\"粒子颜色已设置为: {startColor}\");\r\n    }\r\n    \r\n    /// <summary>\r\n    /// 设置重力修改器\r\n    /// </summary>\r\n    /// <param name=\"gravity\">重力修改器</param>\r\n    public void SetGravityModifier(float gravity)\r\n    {\r\n        gravityModifier = gravity;\r\n        \r\n        if (mainParticleSystem != null)\r\n        {\r\n            var main = mainParticleSystem.main;\r\n            main.gravityModifier = gravityModifier;\r\n        }\r\n        \r\n        Debug.Log($\"重力修改器已设置为: {gravityModifier}\");\r\n    }\r\n    \r\n    /// <summary>\r\n    /// 设置形状类型\r\n    /// </summary>\r\n    /// <param name=\"shapeType\">形状类型</param>\r\n    public void SetShapeType(ParticleSystemShapeType shapeType)\r\n    {\r\n        this.shapeType = shapeType;\r\n        \r\n        if (mainParticleSystem != null)\r\n        {\r\n            var shape = mainParticleSystem.shape;\r\n            shape.shapeType = shapeType;\r\n        }\r\n        \r\n        Debug.Log($\"形状类型已设置为: {shapeType}\");\r\n    }\r\n    \r\n    /// <summary>\r\n    /// 设置形状半径\r\n    /// </summary>\r\n    /// <param name=\"radius\">半径</param>\r\n    public void SetShapeRadius(float radius)\r\n    {\r\n        shapeRadius = Mathf.Max(0f, radius);\r\n        \r\n        if (mainParticleSystem != null)\r\n        {\r\n            var shape = mainParticleSystem.shape;\r\n            shape.radius = shapeRadius;\r\n        }\r\n        \r\n        Debug.Log($\"形状半径已设置为: {shapeRadius}\");\r\n    }\r\n    \r\n    /// <summary>\r\n    /// 触发爆炸效果\r\n    /// </summary>\r\n    public void TriggerExplosion()\r\n    {\r\n        if (subParticleSystems != null && subParticleSystems.Length > 0 && subParticleSystems[0] != null)\r\n        {\r\n            subParticleSystems[0].Play();\r\n            Debug.Log(\"触发爆炸效果\");\r\n        }\r\n    }\r\n    \r\n    /// <summary>\r\n    /// 触发烟雾效果\r\n    /// </summary>\r\n    public void TriggerSmoke()\r\n    {\r\n        if (subParticleSystems != null && subParticleSystems.Length > 1 && subParticleSystems[1] != null)\r\n        {\r\n            subParticleSystems[1].Play();\r\n            Debug.Log(\"触发烟雾效果\");\r\n        }\r\n    }\r\n    \r\n    /// <summary>\r\n    /// 获取粒子系统信息\r\n    /// </summary>\r\n    public void GetParticleSystemInfo()\r\n    {\r\n        Debug.Log(\"=== 粒子系统信息 ===\");\r\n        Debug.Log($\"粒子系统启用: {enableParticleSystem}\");\r\n        Debug.Log($\"播放状态: {(isPlaying ? (isPaused ? \"暂停\" : \"播放中\") : \"停止\")}\");\r\n        Debug.Log($\"当前时间: {currentTime:F2}s\");\r\n        Debug.Log($\"粒子数量: {particleCount}\");\r\n        Debug.Log($\"发射率: {emissionRateOverTime}\");\r\n        Debug.Log($\"持续时间: {duration}s\");\r\n        Debug.Log($\"最大粒子数: {maxParticles}\");\r\n        Debug.Log($\"循环播放: {loop}\");\r\n        Debug.Log($\"自动开始: {autoStart}\");\r\n        \r\n        if (mainParticleSystem != null)\r\n        {\r\n            Debug.Log($\"主粒子系统: 已配置\");\r\n            Debug.Log($\"活跃粒子数: {mainParticleSystem.particleCount}\");\r\n            Debug.Log($\"总粒子数: {mainParticleSystem.totalParticleCount}\");\r\n            Debug.Log($\"时间: {mainParticleSystem.time}\");\r\n            Debug.Log($\"是否播放: {mainParticleSystem.isPlaying}\");\r\n            Debug.Log($\"是否暂停: {mainParticleSystem.isPaused}\");\r\n        }\r\n        \r\n        if (subParticleSystems != null)\r\n        {\r\n            Debug.Log($\"子粒子系统数量: {subParticleSystems.Length}\");\r\n            for (int i = 0; i < subParticleSystems.Length; i++)\r\n            {\r\n                if (subParticleSystems[i] != null)\r\n                {\r\n                    Debug.Log($\"  子系统 {i}: {subParticleSystems[i].name} (活跃粒子: {subParticleSystems[i].particleCount})\");\r\n                }\r\n            }\r\n        }\r\n    }\r\n    \r\n    /// <summary>\r\n    /// 重置粒子系统设置\r\n    /// </summary>\r\n    public void ResetParticleSystemSettings()\r\n    {\r\n        // 重置设置\r\n        enableParticleSystem = true;\r\n        autoStart = true;\r\n        loop = true;\r\n        duration = 5f;\r\n        startLifetime = 2f;\r\n        maxParticles = 1000;\r\n        emissionRate = 10f;\r\n        startSpeed = 5f;\r\n        startSize = 0.1f;\r\n        startColor = Color.white;\r\n        gravityModifier = 1f;\r\n        shapeType = ParticleSystemShapeType.Sphere;\r\n        shapeRadius = 1f;\r\n        \r\n        // 重新配置\r\n        ConfigureParticleSystem();\r\n        \r\n        Debug.Log(\"粒子系统设置已重置\");\r\n    }\r\n    \r\n    private void Update()\r\n    {\r\n        if (mainParticleSystem != null)\r\n        {\r\n            // 更新状态\r\n            currentTime = mainParticleSystem.time;\r\n            particleCount = mainParticleSystem.particleCount;\r\n            \r\n            var emission = mainParticleSystem.emission;\r\n            emissionRateOverTime = emission.rateOverTime.constant;\r\n        }\r\n    }\r\n    \r\n    private void OnGUI()\r\n    {\r\n        // 简单的GUI界面用于测试\r\n        GUILayout.BeginArea(new Rect(10, 10, 400, 700));\r\n        GUILayout.Label(\"粒子系统演示\", EditorStyles.boldLabel);\r\n        \r\n        GUILayout.Space(10);\r\n        \r\n        // 粒子系统状态\r\n        GUILayout.Label($\"播放状态: {(isPlaying ? (isPaused ? \"暂停\" : \"播放中\") : \"停止\")}\");\r\n        GUILayout.Label($\"当前时间: {currentTime:F2}s\");\r\n        GUILayout.Label($\"粒子数量: {particleCount}\");\r\n        GUILayout.Label($\"发射率: {emissionRateOverTime:F1}\");\r\n        \r\n        GUILayout.Space(10);\r\n        \r\n        // 控制按钮\r\n        GUILayout.BeginHorizontal();\r\n        if (GUILayout.Button(\"播放\"))\r\n        {\r\n            PlayParticleSystem();\r\n        }\r\n        if (GUILayout.Button(\"暂停\"))\r\n        {\r\n            PauseParticleSystem();\r\n        }\r\n        if (GUILayout.Button(\"停止\"))\r\n        {\r\n            StopParticleSystem();\r\n        }\r\n        GUILayout.EndHorizontal();\r\n        \r\n        if (GUILayout.Button(\"清除\"))\r\n        {\r\n            ClearParticleSystem();\r\n        }\r\n        \r\n        GUILayout.Space(10);\r\n        \r\n        // 效果按钮\r\n        if (GUILayout.Button(\"触发爆炸\"))\r\n        {\r\n            TriggerExplosion();\r\n        }\r\n        \r\n        if (GUILayout.Button(\"触发烟雾\"))\r\n        {\r\n            TriggerSmoke();\r\n        }\r\n        \r\n        GUILayout.Space(10);\r\n        \r\n        // 参数控制\r\n        GUILayout.Label(\"发射率:\");\r\n        emissionRate = GUILayout.HorizontalSlider(emissionRate, 0f, 50f);\r\n        if (GUILayout.Button(\"设置发射率\"))\r\n        {\r\n            SetEmissionRate(emissionRate);\r\n        }\r\n        \r\n        GUILayout.Label(\"粒子速度:\");\r\n        startSpeed = GUILayout.HorizontalSlider(startSpeed, 0f, 20f);\r\n        if (GUILayout.Button(\"设置速度\"))\r\n        {\r\n            SetParticleSpeed(startSpeed);\r\n        }\r\n        \r\n        GUILayout.Label(\"粒子大小:\");\r\n        startSize = GUILayout.HorizontalSlider(startSize, 0.01f, 2f);\r\n        if (GUILayout.Button(\"设置大小\"))\r\n        {\r\n            SetParticleSize(startSize);\r\n        }\r\n        \r\n        GUILayout.Label(\"重力修改器:\");\r\n        gravityModifier = GUILayout.HorizontalSlider(gravityModifier, -2f, 2f);\r\n        if (GUILayout.Button(\"设置重力\"))\r\n        {\r\n            SetGravityModifier(gravityModifier);\r\n        }\r\n        \r\n        GUILayout.Space(10);\r\n        \r\n        if (GUILayout.Button(\"获取粒子系统信息\"))\r\n        {\r\n            GetParticleSystemInfo();\r\n        }\r\n        \r\n        if (GUILayout.Button(\"重置设置\"))\r\n        {\r\n            ResetParticleSystemSettings();\r\n        }\r\n        \r\n        GUILayout.EndArea();\r\n    }\r\n} "
        }
    ]
}