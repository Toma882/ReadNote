{
    "sourceFile": "Assets/UnityEditor/Chapter 8 UnityAPI/UnityEditor/Actions/ActionsExample.cs",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 2,
            "patches": [
                {
                    "date": 1750938330994,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1750938597128,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,689 @@\n+using UnityEngine;\r\n+using UnityEditor;\r\n+using UnityEditor.Actions;\r\n+\r\n+/// <summary>\r\n+/// UnityEditor.Actions 命名空间案例演示\r\n+/// 展示编辑器动作系统的使用，包括动作注册、执行和回调\r\n+/// </summary>\r\n+public class ActionsExample : MonoBehaviour\r\n+{\r\n+    [Header(\"动作系统配置\")]\r\n+    [SerializeField] private bool enableActionSystem = true; //启用动作系统\r\n+    [SerializeField] private bool enableActionLogging = true; //启用动作日志\r\n+    [SerializeField] private bool enableActionValidation = true; //启用动作验证\r\n+    [SerializeField] private bool enableActionUndo = true; //启用动作撤销\r\n+    [SerializeField] private bool enableActionRedo = true; //启用动作重做\r\n+    \r\n+    [Header(\"动作类型\")]\r\n+    [SerializeField] private ActionType currentActionType = ActionType.Create; //当前动作类型\r\n+    [SerializeField] private string actionName = \"CustomAction\"; //动作名称\r\n+    [SerializeField] private string actionDescription = \"自定义动作描述\"; //动作描述\r\n+    [SerializeField] private bool isActionEnabled = true; //动作是否启用\r\n+    [SerializeField] private bool isActionVisible = true; //动作是否可见\r\n+    \r\n+    [Header(\"动作状态\")]\r\n+    [SerializeField] private string actionState = \"未注册\"; //动作状态\r\n+    [SerializeField] private bool isActionExecuting = false; //动作是否正在执行\r\n+    [SerializeField] private float actionExecutionTime = 0f; //动作执行时间\r\n+    [SerializeField] private int actionExecutionCount = 0; //动作执行次数\r\n+    [SerializeField] private string lastActionResult = \"\"; //最后动作结果\r\n+    \r\n+    [Header(\"动作历史\")]\r\n+    [SerializeField] private string[] actionHistory = new string[10]; //动作历史\r\n+    [SerializeField] private int actionHistoryIndex = 0; //动作历史索引\r\n+    [SerializeField] private bool enableActionHistory = true; //启用动作历史\r\n+    \r\n+    [Header(\"性能监控\")]\r\n+    [SerializeField] private bool enablePerformanceMonitoring = true; //启用性能监控\r\n+    [SerializeField] private float[] executionTimeHistory = new float[100]; //执行时间历史\r\n+    [SerializeField] private int executionTimeIndex = 0; //执行时间索引\r\n+    [SerializeField] private float averageExecutionTime = 0f; //平均执行时间\r\n+    [SerializeField] private float maxExecutionTime = 0f; //最大执行时间\r\n+    \r\n+    private ActionManager actionManager;\r\n+    private CustomAction customAction;\r\n+    private bool isInitialized = false;\r\n+    private float lastExecutionTime = 0f;\r\n+\r\n+    private void Start()\r\n+    {\r\n+        InitializeActionSystem();\r\n+    }\r\n+\r\n+    /// <summary>\r\n+    /// 初始化动作系统\r\n+    /// </summary>\r\n+    private void InitializeActionSystem()\r\n+    {\r\n+        if (!enableActionSystem) return;\r\n+        \r\n+        // 创建动作管理器\r\n+        actionManager = new ActionManager();\r\n+        \r\n+        // 创建自定义动作\r\n+        CreateCustomAction();\r\n+        \r\n+        // 注册动作\r\n+        RegisterActions();\r\n+        \r\n+        // 初始化性能监控\r\n+        InitializePerformanceMonitoring();\r\n+        \r\n+        isInitialized = true;\r\n+        actionState = \"已初始化\";\r\n+        Debug.Log(\"动作系统初始化完成\");\r\n+    }\r\n+\r\n+    /// <summary>\r\n+    /// 创建自定义动作\r\n+    /// </summary>\r\n+    private void CreateCustomAction()\r\n+    {\r\n+        customAction = new CustomAction(actionName, actionDescription);\r\n+        customAction.SetEnabled(isActionEnabled);\r\n+        customAction.SetVisible(isActionVisible);\r\n+        \r\n+        Debug.Log($\"自定义动作已创建: {actionName}\");\r\n+    }\r\n+\r\n+    /// <summary>\r\n+    /// 注册动作\r\n+    /// </summary>\r\n+    private void RegisterActions()\r\n+    {\r\n+        if (customAction != null)\r\n+        {\r\n+            // 注册动作到管理器\r\n+            actionManager.RegisterAction(customAction);\r\n+            \r\n+            // 设置动作回调\r\n+            customAction.OnExecute += OnActionExecute;\r\n+            customAction.OnValidate += OnActionValidate;\r\n+            customAction.OnUndo += OnActionUndo;\r\n+            customAction.OnRedo += OnActionRedo;\r\n+            \r\n+            Debug.Log(\"动作已注册到管理器\");\r\n+        }\r\n+    }\r\n+\r\n+    /// <summary>\r\n+    /// 初始化性能监控\r\n+    /// </summary>\r\n+    private void InitializePerformanceMonitoring()\r\n+    {\r\n+        if (enablePerformanceMonitoring)\r\n+        {\r\n+            executionTimeHistory = new float[100];\r\n+            executionTimeIndex = 0;\r\n+            averageExecutionTime = 0f;\r\n+            maxExecutionTime = 0f;\r\n+            \r\n+            Debug.Log(\"性能监控初始化完成\");\r\n+        }\r\n+    }\r\n+\r\n+    private void Update()\r\n+    {\r\n+        if (!isInitialized) return;\r\n+        \r\n+        // 更新动作状态\r\n+        UpdateActionStatus();\r\n+        \r\n+        // 性能监控\r\n+        if (enablePerformanceMonitoring)\r\n+        {\r\n+            UpdatePerformanceMonitoring();\r\n+        }\r\n+    }\r\n+\r\n+    /// <summary>\r\n+    /// 更新动作状态\r\n+    /// </summary>\r\n+    private void UpdateActionStatus()\r\n+    {\r\n+        if (customAction != null)\r\n+        {\r\n+            isActionEnabled = customAction.IsEnabled();\r\n+            isActionVisible = customAction.IsVisible();\r\n+        }\r\n+    }\r\n+\r\n+    /// <summary>\r\n+    /// 更新性能监控\r\n+    /// </summary>\r\n+    private void UpdatePerformanceMonitoring()\r\n+    {\r\n+        // 计算平均执行时间\r\n+        float totalTime = 0f;\r\n+        int validCount = 0;\r\n+        \r\n+        for (int i = 0; i < executionTimeHistory.Length; i++)\r\n+        {\r\n+            if (executionTimeHistory[i] > 0f)\r\n+            {\r\n+                totalTime += executionTimeHistory[i];\r\n+                validCount++;\r\n+            }\r\n+        }\r\n+        \r\n+        if (validCount > 0)\r\n+        {\r\n+            averageExecutionTime = totalTime / validCount;\r\n+        }\r\n+    }\r\n+\r\n+    /// <summary>\r\n+    /// 动作执行回调\r\n+    /// </summary>\r\n+    private void OnActionExecute()\r\n+    {\r\n+        float startTime = Time.realtimeSinceStartup;\r\n+        \r\n+        isActionExecuting = true;\r\n+        actionExecutionCount++;\r\n+        \r\n+        // 执行动作逻辑\r\n+        ExecuteActionLogic();\r\n+        \r\n+        // 记录执行时间\r\n+        actionExecutionTime = Time.realtimeSinceStartup - startTime;\r\n+        lastExecutionTime = actionExecutionTime;\r\n+        \r\n+        // 更新性能历史\r\n+        executionTimeHistory[executionTimeIndex] = actionExecutionTime;\r\n+        executionTimeIndex = (executionTimeIndex + 1) % 100;\r\n+        \r\n+        // 更新最大执行时间\r\n+        if (actionExecutionTime > maxExecutionTime)\r\n+        {\r\n+            maxExecutionTime = actionExecutionTime;\r\n+        }\r\n+        \r\n+        // 记录到历史\r\n+        if (enableActionHistory)\r\n+        {\r\n+            string historyEntry = $\"[{System.DateTime.Now:HH:mm:ss}] 执行动作: {actionName} (耗时: {actionExecutionTime * 1000:F2}ms)\";\r\n+            actionHistory[actionHistoryIndex] = historyEntry;\r\n+            actionHistoryIndex = (actionHistoryIndex + 1) % actionHistory.Length;\r\n+        }\r\n+        \r\n+        isActionExecuting = false;\r\n+        lastActionResult = \"执行成功\";\r\n+        \r\n+        if (enableActionLogging)\r\n+        {\r\n+            Debug.Log($\"动作执行完成: {actionName}, 耗时: {actionExecutionTime * 1000:F2}ms\");\r\n+        }\r\n+    }\r\n+\r\n+    /// <summary>\r\n+    /// 执行动作逻辑\r\n+    /// </summary>\r\n+    private void ExecuteActionLogic()\r\n+    {\r\n+        switch (currentActionType)\r\n+        {\r\n+            case ActionType.Create:\r\n+                CreateGameObject();\r\n+                break;\r\n+            case ActionType.Delete:\r\n+                DeleteSelectedObjects();\r\n+                break;\r\n+            case ActionType.Modify:\r\n+                ModifySelectedObjects();\r\n+                break;\r\n+            case ActionType.Move:\r\n+                MoveSelectedObjects();\r\n+                break;\r\n+            case ActionType.Rotate:\r\n+                RotateSelectedObjects();\r\n+                break;\r\n+            case ActionType.Scale:\r\n+                ScaleSelectedObjects();\r\n+                break;\r\n+        }\r\n+    }\r\n+\r\n+    /// <summary>\r\n+    /// 创建游戏对象\r\n+    /// </summary>\r\n+    private void CreateGameObject()\r\n+    {\r\n+        GameObject newObject = new GameObject($\"CreatedObject_{actionExecutionCount}\");\r\n+        newObject.transform.position = Random.insideUnitSphere * 5f;\r\n+        \r\n+        // 添加一些组件\r\n+        newObject.AddComponent<MeshRenderer>();\r\n+        newObject.AddComponent<MeshFilter>();\r\n+        newObject.AddComponent<BoxCollider>();\r\n+        \r\n+        Debug.Log($\"创建游戏对象: {newObject.name}\");\r\n+    }\r\n+\r\n+    /// <summary>\r\n+    /// 删除选中的对象\r\n+    /// </summary>\r\n+    private void DeleteSelectedObjects()\r\n+    {\r\n+        GameObject[] selectedObjects = Selection.gameObjects;\r\n+        foreach (var obj in selectedObjects)\r\n+        {\r\n+            if (obj != null)\r\n+            {\r\n+                DestroyImmediate(obj);\r\n+            }\r\n+        }\r\n+        \r\n+        Debug.Log($\"删除 {selectedObjects.Length} 个选中对象\");\r\n+    }\r\n+\r\n+    /// <summary>\r\n+    /// 修改选中的对象\r\n+    /// </summary>\r\n+    private void ModifySelectedObjects()\r\n+    {\r\n+        GameObject[] selectedObjects = Selection.gameObjects;\r\n+        foreach (var obj in selectedObjects)\r\n+        {\r\n+            if (obj != null)\r\n+            {\r\n+                // 随机修改位置\r\n+                obj.transform.position += Random.insideUnitSphere * 0.5f;\r\n+                \r\n+                // 随机修改旋转\r\n+                obj.transform.rotation *= Quaternion.Euler(Random.Range(-30f, 30f), Random.Range(-30f, 30f), Random.Range(-30f, 30f));\r\n+            }\r\n+        }\r\n+        \r\n+        Debug.Log($\"修改 {selectedObjects.Length} 个选中对象\");\r\n+    }\r\n+\r\n+    /// <summary>\r\n+    /// 移动选中的对象\r\n+    /// </summary>\r\n+    private void MoveSelectedObjects()\r\n+    {\r\n+        GameObject[] selectedObjects = Selection.gameObjects;\r\n+        Vector3 moveDirection = Random.onUnitSphere;\r\n+        \r\n+        foreach (var obj in selectedObjects)\r\n+        {\r\n+            if (obj != null)\r\n+            {\r\n+                obj.transform.position += moveDirection * 2f;\r\n+            }\r\n+        }\r\n+        \r\n+        Debug.Log($\"移动 {selectedObjects.Length} 个选中对象\");\r\n+    }\r\n+\r\n+    /// <summary>\r\n+    /// 旋转选中的对象\r\n+    /// </summary>\r\n+    private void RotateSelectedObjects()\r\n+    {\r\n+        GameObject[] selectedObjects = Selection.gameObjects;\r\n+        Vector3 rotationAxis = Random.onUnitSphere;\r\n+        float rotationAngle = Random.Range(30f, 90f);\r\n+        \r\n+        foreach (var obj in selectedObjects)\r\n+        {\r\n+            if (obj != null)\r\n+            {\r\n+                obj.transform.Rotate(rotationAxis, rotationAngle);\r\n+            }\r\n+        }\r\n+        \r\n+        Debug.Log($\"旋转 {selectedObjects.Length} 个选中对象\");\r\n+    }\r\n+\r\n+    /// <summary>\r\n+    /// 缩放选中的对象\r\n+    /// </summary>\r\n+    private void ScaleSelectedObjects()\r\n+    {\r\n+        GameObject[] selectedObjects = Selection.gameObjects;\r\n+        float scaleFactor = Random.Range(0.8f, 1.2f);\r\n+        \r\n+        foreach (var obj in selectedObjects)\r\n+        {\r\n+            if (obj != null)\r\n+            {\r\n+                obj.transform.localScale *= scaleFactor;\r\n+            }\r\n+        }\r\n+        \r\n+        Debug.Log($\"缩放 {selectedObjects.Length} 个选中对象\");\r\n+    }\r\n+\r\n+    /// <summary>\r\n+    /// 动作验证回调\r\n+    /// </summary>\r\n+    private bool OnActionValidate()\r\n+    {\r\n+        if (!enableActionValidation) return true;\r\n+        \r\n+        // 验证动作是否可以执行\r\n+        bool canExecute = true;\r\n+        \r\n+        switch (currentActionType)\r\n+        {\r\n+            case ActionType.Delete:\r\n+            case ActionType.Modify:\r\n+            case ActionType.Move:\r\n+            case ActionType.Rotate:\r\n+            case ActionType.Scale:\r\n+                canExecute = Selection.gameObjects.Length > 0;\r\n+                break;\r\n+        }\r\n+        \r\n+        if (!canExecute)\r\n+        {\r\n+            lastActionResult = \"验证失败：没有选中对象\";\r\n+            Debug.LogWarning(\"动作验证失败\");\r\n+        }\r\n+        \r\n+        return canExecute;\r\n+    }\r\n+\r\n+    /// <summary>\r\n+    /// 动作撤销回调\r\n+    /// </summary>\r\n+    private void OnActionUndo()\r\n+    {\r\n+        if (!enableActionUndo) return;\r\n+        \r\n+        // 实现撤销逻辑\r\n+        Debug.Log(\"执行撤销操作\");\r\n+        lastActionResult = \"已撤销\";\r\n+        \r\n+        if (enableActionHistory)\r\n+        {\r\n+            string historyEntry = $\"[{System.DateTime.Now:HH:mm:ss}] 撤销动作: {actionName}\";\r\n+            actionHistory[actionHistoryIndex] = historyEntry;\r\n+            actionHistoryIndex = (actionHistoryIndex + 1) % actionHistory.Length;\r\n+        }\r\n+    }\r\n+\r\n+    /// <summary>\r\n+    /// 动作重做回调\r\n+    /// </summary>\r\n+    private void OnActionRedo()\r\n+    {\r\n+        if (!enableActionRedo) return;\r\n+        \r\n+        // 实现重做逻辑\r\n+        Debug.Log(\"执行重做操作\");\r\n+        lastActionResult = \"已重做\";\r\n+        \r\n+        if (enableActionHistory)\r\n+        {\r\n+            string historyEntry = $\"[{System.DateTime.Now:HH:mm:ss}] 重做动作: {actionName}\";\r\n+            actionHistory[actionHistoryIndex] = historyEntry;\r\n+            actionHistoryIndex = (actionHistoryIndex + 1) % actionHistory.Length;\r\n+        }\r\n+    }\r\n+\r\n+    /// <summary>\r\n+    /// 执行动作\r\n+    /// </summary>\r\n+    public void ExecuteAction()\r\n+    {\r\n+        if (customAction != null && customAction.IsEnabled())\r\n+        {\r\n+            customAction.Execute();\r\n+        }\r\n+    }\r\n+\r\n+    /// <summary>\r\n+    /// 撤销动作\r\n+    /// </summary>\r\n+    public void UndoAction()\r\n+    {\r\n+        if (customAction != null && enableActionUndo)\r\n+        {\r\n+            customAction.Undo();\r\n+        }\r\n+    }\r\n+\r\n+    /// <summary>\r\n+    /// 重做动作\r\n+    /// </summary>\r\n+    public void RedoAction()\r\n+    {\r\n+        if (customAction != null && enableActionRedo)\r\n+        {\r\n+            customAction.Redo();\r\n+        }\r\n+    }\r\n+\r\n+    /// <summary>\r\n+    /// 设置动作类型\r\n+    /// </summary>\r\n+    /// <param name=\"actionType\">动作类型</param>\r\n+    public void SetActionType(ActionType actionType)\r\n+    {\r\n+        currentActionType = actionType;\r\n+        Debug.Log($\"动作类型已设置: {actionType}\");\r\n+    }\r\n+\r\n+    /// <summary>\r\n+    /// 设置动作名称\r\n+    /// </summary>\r\n+    /// <param name=\"name\">动作名称</param>\r\n+    public void SetActionName(string name)\r\n+    {\r\n+        actionName = name;\r\n+        if (customAction != null)\r\n+        {\r\n+            customAction.SetName(name);\r\n+        }\r\n+        Debug.Log($\"动作名称已设置: {name}\");\r\n+    }\r\n+\r\n+    /// <summary>\r\n+    /// 启用/禁用动作\r\n+    /// </summary>\r\n+    /// <param name=\"enabled\">是否启用</param>\r\n+    public void SetActionEnabled(bool enabled)\r\n+    {\r\n+        isActionEnabled = enabled;\r\n+        if (customAction != null)\r\n+        {\r\n+            customAction.SetEnabled(enabled);\r\n+        }\r\n+        Debug.Log($\"动作启用状态已设置: {enabled}\");\r\n+    }\r\n+\r\n+    /// <summary>\r\n+    /// 生成动作报告\r\n+    /// </summary>\r\n+    public void GenerateActionReport()\r\n+    {\r\n+        Debug.Log(\"=== 动作系统报告 ===\");\r\n+        Debug.Log($\"动作系统状态: {actionState}\");\r\n+        Debug.Log($\"当前动作类型: {currentActionType}\");\r\n+        Debug.Log($\"动作名称: {actionName}\");\r\n+        Debug.Log($\"动作描述: {actionDescription}\");\r\n+        Debug.Log($\"动作启用状态: {isActionEnabled}\");\r\n+        Debug.Log($\"动作可见状态: {isActionVisible}\");\r\n+        Debug.Log($\"动作执行次数: {actionExecutionCount}\");\r\n+        Debug.Log($\"最后执行时间: {lastExecutionTime * 1000:F2}ms\");\r\n+        Debug.Log($\"平均执行时间: {averageExecutionTime * 1000:F2}ms\");\r\n+        Debug.Log($\"最大执行时间: {maxExecutionTime * 1000:F2}ms\");\r\n+        Debug.Log($\"最后动作结果: {lastActionResult}\");\r\n+        Debug.Log($\"是否正在执行: {isActionExecuting}\");\r\n+    }\r\n+\r\n+    /// <summary>\r\n+    /// 清除动作历史\r\n+    /// </summary>\r\n+    public void ClearActionHistory()\r\n+    {\r\n+        actionHistory = new string[10];\r\n+        actionHistoryIndex = 0;\r\n+        Debug.Log(\"动作历史已清除\");\r\n+    }\r\n+\r\n+    private void OnGUI()\r\n+    {\r\n+        GUILayout.BeginArea(new Rect(10, 10, 400, 800));\r\n+        GUILayout.Label(\"Actions 动作系统演示\", UnityEditor.EditorStyles.boldLabel);\r\n+        \r\n+        GUILayout.Space(10);\r\n+        GUILayout.Label(\"动作系统配置:\");\r\n+        enableActionSystem = GUILayout.Toggle(enableActionSystem, \"启用动作系统\");\r\n+        enableActionLogging = GUILayout.Toggle(enableActionLogging, \"启用动作日志\");\r\n+        enableActionValidation = GUILayout.Toggle(enableActionValidation, \"启用动作验证\");\r\n+        enableActionUndo = GUILayout.Toggle(enableActionUndo, \"启用动作撤销\");\r\n+        enableActionRedo = GUILayout.Toggle(enableActionRedo, \"启用动作重做\");\r\n+        \r\n+        GUILayout.Space(10);\r\n+        GUILayout.Label(\"动作类型:\");\r\n+        currentActionType = (ActionType)System.Enum.Parse(typeof(ActionType), GUILayout.TextField(\"动作类型\", currentActionType.ToString()));\r\n+        actionName = GUILayout.TextField(\"动作名称\", actionName);\r\n+        actionDescription = GUILayout.TextField(\"动作描述\", actionDescription);\r\n+        isActionEnabled = GUILayout.Toggle(isActionEnabled, \"动作启用\");\r\n+        isActionVisible = GUILayout.Toggle(isActionVisible, \"动作可见\");\r\n+        \r\n+        GUILayout.Space(10);\r\n+        GUILayout.Label(\"动作状态:\");\r\n+        GUILayout.Label($\"动作状态: {actionState}\");\r\n+        GUILayout.Label($\"执行次数: {actionExecutionCount}\");\r\n+        GUILayout.Label($\"最后执行时间: {lastExecutionTime * 1000:F2}ms\");\r\n+        GUILayout.Label($\"平均执行时间: {averageExecutionTime * 1000:F2}ms\");\r\n+        GUILayout.Label($\"最大执行时间: {maxExecutionTime * 1000:F2}ms\");\r\n+        GUILayout.Label($\"最后结果: {lastActionResult}\");\r\n+        GUILayout.Label($\"正在执行: {isActionExecuting}\");\r\n+        \r\n+        GUILayout.Space(10);\r\n+        \r\n+        if (GUILayout.Button(\"执行动作\"))\r\n+        {\r\n+            ExecuteAction();\r\n+        }\r\n+        \r\n+        if (GUILayout.Button(\"撤销动作\"))\r\n+        {\r\n+            UndoAction();\r\n+        }\r\n+        \r\n+        if (GUILayout.Button(\"重做动作\"))\r\n+        {\r\n+            RedoAction();\r\n+        }\r\n+        \r\n+        if (GUILayout.Button(\"生成动作报告\"))\r\n+        {\r\n+            GenerateActionReport();\r\n+        }\r\n+        \r\n+        if (GUILayout.Button(\"清除动作历史\"))\r\n+        {\r\n+            ClearActionHistory();\r\n+        }\r\n+        \r\n+        GUILayout.Space(10);\r\n+        GUILayout.Label(\"动作历史:\");\r\n+        for (int i = 0; i < actionHistory.Length; i++)\r\n+        {\r\n+            if (!string.IsNullOrEmpty(actionHistory[i]))\r\n+            {\r\n+                GUILayout.Label(actionHistory[i]);\r\n+            }\r\n+        }\r\n+        \r\n+        GUILayout.EndArea();\r\n+    }\r\n+}\r\n+\r\n+/// <summary>\r\n+/// 动作类型枚举\r\n+/// </summary>\r\n+public enum ActionType\r\n+{\r\n+    Create,\r\n+    Delete,\r\n+    Modify,\r\n+    Move,\r\n+    Rotate,\r\n+    Scale\r\n+}\r\n+\r\n+/// <summary>\r\n+/// 动作管理器\r\n+/// </summary>\r\n+public class ActionManager\r\n+{\r\n+    private System.Collections.Generic.List<CustomAction> actions = new System.Collections.Generic.List<CustomAction>();\r\n+\r\n+    public void RegisterAction(CustomAction action)\r\n+    {\r\n+        if (!actions.Contains(action))\r\n+        {\r\n+            actions.Add(action);\r\n+        }\r\n+    }\r\n+\r\n+    public void UnregisterAction(CustomAction action)\r\n+    {\r\n+        actions.Remove(action);\r\n+    }\r\n+\r\n+    public CustomAction[] GetActions()\r\n+    {\r\n+        return actions.ToArray();\r\n+    }\r\n+}\r\n+\r\n+/// <summary>\r\n+/// 自定义动作类\r\n+/// </summary>\r\n+public class CustomAction\r\n+{\r\n+    public System.Action OnExecute;\r\n+    public System.Func<bool> OnValidate;\r\n+    public System.Action OnUndo;\r\n+    public System.Action OnRedo;\r\n+\r\n+    private string name;\r\n+    private string description;\r\n+    private bool isEnabled;\r\n+    private bool isVisible;\r\n+\r\n+    public CustomAction(string actionName, string actionDescription)\r\n+    {\r\n+        name = actionName;\r\n+        description = actionDescription;\r\n+        isEnabled = true;\r\n+        isVisible = true;\r\n+    }\r\n+\r\n+    public void Execute()\r\n+    {\r\n+        if (OnValidate != null && !OnValidate())\r\n+        {\r\n+            return;\r\n+        }\r\n+\r\n+        OnExecute?.Invoke();\r\n+    }\r\n+\r\n+    public void Undo()\r\n+    {\r\n+        OnUndo?.Invoke();\r\n+    }\r\n+\r\n+    public void Redo()\r\n+    {\r\n+        OnRedo?.Invoke();\r\n+    }\r\n+\r\n+    public bool IsEnabled() => isEnabled;\r\n+    public bool IsVisible() => isVisible;\r\n+\r\n+    public void SetEnabled(bool enabled) => isEnabled = enabled;\r\n+    public void SetVisible(bool visible) => isVisible = visible;\r\n+    public void SetName(string actionName) => name = actionName;\r\n+} \n\\ No newline at end of file\n"
                },
                {
                    "date": 1750938611910,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -685,694 +685,5 @@\n \r\n     public void SetEnabled(bool enabled) => isEnabled = enabled;\r\n     public void SetVisible(bool visible) => isVisible = visible;\r\n     public void SetName(string actionName) => name = actionName;\r\n-} \n-using UnityEngine;\r\n-using UnityEditor;\r\n-using UnityEditor.Actions;\r\n-\r\n-/// <summary>\r\n-/// UnityEditor.Actions 命名空间案例演示\r\n-/// 展示编辑器动作系统的使用，包括动作注册、执行和回调\r\n-/// </summary>\r\n-public class ActionsExample : MonoBehaviour\r\n-{\r\n-    [Header(\"动作系统配置\")]\r\n-    [SerializeField] private bool enableActionSystem = true; //启用动作系统\r\n-    [SerializeField] private bool enableActionLogging = true; //启用动作日志\r\n-    [SerializeField] private bool enableActionValidation = true; //启用动作验证\r\n-    [SerializeField] private bool enableActionUndo = true; //启用动作撤销\r\n-    [SerializeField] private bool enableActionRedo = true; //启用动作重做\r\n-    \r\n-    [Header(\"动作类型\")]\r\n-    [SerializeField] private ActionType currentActionType = ActionType.Create; //当前动作类型\r\n-    [SerializeField] private string actionName = \"CustomAction\"; //动作名称\r\n-    [SerializeField] private string actionDescription = \"自定义动作描述\"; //动作描述\r\n-    [SerializeField] private bool isActionEnabled = true; //动作是否启用\r\n-    [SerializeField] private bool isActionVisible = true; //动作是否可见\r\n-    \r\n-    [Header(\"动作状态\")]\r\n-    [SerializeField] private string actionState = \"未注册\"; //动作状态\r\n-    [SerializeField] private bool isActionExecuting = false; //动作是否正在执行\r\n-    [SerializeField] private float actionExecutionTime = 0f; //动作执行时间\r\n-    [SerializeField] private int actionExecutionCount = 0; //动作执行次数\r\n-    [SerializeField] private string lastActionResult = \"\"; //最后动作结果\r\n-    \r\n-    [Header(\"动作历史\")]\r\n-    [SerializeField] private string[] actionHistory = new string[10]; //动作历史\r\n-    [SerializeField] private int actionHistoryIndex = 0; //动作历史索引\r\n-    [SerializeField] private bool enableActionHistory = true; //启用动作历史\r\n-    \r\n-    [Header(\"性能监控\")]\r\n-    [SerializeField] private bool enablePerformanceMonitoring = true; //启用性能监控\r\n-    [SerializeField] private float[] executionTimeHistory = new float[100]; //执行时间历史\r\n-    [SerializeField] private int executionTimeIndex = 0; //执行时间索引\r\n-    [SerializeField] private float averageExecutionTime = 0f; //平均执行时间\r\n-    [SerializeField] private float maxExecutionTime = 0f; //最大执行时间\r\n-    \r\n-    private ActionManager actionManager;\r\n-    private CustomAction customAction;\r\n-    private bool isInitialized = false;\r\n-    private float lastExecutionTime = 0f;\r\n-\r\n-    private void Start()\r\n-    {\r\n-        InitializeActionSystem();\r\n-    }\r\n-\r\n-    /// <summary>\r\n-    /// 初始化动作系统\r\n-    /// </summary>\r\n-    private void InitializeActionSystem()\r\n-    {\r\n-        if (!enableActionSystem) return;\r\n-        \r\n-        // 创建动作管理器\r\n-        actionManager = new ActionManager();\r\n-        \r\n-        // 创建自定义动作\r\n-        CreateCustomAction();\r\n-        \r\n-        // 注册动作\r\n-        RegisterActions();\r\n-        \r\n-        // 初始化性能监控\r\n-        InitializePerformanceMonitoring();\r\n-        \r\n-        isInitialized = true;\r\n-        actionState = \"已初始化\";\r\n-        Debug.Log(\"动作系统初始化完成\");\r\n-    }\r\n-\r\n-    /// <summary>\r\n-    /// 创建自定义动作\r\n-    /// </summary>\r\n-    private void CreateCustomAction()\r\n-    {\r\n-        customAction = new CustomAction(actionName, actionDescription);\r\n-        customAction.SetEnabled(isActionEnabled);\r\n-        customAction.SetVisible(isActionVisible);\r\n-        \r\n-        Debug.Log($\"自定义动作已创建: {actionName}\");\r\n-    }\r\n-\r\n-    /// <summary>\r\n-    /// 注册动作\r\n-    /// </summary>\r\n-    private void RegisterActions()\r\n-    {\r\n-        if (customAction != null)\r\n-        {\r\n-            // 注册动作到管理器\r\n-            actionManager.RegisterAction(customAction);\r\n-            \r\n-            // 设置动作回调\r\n-            customAction.OnExecute += OnActionExecute;\r\n-            customAction.OnValidate += OnActionValidate;\r\n-            customAction.OnUndo += OnActionUndo;\r\n-            customAction.OnRedo += OnActionRedo;\r\n-            \r\n-            Debug.Log(\"动作已注册到管理器\");\r\n-        }\r\n-    }\r\n-\r\n-    /// <summary>\r\n-    /// 初始化性能监控\r\n-    /// </summary>\r\n-    private void InitializePerformanceMonitoring()\r\n-    {\r\n-        if (enablePerformanceMonitoring)\r\n-        {\r\n-            executionTimeHistory = new float[100];\r\n-            executionTimeIndex = 0;\r\n-            averageExecutionTime = 0f;\r\n-            maxExecutionTime = 0f;\r\n-            \r\n-            Debug.Log(\"性能监控初始化完成\");\r\n-        }\r\n-    }\r\n-\r\n-    private void Update()\r\n-    {\r\n-        if (!isInitialized) return;\r\n-        \r\n-        // 更新动作状态\r\n-        UpdateActionStatus();\r\n-        \r\n-        // 性能监控\r\n-        if (enablePerformanceMonitoring)\r\n-        {\r\n-            UpdatePerformanceMonitoring();\r\n-        }\r\n-    }\r\n-\r\n-    /// <summary>\r\n-    /// 更新动作状态\r\n-    /// </summary>\r\n-    private void UpdateActionStatus()\r\n-    {\r\n-        if (customAction != null)\r\n-        {\r\n-            isActionEnabled = customAction.IsEnabled();\r\n-            isActionVisible = customAction.IsVisible();\r\n-        }\r\n-    }\r\n-\r\n-    /// <summary>\r\n-    /// 更新性能监控\r\n-    /// </summary>\r\n-    private void UpdatePerformanceMonitoring()\r\n-    {\r\n-        // 计算平均执行时间\r\n-        float totalTime = 0f;\r\n-        int validCount = 0;\r\n-        \r\n-        for (int i = 0; i < executionTimeHistory.Length; i++)\r\n-        {\r\n-            if (executionTimeHistory[i] > 0f)\r\n-            {\r\n-                totalTime += executionTimeHistory[i];\r\n-                validCount++;\r\n-            }\r\n-        }\r\n-        \r\n-        if (validCount > 0)\r\n-        {\r\n-            averageExecutionTime = totalTime / validCount;\r\n-        }\r\n-    }\r\n-\r\n-    /// <summary>\r\n-    /// 动作执行回调\r\n-    /// </summary>\r\n-    private void OnActionExecute()\r\n-    {\r\n-        float startTime = Time.realtimeSinceStartup;\r\n-        \r\n-        isActionExecuting = true;\r\n-        actionExecutionCount++;\r\n-        \r\n-        // 执行动作逻辑\r\n-        ExecuteActionLogic();\r\n-        \r\n-        // 记录执行时间\r\n-        actionExecutionTime = Time.realtimeSinceStartup - startTime;\r\n-        lastExecutionTime = actionExecutionTime;\r\n-        \r\n-        // 更新性能历史\r\n-        executionTimeHistory[executionTimeIndex] = actionExecutionTime;\r\n-        executionTimeIndex = (executionTimeIndex + 1) % 100;\r\n-        \r\n-        // 更新最大执行时间\r\n-        if (actionExecutionTime > maxExecutionTime)\r\n-        {\r\n-            maxExecutionTime = actionExecutionTime;\r\n-        }\r\n-        \r\n-        // 记录到历史\r\n-        if (enableActionHistory)\r\n-        {\r\n-            string historyEntry = $\"[{System.DateTime.Now:HH:mm:ss}] 执行动作: {actionName} (耗时: {actionExecutionTime * 1000:F2}ms)\";\r\n-            actionHistory[actionHistoryIndex] = historyEntry;\r\n-            actionHistoryIndex = (actionHistoryIndex + 1) % actionHistory.Length;\r\n-        }\r\n-        \r\n-        isActionExecuting = false;\r\n-        lastActionResult = \"执行成功\";\r\n-        \r\n-        if (enableActionLogging)\r\n-        {\r\n-            Debug.Log($\"动作执行完成: {actionName}, 耗时: {actionExecutionTime * 1000:F2}ms\");\r\n-        }\r\n-    }\r\n-\r\n-    /// <summary>\r\n-    /// 执行动作逻辑\r\n-    /// </summary>\r\n-    private void ExecuteActionLogic()\r\n-    {\r\n-        switch (currentActionType)\r\n-        {\r\n-            case ActionType.Create:\r\n-                CreateGameObject();\r\n-                break;\r\n-            case ActionType.Delete:\r\n-                DeleteSelectedObjects();\r\n-                break;\r\n-            case ActionType.Modify:\r\n-                ModifySelectedObjects();\r\n-                break;\r\n-            case ActionType.Move:\r\n-                MoveSelectedObjects();\r\n-                break;\r\n-            case ActionType.Rotate:\r\n-                RotateSelectedObjects();\r\n-                break;\r\n-            case ActionType.Scale:\r\n-                ScaleSelectedObjects();\r\n-                break;\r\n-        }\r\n-    }\r\n-\r\n-    /// <summary>\r\n-    /// 创建游戏对象\r\n-    /// </summary>\r\n-    private void CreateGameObject()\r\n-    {\r\n-        GameObject newObject = new GameObject($\"CreatedObject_{actionExecutionCount}\");\r\n-        newObject.transform.position = Random.insideUnitSphere * 5f;\r\n-        \r\n-        // 添加一些组件\r\n-        newObject.AddComponent<MeshRenderer>();\r\n-        newObject.AddComponent<MeshFilter>();\r\n-        newObject.AddComponent<BoxCollider>();\r\n-        \r\n-        Debug.Log($\"创建游戏对象: {newObject.name}\");\r\n-    }\r\n-\r\n-    /// <summary>\r\n-    /// 删除选中的对象\r\n-    /// </summary>\r\n-    private void DeleteSelectedObjects()\r\n-    {\r\n-        GameObject[] selectedObjects = Selection.gameObjects;\r\n-        foreach (var obj in selectedObjects)\r\n-        {\r\n-            if (obj != null)\r\n-            {\r\n-                DestroyImmediate(obj);\r\n-            }\r\n-        }\r\n-        \r\n-        Debug.Log($\"删除 {selectedObjects.Length} 个选中对象\");\r\n-    }\r\n-\r\n-    /// <summary>\r\n-    /// 修改选中的对象\r\n-    /// </summary>\r\n-    private void ModifySelectedObjects()\r\n-    {\r\n-        GameObject[] selectedObjects = Selection.gameObjects;\r\n-        foreach (var obj in selectedObjects)\r\n-        {\r\n-            if (obj != null)\r\n-            {\r\n-                // 随机修改位置\r\n-                obj.transform.position += Random.insideUnitSphere * 0.5f;\r\n-                \r\n-                // 随机修改旋转\r\n-                obj.transform.rotation *= Quaternion.Euler(Random.Range(-30f, 30f), Random.Range(-30f, 30f), Random.Range(-30f, 30f));\r\n-            }\r\n-        }\r\n-        \r\n-        Debug.Log($\"修改 {selectedObjects.Length} 个选中对象\");\r\n-    }\r\n-\r\n-    /// <summary>\r\n-    /// 移动选中的对象\r\n-    /// </summary>\r\n-    private void MoveSelectedObjects()\r\n-    {\r\n-        GameObject[] selectedObjects = Selection.gameObjects;\r\n-        Vector3 moveDirection = Random.onUnitSphere;\r\n-        \r\n-        foreach (var obj in selectedObjects)\r\n-        {\r\n-            if (obj != null)\r\n-            {\r\n-                obj.transform.position += moveDirection * 2f;\r\n-            }\r\n-        }\r\n-        \r\n-        Debug.Log($\"移动 {selectedObjects.Length} 个选中对象\");\r\n-    }\r\n-\r\n-    /// <summary>\r\n-    /// 旋转选中的对象\r\n-    /// </summary>\r\n-    private void RotateSelectedObjects()\r\n-    {\r\n-        GameObject[] selectedObjects = Selection.gameObjects;\r\n-        Vector3 rotationAxis = Random.onUnitSphere;\r\n-        float rotationAngle = Random.Range(30f, 90f);\r\n-        \r\n-        foreach (var obj in selectedObjects)\r\n-        {\r\n-            if (obj != null)\r\n-            {\r\n-                obj.transform.Rotate(rotationAxis, rotationAngle);\r\n-            }\r\n-        }\r\n-        \r\n-        Debug.Log($\"旋转 {selectedObjects.Length} 个选中对象\");\r\n-    }\r\n-\r\n-    /// <summary>\r\n-    /// 缩放选中的对象\r\n-    /// </summary>\r\n-    private void ScaleSelectedObjects()\r\n-    {\r\n-        GameObject[] selectedObjects = Selection.gameObjects;\r\n-        float scaleFactor = Random.Range(0.8f, 1.2f);\r\n-        \r\n-        foreach (var obj in selectedObjects)\r\n-        {\r\n-            if (obj != null)\r\n-            {\r\n-                obj.transform.localScale *= scaleFactor;\r\n-            }\r\n-        }\r\n-        \r\n-        Debug.Log($\"缩放 {selectedObjects.Length} 个选中对象\");\r\n-    }\r\n-\r\n-    /// <summary>\r\n-    /// 动作验证回调\r\n-    /// </summary>\r\n-    private bool OnActionValidate()\r\n-    {\r\n-        if (!enableActionValidation) return true;\r\n-        \r\n-        // 验证动作是否可以执行\r\n-        bool canExecute = true;\r\n-        \r\n-        switch (currentActionType)\r\n-        {\r\n-            case ActionType.Delete:\r\n-            case ActionType.Modify:\r\n-            case ActionType.Move:\r\n-            case ActionType.Rotate:\r\n-            case ActionType.Scale:\r\n-                canExecute = Selection.gameObjects.Length > 0;\r\n-                break;\r\n-        }\r\n-        \r\n-        if (!canExecute)\r\n-        {\r\n-            lastActionResult = \"验证失败：没有选中对象\";\r\n-            Debug.LogWarning(\"动作验证失败\");\r\n-        }\r\n-        \r\n-        return canExecute;\r\n-    }\r\n-\r\n-    /// <summary>\r\n-    /// 动作撤销回调\r\n-    /// </summary>\r\n-    private void OnActionUndo()\r\n-    {\r\n-        if (!enableActionUndo) return;\r\n-        \r\n-        // 实现撤销逻辑\r\n-        Debug.Log(\"执行撤销操作\");\r\n-        lastActionResult = \"已撤销\";\r\n-        \r\n-        if (enableActionHistory)\r\n-        {\r\n-            string historyEntry = $\"[{System.DateTime.Now:HH:mm:ss}] 撤销动作: {actionName}\";\r\n-            actionHistory[actionHistoryIndex] = historyEntry;\r\n-            actionHistoryIndex = (actionHistoryIndex + 1) % actionHistory.Length;\r\n-        }\r\n-    }\r\n-\r\n-    /// <summary>\r\n-    /// 动作重做回调\r\n-    /// </summary>\r\n-    private void OnActionRedo()\r\n-    {\r\n-        if (!enableActionRedo) return;\r\n-        \r\n-        // 实现重做逻辑\r\n-        Debug.Log(\"执行重做操作\");\r\n-        lastActionResult = \"已重做\";\r\n-        \r\n-        if (enableActionHistory)\r\n-        {\r\n-            string historyEntry = $\"[{System.DateTime.Now:HH:mm:ss}] 重做动作: {actionName}\";\r\n-            actionHistory[actionHistoryIndex] = historyEntry;\r\n-            actionHistoryIndex = (actionHistoryIndex + 1) % actionHistory.Length;\r\n-        }\r\n-    }\r\n-\r\n-    /// <summary>\r\n-    /// 执行动作\r\n-    /// </summary>\r\n-    public void ExecuteAction()\r\n-    {\r\n-        if (customAction != null && customAction.IsEnabled())\r\n-        {\r\n-            customAction.Execute();\r\n-        }\r\n-    }\r\n-\r\n-    /// <summary>\r\n-    /// 撤销动作\r\n-    /// </summary>\r\n-    public void UndoAction()\r\n-    {\r\n-        if (customAction != null && enableActionUndo)\r\n-        {\r\n-            customAction.Undo();\r\n-        }\r\n-    }\r\n-\r\n-    /// <summary>\r\n-    /// 重做动作\r\n-    /// </summary>\r\n-    public void RedoAction()\r\n-    {\r\n-        if (customAction != null && enableActionRedo)\r\n-        {\r\n-            customAction.Redo();\r\n-        }\r\n-    }\r\n-\r\n-    /// <summary>\r\n-    /// 设置动作类型\r\n-    /// </summary>\r\n-    /// <param name=\"actionType\">动作类型</param>\r\n-    public void SetActionType(ActionType actionType)\r\n-    {\r\n-        currentActionType = actionType;\r\n-        Debug.Log($\"动作类型已设置: {actionType}\");\r\n-    }\r\n-\r\n-    /// <summary>\r\n-    /// 设置动作名称\r\n-    /// </summary>\r\n-    /// <param name=\"name\">动作名称</param>\r\n-    public void SetActionName(string name)\r\n-    {\r\n-        actionName = name;\r\n-        if (customAction != null)\r\n-        {\r\n-            customAction.SetName(name);\r\n-        }\r\n-        Debug.Log($\"动作名称已设置: {name}\");\r\n-    }\r\n-\r\n-    /// <summary>\r\n-    /// 启用/禁用动作\r\n-    /// </summary>\r\n-    /// <param name=\"enabled\">是否启用</param>\r\n-    public void SetActionEnabled(bool enabled)\r\n-    {\r\n-        isActionEnabled = enabled;\r\n-        if (customAction != null)\r\n-        {\r\n-            customAction.SetEnabled(enabled);\r\n-        }\r\n-        Debug.Log($\"动作启用状态已设置: {enabled}\");\r\n-    }\r\n-\r\n-    /// <summary>\r\n-    /// 生成动作报告\r\n-    /// </summary>\r\n-    public void GenerateActionReport()\r\n-    {\r\n-        Debug.Log(\"=== 动作系统报告 ===\");\r\n-        Debug.Log($\"动作系统状态: {actionState}\");\r\n-        Debug.Log($\"当前动作类型: {currentActionType}\");\r\n-        Debug.Log($\"动作名称: {actionName}\");\r\n-        Debug.Log($\"动作描述: {actionDescription}\");\r\n-        Debug.Log($\"动作启用状态: {isActionEnabled}\");\r\n-        Debug.Log($\"动作可见状态: {isActionVisible}\");\r\n-        Debug.Log($\"动作执行次数: {actionExecutionCount}\");\r\n-        Debug.Log($\"最后执行时间: {lastExecutionTime * 1000:F2}ms\");\r\n-        Debug.Log($\"平均执行时间: {averageExecutionTime * 1000:F2}ms\");\r\n-        Debug.Log($\"最大执行时间: {maxExecutionTime * 1000:F2}ms\");\r\n-        Debug.Log($\"最后动作结果: {lastActionResult}\");\r\n-        Debug.Log($\"是否正在执行: {isActionExecuting}\");\r\n-    }\r\n-\r\n-    /// <summary>\r\n-    /// 清除动作历史\r\n-    /// </summary>\r\n-    public void ClearActionHistory()\r\n-    {\r\n-        actionHistory = new string[10];\r\n-        actionHistoryIndex = 0;\r\n-        Debug.Log(\"动作历史已清除\");\r\n-    }\r\n-\r\n-    private void OnGUI()\r\n-    {\r\n-        GUILayout.BeginArea(new Rect(10, 10, 400, 800));\r\n-        GUILayout.Label(\"Actions 动作系统演示\", UnityEditor.EditorStyles.boldLabel);\r\n-        \r\n-        GUILayout.Space(10);\r\n-        GUILayout.Label(\"动作系统配置:\");\r\n-        enableActionSystem = GUILayout.Toggle(enableActionSystem, \"启用动作系统\");\r\n-        enableActionLogging = GUILayout.Toggle(enableActionLogging, \"启用动作日志\");\r\n-        enableActionValidation = GUILayout.Toggle(enableActionValidation, \"启用动作验证\");\r\n-        enableActionUndo = GUILayout.Toggle(enableActionUndo, \"启用动作撤销\");\r\n-        enableActionRedo = GUILayout.Toggle(enableActionRedo, \"启用动作重做\");\r\n-        \r\n-        GUILayout.Space(10);\r\n-        GUILayout.Label(\"动作类型:\");\r\n-        currentActionType = (ActionType)System.Enum.Parse(typeof(ActionType), GUILayout.TextField(\"动作类型\", currentActionType.ToString()));\r\n-        actionName = GUILayout.TextField(\"动作名称\", actionName);\r\n-        actionDescription = GUILayout.TextField(\"动作描述\", actionDescription);\r\n-        isActionEnabled = GUILayout.Toggle(isActionEnabled, \"动作启用\");\r\n-        isActionVisible = GUILayout.Toggle(isActionVisible, \"动作可见\");\r\n-        \r\n-        GUILayout.Space(10);\r\n-        GUILayout.Label(\"动作状态:\");\r\n-        GUILayout.Label($\"动作状态: {actionState}\");\r\n-        GUILayout.Label($\"执行次数: {actionExecutionCount}\");\r\n-        GUILayout.Label($\"最后执行时间: {lastExecutionTime * 1000:F2}ms\");\r\n-        GUILayout.Label($\"平均执行时间: {averageExecutionTime * 1000:F2}ms\");\r\n-        GUILayout.Label($\"最大执行时间: {maxExecutionTime * 1000:F2}ms\");\r\n-        GUILayout.Label($\"最后结果: {lastActionResult}\");\r\n-        GUILayout.Label($\"正在执行: {isActionExecuting}\");\r\n-        \r\n-        GUILayout.Space(10);\r\n-        \r\n-        if (GUILayout.Button(\"执行动作\"))\r\n-        {\r\n-            ExecuteAction();\r\n-        }\r\n-        \r\n-        if (GUILayout.Button(\"撤销动作\"))\r\n-        {\r\n-            UndoAction();\r\n-        }\r\n-        \r\n-        if (GUILayout.Button(\"重做动作\"))\r\n-        {\r\n-            RedoAction();\r\n-        }\r\n-        \r\n-        if (GUILayout.Button(\"生成动作报告\"))\r\n-        {\r\n-            GenerateActionReport();\r\n-        }\r\n-        \r\n-        if (GUILayout.Button(\"清除动作历史\"))\r\n-        {\r\n-            ClearActionHistory();\r\n-        }\r\n-        \r\n-        GUILayout.Space(10);\r\n-        GUILayout.Label(\"动作历史:\");\r\n-        for (int i = 0; i < actionHistory.Length; i++)\r\n-        {\r\n-            if (!string.IsNullOrEmpty(actionHistory[i]))\r\n-            {\r\n-                GUILayout.Label(actionHistory[i]);\r\n-            }\r\n-        }\r\n-        \r\n-        GUILayout.EndArea();\r\n-    }\r\n-}\r\n-\r\n-/// <summary>\r\n-/// 动作类型枚举\r\n-/// </summary>\r\n-public enum ActionType\r\n-{\r\n-    Create,\r\n-    Delete,\r\n-    Modify,\r\n-    Move,\r\n-    Rotate,\r\n-    Scale\r\n-}\r\n-\r\n-/// <summary>\r\n-/// 动作管理器\r\n-/// </summary>\r\n-public class ActionManager\r\n-{\r\n-    private System.Collections.Generic.List<CustomAction> actions = new System.Collections.Generic.List<CustomAction>();\r\n-\r\n-    public void RegisterAction(CustomAction action)\r\n-    {\r\n-        if (!actions.Contains(action))\r\n-        {\r\n-            actions.Add(action);\r\n-        }\r\n-    }\r\n-\r\n-    public void UnregisterAction(CustomAction action)\r\n-    {\r\n-        actions.Remove(action);\r\n-    }\r\n-\r\n-    public CustomAction[] GetActions()\r\n-    {\r\n-        return actions.ToArray();\r\n-    }\r\n-}\r\n-\r\n-/// <summary>\r\n-/// 自定义动作类\r\n-/// </summary>\r\n-public class CustomAction\r\n-{\r\n-    public System.Action OnExecute;\r\n-    public System.Func<bool> OnValidate;\r\n-    public System.Action OnUndo;\r\n-    public System.Action OnRedo;\r\n-\r\n-    private string name;\r\n-    private string description;\r\n-    private bool isEnabled;\r\n-    private bool isVisible;\r\n-\r\n-    public CustomAction(string actionName, string actionDescription)\r\n-    {\r\n-        name = actionName;\r\n-        description = actionDescription;\r\n-        isEnabled = true;\r\n-        isVisible = true;\r\n-    }\r\n-\r\n-    public void Execute()\r\n-    {\r\n-        if (OnValidate != null && !OnValidate())\r\n-        {\r\n-            return;\r\n-        }\r\n-\r\n-        OnExecute?.Invoke();\r\n-    }\r\n-\r\n-    public void Undo()\r\n-    {\r\n-        OnUndo?.Invoke();\r\n-    }\r\n-\r\n-    public void Redo()\r\n-    {\r\n-        OnRedo?.Invoke();\r\n-    }\r\n-\r\n-    public bool IsEnabled() => isEnabled;\r\n-    public bool IsVisible() => isVisible;\r\n-\r\n-    public void SetEnabled(bool enabled) => isEnabled = enabled;\r\n-    public void SetVisible(bool visible) => isVisible = visible;\r\n-    public void SetName(string actionName) => name = actionName;\r\n } \n\\ No newline at end of file\n"
                }
            ],
            "date": 1750938330994,
            "name": "Commit-0",
            "content": "using UnityEngine;\r\nusing UnityEditor;\r\nusing UnityEditor.Actions;\r\n\r\n/// <summary>\r\n/// UnityEditor.Actions 命名空间案例演示\r\n/// 展示编辑器动作系统的使用，包括动作注册、执行和回调\r\n/// </summary>\r\npublic class ActionsExample : MonoBehaviour\r\n{\r\n    [Header(\"动作系统配置\")]\r\n    [SerializeField] private bool enableActionSystem = true; //启用动作系统\r\n    [SerializeField] private bool enableActionLogging = true; //启用动作日志\r\n    [SerializeField] private bool enableActionValidation = true; //启用动作验证\r\n    [SerializeField] private bool enableActionUndo = true; //启用动作撤销\r\n    [SerializeField] private bool enableActionRedo = true; //启用动作重做\r\n    \r\n    [Header(\"动作类型\")]\r\n    [SerializeField] private ActionType currentActionType = ActionType.Create; //当前动作类型\r\n    [SerializeField] private string actionName = \"CustomAction\"; //动作名称\r\n    [SerializeField] private string actionDescription = \"自定义动作描述\"; //动作描述\r\n    [SerializeField] private bool isActionEnabled = true; //动作是否启用\r\n    [SerializeField] private bool isActionVisible = true; //动作是否可见\r\n    \r\n    [Header(\"动作状态\")]\r\n    [SerializeField] private string actionState = \"未注册\"; //动作状态\r\n    [SerializeField] private bool isActionExecuting = false; //动作是否正在执行\r\n    [SerializeField] private float actionExecutionTime = 0f; //动作执行时间\r\n    [SerializeField] private int actionExecutionCount = 0; //动作执行次数\r\n    [SerializeField] private string lastActionResult = \"\"; //最后动作结果\r\n    \r\n    [Header(\"动作历史\")]\r\n    [SerializeField] private string[] actionHistory = new string[10]; //动作历史\r\n    [SerializeField] private int actionHistoryIndex = 0; //动作历史索引\r\n    [SerializeField] private bool enableActionHistory = true; //启用动作历史\r\n    \r\n    [Header(\"性能监控\")]\r\n    [SerializeField] private bool enablePerformanceMonitoring = true; //启用性能监控\r\n    [SerializeField] private float[] executionTimeHistory = new float[100]; //执行时间历史\r\n    [SerializeField] private int executionTimeIndex = 0; //执行时间索引\r\n    [SerializeField] private float averageExecutionTime = 0f; //平均执行时间\r\n    [SerializeField] private float maxExecutionTime = 0f; //最大执行时间\r\n    \r\n    private ActionManager actionManager;\r\n    private CustomAction customAction;\r\n    private bool isInitialized = false;\r\n    private float lastExecutionTime = 0f;\r\n\r\n    private void Start()\r\n    {\r\n        InitializeActionSystem();\r\n    }\r\n\r\n    /// <summary>\r\n    /// 初始化动作系统\r\n    /// </summary>\r\n    private void InitializeActionSystem()\r\n    {\r\n        if (!enableActionSystem) return;\r\n        \r\n        // 创建动作管理器\r\n        actionManager = new ActionManager();\r\n        \r\n        // 创建自定义动作\r\n        CreateCustomAction();\r\n        \r\n        // 注册动作\r\n        RegisterActions();\r\n        \r\n        // 初始化性能监控\r\n        InitializePerformanceMonitoring();\r\n        \r\n        isInitialized = true;\r\n        actionState = \"已初始化\";\r\n        Debug.Log(\"动作系统初始化完成\");\r\n    }\r\n\r\n    /// <summary>\r\n    /// 创建自定义动作\r\n    /// </summary>\r\n    private void CreateCustomAction()\r\n    {\r\n        customAction = new CustomAction(actionName, actionDescription);\r\n        customAction.SetEnabled(isActionEnabled);\r\n        customAction.SetVisible(isActionVisible);\r\n        \r\n        Debug.Log($\"自定义动作已创建: {actionName}\");\r\n    }\r\n\r\n    /// <summary>\r\n    /// 注册动作\r\n    /// </summary>\r\n    private void RegisterActions()\r\n    {\r\n        if (customAction != null)\r\n        {\r\n            // 注册动作到管理器\r\n            actionManager.RegisterAction(customAction);\r\n            \r\n            // 设置动作回调\r\n            customAction.OnExecute += OnActionExecute;\r\n            customAction.OnValidate += OnActionValidate;\r\n            customAction.OnUndo += OnActionUndo;\r\n            customAction.OnRedo += OnActionRedo;\r\n            \r\n            Debug.Log(\"动作已注册到管理器\");\r\n        }\r\n    }\r\n\r\n    /// <summary>\r\n    /// 初始化性能监控\r\n    /// </summary>\r\n    private void InitializePerformanceMonitoring()\r\n    {\r\n        if (enablePerformanceMonitoring)\r\n        {\r\n            executionTimeHistory = new float[100];\r\n            executionTimeIndex = 0;\r\n            averageExecutionTime = 0f;\r\n            maxExecutionTime = 0f;\r\n            \r\n            Debug.Log(\"性能监控初始化完成\");\r\n        }\r\n    }\r\n\r\n    private void Update()\r\n    {\r\n        if (!isInitialized) return;\r\n        \r\n        // 更新动作状态\r\n        UpdateActionStatus();\r\n        \r\n        // 性能监控\r\n        if (enablePerformanceMonitoring)\r\n        {\r\n            UpdatePerformanceMonitoring();\r\n        }\r\n    }\r\n\r\n    /// <summary>\r\n    /// 更新动作状态\r\n    /// </summary>\r\n    private void UpdateActionStatus()\r\n    {\r\n        if (customAction != null)\r\n        {\r\n            isActionEnabled = customAction.IsEnabled();\r\n            isActionVisible = customAction.IsVisible();\r\n        }\r\n    }\r\n\r\n    /// <summary>\r\n    /// 更新性能监控\r\n    /// </summary>\r\n    private void UpdatePerformanceMonitoring()\r\n    {\r\n        // 计算平均执行时间\r\n        float totalTime = 0f;\r\n        int validCount = 0;\r\n        \r\n        for (int i = 0; i < executionTimeHistory.Length; i++)\r\n        {\r\n            if (executionTimeHistory[i] > 0f)\r\n            {\r\n                totalTime += executionTimeHistory[i];\r\n                validCount++;\r\n            }\r\n        }\r\n        \r\n        if (validCount > 0)\r\n        {\r\n            averageExecutionTime = totalTime / validCount;\r\n        }\r\n    }\r\n\r\n    /// <summary>\r\n    /// 动作执行回调\r\n    /// </summary>\r\n    private void OnActionExecute()\r\n    {\r\n        float startTime = Time.realtimeSinceStartup;\r\n        \r\n        isActionExecuting = true;\r\n        actionExecutionCount++;\r\n        \r\n        // 执行动作逻辑\r\n        ExecuteActionLogic();\r\n        \r\n        // 记录执行时间\r\n        actionExecutionTime = Time.realtimeSinceStartup - startTime;\r\n        lastExecutionTime = actionExecutionTime;\r\n        \r\n        // 更新性能历史\r\n        executionTimeHistory[executionTimeIndex] = actionExecutionTime;\r\n        executionTimeIndex = (executionTimeIndex + 1) % 100;\r\n        \r\n        // 更新最大执行时间\r\n        if (actionExecutionTime > maxExecutionTime)\r\n        {\r\n            maxExecutionTime = actionExecutionTime;\r\n        }\r\n        \r\n        // 记录到历史\r\n        if (enableActionHistory)\r\n        {\r\n            string historyEntry = $\"[{System.DateTime.Now:HH:mm:ss}] 执行动作: {actionName} (耗时: {actionExecutionTime * 1000:F2}ms)\";\r\n            actionHistory[actionHistoryIndex] = historyEntry;\r\n            actionHistoryIndex = (actionHistoryIndex + 1) % actionHistory.Length;\r\n        }\r\n        \r\n        isActionExecuting = false;\r\n        lastActionResult = \"执行成功\";\r\n        \r\n        if (enableActionLogging)\r\n        {\r\n            Debug.Log($\"动作执行完成: {actionName}, 耗时: {actionExecutionTime * 1000:F2}ms\");\r\n        }\r\n    }\r\n\r\n    /// <summary>\r\n    /// 执行动作逻辑\r\n    /// </summary>\r\n    private void ExecuteActionLogic()\r\n    {\r\n        switch (currentActionType)\r\n        {\r\n            case ActionType.Create:\r\n                CreateGameObject();\r\n                break;\r\n            case ActionType.Delete:\r\n                DeleteSelectedObjects();\r\n                break;\r\n            case ActionType.Modify:\r\n                ModifySelectedObjects();\r\n                break;\r\n            case ActionType.Move:\r\n                MoveSelectedObjects();\r\n                break;\r\n            case ActionType.Rotate:\r\n                RotateSelectedObjects();\r\n                break;\r\n            case ActionType.Scale:\r\n                ScaleSelectedObjects();\r\n                break;\r\n        }\r\n    }\r\n\r\n    /// <summary>\r\n    /// 创建游戏对象\r\n    /// </summary>\r\n    private void CreateGameObject()\r\n    {\r\n        GameObject newObject = new GameObject($\"CreatedObject_{actionExecutionCount}\");\r\n        newObject.transform.position = Random.insideUnitSphere * 5f;\r\n        \r\n        // 添加一些组件\r\n        newObject.AddComponent<MeshRenderer>();\r\n        newObject.AddComponent<MeshFilter>();\r\n        newObject.AddComponent<BoxCollider>();\r\n        \r\n        Debug.Log($\"创建游戏对象: {newObject.name}\");\r\n    }\r\n\r\n    /// <summary>\r\n    /// 删除选中的对象\r\n    /// </summary>\r\n    private void DeleteSelectedObjects()\r\n    {\r\n        GameObject[] selectedObjects = Selection.gameObjects;\r\n        foreach (var obj in selectedObjects)\r\n        {\r\n            if (obj != null)\r\n            {\r\n                DestroyImmediate(obj);\r\n            }\r\n        }\r\n        \r\n        Debug.Log($\"删除 {selectedObjects.Length} 个选中对象\");\r\n    }\r\n\r\n    /// <summary>\r\n    /// 修改选中的对象\r\n    /// </summary>\r\n    private void ModifySelectedObjects()\r\n    {\r\n        GameObject[] selectedObjects = Selection.gameObjects;\r\n        foreach (var obj in selectedObjects)\r\n        {\r\n            if (obj != null)\r\n            {\r\n                // 随机修改位置\r\n                obj.transform.position += Random.insideUnitSphere * 0.5f;\r\n                \r\n                // 随机修改旋转\r\n                obj.transform.rotation *= Quaternion.Euler(Random.Range(-30f, 30f), Random.Range(-30f, 30f), Random.Range(-30f, 30f));\r\n            }\r\n        }\r\n        \r\n        Debug.Log($\"修改 {selectedObjects.Length} 个选中对象\");\r\n    }\r\n\r\n    /// <summary>\r\n    /// 移动选中的对象\r\n    /// </summary>\r\n    private void MoveSelectedObjects()\r\n    {\r\n        GameObject[] selectedObjects = Selection.gameObjects;\r\n        Vector3 moveDirection = Random.onUnitSphere;\r\n        \r\n        foreach (var obj in selectedObjects)\r\n        {\r\n            if (obj != null)\r\n            {\r\n                obj.transform.position += moveDirection * 2f;\r\n            }\r\n        }\r\n        \r\n        Debug.Log($\"移动 {selectedObjects.Length} 个选中对象\");\r\n    }\r\n\r\n    /// <summary>\r\n    /// 旋转选中的对象\r\n    /// </summary>\r\n    private void RotateSelectedObjects()\r\n    {\r\n        GameObject[] selectedObjects = Selection.gameObjects;\r\n        Vector3 rotationAxis = Random.onUnitSphere;\r\n        float rotationAngle = Random.Range(30f, 90f);\r\n        \r\n        foreach (var obj in selectedObjects)\r\n        {\r\n            if (obj != null)\r\n            {\r\n                obj.transform.Rotate(rotationAxis, rotationAngle);\r\n            }\r\n        }\r\n        \r\n        Debug.Log($\"旋转 {selectedObjects.Length} 个选中对象\");\r\n    }\r\n\r\n    /// <summary>\r\n    /// 缩放选中的对象\r\n    /// </summary>\r\n    private void ScaleSelectedObjects()\r\n    {\r\n        GameObject[] selectedObjects = Selection.gameObjects;\r\n        float scaleFactor = Random.Range(0.8f, 1.2f);\r\n        \r\n        foreach (var obj in selectedObjects)\r\n        {\r\n            if (obj != null)\r\n            {\r\n                obj.transform.localScale *= scaleFactor;\r\n            }\r\n        }\r\n        \r\n        Debug.Log($\"缩放 {selectedObjects.Length} 个选中对象\");\r\n    }\r\n\r\n    /// <summary>\r\n    /// 动作验证回调\r\n    /// </summary>\r\n    private bool OnActionValidate()\r\n    {\r\n        if (!enableActionValidation) return true;\r\n        \r\n        // 验证动作是否可以执行\r\n        bool canExecute = true;\r\n        \r\n        switch (currentActionType)\r\n        {\r\n            case ActionType.Delete:\r\n            case ActionType.Modify:\r\n            case ActionType.Move:\r\n            case ActionType.Rotate:\r\n            case ActionType.Scale:\r\n                canExecute = Selection.gameObjects.Length > 0;\r\n                break;\r\n        }\r\n        \r\n        if (!canExecute)\r\n        {\r\n            lastActionResult = \"验证失败：没有选中对象\";\r\n            Debug.LogWarning(\"动作验证失败\");\r\n        }\r\n        \r\n        return canExecute;\r\n    }\r\n\r\n    /// <summary>\r\n    /// 动作撤销回调\r\n    /// </summary>\r\n    private void OnActionUndo()\r\n    {\r\n        if (!enableActionUndo) return;\r\n        \r\n        // 实现撤销逻辑\r\n        Debug.Log(\"执行撤销操作\");\r\n        lastActionResult = \"已撤销\";\r\n        \r\n        if (enableActionHistory)\r\n        {\r\n            string historyEntry = $\"[{System.DateTime.Now:HH:mm:ss}] 撤销动作: {actionName}\";\r\n            actionHistory[actionHistoryIndex] = historyEntry;\r\n            actionHistoryIndex = (actionHistoryIndex + 1) % actionHistory.Length;\r\n        }\r\n    }\r\n\r\n    /// <summary>\r\n    /// 动作重做回调\r\n    /// </summary>\r\n    private void OnActionRedo()\r\n    {\r\n        if (!enableActionRedo) return;\r\n        \r\n        // 实现重做逻辑\r\n        Debug.Log(\"执行重做操作\");\r\n        lastActionResult = \"已重做\";\r\n        \r\n        if (enableActionHistory)\r\n        {\r\n            string historyEntry = $\"[{System.DateTime.Now:HH:mm:ss}] 重做动作: {actionName}\";\r\n            actionHistory[actionHistoryIndex] = historyEntry;\r\n            actionHistoryIndex = (actionHistoryIndex + 1) % actionHistory.Length;\r\n        }\r\n    }\r\n\r\n    /// <summary>\r\n    /// 执行动作\r\n    /// </summary>\r\n    public void ExecuteAction()\r\n    {\r\n        if (customAction != null && customAction.IsEnabled())\r\n        {\r\n            customAction.Execute();\r\n        }\r\n    }\r\n\r\n    /// <summary>\r\n    /// 撤销动作\r\n    /// </summary>\r\n    public void UndoAction()\r\n    {\r\n        if (customAction != null && enableActionUndo)\r\n        {\r\n            customAction.Undo();\r\n        }\r\n    }\r\n\r\n    /// <summary>\r\n    /// 重做动作\r\n    /// </summary>\r\n    public void RedoAction()\r\n    {\r\n        if (customAction != null && enableActionRedo)\r\n        {\r\n            customAction.Redo();\r\n        }\r\n    }\r\n\r\n    /// <summary>\r\n    /// 设置动作类型\r\n    /// </summary>\r\n    /// <param name=\"actionType\">动作类型</param>\r\n    public void SetActionType(ActionType actionType)\r\n    {\r\n        currentActionType = actionType;\r\n        Debug.Log($\"动作类型已设置: {actionType}\");\r\n    }\r\n\r\n    /// <summary>\r\n    /// 设置动作名称\r\n    /// </summary>\r\n    /// <param name=\"name\">动作名称</param>\r\n    public void SetActionName(string name)\r\n    {\r\n        actionName = name;\r\n        if (customAction != null)\r\n        {\r\n            customAction.SetName(name);\r\n        }\r\n        Debug.Log($\"动作名称已设置: {name}\");\r\n    }\r\n\r\n    /// <summary>\r\n    /// 启用/禁用动作\r\n    /// </summary>\r\n    /// <param name=\"enabled\">是否启用</param>\r\n    public void SetActionEnabled(bool enabled)\r\n    {\r\n        isActionEnabled = enabled;\r\n        if (customAction != null)\r\n        {\r\n            customAction.SetEnabled(enabled);\r\n        }\r\n        Debug.Log($\"动作启用状态已设置: {enabled}\");\r\n    }\r\n\r\n    /// <summary>\r\n    /// 生成动作报告\r\n    /// </summary>\r\n    public void GenerateActionReport()\r\n    {\r\n        Debug.Log(\"=== 动作系统报告 ===\");\r\n        Debug.Log($\"动作系统状态: {actionState}\");\r\n        Debug.Log($\"当前动作类型: {currentActionType}\");\r\n        Debug.Log($\"动作名称: {actionName}\");\r\n        Debug.Log($\"动作描述: {actionDescription}\");\r\n        Debug.Log($\"动作启用状态: {isActionEnabled}\");\r\n        Debug.Log($\"动作可见状态: {isActionVisible}\");\r\n        Debug.Log($\"动作执行次数: {actionExecutionCount}\");\r\n        Debug.Log($\"最后执行时间: {lastExecutionTime * 1000:F2}ms\");\r\n        Debug.Log($\"平均执行时间: {averageExecutionTime * 1000:F2}ms\");\r\n        Debug.Log($\"最大执行时间: {maxExecutionTime * 1000:F2}ms\");\r\n        Debug.Log($\"最后动作结果: {lastActionResult}\");\r\n        Debug.Log($\"是否正在执行: {isActionExecuting}\");\r\n    }\r\n\r\n    /// <summary>\r\n    /// 清除动作历史\r\n    /// </summary>\r\n    public void ClearActionHistory()\r\n    {\r\n        actionHistory = new string[10];\r\n        actionHistoryIndex = 0;\r\n        Debug.Log(\"动作历史已清除\");\r\n    }\r\n\r\n    private void OnGUI()\r\n    {\r\n        GUILayout.BeginArea(new Rect(10, 10, 400, 800));\r\n        GUILayout.Label(\"Actions 动作系统演示\", UnityEditor.EditorStyles.boldLabel);\r\n        \r\n        GUILayout.Space(10);\r\n        GUILayout.Label(\"动作系统配置:\");\r\n        enableActionSystem = GUILayout.Toggle(enableActionSystem, \"启用动作系统\");\r\n        enableActionLogging = GUILayout.Toggle(enableActionLogging, \"启用动作日志\");\r\n        enableActionValidation = GUILayout.Toggle(enableActionValidation, \"启用动作验证\");\r\n        enableActionUndo = GUILayout.Toggle(enableActionUndo, \"启用动作撤销\");\r\n        enableActionRedo = GUILayout.Toggle(enableActionRedo, \"启用动作重做\");\r\n        \r\n        GUILayout.Space(10);\r\n        GUILayout.Label(\"动作类型:\");\r\n        currentActionType = (ActionType)System.Enum.Parse(typeof(ActionType), GUILayout.TextField(\"动作类型\", currentActionType.ToString()));\r\n        actionName = GUILayout.TextField(\"动作名称\", actionName);\r\n        actionDescription = GUILayout.TextField(\"动作描述\", actionDescription);\r\n        isActionEnabled = GUILayout.Toggle(isActionEnabled, \"动作启用\");\r\n        isActionVisible = GUILayout.Toggle(isActionVisible, \"动作可见\");\r\n        \r\n        GUILayout.Space(10);\r\n        GUILayout.Label(\"动作状态:\");\r\n        GUILayout.Label($\"动作状态: {actionState}\");\r\n        GUILayout.Label($\"执行次数: {actionExecutionCount}\");\r\n        GUILayout.Label($\"最后执行时间: {lastExecutionTime * 1000:F2}ms\");\r\n        GUILayout.Label($\"平均执行时间: {averageExecutionTime * 1000:F2}ms\");\r\n        GUILayout.Label($\"最大执行时间: {maxExecutionTime * 1000:F2}ms\");\r\n        GUILayout.Label($\"最后结果: {lastActionResult}\");\r\n        GUILayout.Label($\"正在执行: {isActionExecuting}\");\r\n        \r\n        GUILayout.Space(10);\r\n        \r\n        if (GUILayout.Button(\"执行动作\"))\r\n        {\r\n            ExecuteAction();\r\n        }\r\n        \r\n        if (GUILayout.Button(\"撤销动作\"))\r\n        {\r\n            UndoAction();\r\n        }\r\n        \r\n        if (GUILayout.Button(\"重做动作\"))\r\n        {\r\n            RedoAction();\r\n        }\r\n        \r\n        if (GUILayout.Button(\"生成动作报告\"))\r\n        {\r\n            GenerateActionReport();\r\n        }\r\n        \r\n        if (GUILayout.Button(\"清除动作历史\"))\r\n        {\r\n            ClearActionHistory();\r\n        }\r\n        \r\n        GUILayout.Space(10);\r\n        GUILayout.Label(\"动作历史:\");\r\n        for (int i = 0; i < actionHistory.Length; i++)\r\n        {\r\n            if (!string.IsNullOrEmpty(actionHistory[i]))\r\n            {\r\n                GUILayout.Label(actionHistory[i]);\r\n            }\r\n        }\r\n        \r\n        GUILayout.EndArea();\r\n    }\r\n}\r\n\r\n/// <summary>\r\n/// 动作类型枚举\r\n/// </summary>\r\npublic enum ActionType\r\n{\r\n    Create,\r\n    Delete,\r\n    Modify,\r\n    Move,\r\n    Rotate,\r\n    Scale\r\n}\r\n\r\n/// <summary>\r\n/// 动作管理器\r\n/// </summary>\r\npublic class ActionManager\r\n{\r\n    private System.Collections.Generic.List<CustomAction> actions = new System.Collections.Generic.List<CustomAction>();\r\n\r\n    public void RegisterAction(CustomAction action)\r\n    {\r\n        if (!actions.Contains(action))\r\n        {\r\n            actions.Add(action);\r\n        }\r\n    }\r\n\r\n    public void UnregisterAction(CustomAction action)\r\n    {\r\n        actions.Remove(action);\r\n    }\r\n\r\n    public CustomAction[] GetActions()\r\n    {\r\n        return actions.ToArray();\r\n    }\r\n}\r\n\r\n/// <summary>\r\n/// 自定义动作类\r\n/// </summary>\r\npublic class CustomAction\r\n{\r\n    public System.Action OnExecute;\r\n    public System.Func<bool> OnValidate;\r\n    public System.Action OnUndo;\r\n    public System.Action OnRedo;\r\n\r\n    private string name;\r\n    private string description;\r\n    private bool isEnabled;\r\n    private bool isVisible;\r\n\r\n    public CustomAction(string actionName, string actionDescription)\r\n    {\r\n        name = actionName;\r\n        description = actionDescription;\r\n        isEnabled = true;\r\n        isVisible = true;\r\n    }\r\n\r\n    public void Execute()\r\n    {\r\n        if (OnValidate != null && !OnValidate())\r\n        {\r\n            return;\r\n        }\r\n\r\n        OnExecute?.Invoke();\r\n    }\r\n\r\n    public void Undo()\r\n    {\r\n        OnUndo?.Invoke();\r\n    }\r\n\r\n    public void Redo()\r\n    {\r\n        OnRedo?.Invoke();\r\n    }\r\n\r\n    public bool IsEnabled() => isEnabled;\r\n    public bool IsVisible() => isVisible;\r\n\r\n    public void SetEnabled(bool enabled) => isEnabled = enabled;\r\n    public void SetVisible(bool visible) => isVisible = visible;\r\n    public void SetName(string actionName) => name = actionName;\r\n} "
        }
    ]
}