{
    "sourceFile": "Library/PackageCache/com.unity.2d.animation@7.0.4/IK/Editor/Inspectors/CCDSolver2DEditor.cs",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1750929597117,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1750929597117,
            "name": "Commit-0",
            "content": "using UnityEngine;\nusing UnityEngine.U2D.IK;\n\nnamespace UnityEditor.U2D.IK\n{\n    /// <summary>\n    /// Custom Inspector for CCDSolver2D.\n    /// </summary>\n    [CustomEditor(typeof(CCDSolver2D))]\n    [CanEditMultipleObjects]\n    public class CCDSolver2DEditor : Solver2DEditor\n    {\n        private static class Contents\n        {\n            public static readonly GUIContent effectorLabel = new GUIContent(\"Effector\", \"The last Transform of a hierarchy constrained by the target\");\n            public static readonly GUIContent targetLabel = new GUIContent(\"Target\", \"Transfrom which the effector will follow\");\n            public static readonly GUIContent chainLengthLabel = new GUIContent(\"Chain Length\", \"Number of Transforms handled by the IK\");\n            public static readonly GUIContent iterationsLabel = new GUIContent(\"Iterations\", \"Number of iterations the IK solver is run per frame\");\n            public static readonly GUIContent toleranceLabel = new GUIContent(\"Tolerance\", \"How close the target is to the goal to be considered as successful\");\n            public static readonly GUIContent velocityLabel = new GUIContent(\"Velocity\", \"How fast the chain elements rotate to the effector per iteration\");\n        }\n\n        private SerializedProperty m_TargetProperty;\n        private SerializedProperty m_EffectorProperty;\n        private SerializedProperty m_TransformCountProperty;\n\n        private SerializedProperty m_IterationsProperty;\n        private SerializedProperty m_ToleranceProperty;\n        private SerializedProperty m_VelocityProperty;\n        private CCDSolver2D m_Solver;\n\n        private void OnEnable()\n        {\n            //\n            m_Solver = target as CCDSolver2D;\n            var chainProperty = serializedObject.FindProperty(\"m_Chain\");\n            m_TargetProperty = chainProperty.FindPropertyRelative(\"m_TargetTransform\");\n            m_EffectorProperty = chainProperty.FindPropertyRelative(\"m_EffectorTransform\");\n            m_TransformCountProperty = chainProperty.FindPropertyRelative(\"m_TransformCount\");\n            m_IterationsProperty = serializedObject.FindProperty(\"m_Iterations\");\n            m_ToleranceProperty = serializedObject.FindProperty(\"m_Tolerance\");\n            m_VelocityProperty = serializedObject.FindProperty(\"m_Velocity\");\n        }\n\n        /// <summary>\n        /// Custom Inspector OnInspectorGUI override.\n        /// </summary>\n        public override void OnInspectorGUI()\n        {\n            IKChain2D chain = m_Solver.GetChain(0);\n\n            serializedObject.Update();\n            EditorGUILayout.PropertyField(m_EffectorProperty, Contents.effectorLabel);\n            EditorGUILayout.PropertyField(m_TargetProperty, Contents.targetLabel);\n            EditorGUILayout.IntSlider(m_TransformCountProperty, 0, IKUtility.GetMaxChainCount(chain), Contents.chainLengthLabel);\n            EditorGUILayout.PropertyField(m_IterationsProperty, Contents.iterationsLabel);\n            EditorGUILayout.PropertyField(m_ToleranceProperty, Contents.toleranceLabel);\n            EditorGUILayout.PropertyField(m_VelocityProperty, Contents.velocityLabel);\n\n            DrawCommonSolverInspector();\n            serializedObject.ApplyModifiedProperties();\n        }\n    }\n}\n"
        }
    ]
}