{
    "sourceFile": "Assets/UnityEditor/Chapter 8 UnityAPI/UnityEditor/IMGUI/IMGUIExample.cs",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1750940570256,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1750940570256,
            "name": "Commit-0",
            "content": "using UnityEngine;\r\nusing UnityEditor;\r\nusing UnityEditor.IMGUI.Controls;\r\nusing System.Collections.Generic;\r\n\r\nnamespace UnityEditor.IMGUI.Examples\r\n{\r\n    /// <summary>\r\n    /// UnityEditor.IMGUI 命名空间使用示例\r\n    /// 演示即时模式GUI系统的各种控件和功能\r\n    /// </summary>\r\n    public class IMGUIExample : MonoBehaviour\r\n    {\r\n        [Header(\"GUI配置\")]\r\n        [SerializeField] private bool showAdvancedControls = false;\r\n        [SerializeField] private float windowWidth = 400f;\r\n        [SerializeField] private float windowHeight = 600f;\r\n        [SerializeField] private Vector2 scrollPosition = Vector2.zero;\r\n        \r\n        [Header(\"控件状态\")]\r\n        [SerializeField] private string textFieldValue = \"\";\r\n        [SerializeField] private bool toggleValue = false;\r\n        [SerializeField] private float sliderValue = 0.5f;\r\n        [SerializeField] private int selectedTab = 0;\r\n        [SerializeField] private Vector2 dragValue = Vector2.zero;\r\n        \r\n        [Header(\"树形视图\")]\r\n        [SerializeField] private TreeViewState treeViewState;\r\n        [SerializeField] private TreeView treeView;\r\n        [SerializeField] private List<TreeViewItem> treeItems = new List<TreeViewItem>();\r\n        \r\n        [Header(\"表格视图\")]\r\n        [SerializeField] private MultiColumnHeaderState multiColumnHeaderState;\r\n        [SerializeField] private MultiColumnHeader multiColumnHeader;\r\n        [SerializeField] private List<TableRow> tableData = new List<TableRow>();\r\n        \r\n        private Rect windowRect = new Rect(100, 100, 400, 600);\r\n        private bool isWindowOpen = true;\r\n        private string[] tabNames = { \"基础控件\", \"高级控件\", \"树形视图\", \"表格视图\" };\r\n        \r\n        /// <summary>\r\n        /// 表格行数据\r\n        /// </summary>\r\n        [System.Serializable]\r\n        public class TableRow\r\n        {\r\n            public string name;\r\n            public int value;\r\n            public bool enabled;\r\n            \r\n            public TableRow(string name, int value, bool enabled)\r\n            {\r\n                this.name = name;\r\n                this.value = value;\r\n                this.enabled = enabled;\r\n            }\r\n        }\r\n        \r\n        /// <summary>\r\n        /// 初始化IMGUI系统\r\n        /// </summary>\r\n        private void Start()\r\n        {\r\n            InitializeIMGUISystem();\r\n        }\r\n        \r\n        /// <summary>\r\n        /// 初始化IMGUI系统\r\n        /// </summary>\r\n        private void InitializeIMGUISystem()\r\n        {\r\n            // 初始化树形视图\r\n            InitializeTreeView();\r\n            \r\n            // 初始化表格视图\r\n            InitializeTableView();\r\n            \r\n            Debug.Log(\"IMGUI系统初始化完成\");\r\n        }\r\n        \r\n        /// <summary>\r\n        /// 初始化树形视图\r\n        /// </summary>\r\n        private void InitializeTreeView()\r\n        {\r\n            treeViewState = new TreeViewState();\r\n            \r\n            // 创建示例树形数据\r\n            treeItems.Clear();\r\n            treeItems.Add(new TreeViewItem(1, 0, \"根节点\"));\r\n            treeItems.Add(new TreeViewItem(2, 1, \"子节点 1\"));\r\n            treeItems.Add(new TreeViewItem(3, 1, \"子节点 2\"));\r\n            treeItems.Add(new TreeViewItem(4, 2, \"孙节点 1\"));\r\n            treeItems.Add(new TreeViewItem(5, 2, \"孙节点 2\"));\r\n            \r\n            treeView = new TreeView(treeViewState);\r\n            treeView.SetupParentsAndChildrenFromDepths(treeItems);\r\n        }\r\n        \r\n        /// <summary>\r\n        /// 初始化表格视图\r\n        /// </summary>\r\n        private void InitializeTableView()\r\n        {\r\n            // 创建表格数据\r\n            tableData.Clear();\r\n            tableData.Add(new TableRow(\"项目1\", 100, true));\r\n            tableData.Add(new TableRow(\"项目2\", 200, false));\r\n            tableData.Add(new TableRow(\"项目3\", 300, true));\r\n            \r\n            // 创建多列表头\r\n            var columns = new[]\r\n            {\r\n                new MultiColumnHeaderState.Column\r\n                {\r\n                    headerContent = new GUIContent(\"名称\"),\r\n                    headerTextAlignment = TextAlignment.Left,\r\n                    sortedAscending = true,\r\n                    sortingArrowAlignment = TextAlignment.Right,\r\n                    width = 100,\r\n                    minWidth = 50,\r\n                    autoResize = true,\r\n                    allowToggleVisibility = true\r\n                },\r\n                new MultiColumnHeaderState.Column\r\n                {\r\n                    headerContent = new GUIContent(\"数值\"),\r\n                    headerTextAlignment = TextAlignment.Center,\r\n                    sortedAscending = true,\r\n                    sortingArrowAlignment = TextAlignment.Right,\r\n                    width = 80,\r\n                    minWidth = 50,\r\n                    autoResize = true,\r\n                    allowToggleVisibility = true\r\n                },\r\n                new MultiColumnHeaderState.Column\r\n                {\r\n                    headerContent = new GUIContent(\"启用\"),\r\n                    headerTextAlignment = TextAlignment.Center,\r\n                    sortedAscending = true,\r\n                    sortingArrowAlignment = TextAlignment.Right,\r\n                    width = 60,\r\n                    minWidth = 50,\r\n                    autoResize = true,\r\n                    allowToggleVisibility = true\r\n                }\r\n            };\r\n            \r\n            multiColumnHeaderState = new MultiColumnHeaderState(columns);\r\n            multiColumnHeader = new MultiColumnHeader(multiColumnHeaderState);\r\n            multiColumnHeader.ResizeToFit();\r\n        }\r\n        \r\n        /// <summary>\r\n        /// 绘制基础控件\r\n        /// </summary>\r\n        private void DrawBasicControls()\r\n        {\r\n            GUILayout.Label(\"基础控件演示\", EditorStyles.boldLabel);\r\n            \r\n            GUILayout.Space(10);\r\n            \r\n            // 文本字段\r\n            textFieldValue = EditorGUILayout.TextField(\"文本字段\", textFieldValue);\r\n            \r\n            // 按钮\r\n            if (GUILayout.Button(\"点击按钮\"))\r\n            {\r\n                Debug.Log(\"按钮被点击\");\r\n            }\r\n            \r\n            // 切换开关\r\n            toggleValue = EditorGUILayout.Toggle(\"切换开关\", toggleValue);\r\n            \r\n            // 滑块\r\n            sliderValue = EditorGUILayout.Slider(\"滑块\", sliderValue, 0f, 1f);\r\n            \r\n            // 颜色选择器\r\n            Color color = EditorGUILayout.ColorField(\"颜色选择器\", Color.red);\r\n            \r\n            // 对象字段\r\n            GameObject obj = (GameObject)EditorGUILayout.ObjectField(\"对象字段\", null, typeof(GameObject), true);\r\n            \r\n            // 枚举下拉菜单\r\n            System.Enum enumValue = EditorGUILayout.EnumPopup(\"枚举选择\", System.Enum.GetValues(typeof(KeyCode))[0]);\r\n            \r\n            // 向量字段\r\n            Vector3 vector3 = EditorGUILayout.Vector3Field(\"向量3\", Vector3.zero);\r\n            \r\n            // 矩形字段\r\n            Rect rect = EditorGUILayout.RectField(\"矩形\", new Rect(0, 0, 100, 100));\r\n        }\r\n        \r\n        /// <summary>\r\n        /// 绘制高级控件\r\n        /// </summary>\r\n        private void DrawAdvancedControls()\r\n        {\r\n            GUILayout.Label(\"高级控件演示\", EditorStyles.boldLabel);\r\n            \r\n            GUILayout.Space(10);\r\n            \r\n            // 标签页\r\n            selectedTab = GUILayout.Toolbar(selectedTab, tabNames);\r\n            \r\n            // 折叠面板\r\n            showAdvancedControls = EditorGUILayout.Foldout(showAdvancedControls, \"高级选项\");\r\n            if (showAdvancedControls)\r\n            {\r\n                EditorGUI.indentLevel++;\r\n                \r\n                // 曲线编辑器\r\n                AnimationCurve curve = EditorGUILayout.CurveField(\"曲线\", AnimationCurve.Linear(0, 0, 1, 1));\r\n                \r\n                // 渐变编辑器\r\n                Gradient gradient = EditorGUILayout.GradientField(\"渐变\", new Gradient());\r\n                \r\n                // 范围滑块\r\n                Vector2 range = EditorGUILayout.Vector2Field(\"范围\", new Vector2(0, 1));\r\n                \r\n                // 拖拽字段\r\n                dragValue = EditorGUILayout.Vector2Field(\"拖拽值\", dragValue);\r\n                \r\n                EditorGUI.indentLevel--;\r\n            }\r\n            \r\n            // 进度条\r\n            float progress = Mathf.PingPong(Time.time * 0.5f, 1f);\r\n            EditorGUI.ProgressBar(new Rect(10, 200, 200, 20), progress, $\"进度: {progress:P0}\");\r\n            \r\n            // 帮助框\r\n            EditorGUILayout.HelpBox(\"这是一个帮助信息框，用于显示提示信息。\", MessageType.Info);\r\n            \r\n            // 分隔线\r\n            EditorGUILayout.Space();\r\n            EditorGUILayout.LabelField(\"\", GUI.skin.horizontalSlider);\r\n            EditorGUILayout.Space();\r\n        }\r\n        \r\n        /// <summary>\r\n        /// 绘制树形视图\r\n        /// </summary>\r\n        private void DrawTreeView()\r\n        {\r\n            GUILayout.Label(\"树形视图演示\", EditorStyles.boldLabel);\r\n            \r\n            GUILayout.Space(10);\r\n            \r\n            if (treeView != null)\r\n            {\r\n                Rect treeRect = GUILayoutUtility.GetRect(200, 300);\r\n                treeView.OnGUI(treeRect);\r\n                \r\n                GUILayout.Space(10);\r\n                \r\n                if (GUILayout.Button(\"添加节点\"))\r\n                {\r\n                    AddTreeItem();\r\n                }\r\n                \r\n                if (GUILayout.Button(\"删除选中节点\"))\r\n                {\r\n                    RemoveSelectedTreeItem();\r\n                }\r\n            }\r\n        }\r\n        \r\n        /// <summary>\r\n        /// 绘制表格视图\r\n        /// </summary>\r\n        private void DrawTableView()\r\n        {\r\n            GUILayout.Label(\"表格视图演示\", EditorStyles.boldLabel);\r\n            \r\n            GUILayout.Space(10);\r\n            \r\n            if (multiColumnHeader != null)\r\n            {\r\n                Rect tableRect = GUILayoutUtility.GetRect(300, 200);\r\n                multiColumnHeader.OnGUI(tableRect, 0);\r\n                \r\n                // 绘制表格数据\r\n                float yOffset = multiColumnHeader.height;\r\n                for (int i = 0; i < tableData.Count; i++)\r\n                {\r\n                    Rect rowRect = new Rect(tableRect.x, tableRect.y + yOffset + i * 20, tableRect.width, 20);\r\n                    \r\n                    // 名称列\r\n                    Rect nameRect = new Rect(rowRect.x, rowRect.y, 100, rowRect.height);\r\n                    tableData[i].name = EditorGUI.TextField(nameRect, tableData[i].name);\r\n                    \r\n                    // 数值列\r\n                    Rect valueRect = new Rect(rowRect.x + 100, rowRect.y, 80, rowRect.height);\r\n                    tableData[i].value = EditorGUI.IntField(valueRect, tableData[i].value);\r\n                    \r\n                    // 启用列\r\n                    Rect enabledRect = new Rect(rowRect.x + 180, rowRect.y, 60, rowRect.height);\r\n                    tableData[i].enabled = EditorGUI.Toggle(enabledRect, tableData[i].enabled);\r\n                }\r\n                \r\n                GUILayout.Space(220);\r\n                \r\n                if (GUILayout.Button(\"添加行\"))\r\n                {\r\n                    AddTableRow();\r\n                }\r\n                \r\n                if (GUILayout.Button(\"删除最后一行\"))\r\n                {\r\n                    RemoveLastTableRow();\r\n                }\r\n            }\r\n        }\r\n        \r\n        /// <summary>\r\n        /// 添加树形节点\r\n        /// </summary>\r\n        private void AddTreeItem()\r\n        {\r\n            int newId = treeItems.Count + 1;\r\n            treeItems.Add(new TreeViewItem(newId, 0, $\"新节点 {newId}\"));\r\n            treeView.SetupParentsAndChildrenFromDepths(treeItems);\r\n        }\r\n        \r\n        /// <summary>\r\n        /// 删除选中的树形节点\r\n        /// </summary>\r\n        private void RemoveSelectedTreeItem()\r\n        {\r\n            if (treeViewState.selectedIDs.Count > 0)\r\n            {\r\n                int selectedId = treeViewState.selectedIDs[0];\r\n                treeItems.RemoveAll(item => item.id == selectedId);\r\n                treeView.SetupParentsAndChildrenFromDepths(treeItems);\r\n            }\r\n        }\r\n        \r\n        /// <summary>\r\n        /// 添加表格行\r\n        /// </summary>\r\n        private void AddTableRow()\r\n        {\r\n            tableData.Add(new TableRow($\"项目{tableData.Count + 1}\", Random.Range(1, 1000), Random.value > 0.5f));\r\n        }\r\n        \r\n        /// <summary>\r\n        /// 删除最后一行表格\r\n        /// </summary>\r\n        private void RemoveLastTableRow()\r\n        {\r\n            if (tableData.Count > 0)\r\n            {\r\n                tableData.RemoveAt(tableData.Count - 1);\r\n            }\r\n        }\r\n        \r\n        /// <summary>\r\n        /// 在编辑器中显示GUI\r\n        /// </summary>\r\n        private void OnGUI()\r\n        {\r\n            if (!Application.isPlaying) return;\r\n            \r\n            // 绘制可拖拽窗口\r\n            windowRect = GUI.Window(0, windowRect, DrawWindow, \"IMGUI 示例窗口\");\r\n        }\r\n        \r\n        /// <summary>\r\n        /// 绘制窗口内容\r\n        /// </summary>\r\n        private void DrawWindow(int windowID)\r\n        {\r\n            scrollPosition = GUILayout.BeginScrollView(scrollPosition);\r\n            \r\n            // 标签页\r\n            selectedTab = GUILayout.Toolbar(selectedTab, tabNames);\r\n            \r\n            GUILayout.Space(10);\r\n            \r\n            // 根据选中的标签页显示不同内容\r\n            switch (selectedTab)\r\n            {\r\n                case 0:\r\n                    DrawBasicControls();\r\n                    break;\r\n                case 1:\r\n                    DrawAdvancedControls();\r\n                    break;\r\n                case 2:\r\n                    DrawTreeView();\r\n                    break;\r\n                case 3:\r\n                    DrawTableView();\r\n                    break;\r\n            }\r\n            \r\n            GUILayout.EndScrollView();\r\n            \r\n            // 允许窗口拖拽\r\n            GUI.DragWindow();\r\n        }\r\n        \r\n        /// <summary>\r\n        /// 清理资源\r\n        /// </summary>\r\n        private void OnDestroy()\r\n        {\r\n            if (treeView != null)\r\n            {\r\n                treeView = null;\r\n            }\r\n            \r\n            if (multiColumnHeader != null)\r\n            {\r\n                multiColumnHeader = null;\r\n            }\r\n        }\r\n    }\r\n} "
        }
    ]
}