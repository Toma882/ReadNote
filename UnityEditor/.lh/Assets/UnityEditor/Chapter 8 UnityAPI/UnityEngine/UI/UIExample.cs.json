{
    "sourceFile": "Assets/UnityEditor/Chapter 8 UnityAPI/UnityEngine/UI/UIExample.cs",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1750929956965,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1750929956965,
            "name": "Commit-0",
            "content": "using UnityEngine;\r\nusing UnityEngine.UI;\r\nusing System.Collections.Generic;\r\n\r\n/// <summary>\r\n/// UnityEngine.UI 命名空间案例演示\r\n/// 展示UI系统的核心功能\r\n/// </summary>\r\npublic class UIExample : MonoBehaviour\r\n{\r\n    [Header(\"UI组件\")]\r\n    [SerializeField] private Canvas mainCanvas;\r\n    [SerializeField] private CanvasScaler canvasScaler;\r\n    [SerializeField] private GraphicRaycaster graphicRaycaster;\r\n    \r\n    [Header(\"UI元素\")]\r\n    [SerializeField] private Button[] buttons;\r\n    [SerializeField] private Image[] images;\r\n    [SerializeField] private Text[] texts;\r\n    [SerializeField] private InputField[] inputFields;\r\n    [SerializeField] private Slider[] sliders;\r\n    [SerializeField] private Toggle[] toggles;\r\n    [SerializeField] private Dropdown[] dropdowns;\r\n    [SerializeField] private ScrollRect[] scrollRects;\r\n    \r\n    [Header(\"UI设置\")]\r\n    [SerializeField] private bool enableUI = true;\r\n    [SerializeField] private float uiScale = 1.0f;\r\n    [SerializeField] private Vector2 canvasSize = new Vector2(1920, 1080);\r\n    \r\n    [Header(\"UI状态\")]\r\n    [SerializeField] private bool isInteractable = true;\r\n    [SerializeField] private Color uiColor = Color.white;\r\n    [SerializeField] private string currentText = \"\";\r\n    \r\n    // UI事件\r\n    private List<UnityEngine.Events.UnityAction> buttonActions = new List<UnityEngine.Events.UnityAction>();\r\n    private List<UnityEngine.Events.UnityAction<bool>> toggleActions = new List<UnityEngine.Events.UnityAction<bool>>();\r\n    \r\n    private void Start()\r\n    {\r\n        InitializeUISystem();\r\n    }\r\n    \r\n    /// <summary>\r\n    /// 初始化UI系统\r\n    /// </summary>\r\n    private void InitializeUISystem()\r\n    {\r\n        // 获取或创建Canvas\r\n        if (mainCanvas == null)\r\n        {\r\n            mainCanvas = GetComponent<Canvas>();\r\n            if (mainCanvas == null)\r\n            {\r\n                mainCanvas = gameObject.AddComponent<Canvas>();\r\n            }\r\n        }\r\n        \r\n        // 获取或创建CanvasScaler\r\n        if (canvasScaler == null)\r\n        {\r\n            canvasScaler = GetComponent<CanvasScaler>();\r\n            if (canvasScaler == null)\r\n            {\r\n                canvasScaler = gameObject.AddComponent<CanvasScaler>();\r\n            }\r\n        }\r\n        \r\n        // 获取或创建GraphicRaycaster\r\n        if (graphicRaycaster == null)\r\n        {\r\n            graphicRaycaster = GetComponent<GraphicRaycaster>();\r\n            if (graphicRaycaster == null)\r\n            {\r\n                graphicRaycaster = gameObject.AddComponent<GraphicRaycaster>();\r\n            }\r\n        }\r\n        \r\n        // 配置Canvas\r\n        ConfigureCanvas();\r\n        \r\n        // 查找UI元素\r\n        FindUIElements();\r\n        \r\n        // 设置UI事件\r\n        SetupUIEvents();\r\n        \r\n        Debug.Log(\"UI系统初始化完成\");\r\n    }\r\n    \r\n    /// <summary>\r\n    /// 配置Canvas\r\n    /// </summary>\r\n    private void ConfigureCanvas()\r\n    {\r\n        if (mainCanvas == null) return;\r\n        \r\n        // 设置Canvas属性\r\n        mainCanvas.renderMode = RenderMode.ScreenSpaceOverlay;\r\n        mainCanvas.sortingOrder = 0;\r\n        mainCanvas.targetDisplay = 0;\r\n        \r\n        // 配置CanvasScaler\r\n        if (canvasScaler != null)\r\n        {\r\n            canvasScaler.uiScaleMode = CanvasScaler.ScaleMode.ScaleWithScreenSize;\r\n            canvasScaler.referenceResolution = canvasSize;\r\n            canvasScaler.screenMatchMode = CanvasScaler.ScreenMatchMode.MatchWidthOrHeight;\r\n            canvasScaler.matchWidthOrHeight = 0.5f;\r\n        }\r\n        \r\n        Debug.Log(\"Canvas配置完成\");\r\n    }\r\n    \r\n    /// <summary>\r\n    /// 查找UI元素\r\n    /// </summary>\r\n    private void FindUIElements()\r\n    {\r\n        // 查找所有UI组件\r\n        buttons = GetComponentsInChildren<Button>();\r\n        images = GetComponentsInChildren<Image>();\r\n        texts = GetComponentsInChildren<Text>();\r\n        inputFields = GetComponentsInChildren<InputField>();\r\n        sliders = GetComponentsInChildren<Slider>();\r\n        toggles = GetComponentsInChildren<Toggle>();\r\n        dropdowns = GetComponentsInChildren<Dropdown>();\r\n        scrollRects = GetComponentsInChildren<ScrollRect>();\r\n        \r\n        Debug.Log($\"找到UI元素 - 按钮: {buttons.Length}, 图片: {images.Length}, 文本: {texts.Length}\");\r\n    }\r\n    \r\n    /// <summary>\r\n    /// 设置UI事件\r\n    /// </summary>\r\n    private void SetupUIEvents()\r\n    {\r\n        // 设置按钮事件\r\n        for (int i = 0; i < buttons.Length; i++)\r\n        {\r\n            int index = i; // 闭包变量\r\n            UnityEngine.Events.UnityAction action = () => OnButtonClick(index);\r\n            buttons[i].onClick.AddListener(action);\r\n            buttonActions.Add(action);\r\n        }\r\n        \r\n        // 设置Toggle事件\r\n        for (int i = 0; i < toggles.Length; i++)\r\n        {\r\n            int index = i; // 闭包变量\r\n            UnityEngine.Events.UnityAction<bool> action = (isOn) => OnToggleChanged(index, isOn);\r\n            toggles[i].onValueChanged.AddListener(action);\r\n            toggleActions.Add(action);\r\n        }\r\n        \r\n        Debug.Log(\"UI事件设置完成\");\r\n    }\r\n    \r\n    /// <summary>\r\n    /// 按钮点击事件\r\n    /// </summary>\r\n    /// <param name=\"buttonIndex\">按钮索引</param>\r\n    private void OnButtonClick(int buttonIndex)\r\n    {\r\n        Debug.Log($\"按钮 {buttonIndex} 被点击\");\r\n        \r\n        // 执行不同的按钮操作\r\n        switch (buttonIndex)\r\n        {\r\n            case 0:\r\n                ChangeUIColor();\r\n                break;\r\n            case 1:\r\n                ToggleUIInteractable();\r\n                break;\r\n            case 2:\r\n                ScaleUI();\r\n                break;\r\n            default:\r\n                Debug.Log($\"按钮 {buttonIndex} 的默认操作\");\r\n                break;\r\n        }\r\n    }\r\n    \r\n    /// <summary>\r\n    /// Toggle状态改变事件\r\n    /// </summary>\r\n    /// <param name=\"toggleIndex\">Toggle索引</param>\r\n    /// <param name=\"isOn\">是否开启</param>\r\n    private void OnToggleChanged(int toggleIndex, bool isOn)\r\n    {\r\n        Debug.Log($\"Toggle {toggleIndex} 状态改变: {isOn}\");\r\n        \r\n        // 根据Toggle状态执行操作\r\n        switch (toggleIndex)\r\n        {\r\n            case 0:\r\n                SetUIEnabled(isOn);\r\n                break;\r\n            case 1:\r\n                SetUIVisible(isOn);\r\n                break;\r\n            default:\r\n                Debug.Log($\"Toggle {toggleIndex} 的默认操作\");\r\n                break;\r\n        }\r\n    }\r\n    \r\n    /// <summary>\r\n    /// 设置UI启用状态\r\n    /// </summary>\r\n    /// <param name=\"enabled\">是否启用</param>\r\n    public void SetUIEnabled(bool enabled)\r\n    {\r\n        enableUI = enabled;\r\n        \r\n        // 设置所有UI元素的交互状态\r\n        foreach (var button in buttons)\r\n        {\r\n            if (button != null) button.interactable = enabled;\r\n        }\r\n        \r\n        foreach (var inputField in inputFields)\r\n        {\r\n            if (inputField != null) inputField.interactable = enabled;\r\n        }\r\n        \r\n        foreach (var slider in sliders)\r\n        {\r\n            if (slider != null) slider.interactable = enabled;\r\n        }\r\n        \r\n        foreach (var toggle in toggles)\r\n        {\r\n            if (toggle != null) toggle.interactable = enabled;\r\n        }\r\n        \r\n        foreach (var dropdown in dropdowns)\r\n        {\r\n            if (dropdown != null) dropdown.interactable = enabled;\r\n        }\r\n        \r\n        Debug.Log($\"UI交互状态已设置为: {enabled}\");\r\n    }\r\n    \r\n    /// <summary>\r\n    /// 设置UI可见性\r\n    /// </summary>\r\n    /// <param name=\"visible\">是否可见</param>\r\n    public void SetUIVisible(bool visible)\r\n    {\r\n        // 设置所有UI元素的可见性\r\n        foreach (var image in images)\r\n        {\r\n            if (image != null) image.enabled = visible;\r\n        }\r\n        \r\n        foreach (var text in texts)\r\n        {\r\n            if (text != null) text.enabled = visible;\r\n        }\r\n        \r\n        Debug.Log($\"UI可见性已设置为: {visible}\");\r\n    }\r\n    \r\n    /// <summary>\r\n    /// 改变UI颜色\r\n    /// </summary>\r\n    public void ChangeUIColor()\r\n    {\r\n        uiColor = new Color(Random.value, Random.value, Random.value, 1f);\r\n        \r\n        // 改变所有UI元素的颜色\r\n        foreach (var image in images)\r\n        {\r\n            if (image != null) image.color = uiColor;\r\n        }\r\n        \r\n        foreach (var text in texts)\r\n        {\r\n            if (text != null) text.color = uiColor;\r\n        }\r\n        \r\n        Debug.Log($\"UI颜色已改变为: {uiColor}\");\r\n    }\r\n    \r\n    /// <summary>\r\n    /// 切换UI交互状态\r\n    /// </summary>\r\n    public void ToggleUIInteractable()\r\n    {\r\n        isInteractable = !isInteractable;\r\n        SetUIEnabled(isInteractable);\r\n    }\r\n    \r\n    /// <summary>\r\n    /// 缩放UI\r\n    /// </summary>\r\n    public void ScaleUI()\r\n    {\r\n        uiScale = Random.Range(0.5f, 2.0f);\r\n        \r\n        if (canvasScaler != null)\r\n        {\r\n            canvasScaler.scaleFactor = uiScale;\r\n        }\r\n        \r\n        Debug.Log($\"UI缩放已设置为: {uiScale}\");\r\n    }\r\n    \r\n    /// <summary>\r\n    /// 设置文本内容\r\n    /// </summary>\r\n    /// <param name=\"text\">文本内容</param>\r\n    public void SetText(string text)\r\n    {\r\n        currentText = text;\r\n        \r\n        foreach (var textComponent in texts)\r\n        {\r\n            if (textComponent != null)\r\n            {\r\n                textComponent.text = text;\r\n            }\r\n        }\r\n        \r\n        Debug.Log($\"文本内容已设置为: {text}\");\r\n    }\r\n    \r\n    /// <summary>\r\n    /// 设置输入框内容\r\n    /// </summary>\r\n    /// <param name=\"text\">输入内容</param>\r\n    public void SetInputFieldText(string text)\r\n    {\r\n        foreach (var inputField in inputFields)\r\n        {\r\n            if (inputField != null)\r\n            {\r\n                inputField.text = text;\r\n            }\r\n        }\r\n        \r\n        Debug.Log($\"输入框内容已设置为: {text}\");\r\n    }\r\n    \r\n    /// <summary>\r\n    /// 设置滑块值\r\n    /// </summary>\r\n    /// <param name=\"value\">滑块值</param>\r\n    public void SetSliderValue(float value)\r\n    {\r\n        foreach (var slider in sliders)\r\n        {\r\n            if (slider != null)\r\n            {\r\n                slider.value = Mathf.Clamp01(value);\r\n            }\r\n        }\r\n        \r\n        Debug.Log($\"滑块值已设置为: {value}\");\r\n    }\r\n    \r\n    /// <summary>\r\n    /// 设置下拉菜单选项\r\n    /// </summary>\r\n    /// <param name=\"options\">选项列表</param>\r\n    public void SetDropdownOptions(List<string> options)\r\n    {\r\n        foreach (var dropdown in dropdowns)\r\n        {\r\n            if (dropdown != null)\r\n            {\r\n                dropdown.ClearOptions();\r\n                dropdown.AddOptions(options);\r\n            }\r\n        }\r\n        \r\n        Debug.Log($\"下拉菜单选项已设置，共 {options.Count} 个选项\");\r\n    }\r\n    \r\n    /// <summary>\r\n    /// 滚动到指定位置\r\n    /// </summary>\r\n    /// <param name=\"position\">滚动位置 (0-1)</param>\r\n    public void ScrollToPosition(float position)\r\n    {\r\n        foreach (var scrollRect in scrollRects)\r\n        {\r\n            if (scrollRect != null)\r\n            {\r\n                scrollRect.verticalNormalizedPosition = Mathf.Clamp01(position);\r\n            }\r\n        }\r\n        \r\n        Debug.Log($\"滚动位置已设置为: {position}\");\r\n    }\r\n    \r\n    /// <summary>\r\n    /// 获取UI信息\r\n    /// </summary>\r\n    public void GetUIInfo()\r\n    {\r\n        Debug.Log(\"=== UI信息 ===\");\r\n        Debug.Log($\"Canvas: {(mainCanvas != null ? mainCanvas.name : \"无\")}\");\r\n        Debug.Log($\"CanvasScaler: {(canvasScaler != null ? \"已配置\" : \"无\")}\");\r\n        Debug.Log($\"GraphicRaycaster: {(graphicRaycaster != null ? \"已配置\" : \"无\")}\");\r\n        Debug.Log($\"按钮数量: {buttons.Length}\");\r\n        Debug.Log($\"图片数量: {images.Length}\");\r\n        Debug.Log($\"文本数量: {texts.Length}\");\r\n        Debug.Log($\"输入框数量: {inputFields.Length}\");\r\n        Debug.Log($\"滑块数量: {sliders.Length}\");\r\n        Debug.Log($\"Toggle数量: {toggles.Length}\");\r\n        Debug.Log($\"下拉菜单数量: {dropdowns.Length}\");\r\n        Debug.Log($\"滚动视图数量: {scrollRects.Length}\");\r\n        Debug.Log($\"UI启用状态: {enableUI}\");\r\n        Debug.Log($\"UI缩放: {uiScale}\");\r\n        Debug.Log($\"UI颜色: {uiColor}\");\r\n    }\r\n    \r\n    /// <summary>\r\n    /// 重置UI\r\n    /// </summary>\r\n    public void ResetUI()\r\n    {\r\n        // 重置颜色\r\n        uiColor = Color.white;\r\n        ChangeUIColor();\r\n        \r\n        // 重置缩放\r\n        uiScale = 1.0f;\r\n        if (canvasScaler != null)\r\n        {\r\n            canvasScaler.scaleFactor = uiScale;\r\n        }\r\n        \r\n        // 重置交互状态\r\n        isInteractable = true;\r\n        SetUIEnabled(true);\r\n        \r\n        // 重置文本\r\n        SetText(\"重置完成\");\r\n        \r\n        Debug.Log(\"UI已重置\");\r\n    }\r\n    \r\n    private void OnGUI()\r\n    {\r\n        // 简单的GUI界面用于测试\r\n        GUILayout.BeginArea(new Rect(10, 10, 400, 600));\r\n        GUILayout.Label(\"UI系统演示\", EditorStyles.boldLabel);\r\n        \r\n        GUILayout.Space(10);\r\n        \r\n        // UI状态\r\n        GUILayout.Label($\"UI启用: {enableUI}\");\r\n        GUILayout.Label($\"UI缩放: {uiScale:F2}\");\r\n        GUILayout.Label($\"UI颜色: {uiColor}\");\r\n        GUILayout.Label($\"当前文本: {currentText}\");\r\n        \r\n        GUILayout.Space(10);\r\n        \r\n        // 控制按钮\r\n        if (GUILayout.Button(\"改变UI颜色\"))\r\n        {\r\n            ChangeUIColor();\r\n        }\r\n        \r\n        if (GUILayout.Button(\"切换UI交互\"))\r\n        {\r\n            ToggleUIInteractable();\r\n        }\r\n        \r\n        if (GUILayout.Button(\"缩放UI\"))\r\n        {\r\n            ScaleUI();\r\n        }\r\n        \r\n        GUILayout.Space(10);\r\n        \r\n        if (GUILayout.Button(\"设置文本\"))\r\n        {\r\n            SetText(\"Hello UI System!\");\r\n        }\r\n        \r\n        if (GUILayout.Button(\"设置输入框\"))\r\n        {\r\n            SetInputFieldText(\"输入测试\");\r\n        }\r\n        \r\n        if (GUILayout.Button(\"设置滑块值\"))\r\n        {\r\n            SetSliderValue(Random.value);\r\n        }\r\n        \r\n        GUILayout.Space(10);\r\n        \r\n        if (GUILayout.Button(\"获取UI信息\"))\r\n        {\r\n            GetUIInfo();\r\n        }\r\n        \r\n        if (GUILayout.Button(\"重置UI\"))\r\n        {\r\n            ResetUI();\r\n        }\r\n        \r\n        GUILayout.Space(10);\r\n        \r\n        // 设置选项\r\n        enableUI = GUILayout.Toggle(enableUI, \"启用UI\");\r\n        \r\n        GUILayout.Label($\"UI缩放: {uiScale:F2}\");\r\n        uiScale = GUILayout.HorizontalSlider(uiScale, 0.1f, 3.0f);\r\n        \r\n        GUILayout.EndArea();\r\n    }\r\n} "
        }
    ]
}