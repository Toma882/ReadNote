{
    "sourceFile": "Assets/UnityEditor/Chapter 8 UnityAPI/UnityEngine/Sprites/SpritesExample.cs",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 1,
            "patches": [
                {
                    "date": 1750932697060,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1750932719466,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,1 +1,173 @@\n- \n\\ No newline at end of file\n+using UnityEngine;\r\n+using UnityEngine.U2D;\r\n+\r\n+/// <summary>\r\n+/// UnityEngine.Sprites 命名空间案例演示\r\n+/// 展示SpriteAtlas、SpriteRenderer、Sprite等核心功能\r\n+/// </summary>\r\n+public class SpritesExample : MonoBehaviour\r\n+{\r\n+    [Header(\"精灵设置\")]\r\n+    [SerializeField] private Sprite[] sprites; //精灵数组\r\n+    [SerializeField] private SpriteAtlas spriteAtlas; //精灵图集\r\n+    [SerializeField] private bool useAtlas = false; //是否使用图集\r\n+    [SerializeField] private int currentSpriteIndex = 0; //当前精灵索引\r\n+    [SerializeField] private float animationSpeed = 1f; //动画速度\r\n+\r\n+    private SpriteRenderer spriteRenderer;\r\n+    private float animationTimer = 0f;\r\n+\r\n+    private void Start()\r\n+    {\r\n+        spriteRenderer = GetComponent<SpriteRenderer>();\r\n+        if (spriteRenderer == null)\r\n+        {\r\n+            spriteRenderer = gameObject.AddComponent<SpriteRenderer>();\r\n+        }\r\n+\r\n+        if (sprites != null && sprites.Length > 0)\r\n+        {\r\n+            spriteRenderer.sprite = sprites[0];\r\n+        }\r\n+    }\r\n+\r\n+    private void Update()\r\n+    {\r\n+        if (sprites != null && sprites.Length > 1)\r\n+        {\r\n+            // 精灵动画\r\n+            animationTimer += Time.deltaTime * animationSpeed;\r\n+            if (animationTimer >= 1f)\r\n+            {\r\n+                animationTimer = 0f;\r\n+                currentSpriteIndex = (currentSpriteIndex + 1) % sprites.Length;\r\n+                spriteRenderer.sprite = sprites[currentSpriteIndex];\r\n+            }\r\n+        }\r\n+    }\r\n+\r\n+    /// <summary>\r\n+    /// 从图集加载精灵\r\n+    /// </summary>\r\n+    /// <param name=\"spriteName\">精灵名称</param>\r\n+    public void LoadSpriteFromAtlas(string spriteName)\r\n+    {\r\n+        if (spriteAtlas != null)\r\n+        {\r\n+            Sprite sprite = null;\r\n+            spriteAtlas.GetSprite(spriteName, out sprite);\r\n+            if (sprite != null)\r\n+            {\r\n+                spriteRenderer.sprite = sprite;\r\n+                Debug.Log($\"从图集加载精灵: {spriteName}\");\r\n+            }\r\n+            else\r\n+            {\r\n+                Debug.LogWarning($\"图集中未找到精灵: {spriteName}\");\r\n+            }\r\n+        }\r\n+    }\r\n+\r\n+    /// <summary>\r\n+    /// 获取图集中的所有精灵\r\n+    /// </summary>\r\n+    public void GetAllSpritesFromAtlas()\r\n+    {\r\n+        if (spriteAtlas != null)\r\n+        {\r\n+            Sprite[] atlasSprites = new Sprite[spriteAtlas.spriteCount];\r\n+            spriteAtlas.GetSprites(atlasSprites);\r\n+            \r\n+            Debug.Log($\"图集包含 {atlasSprites.Length} 个精灵:\");\r\n+            for (int i = 0; i < atlasSprites.Length; i++)\r\n+            {\r\n+                if (atlasSprites[i] != null)\r\n+                {\r\n+                    Debug.Log($\"  [{i}]: {atlasSprites[i].name}\");\r\n+                }\r\n+            }\r\n+        }\r\n+    }\r\n+\r\n+    /// <summary>\r\n+    /// 设置精灵\r\n+    /// </summary>\r\n+    /// <param name=\"index\">精灵索引</param>\r\n+    public void SetSprite(int index)\r\n+    {\r\n+        if (sprites != null && index >= 0 && index < sprites.Length)\r\n+        {\r\n+            spriteRenderer.sprite = sprites[index];\r\n+            currentSpriteIndex = index;\r\n+            Debug.Log($\"设置精灵: {sprites[index].name}\");\r\n+        }\r\n+    }\r\n+\r\n+    /// <summary>\r\n+    /// 获取精灵信息\r\n+    /// </summary>\r\n+    public void GetSpriteInfo()\r\n+    {\r\n+        if (spriteRenderer.sprite != null)\r\n+        {\r\n+            Sprite sprite = spriteRenderer.sprite;\r\n+            Debug.Log(\"=== 精灵信息 ===\");\r\n+            Debug.Log($\"精灵名称: {sprite.name}\");\r\n+            Debug.Log($\"精灵大小: {sprite.rect.size}\");\r\n+            Debug.Log($\"精灵像素密度: {sprite.pixelsPerUnit}\");\r\n+            Debug.Log($\"精灵边界: {sprite.bounds}\");\r\n+            Debug.Log($\"精灵纹理: {sprite.texture.name}\");\r\n+        }\r\n+    }\r\n+\r\n+    private void OnGUI()\r\n+    {\r\n+        GUILayout.BeginArea(new Rect(10, 10, 350, 300));\r\n+        GUILayout.Label(\"Sprites 精灵系统演示\", UnityEditor.EditorStyles.boldLabel);\r\n+        \r\n+        useAtlas = GUILayout.Toggle(useAtlas, \"使用精灵图集\");\r\n+        animationSpeed = float.TryParse(GUILayout.TextField(\"动画速度\", animationSpeed.ToString()), out var speed) ? speed : animationSpeed;\r\n+        \r\n+        GUILayout.Label($\"当前精灵索引: {currentSpriteIndex}\");\r\n+        if (sprites != null)\r\n+        {\r\n+            GUILayout.Label($\"精灵数量: {sprites.Length}\");\r\n+        }\r\n+        \r\n+        if (GUILayout.Button(\"获取精灵信息\"))\r\n+        {\r\n+            GetSpriteInfo();\r\n+        }\r\n+        \r\n+        if (useAtlas && spriteAtlas != null)\r\n+        {\r\n+            if (GUILayout.Button(\"获取图集所有精灵\"))\r\n+            {\r\n+                GetAllSpritesFromAtlas();\r\n+            }\r\n+            \r\n+            if (GUILayout.Button(\"从图集加载测试精灵\"))\r\n+            {\r\n+                LoadSpriteFromAtlas(\"test_sprite\");\r\n+            }\r\n+        }\r\n+        \r\n+        if (sprites != null && sprites.Length > 0)\r\n+        {\r\n+            GUILayout.BeginHorizontal();\r\n+            if (GUILayout.Button(\"上一个精灵\"))\r\n+            {\r\n+                int newIndex = (currentSpriteIndex - 1 + sprites.Length) % sprites.Length;\r\n+                SetSprite(newIndex);\r\n+            }\r\n+            if (GUILayout.Button(\"下一个精灵\"))\r\n+            {\r\n+                int newIndex = (currentSpriteIndex + 1) % sprites.Length;\r\n+                SetSprite(newIndex);\r\n+            }\r\n+            GUILayout.EndHorizontal();\r\n+        }\r\n+        \r\n+        GUILayout.EndArea();\r\n+    }\r\n+} \n\\ No newline at end of file\n"
                }
            ],
            "date": 1750932697060,
            "name": "Commit-0",
            "content": " "
        }
    ]
}