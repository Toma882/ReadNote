{
    "sourceFile": "Assets/UnityEditor/Chapter 8 UnityAPI/UnityEditor/VersionControl/VersionControlExample.cs",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1750939784773,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1750939784773,
            "name": "Commit-0",
            "content": "using UnityEngine;\r\nusing UnityEditor;\r\nusing UnityEditor.VersionControl;\r\nusing System.Collections.Generic;\r\nusing System.Text;\r\n\r\n/// <summary>\r\n/// UnityEditor.VersionControl 命名空间案例演示\r\n/// 展示版本控制系统的使用，包括Git、SVN等版本控制操作\r\n/// </summary>\r\npublic class VersionControlExample : MonoBehaviour\r\n{\r\n    [Header(\"版本控制系统配置\")]\r\n    [SerializeField] private bool enableVersionControl = true;\r\n    [SerializeField] private bool enableGitIntegration = true;\r\n    [SerializeField] private bool enableSVNIntegration = false;\r\n    [SerializeField] private bool enablePerforceIntegration = false;\r\n    [SerializeField] private bool enablePlasticIntegration = false;\r\n    [SerializeField] private bool enableAutoCommit = false;\r\n    [SerializeField] private bool enableAutoPush = false;\r\n    [SerializeField] private bool enableConflictResolution = true;\r\n    [SerializeField] private bool enableBranchManagement = true;\r\n    [SerializeField] private bool enableTagManagement = true;\r\n    \r\n    [Header(\"版本控制状态\")]\r\n    [SerializeField] private VersionControlStatus vcStatus = VersionControlStatus.Idle;\r\n    [SerializeField] private bool isConnected = false;\r\n    [SerializeField] private bool isInitialized = false;\r\n    [SerializeField] private bool isWorking = false;\r\n    [SerializeField] private string currentBranch = \"\";\r\n    [SerializeField] private string currentRepository = \"\";\r\n    [SerializeField] private string currentRemote = \"\";\r\n    [SerializeField] private string currentUser = \"\";\r\n    [SerializeField] private string currentEmail = \"\";\r\n    [SerializeField] private string lastCommitHash = \"\";\r\n    [SerializeField] private string lastCommitMessage = \"\";\r\n    [SerializeField] private System.DateTime lastCommitTime = System.DateTime.Now;\r\n    \r\n    [Header(\"文件状态\")]\r\n    [SerializeField] private int totalFiles = 0;\r\n    [SerializeField] private int modifiedFiles = 0;\r\n    [SerializeField] private int addedFiles = 0;\r\n    [SerializeField] private int deletedFiles = 0;\r\n    [SerializeField] private int conflictedFiles = 0;\r\n    [SerializeField] private int ignoredFiles = 0;\r\n    [SerializeField] private int untrackedFiles = 0;\r\n    [SerializeField] private int stagedFiles = 0;\r\n    [SerializeField] private int committedFiles = 0;\r\n    \r\n    [Header(\"文件信息\")]\r\n    [SerializeField] private FileInfo[] fileInfos = new FileInfo[0];\r\n    [SerializeField] private FileInfo[] modifiedFileInfos = new FileInfo[0];\r\n    [SerializeField] private FileInfo[] addedFileInfos = new FileInfo[0];\r\n    [SerializeField] private FileInfo[] deletedFileInfos = new FileInfo[0];\r\n    [SerializeField] private FileInfo[] conflictedFileInfos = new FileInfo[0];\r\n    [SerializeField] private FileInfo[] ignoredFileInfos = new FileInfo[0];\r\n    [SerializeField] private FileInfo[] untrackedFileInfos = new FileInfo[0];\r\n    [SerializeField] private FileInfo[] stagedFileInfos = new FileInfo[0];\r\n    [SerializeField] private string[] filePaths = new string[0];\r\n    [SerializeField] private string[] fileNames = new string[0];\r\n    [SerializeField] private FileStatus[] fileStatuses = new FileStatus[0];\r\n    \r\n    [Header(\"提交历史\")]\r\n    [SerializeField] private CommitInfo[] commitHistory = new CommitInfo[50];\r\n    [SerializeField] private int commitHistoryIndex = 0;\r\n    [SerializeField] private bool enableCommitHistory = true;\r\n    [SerializeField] private int totalCommits = 0;\r\n    [SerializeField] private System.DateTime firstCommitTime = System.DateTime.Now;\r\n    [SerializeField] private System.DateTime lastCommitTimeHistory = System.DateTime.Now;\r\n    \r\n    [Header(\"分支管理\")]\r\n    [SerializeField] private BranchInfo[] branches = new BranchInfo[0];\r\n    [SerializeField] private string[] branchNames = new string[0];\r\n    [SerializeField] private string[] remoteBranches = new string[0];\r\n    [SerializeField] private string[] localBranches = new string[0];\r\n    [SerializeField] private string defaultBranch = \"main\";\r\n    [SerializeField] private string developmentBranch = \"develop\";\r\n    [SerializeField] private string featureBranch = \"feature\";\r\n    [SerializeField] private string hotfixBranch = \"hotfix\";\r\n    [SerializeField] private string releaseBranch = \"release\";\r\n    \r\n    [Header(\"标签管理\")]\r\n    [SerializeField] private TagInfo[] tags = new TagInfo[0];\r\n    [SerializeField] private string[] tagNames = new string[0];\r\n    [SerializeField] private string[] tagMessages = new string[0];\r\n    [SerializeField] private string[] tagHashes = new string[0];\r\n    [SerializeField] private System.DateTime[] tagDates = new System.DateTime[0];\r\n    [SerializeField] private int totalTags = 0;\r\n    \r\n    [Header(\"远程仓库\")]\r\n    [SerializeField] private RemoteInfo[] remotes = new RemoteInfo[0];\r\n    [SerializeField] private string[] remoteNames = new string[0];\r\n    [SerializeField] private string[] remoteUrls = new string[0];\r\n    [SerializeField] private string[] remoteTypes = new string[0];\r\n    [SerializeField] private bool[] remoteEnabled = new bool[0];\r\n    [SerializeField] private string originUrl = \"\";\r\n    [SerializeField] private string upstreamUrl = \"\";\r\n    \r\n    [Header(\"冲突解决\")]\r\n    [SerializeField] private bool enableConflictResolution = true;\r\n    [SerializeField] private ConflictInfo[] conflicts = new ConflictInfo[0];\r\n    [SerializeField] private string[] conflictFiles = new string[0];\r\n    [SerializeField] private ConflictType[] conflictTypes = new ConflictType[0];\r\n    [SerializeField] private ConflictResolution[] conflictResolutions = new ConflictResolution[0];\r\n    [SerializeField] private int totalConflicts = 0;\r\n    [SerializeField] private int resolvedConflicts = 0;\r\n    [SerializeField] private int unresolvedConflicts = 0;\r\n    \r\n    [Header(\"统计信息\")]\r\n    [SerializeField] private VersionControlStatistics statistics = new VersionControlStatistics();\r\n    [SerializeField] private Dictionary<string, int> fileChangeCounts = new Dictionary<string, int>();\r\n    [SerializeField] private Dictionary<string, int> userCommitCounts = new Dictionary<string, int>();\r\n    [SerializeField] private Dictionary<string, System.DateTime> fileLastModified = new Dictionary<string, System.DateTime>();\r\n    [SerializeField] private Dictionary<string, string> fileLastCommit = new Dictionary<string, string>();\r\n    \r\n    [Header(\"操作配置\")]\r\n    [SerializeField] private bool enableAutoBackup = true;\r\n    [SerializeField] private bool enableAutoSync = true;\r\n    [SerializeField] private bool enableAutoMerge = false;\r\n    [SerializeField] private bool enableAutoRebase = false;\r\n    [SerializeField] private bool enableAutoStash = true;\r\n    [SerializeField] private string backupPath = \"VersionControlBackups/\";\r\n    [SerializeField] private string stashPath = \"VersionControlStash/\";\r\n    \r\n    private bool isInitialized = false;\r\n    private float lastSyncTime = 0f;\r\n    private float syncInterval = 30f; // 30秒\r\n    private StringBuilder reportBuilder = new StringBuilder();\r\n    private List<string> pendingCommits = new List<string>();\r\n    private List<string> pendingPushes = new List<string>();\r\n    private List<string> pendingPulls = new List<string>();\r\n\r\n    private void Start()\r\n    {\r\n        InitializeVersionControl();\r\n    }\r\n\r\n    private void InitializeVersionControl()\r\n    {\r\n        if (!enableVersionControl) return;\r\n        \r\n        InitializeVCState();\r\n        InitializeFileTracking();\r\n        InitializeCommitHistory();\r\n        InitializeBranchManagement();\r\n        InitializeTagManagement();\r\n        InitializeRemoteManagement();\r\n        InitializeConflictResolution();\r\n        \r\n        isInitialized = true;\r\n        vcStatus = VersionControlStatus.Idle;\r\n        Debug.Log(\"版本控制系统初始化完成\");\r\n    }\r\n\r\n    private void InitializeVCState()\r\n    {\r\n        vcStatus = VersionControlStatus.Idle;\r\n        isConnected = false;\r\n        isInitialized = false;\r\n        isWorking = false;\r\n        currentBranch = \"\";\r\n        currentRepository = \"\";\r\n        currentRemote = \"\";\r\n        currentUser = \"\";\r\n        currentEmail = \"\";\r\n        lastCommitHash = \"\";\r\n        lastCommitMessage = \"\";\r\n        lastCommitTime = System.DateTime.Now;\r\n        \r\n        Debug.Log(\"版本控制状态已初始化\");\r\n    }\r\n\r\n    private void InitializeFileTracking()\r\n    {\r\n        totalFiles = 0;\r\n        modifiedFiles = 0;\r\n        addedFiles = 0;\r\n        deletedFiles = 0;\r\n        conflictedFiles = 0;\r\n        ignoredFiles = 0;\r\n        untrackedFiles = 0;\r\n        stagedFiles = 0;\r\n        committedFiles = 0;\r\n        \r\n        fileInfos = new FileInfo[0];\r\n        modifiedFileInfos = new FileInfo[0];\r\n        addedFileInfos = new FileInfo[0];\r\n        deletedFileInfos = new FileInfo[0];\r\n        conflictedFileInfos = new FileInfo[0];\r\n        ignoredFileInfos = new FileInfo[0];\r\n        untrackedFileInfos = new FileInfo[0];\r\n        stagedFileInfos = new FileInfo[0];\r\n        filePaths = new string[0];\r\n        fileNames = new string[0];\r\n        fileStatuses = new FileStatus[0];\r\n        \r\n        Debug.Log(\"文件跟踪已初始化\");\r\n    }\r\n\r\n    private void InitializeCommitHistory()\r\n    {\r\n        commitHistory = new CommitInfo[50];\r\n        commitHistoryIndex = 0;\r\n        totalCommits = 0;\r\n        firstCommitTime = System.DateTime.Now;\r\n        lastCommitTimeHistory = System.DateTime.Now;\r\n        \r\n        Debug.Log(\"提交历史已初始化\");\r\n    }\r\n\r\n    private void InitializeBranchManagement()\r\n    {\r\n        branches = new BranchInfo[0];\r\n        branchNames = new string[0];\r\n        remoteBranches = new string[0];\r\n        localBranches = new string[0];\r\n        defaultBranch = \"main\";\r\n        developmentBranch = \"develop\";\r\n        featureBranch = \"feature\";\r\n        hotfixBranch = \"hotfix\";\r\n        releaseBranch = \"release\";\r\n        \r\n        Debug.Log(\"分支管理已初始化\");\r\n    }\r\n\r\n    private void InitializeTagManagement()\r\n    {\r\n        tags = new TagInfo[0];\r\n        tagNames = new string[0];\r\n        tagMessages = new string[0];\r\n        tagHashes = new string[0];\r\n        tagDates = new System.DateTime[0];\r\n        totalTags = 0;\r\n        \r\n        Debug.Log(\"标签管理已初始化\");\r\n    }\r\n\r\n    private void InitializeRemoteManagement()\r\n    {\r\n        remotes = new RemoteInfo[0];\r\n        remoteNames = new string[0];\r\n        remoteUrls = new string[0];\r\n        remoteTypes = new string[0];\r\n        remoteEnabled = new bool[0];\r\n        originUrl = \"\";\r\n        upstreamUrl = \"\";\r\n        \r\n        Debug.Log(\"远程仓库管理已初始化\");\r\n    }\r\n\r\n    private void InitializeConflictResolution()\r\n    {\r\n        conflicts = new ConflictInfo[0];\r\n        conflictFiles = new string[0];\r\n        conflictTypes = new ConflictType[0];\r\n        conflictResolutions = new ConflictResolution[0];\r\n        totalConflicts = 0;\r\n        resolvedConflicts = 0;\r\n        unresolvedConflicts = 0;\r\n        \r\n        Debug.Log(\"冲突解决已初始化\");\r\n    }\r\n\r\n    private void Update()\r\n    {\r\n        if (!isInitialized) return;\r\n        \r\n        UpdateVCStatus();\r\n        UpdateFileStatus();\r\n        UpdateCommitHistory();\r\n        \r\n        if (enableAutoSync && Time.time - lastSyncTime > syncInterval)\r\n        {\r\n            SyncWithRemote();\r\n            lastSyncTime = Time.time;\r\n        }\r\n        \r\n        if (enableAutoCommit)\r\n        {\r\n            CheckAutoCommit();\r\n        }\r\n        \r\n        if (enableAutoPush)\r\n        {\r\n            CheckAutoPush();\r\n        }\r\n    }\r\n\r\n    private void UpdateVCStatus()\r\n    {\r\n        if (isWorking)\r\n        {\r\n            vcStatus = VersionControlStatus.Working;\r\n        }\r\n        else if (isConnected)\r\n        {\r\n            vcStatus = VersionControlStatus.Connected;\r\n        }\r\n        else if (isInitialized)\r\n        {\r\n            vcStatus = VersionControlStatus.Initialized;\r\n        }\r\n        else\r\n        {\r\n            vcStatus = VersionControlStatus.Idle;\r\n        }\r\n    }\r\n\r\n    private void UpdateFileStatus()\r\n    {\r\n        // 更新文件状态\r\n        UpdateFileInfos();\r\n        \r\n        // 更新文件统计\r\n        UpdateFileStatistics();\r\n    }\r\n\r\n    private void UpdateFileInfos()\r\n    {\r\n        var files = FindAllProjectFiles();\r\n        fileInfos = new FileInfo[files.Length];\r\n        filePaths = new string[files.Length];\r\n        fileNames = new string[files.Length];\r\n        fileStatuses = new FileStatus[files.Length];\r\n        \r\n        var modifiedFiles = new List<FileInfo>();\r\n        var addedFiles = new List<FileInfo>();\r\n        var deletedFiles = new List<FileInfo>();\r\n        var conflictedFiles = new List<FileInfo>();\r\n        var ignoredFiles = new List<FileInfo>();\r\n        var untrackedFiles = new List<FileInfo>();\r\n        var stagedFiles = new List<FileInfo>();\r\n        \r\n        for (int i = 0; i < files.Length; i++)\r\n        {\r\n            var filePath = files[i];\r\n            var fileName = System.IO.Path.GetFileName(filePath);\r\n            var fileStatus = GetFileStatus(filePath);\r\n            \r\n            fileInfos[i] = new FileInfo\r\n            {\r\n                path = filePath,\r\n                name = fileName,\r\n                status = fileStatus,\r\n                lastModified = System.IO.File.GetLastWriteTime(filePath),\r\n                size = new System.IO.FileInfo(filePath).Length,\r\n                isTracked = IsFileTracked(filePath),\r\n                isIgnored = IsFileIgnored(filePath)\r\n            };\r\n            \r\n            filePaths[i] = filePath;\r\n            fileNames[i] = fileName;\r\n            fileStatuses[i] = fileStatus;\r\n            \r\n            // 分类文件\r\n            switch (fileStatus)\r\n            {\r\n                case FileStatus.Modified:\r\n                    modifiedFiles.Add(fileInfos[i]);\r\n                    break;\r\n                case FileStatus.Added:\r\n                    addedFiles.Add(fileInfos[i]);\r\n                    break;\r\n                case FileStatus.Deleted:\r\n                    deletedFiles.Add(fileInfos[i]);\r\n                    break;\r\n                case FileStatus.Conflicted:\r\n                    conflictedFiles.Add(fileInfos[i]);\r\n                    break;\r\n                case FileStatus.Ignored:\r\n                    ignoredFiles.Add(fileInfos[i]);\r\n                    break;\r\n                case FileStatus.Untracked:\r\n                    untrackedFiles.Add(fileInfos[i]);\r\n                    break;\r\n                case FileStatus.Staged:\r\n                    stagedFiles.Add(fileInfos[i]);\r\n                    break;\r\n            }\r\n        }\r\n        \r\n        this.modifiedFileInfos = modifiedFiles.ToArray();\r\n        this.addedFileInfos = addedFiles.ToArray();\r\n        this.deletedFileInfos = deletedFiles.ToArray();\r\n        this.conflictedFileInfos = conflictedFiles.ToArray();\r\n        this.ignoredFileInfos = ignoredFiles.ToArray();\r\n        this.untrackedFileInfos = untrackedFiles.ToArray();\r\n        this.stagedFileInfos = stagedFiles.ToArray();\r\n        \r\n        totalFiles = files.Length;\r\n        this.modifiedFiles = modifiedFiles.Count;\r\n        this.addedFiles = addedFiles.Count;\r\n        this.deletedFiles = deletedFiles.Count;\r\n        this.conflictedFiles = conflictedFiles.Count;\r\n        this.ignoredFiles = ignoredFiles.Count;\r\n        this.untrackedFiles = untrackedFiles.Count;\r\n        this.stagedFiles = stagedFiles.Count;\r\n    }\r\n\r\n    private string[] FindAllProjectFiles()\r\n    {\r\n        var files = new List<string>();\r\n        var searchPatterns = new[] { \"*.cs\", \"*.js\", \"*.boo\", \"*.unity\", \"*.prefab\", \"*.asset\", \"*.mat\", \"*.png\", \"*.jpg\", \"*.jpeg\", \"*.tga\", \"*.tif\", \"*.tiff\", \"*.psd\", \"*.ai\", \"*.fbx\", \"*.obj\", \"*.3ds\", \"*.dae\", \"*.blend\", \"*.max\", \"*.c4d\", \"*.ma\", \"*.mb\", \"*.wav\", \"*.mp3\", \"*.ogg\", \"*.aiff\", \"*.flac\", \"*.wma\", \"*.m4a\", \"*.aac\", \"*.mp4\", \"*.avi\", \"*.mov\", \"*.wmv\", \"*.flv\", \"*.webm\", \"*.mkv\", \"*.m4v\", \"*.3gp\", \"*.ogv\" };\r\n        \r\n        foreach (var pattern in searchPatterns)\r\n        {\r\n            var foundFiles = System.IO.Directory.GetFiles(Application.dataPath, pattern, System.IO.SearchOption.AllDirectories);\r\n            files.AddRange(foundFiles);\r\n        }\r\n        \r\n        return files.ToArray();\r\n    }\r\n\r\n    private FileStatus GetFileStatus(string filePath)\r\n    {\r\n        // 模拟文件状态检测\r\n        var random = new System.Random(filePath.GetHashCode());\r\n        var statuses = System.Enum.GetValues(typeof(FileStatus));\r\n        return (FileStatus)statuses.GetValue(random.Next(statuses.Length));\r\n    }\r\n\r\n    private bool IsFileTracked(string filePath)\r\n    {\r\n        // 模拟文件跟踪状态\r\n        return !filePath.Contains(\"Temp\") && !filePath.Contains(\"Library\");\r\n    }\r\n\r\n    private bool IsFileIgnored(string filePath)\r\n    {\r\n        // 模拟文件忽略状态\r\n        return filePath.Contains(\"Temp\") || filePath.Contains(\"Library\") || filePath.Contains(\".meta\");\r\n    }\r\n\r\n    private void UpdateFileStatistics()\r\n    {\r\n        // 更新文件变更统计\r\n        foreach (var fileInfo in fileInfos)\r\n        {\r\n            if (!fileChangeCounts.ContainsKey(fileInfo.path))\r\n            {\r\n                fileChangeCounts[fileInfo.path] = 0;\r\n            }\r\n            \r\n            if (fileInfo.status == FileStatus.Modified)\r\n            {\r\n                fileChangeCounts[fileInfo.path]++;\r\n            }\r\n            \r\n            fileLastModified[fileInfo.path] = fileInfo.lastModified;\r\n        }\r\n    }\r\n\r\n    private void UpdateCommitHistory()\r\n    {\r\n        if (enableCommitHistory)\r\n        {\r\n            // 模拟更新提交历史\r\n            if (totalCommits < 50)\r\n            {\r\n                var commit = new CommitInfo\r\n                {\r\n                    hash = GenerateCommitHash(),\r\n                    message = $\"Auto commit {totalCommits + 1}\",\r\n                    author = currentUser,\r\n                    email = currentEmail,\r\n                    timestamp = System.DateTime.Now,\r\n                    filesChanged = modifiedFiles,\r\n                    linesAdded = UnityEngine.Random.Range(1, 100),\r\n                    linesDeleted = UnityEngine.Random.Range(0, 50)\r\n                };\r\n                \r\n                commitHistory[commitHistoryIndex] = commit;\r\n                commitHistoryIndex = (commitHistoryIndex + 1) % 50;\r\n                totalCommits++;\r\n                \r\n                lastCommitHash = commit.hash;\r\n                lastCommitMessage = commit.message;\r\n                lastCommitTime = commit.timestamp;\r\n            }\r\n        }\r\n    }\r\n\r\n    private string GenerateCommitHash()\r\n    {\r\n        // 生成模拟的提交哈希\r\n        var random = new System.Random();\r\n        var hash = new System.Text.StringBuilder();\r\n        for (int i = 0; i < 8; i++)\r\n        {\r\n            hash.Append(random.Next(16).ToString(\"x\"));\r\n        }\r\n        return hash.ToString();\r\n    }\r\n\r\n    private void SyncWithRemote()\r\n    {\r\n        if (!isConnected) return;\r\n        \r\n        isWorking = true;\r\n        vcStatus = VersionControlStatus.Syncing;\r\n        \r\n        // 模拟同步操作\r\n        System.Threading.Tasks.Task.Delay(1000).ContinueWith(_ =>\r\n        {\r\n            isWorking = false;\r\n            vcStatus = VersionControlStatus.Connected;\r\n            Debug.Log(\"与远程仓库同步完成\");\r\n        });\r\n    }\r\n\r\n    private void CheckAutoCommit()\r\n    {\r\n        if (modifiedFiles > 0 && !isWorking)\r\n        {\r\n            var commitMessage = $\"Auto commit: {modifiedFiles} files modified\";\r\n            CommitChanges(commitMessage);\r\n        }\r\n    }\r\n\r\n    private void CheckAutoPush()\r\n    {\r\n        if (pendingPushes.Count > 0 && !isWorking)\r\n        {\r\n            PushToRemote();\r\n        }\r\n    }\r\n\r\n    public void InitializeRepository()\r\n    {\r\n        if (isInitialized)\r\n        {\r\n            Debug.LogWarning(\"仓库已初始化\");\r\n            return;\r\n        }\r\n        \r\n        isWorking = true;\r\n        vcStatus = VersionControlStatus.Initializing;\r\n        \r\n        try\r\n        {\r\n            // 模拟初始化操作\r\n            System.Threading.Tasks.Task.Delay(2000).ContinueWith(_ =>\r\n            {\r\n                isInitialized = true;\r\n                isWorking = false;\r\n                vcStatus = VersionControlStatus.Initialized;\r\n                \r\n                currentRepository = Application.dataPath;\r\n                currentBranch = defaultBranch;\r\n                currentUser = \"Unity Developer\";\r\n                currentEmail = \"developer@unity.com\";\r\n                \r\n                Debug.Log(\"版本控制仓库初始化完成\");\r\n            });\r\n        }\r\n        catch (System.Exception e)\r\n        {\r\n            isWorking = false;\r\n            vcStatus = VersionControlStatus.Failed;\r\n            Debug.LogError($\"仓库初始化失败: {e.Message}\");\r\n        }\r\n    }\r\n\r\n    public void ConnectToRemote(string remoteUrl)\r\n    {\r\n        if (!isInitialized)\r\n        {\r\n            Debug.LogWarning(\"请先初始化仓库\");\r\n            return;\r\n        }\r\n        \r\n        if (isConnected)\r\n        {\r\n            Debug.LogWarning(\"已连接到远程仓库\");\r\n            return;\r\n        }\r\n        \r\n        isWorking = true;\r\n        vcStatus = VersionControlStatus.Connecting;\r\n        \r\n        try\r\n        {\r\n            // 模拟连接操作\r\n            System.Threading.Tasks.Task.Delay(3000).ContinueWith(_ =>\r\n            {\r\n                isConnected = true;\r\n                isWorking = false;\r\n                vcStatus = VersionControlStatus.Connected;\r\n                \r\n                currentRemote = remoteUrl;\r\n                originUrl = remoteUrl;\r\n                \r\n                Debug.Log($\"已连接到远程仓库: {remoteUrl}\");\r\n            });\r\n        }\r\n        catch (System.Exception e)\r\n        {\r\n            isWorking = false;\r\n            vcStatus = VersionControlStatus.Failed;\r\n            Debug.LogError($\"连接远程仓库失败: {e.Message}\");\r\n        }\r\n    }\r\n\r\n    public void StageFile(string filePath)\r\n    {\r\n        if (!isInitialized)\r\n        {\r\n            Debug.LogWarning(\"请先初始化仓库\");\r\n            return;\r\n        }\r\n        \r\n        try\r\n        {\r\n            // 模拟暂存文件\r\n            var fileInfo = System.Array.Find(fileInfos, f => f.path == filePath);\r\n            if (fileInfo != null)\r\n            {\r\n                fileInfo.status = FileStatus.Staged;\r\n                stagedFiles++;\r\n                \r\n                Debug.Log($\"文件已暂存: {filePath}\");\r\n            }\r\n        }\r\n        catch (System.Exception e)\r\n        {\r\n            Debug.LogError($\"暂存文件失败: {e.Message}\");\r\n        }\r\n    }\r\n\r\n    public void StageAllFiles()\r\n    {\r\n        if (!isInitialized)\r\n        {\r\n            Debug.LogWarning(\"请先初始化仓库\");\r\n            return;\r\n        }\r\n        \r\n        try\r\n        {\r\n            foreach (var fileInfo in modifiedFileInfos)\r\n            {\r\n                fileInfo.status = FileStatus.Staged;\r\n            }\r\n            \r\n            stagedFiles = modifiedFiles;\r\n            Debug.Log($\"所有修改的文件已暂存，共 {stagedFiles} 个文件\");\r\n        }\r\n        catch (System.Exception e)\r\n        {\r\n            Debug.LogError($\"暂存所有文件失败: {e.Message}\");\r\n        }\r\n    }\r\n\r\n    public void CommitChanges(string message)\r\n    {\r\n        if (!isInitialized)\r\n        {\r\n            Debug.LogWarning(\"请先初始化仓库\");\r\n            return;\r\n        }\r\n        \r\n        if (stagedFiles == 0)\r\n        {\r\n            Debug.LogWarning(\"没有暂存的文件\");\r\n            return;\r\n        }\r\n        \r\n        isWorking = true;\r\n        vcStatus = VersionControlStatus.Committing;\r\n        \r\n        try\r\n        {\r\n            // 模拟提交操作\r\n            System.Threading.Tasks.Task.Delay(1500).ContinueWith(_ =>\r\n            {\r\n                var commit = new CommitInfo\r\n                {\r\n                    hash = GenerateCommitHash(),\r\n                    message = message,\r\n                    author = currentUser,\r\n                    email = currentEmail,\r\n                    timestamp = System.DateTime.Now,\r\n                    filesChanged = stagedFiles,\r\n                    linesAdded = UnityEngine.Random.Range(1, 100),\r\n                    linesDeleted = UnityEngine.Random.Range(0, 50)\r\n                };\r\n                \r\n                // 添加到提交历史\r\n                commitHistory[commitHistoryIndex] = commit;\r\n                commitHistoryIndex = (commitHistoryIndex + 1) % 50;\r\n                totalCommits++;\r\n                \r\n                lastCommitHash = commit.hash;\r\n                lastCommitMessage = commit.message;\r\n                lastCommitTime = commit.timestamp;\r\n                \r\n                // 更新文件状态\r\n                foreach (var fileInfo in stagedFileInfos)\r\n                {\r\n                    fileInfo.status = FileStatus.Committed;\r\n                }\r\n                \r\n                committedFiles += stagedFiles;\r\n                stagedFiles = 0;\r\n                \r\n                isWorking = false;\r\n                vcStatus = VersionControlStatus.Connected;\r\n                \r\n                Debug.Log($\"提交完成: {message} (哈希: {commit.hash})\");\r\n            });\r\n        }\r\n        catch (System.Exception e)\r\n        {\r\n            isWorking = false;\r\n            vcStatus = VersionControlStatus.Failed;\r\n            Debug.LogError($\"提交失败: {e.Message}\");\r\n        }\r\n    }\r\n\r\n    public void PushToRemote()\r\n    {\r\n        if (!isConnected)\r\n        {\r\n            Debug.LogWarning(\"请先连接到远程仓库\");\r\n            return;\r\n        }\r\n        \r\n        if (committedFiles == 0)\r\n        {\r\n            Debug.LogWarning(\"没有可推送的提交\");\r\n            return;\r\n        }\r\n        \r\n        isWorking = true;\r\n        vcStatus = VersionControlStatus.Pushing;\r\n        \r\n        try\r\n        {\r\n            // 模拟推送操作\r\n            System.Threading.Tasks.Task.Delay(2000).ContinueWith(_ =>\r\n            {\r\n                isWorking = false;\r\n                vcStatus = VersionControlStatus.Connected;\r\n                \r\n                Debug.Log($\"推送完成，共推送 {committedFiles} 个文件的更改\");\r\n            });\r\n        }\r\n        catch (System.Exception e)\r\n        {\r\n            isWorking = false;\r\n            vcStatus = VersionControlStatus.Failed;\r\n            Debug.LogError($\"推送失败: {e.Message}\");\r\n        }\r\n    }\r\n\r\n    public void PullFromRemote()\r\n    {\r\n        if (!isConnected)\r\n        {\r\n            Debug.LogWarning(\"请先连接到远程仓库\");\r\n            return;\r\n        }\r\n        \r\n        isWorking = true;\r\n        vcStatus = VersionControlStatus.Pulling;\r\n        \r\n        try\r\n        {\r\n            // 模拟拉取操作\r\n            System.Threading.Tasks.Task.Delay(2500).ContinueWith(_ =>\r\n            {\r\n                isWorking = false;\r\n                vcStatus = VersionControlStatus.Connected;\r\n                \r\n                Debug.Log(\"从远程仓库拉取完成\");\r\n            });\r\n        }\r\n        catch (System.Exception e)\r\n        {\r\n            isWorking = false;\r\n            vcStatus = VersionControlStatus.Failed;\r\n            Debug.LogError($\"拉取失败: {e.Message}\");\r\n        }\r\n    }\r\n\r\n    public void CreateBranch(string branchName)\r\n    {\r\n        if (!isInitialized)\r\n        {\r\n            Debug.LogWarning(\"请先初始化仓库\");\r\n            return;\r\n        }\r\n        \r\n        try\r\n        {\r\n            var branch = new BranchInfo\r\n            {\r\n                name = branchName,\r\n                isLocal = true,\r\n                isRemote = false,\r\n                isCurrent = false,\r\n                lastCommit = lastCommitHash,\r\n                lastCommitMessage = lastCommitMessage,\r\n                lastCommitTime = lastCommitTime\r\n            };\r\n            \r\n            var newBranches = new BranchInfo[branches.Length + 1];\r\n            branches.CopyTo(newBranches, 0);\r\n            newBranches[branches.Length] = branch;\r\n            branches = newBranches;\r\n            \r\n            var newBranchNames = new string[branchNames.Length + 1];\r\n            branchNames.CopyTo(newBranchNames, 0);\r\n            newBranchNames[branchNames.Length] = branchName;\r\n            branchNames = newBranchNames;\r\n            \r\n            Debug.Log($\"分支已创建: {branchName}\");\r\n        }\r\n        catch (System.Exception e)\r\n        {\r\n            Debug.LogError($\"创建分支失败: {e.Message}\");\r\n        }\r\n    }\r\n\r\n    public void SwitchBranch(string branchName)\r\n    {\r\n        if (!isInitialized)\r\n        {\r\n            Debug.LogWarning(\"请先初始化仓库\");\r\n            return;\r\n        }\r\n        \r\n        try\r\n        {\r\n            // 检查是否有未提交的更改\r\n            if (modifiedFiles > 0)\r\n            {\r\n                Debug.LogWarning(\"有未提交的更改，请先提交或暂存\");\r\n                return;\r\n            }\r\n            \r\n            currentBranch = branchName;\r\n            \r\n            // 更新分支状态\r\n            foreach (var branch in branches)\r\n            {\r\n                branch.isCurrent = branch.name == branchName;\r\n            }\r\n            \r\n            Debug.Log($\"已切换到分支: {branchName}\");\r\n        }\r\n        catch (System.Exception e)\r\n        {\r\n            Debug.LogError($\"切换分支失败: {e.Message}\");\r\n        }\r\n    }\r\n\r\n    public void CreateTag(string tagName, string message)\r\n    {\r\n        if (!isInitialized)\r\n        {\r\n            Debug.LogWarning(\"请先初始化仓库\");\r\n            return;\r\n        }\r\n        \r\n        try\r\n        {\r\n            var tag = new TagInfo\r\n            {\r\n                name = tagName,\r\n                message = message,\r\n                hash = lastCommitHash,\r\n                timestamp = System.DateTime.Now,\r\n                author = currentUser\r\n            };\r\n            \r\n            var newTags = new TagInfo[tags.Length + 1];\r\n            tags.CopyTo(newTags, 0);\r\n            newTags[tags.Length] = tag;\r\n            tags = newTags;\r\n            \r\n            var newTagNames = new string[tagNames.Length + 1];\r\n            tagNames.CopyTo(newTagNames, 0);\r\n            newTagNames[tagNames.Length] = tagName;\r\n            tagNames = newTagNames;\r\n            \r\n            var newTagMessages = new string[tagMessages.Length + 1];\r\n            tagMessages.CopyTo(newTagMessages, 0);\r\n            newTagMessages[tagMessages.Length] = message;\r\n            tagMessages = newTagMessages;\r\n            \r\n            var newTagHashes = new string[tagHashes.Length + 1];\r\n            tagHashes.CopyTo(newTagHashes, 0);\r\n            newTagHashes[tagHashes.Length] = lastCommitHash;\r\n            tagHashes = newTagHashes;\r\n            \r\n            var newTagDates = new System.DateTime[tagDates.Length + 1];\r\n            tagDates.CopyTo(newTagDates, 0);\r\n            newTagDates[tagDates.Length] = System.DateTime.Now;\r\n            tagDates = newTagDates;\r\n            \r\n            totalTags++;\r\n            \r\n            Debug.Log($\"标签已创建: {tagName} - {message}\");\r\n        }\r\n        catch (System.Exception e)\r\n        {\r\n            Debug.LogError($\"创建标签失败: {e.Message}\");\r\n        }\r\n    }\r\n\r\n    public void ResolveConflict(string filePath, ConflictResolution resolution)\r\n    {\r\n        if (!isInitialized)\r\n        {\r\n            Debug.LogWarning(\"请先初始化仓库\");\r\n            return;\r\n        }\r\n        \r\n        try\r\n        {\r\n            var conflict = System.Array.Find(conflicts, c => c.filePath == filePath);\r\n            if (conflict != null)\r\n            {\r\n                conflict.resolution = resolution;\r\n                conflict.resolved = true;\r\n                conflict.resolvedTime = System.DateTime.Now;\r\n                \r\n                resolvedConflicts++;\r\n                unresolvedConflicts--;\r\n                \r\n                Debug.Log($\"冲突已解决: {filePath} - {resolution}\");\r\n            }\r\n        }\r\n        catch (System.Exception e)\r\n        {\r\n            Debug.LogError($\"解决冲突失败: {e.Message}\");\r\n        }\r\n    }\r\n\r\n    public void GenerateVersionControlReport()\r\n    {\r\n        reportBuilder.Clear();\r\n        reportBuilder.AppendLine(\"=== 版本控制系统报告 ===\");\r\n        reportBuilder.AppendLine($\"生成时间: {System.DateTime.Now}\");\r\n        reportBuilder.AppendLine($\"版本控制状态: {vcStatus}\");\r\n        reportBuilder.AppendLine($\"是否已初始化: {isInitialized}\");\r\n        reportBuilder.AppendLine($\"是否已连接: {isConnected}\");\r\n        reportBuilder.AppendLine($\"当前分支: {currentBranch}\");\r\n        reportBuilder.AppendLine($\"当前仓库: {currentRepository}\");\r\n        reportBuilder.AppendLine($\"当前远程: {currentRemote}\");\r\n        reportBuilder.AppendLine($\"当前用户: {currentUser}\");\r\n        reportBuilder.AppendLine($\"当前邮箱: {currentEmail}\");\r\n        reportBuilder.AppendLine($\"最后提交: {lastCommitHash}\");\r\n        reportBuilder.AppendLine($\"最后提交消息: {lastCommitMessage}\");\r\n        reportBuilder.AppendLine($\"最后提交时间: {lastCommitTime}\");\r\n        reportBuilder.AppendLine();\r\n        \r\n        reportBuilder.AppendLine(\"=== 文件状态 ===\");\r\n        reportBuilder.AppendLine($\"总文件数: {totalFiles}\");\r\n        reportBuilder.AppendLine($\"修改文件数: {modifiedFiles}\");\r\n        reportBuilder.AppendLine($\"添加文件数: {addedFiles}\");\r\n        reportBuilder.AppendLine($\"删除文件数: {deletedFiles}\");\r\n        reportBuilder.AppendLine($\"冲突文件数: {conflictedFiles}\");\r\n        reportBuilder.AppendLine($\"忽略文件数: {ignoredFiles}\");\r\n        reportBuilder.AppendLine($\"未跟踪文件数: {untrackedFiles}\");\r\n        reportBuilder.AppendLine($\"暂存文件数: {stagedFiles}\");\r\n        reportBuilder.AppendLine($\"已提交文件数: {committedFiles}\");\r\n        reportBuilder.AppendLine();\r\n        \r\n        reportBuilder.AppendLine(\"=== 提交历史 ===\");\r\n        reportBuilder.AppendLine($\"总提交数: {totalCommits}\");\r\n        reportBuilder.AppendLine($\"首次提交时间: {firstCommitTime}\");\r\n        reportBuilder.AppendLine($\"最后提交时间: {lastCommitTimeHistory}\");\r\n        reportBuilder.AppendLine();\r\n        \r\n        reportBuilder.AppendLine(\"=== 分支信息 ===\");\r\n        reportBuilder.AppendLine($\"总分支数: {branches.Length}\");\r\n        reportBuilder.AppendLine($\"默认分支: {defaultBranch}\");\r\n        reportBuilder.AppendLine($\"开发分支: {developmentBranch}\");\r\n        reportBuilder.AppendLine($\"功能分支: {featureBranch}\");\r\n        reportBuilder.AppendLine($\"热修复分支: {hotfixBranch}\");\r\n        reportBuilder.AppendLine($\"发布分支: {releaseBranch}\");\r\n        reportBuilder.AppendLine();\r\n        \r\n        reportBuilder.AppendLine(\"=== 标签信息 ===\");\r\n        reportBuilder.AppendLine($\"总标签数: {totalTags}\");\r\n        foreach (var tag in tags)\r\n        {\r\n            reportBuilder.AppendLine($\"- {tag.name}: {tag.message} ({tag.hash})\");\r\n        }\r\n        reportBuilder.AppendLine();\r\n        \r\n        reportBuilder.AppendLine(\"=== 远程仓库 ===\");\r\n        reportBuilder.AppendLine($\"总远程数: {remotes.Length}\");\r\n        reportBuilder.AppendLine($\"Origin URL: {originUrl}\");\r\n        reportBuilder.AppendLine($\"Upstream URL: {upstreamUrl}\");\r\n        reportBuilder.AppendLine();\r\n        \r\n        reportBuilder.AppendLine(\"=== 冲突信息 ===\");\r\n        reportBuilder.AppendLine($\"总冲突数: {totalConflicts}\");\r\n        reportBuilder.AppendLine($\"已解决冲突数: {resolvedConflicts}\");\r\n        reportBuilder.AppendLine($\"未解决冲突数: {unresolvedConflicts}\");\r\n        foreach (var conflict in conflicts)\r\n        {\r\n            if (!conflict.resolved)\r\n            {\r\n                reportBuilder.AppendLine($\"- {conflict.filePath}: {conflict.type}\");\r\n            }\r\n        }\r\n        \r\n        string report = reportBuilder.ToString();\r\n        Debug.Log(report);\r\n        \r\n        if (enableAutoBackup)\r\n        {\r\n            ExportReport(report);\r\n        }\r\n    }\r\n\r\n    private void ExportReport(string report)\r\n    {\r\n        try\r\n        {\r\n            string fileName = $\"VersionControlReport_{System.DateTime.Now:yyyyMMdd_HHmmss}.txt\";\r\n            string filePath = System.IO.Path.Combine(backupPath, fileName);\r\n            \r\n            System.IO.Directory.CreateDirectory(backupPath);\r\n            System.IO.File.WriteAllText(filePath, report);\r\n            \r\n            Debug.Log($\"版本控制报告已导出: {filePath}\");\r\n        }\r\n        catch (System.Exception e)\r\n        {\r\n            Debug.LogError($\"导出版本控制报告失败: {e.Message}\");\r\n        }\r\n    }\r\n\r\n    public void OpenVersionControlWindow()\r\n    {\r\n        if (enableVersionControl)\r\n        {\r\n            EditorWindow.GetWindow<UnityEditor.VersionControlWindow>();\r\n            Debug.Log(\"版本控制窗口已打开\");\r\n        }\r\n    }\r\n\r\n    public void ResetVersionControlData()\r\n    {\r\n        InitializeVCState();\r\n        InitializeFileTracking();\r\n        InitializeCommitHistory();\r\n        InitializeBranchManagement();\r\n        InitializeTagManagement();\r\n        InitializeRemoteManagement();\r\n        InitializeConflictResolution();\r\n        \r\n        fileChangeCounts.Clear();\r\n        userCommitCounts.Clear();\r\n        fileLastModified.Clear();\r\n        fileLastCommit.Clear();\r\n        \r\n        Debug.Log(\"版本控制数据已重置\");\r\n    }\r\n\r\n    private void OnGUI()\r\n    {\r\n        GUILayout.BeginArea(new Rect(10, 10, 400, 800));\r\n        GUILayout.Label(\"VersionControl 版本控制系统演示\", UnityEditor.EditorStyles.boldLabel);\r\n        \r\n        GUILayout.Space(10);\r\n        GUILayout.Label(\"版本控制系统配置:\");\r\n        enableVersionControl = GUILayout.Toggle(enableVersionControl, \"启用版本控制\");\r\n        enableGitIntegration = GUILayout.Toggle(enableGitIntegration, \"启用Git集成\");\r\n        enableSVNIntegration = GUILayout.Toggle(enableSVNIntegration, \"启用SVN集成\");\r\n        enableAutoCommit = GUILayout.Toggle(enableAutoCommit, \"启用自动提交\");\r\n        enableAutoPush = GUILayout.Toggle(enableAutoPush, \"启用自动推送\");\r\n        \r\n        GUILayout.Space(10);\r\n        GUILayout.Label(\"版本控制状态:\");\r\n        GUILayout.Label($\"版本控制状态: {vcStatus}\");\r\n        GUILayout.Label($\"是否已初始化: {isInitialized}\");\r\n        GUILayout.Label($\"是否已连接: {isConnected}\");\r\n        GUILayout.Label($\"是否正在工作: {isWorking}\");\r\n        GUILayout.Label($\"当前分支: {currentBranch}\");\r\n        GUILayout.Label($\"当前仓库: {currentRepository}\");\r\n        GUILayout.Label($\"当前远程: {currentRemote}\");\r\n        GUILayout.Label($\"当前用户: {currentUser}\");\r\n        GUILayout.Label($\"当前邮箱: {currentEmail}\");\r\n        GUILayout.Label($\"最后提交: {lastCommitHash}\");\r\n        GUILayout.Label($\"最后提交消息: {lastCommitMessage}\");\r\n        \r\n        GUILayout.Space(10);\r\n        GUILayout.Label(\"文件状态:\");\r\n        GUILayout.Label($\"总文件数: {totalFiles}\");\r\n        GUILayout.Label($\"修改文件数: {modifiedFiles}\");\r\n        GUILayout.Label($\"添加文件数: {addedFiles}\");\r\n        GUILayout.Label($\"删除文件数: {deletedFiles}\");\r\n        GUILayout.Label($\"冲突文件数: {conflictedFiles}\");\r\n        GUILayout.Label($\"忽略文件数: {ignoredFiles}\");\r\n        GUILayout.Label($\"未跟踪文件数: {untrackedFiles}\");\r\n        GUILayout.Label($\"暂存文件数: {stagedFiles}\");\r\n        GUILayout.Label($\"已提交文件数: {committedFiles}\");\r\n        \r\n        GUILayout.Space(10);\r\n        \r\n        if (GUILayout.Button(\"初始化仓库\"))\r\n        {\r\n            InitializeRepository();\r\n        }\r\n        \r\n        if (GUILayout.Button(\"连接远程仓库\"))\r\n        {\r\n            ConnectToRemote(\"https://github.com/unity/unity-project.git\");\r\n        }\r\n        \r\n        if (GUILayout.Button(\"暂存所有文件\"))\r\n        {\r\n            StageAllFiles();\r\n        }\r\n        \r\n        if (GUILayout.Button(\"提交更改\"))\r\n        {\r\n            CommitChanges(\"Update project files\");\r\n        }\r\n        \r\n        if (GUILayout.Button(\"推送到远程\"))\r\n        {\r\n            PushToRemote();\r\n        }\r\n        \r\n        if (GUILayout.Button(\"从远程拉取\"))\r\n        {\r\n            PullFromRemote();\r\n        }\r\n        \r\n        if (GUILayout.Button(\"创建分支\"))\r\n        {\r\n            CreateBranch(\"feature/new-feature\");\r\n        }\r\n        \r\n        if (GUILayout.Button(\"切换分支\"))\r\n        {\r\n            SwitchBranch(\"develop\");\r\n        }\r\n        \r\n        if (GUILayout.Button(\"创建标签\"))\r\n        {\r\n            CreateTag(\"v1.0.0\", \"Release version 1.0.0\");\r\n        }\r\n        \r\n        if (GUILayout.Button(\"生成版本控制报告\"))\r\n        {\r\n            GenerateVersionControlReport();\r\n        }\r\n        \r\n        if (GUILayout.Button(\"打开版本控制窗口\"))\r\n        {\r\n            OpenVersionControlWindow();\r\n        }\r\n        \r\n        if (GUILayout.Button(\"重置版本控制数据\"))\r\n        {\r\n            ResetVersionControlData();\r\n        }\r\n        \r\n        GUILayout.Space(10);\r\n        GUILayout.Label(\"提交历史:\");\r\n        for (int i = 0; i < Mathf.Min(5, totalCommits); i++)\r\n        {\r\n            var index = (commitHistoryIndex - 1 - i + 50) % 50;\r\n            if (commitHistory[index] != null)\r\n            {\r\n                var commit = commitHistory[index];\r\n                GUILayout.Label($\"{commit.hash.Substring(0, 8)} - {commit.message}\");\r\n            }\r\n        }\r\n        \r\n        GUILayout.EndArea();\r\n    }\r\n}\r\n\r\npublic enum VersionControlStatus\r\n{\r\n    Idle,\r\n    Initializing,\r\n    Initialized,\r\n    Connecting,\r\n    Connected,\r\n    Working,\r\n    Committing,\r\n    Pushing,\r\n    Pulling,\r\n    Syncing,\r\n    Failed\r\n}\r\n\r\npublic enum FileStatus\r\n{\r\n    Untracked,\r\n    Modified,\r\n    Added,\r\n    Deleted,\r\n    Conflicted,\r\n    Ignored,\r\n    Staged,\r\n    Committed\r\n}\r\n\r\npublic enum ConflictType\r\n{\r\n    Merge,\r\n    Rebase,\r\n    CherryPick,\r\n    Revert\r\n}\r\n\r\npublic enum ConflictResolution\r\n{\r\n    KeepLocal,\r\n    KeepRemote,\r\n    KeepBoth,\r\n    Manual\r\n}\r\n\r\n[System.Serializable]\r\npublic class FileInfo\r\n{\r\n    public string path;\r\n    public string name;\r\n    public FileStatus status;\r\n    public System.DateTime lastModified;\r\n    public long size;\r\n    public bool isTracked;\r\n    public bool isIgnored;\r\n}\r\n\r\n[System.Serializable]\r\npublic class CommitInfo\r\n{\r\n    public string hash;\r\n    public string message;\r\n    public string author;\r\n    public string email;\r\n    public System.DateTime timestamp;\r\n    public int filesChanged;\r\n    public int linesAdded;\r\n    public int linesDeleted;\r\n}\r\n\r\n[System.Serializable]\r\npublic class BranchInfo\r\n{\r\n    public string name;\r\n    public bool isLocal;\r\n    public bool isRemote;\r\n    public bool isCurrent;\r\n    public string lastCommit;\r\n    public string lastCommitMessage;\r\n    public System.DateTime lastCommitTime;\r\n}\r\n\r\n[System.Serializable]\r\npublic class TagInfo\r\n{\r\n    public string name;\r\n    public string message;\r\n    public string hash;\r\n    public System.DateTime timestamp;\r\n    public string author;\r\n}\r\n\r\n[System.Serializable]\r\npublic class RemoteInfo\r\n{\r\n    public string name;\r\n    public string url;\r\n    public string type;\r\n    public bool enabled;\r\n}\r\n\r\n[System.Serializable]\r\npublic class ConflictInfo\r\n{\r\n    public string filePath;\r\n    public ConflictType type;\r\n    public ConflictResolution resolution;\r\n    public bool resolved;\r\n    public System.DateTime resolvedTime;\r\n}\r\n\r\n[System.Serializable]\r\npublic class VersionControlStatistics\r\n{\r\n    public int totalCommits;\r\n    public int totalBranches;\r\n    public int totalTags;\r\n    public int totalFiles;\r\n    public System.DateTime firstCommitTime;\r\n    public System.DateTime lastCommitTime;\r\n    public float averageCommitSize;\r\n    public int mostActiveUser;\r\n    public string mostChangedFile;\r\n} "
        }
    ]
}