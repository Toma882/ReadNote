{
    "sourceFile": "Assets/UnityEditor/Chapter 8 UnityAPI/UnityEngine/Events/EventsSystemExample.cs",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 2,
            "patches": [
                {
                    "date": 1750929105311,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1750929149469,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,9 +8,9 @@\n /// </summary>\r\n public class EventsSystemExample : MonoBehaviour\r\n {\r\n     [Header(\"UnityEvent 示例\")]\r\n-    [SerializeField] private UnityEvent onStartEvent;\r\n+    [SerializeField] private UnityEvent onStartEvent; //\r\n     [SerializeField] private UnityEvent onUpdateEvent;\r\n     [SerializeField] private UnityEvent onDestroyEvent;\r\n     \r\n     [Header(\"带参数的UnityEvent\")]\r\n"
                },
                {
                    "date": 1750929155605,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -28,11 +28,11 @@\n     [SerializeField] private string testMessage = \"测试消息\"; // 测试消息\r\n     [SerializeField] private Vector3 testPosition = Vector3.zero; // 测试位置\r\n     \r\n     // 事件监听器列表\r\n-    private List<UnityAction> eventListeners = new List<UnityAction>();\r\n-    private List<UnityAction<int>> intEventListeners = new List<UnityAction<int>>();\r\n-    private List<UnityAction<string>> stringEventListeners = new List<UnityAction<string>>();\r\n+    private List<UnityAction> eventListeners = new List<UnityAction>(); // 基础事件监听器列表\r\n+    private List<UnityAction<int>> intEventListeners = new List<UnityAction<int>>(); // 带参数的事件监听器列表\r\n+    private List<UnityAction<string>> stringEventListeners = new List<UnityAction<string>>(); // 带参数的事件监听器列表\r\n     \r\n     // 事件计数\r\n     private int eventCount = 0;\r\n     \r\n"
                }
            ],
            "date": 1750929105311,
            "name": "Commit-0",
            "content": "using UnityEngine;\r\nusing UnityEngine.Events;\r\nusing System.Collections.Generic;\r\n\r\n/// <summary>\r\n/// UnityEngine.Events 命名空间案例演示\r\n/// 展示Unity事件系统的核心功能\r\n/// </summary>\r\npublic class EventsSystemExample : MonoBehaviour\r\n{\r\n    [Header(\"UnityEvent 示例\")]\r\n    [SerializeField] private UnityEvent onStartEvent;\r\n    [SerializeField] private UnityEvent onUpdateEvent;\r\n    [SerializeField] private UnityEvent onDestroyEvent;\r\n    \r\n    [Header(\"带参数的UnityEvent\")]\r\n    [SerializeField] private UnityEvent<int> onValueChangedEvent;\r\n    [SerializeField] private UnityEvent<string> onMessageEvent;\r\n    [SerializeField] private UnityEvent<Vector3> onPositionChangedEvent;\r\n    [SerializeField] private UnityEvent<GameObject> onObjectSelectedEvent;\r\n    \r\n    [Header(\"自定义事件\")]\r\n    [SerializeField] private UnityEvent<CustomEventData> onCustomEvent;\r\n    \r\n    [Header(\"事件设置\")]\r\n    [SerializeField] private bool enableLogging = true;\r\n    [SerializeField] private int testValue = 0;\r\n    [SerializeField] private string testMessage = \"测试消息\";\r\n    [SerializeField] private Vector3 testPosition = Vector3.zero;\r\n    \r\n    // 事件监听器列表\r\n    private List<UnityAction> eventListeners = new List<UnityAction>();\r\n    private List<UnityAction<int>> intEventListeners = new List<UnityAction<int>>();\r\n    private List<UnityAction<string>> stringEventListeners = new List<UnityAction<string>>();\r\n    \r\n    // 事件计数\r\n    private int eventCount = 0;\r\n    \r\n    private void Start()\r\n    {\r\n        InitializeEvents();\r\n        LogMessage(\"EventsSystemExample 启动完成\");\r\n    }\r\n    \r\n    /// <summary>\r\n    /// 初始化事件系统\r\n    /// </summary>\r\n    private void InitializeEvents()\r\n    {\r\n        // 初始化UnityEvent\r\n        if (onStartEvent == null)\r\n            onStartEvent = new UnityEvent();\r\n        if (onUpdateEvent == null)\r\n            onUpdateEvent = new UnityEvent();\r\n        if (onDestroyEvent == null)\r\n            onDestroyEvent = new UnityEvent();\r\n        \r\n        // 初始化带参数的UnityEvent\r\n        if (onValueChangedEvent == null)\r\n            onValueChangedEvent = new UnityEvent<int>();\r\n        if (onMessageEvent == null)\r\n            onMessageEvent = new UnityEvent<string>();\r\n        if (onPositionChangedEvent == null)\r\n            onPositionChangedEvent = new UnityEvent<Vector3>();\r\n        if (onObjectSelectedEvent == null)\r\n            onObjectSelectedEvent = new UnityEvent<GameObject>();\r\n        if (onCustomEvent == null)\r\n            onCustomEvent = new UnityEvent<CustomEventData>();\r\n        \r\n        // 添加事件监听器\r\n        AddEventListeners();\r\n        \r\n        // 触发启动事件\r\n        onStartEvent?.Invoke();\r\n    }\r\n    \r\n    /// <summary>\r\n    /// 添加事件监听器\r\n    /// </summary>\r\n    private void AddEventListeners()\r\n    {\r\n        // 添加基础事件监听器\r\n        onStartEvent.AddListener(OnStartHandler);\r\n        onUpdateEvent.AddListener(OnUpdateHandler);\r\n        onDestroyEvent.AddListener(OnDestroyHandler);\r\n        \r\n        // 添加带参数的事件监听器\r\n        onValueChangedEvent.AddListener(OnValueChangedHandler);\r\n        onMessageEvent.AddListener(OnMessageHandler);\r\n        onPositionChangedEvent.AddListener(OnPositionChangedHandler);\r\n        onObjectSelectedEvent.AddListener(OnObjectSelectedHandler);\r\n        onCustomEvent.AddListener(OnCustomEventHandler);\r\n        \r\n        // 添加多个监听器示例\r\n        onValueChangedEvent.AddListener(OnValueChangedHandler2);\r\n        onMessageEvent.AddListener(OnMessageHandler2);\r\n        \r\n        // 保存监听器引用以便后续移除\r\n        eventListeners.Add(OnStartHandler);\r\n        eventListeners.Add(OnUpdateHandler);\r\n        eventListeners.Add(OnDestroyHandler);\r\n        \r\n        intEventListeners.Add(OnValueChangedHandler);\r\n        intEventListeners.Add(OnValueChangedHandler2);\r\n        \r\n        stringEventListeners.Add(OnMessageHandler);\r\n        stringEventListeners.Add(OnMessageHandler2);\r\n    }\r\n    \r\n    /// <summary>\r\n    /// 移除事件监听器\r\n    /// </summary>\r\n    private void RemoveEventListeners()\r\n    {\r\n        // 移除基础事件监听器\r\n        foreach (var listener in eventListeners)\r\n        {\r\n            onStartEvent?.RemoveListener(listener);\r\n            onUpdateEvent?.RemoveListener(listener);\r\n            onDestroyEvent?.RemoveListener(listener);\r\n        }\r\n        \r\n        // 移除带参数的事件监听器\r\n        foreach (var listener in intEventListeners)\r\n        {\r\n            onValueChangedEvent?.RemoveListener(listener);\r\n        }\r\n        \r\n        foreach (var listener in stringEventListeners)\r\n        {\r\n            onMessageEvent?.RemoveListener(listener);\r\n        }\r\n        \r\n        // 移除其他监听器\r\n        onPositionChangedEvent?.RemoveListener(OnPositionChangedHandler);\r\n        onObjectSelectedEvent?.RemoveListener(OnObjectSelectedHandler);\r\n        onCustomEvent?.RemoveListener(OnCustomEventHandler);\r\n    }\r\n    \r\n    /// <summary>\r\n    /// 清除所有事件监听器\r\n    /// </summary>\r\n    public void ClearAllListeners()\r\n    {\r\n        onStartEvent?.RemoveAllListeners();\r\n        onUpdateEvent?.RemoveAllListeners();\r\n        onDestroyEvent?.RemoveAllListeners();\r\n        onValueChangedEvent?.RemoveAllListeners();\r\n        onMessageEvent?.RemoveAllListeners();\r\n        onPositionChangedEvent?.RemoveAllListeners();\r\n        onObjectSelectedEvent?.RemoveAllListeners();\r\n        onCustomEvent?.RemoveAllListeners();\r\n        \r\n        LogMessage(\"所有事件监听器已清除\");\r\n    }\r\n    \r\n    /// <summary>\r\n    /// 获取事件监听器数量\r\n    /// </summary>\r\n    public void GetListenerCount()\r\n    {\r\n        int startCount = onStartEvent?.GetPersistentEventCount() ?? 0;\r\n        int updateCount = onUpdateEvent?.GetPersistentEventCount() ?? 0;\r\n        int valueCount = onValueChangedEvent?.GetPersistentEventCount() ?? 0;\r\n        int messageCount = onMessageEvent?.GetPersistentEventCount() ?? 0;\r\n        \r\n        LogMessage($\"事件监听器数量 - Start: {startCount}, Update: {updateCount}, Value: {valueCount}, Message: {messageCount}\");\r\n    }\r\n    \r\n    /// <summary>\r\n    /// 触发测试事件\r\n    /// </summary>\r\n    public void TriggerTestEvents()\r\n    {\r\n        eventCount++;\r\n        \r\n        // 触发基础事件\r\n        onUpdateEvent?.Invoke();\r\n        \r\n        // 触发带参数的事件\r\n        onValueChangedEvent?.Invoke(testValue);\r\n        onMessageEvent?.Invoke(testMessage);\r\n        onPositionChangedEvent?.Invoke(testPosition);\r\n        onObjectSelectedEvent?.Invoke(gameObject);\r\n        \r\n        // 触发自定义事件\r\n        CustomEventData customData = new CustomEventData\r\n        {\r\n            id = eventCount,\r\n            message = $\"自定义事件 #{eventCount}\",\r\n            timestamp = Time.time,\r\n            position = transform.position\r\n        };\r\n        onCustomEvent?.Invoke(customData);\r\n        \r\n        LogMessage($\"已触发所有测试事件 (第 {eventCount} 次)\");\r\n    }\r\n    \r\n    /// <summary>\r\n    /// 设置测试值并触发事件\r\n    /// </summary>\r\n    /// <param name=\"newValue\">新值</param>\r\n    public void SetTestValue(int newValue)\r\n    {\r\n        testValue = newValue;\r\n        onValueChangedEvent?.Invoke(testValue);\r\n        LogMessage($\"测试值已更新: {testValue}\");\r\n    }\r\n    \r\n    /// <summary>\r\n    /// 设置测试消息并触发事件\r\n    /// </summary>\r\n    /// <param name=\"newMessage\">新消息</param>\r\n    public void SetTestMessage(string newMessage)\r\n    {\r\n        testMessage = newMessage;\r\n        onMessageEvent?.Invoke(testMessage);\r\n        LogMessage($\"测试消息已更新: {testMessage}\");\r\n    }\r\n    \r\n    /// <summary>\r\n    /// 设置测试位置并触发事件\r\n    /// </summary>\r\n    /// <param name=\"newPosition\">新位置</param>\r\n    public void SetTestPosition(Vector3 newPosition)\r\n    {\r\n        testPosition = newPosition;\r\n        onPositionChangedEvent?.Invoke(testPosition);\r\n        LogMessage($\"测试位置已更新: {testPosition}\");\r\n    }\r\n    \r\n    /// <summary>\r\n    /// 动态添加事件监听器\r\n    /// </summary>\r\n    public void AddDynamicListener()\r\n    {\r\n        UnityAction<int> dynamicListener = (value) => {\r\n            LogMessage($\"动态监听器收到值: {value}\");\r\n        };\r\n        \r\n        onValueChangedEvent?.AddListener(dynamicListener);\r\n        intEventListeners.Add(dynamicListener);\r\n        \r\n        LogMessage(\"已添加动态事件监听器\");\r\n    }\r\n    \r\n    /// <summary>\r\n    /// 检查事件是否为空\r\n    /// </summary>\r\n    public void CheckEventStatus()\r\n    {\r\n        bool startIsNull = onStartEvent == null;\r\n        bool updateIsNull = onUpdateEvent == null;\r\n        bool valueIsNull = onValueChangedEvent == null;\r\n        bool messageIsNull = onMessageEvent == null;\r\n        \r\n        LogMessage($\"事件状态检查 - Start: {(startIsNull ? \"空\" : \"正常\")}, Update: {(updateIsNull ? \"空\" : \"正常\")}, Value: {(valueIsNull ? \"空\" : \"正常\")}, Message: {(messageIsNull ? \"空\" : \"正常\")}\");\r\n    }\r\n    \r\n    // 事件处理器方法\r\n    private void OnStartHandler()\r\n    {\r\n        LogMessage(\"OnStart 事件被触发\");\r\n    }\r\n    \r\n    private void OnUpdateHandler()\r\n    {\r\n        LogMessage(\"OnUpdate 事件被触发\");\r\n    }\r\n    \r\n    private void OnDestroyHandler()\r\n    {\r\n        LogMessage(\"OnDestroy 事件被触发\");\r\n    }\r\n    \r\n    private void OnValueChangedHandler(int value)\r\n    {\r\n        LogMessage($\"值改变事件被触发: {value}\");\r\n    }\r\n    \r\n    private void OnValueChangedHandler2(int value)\r\n    {\r\n        LogMessage($\"值改变事件处理器2: {value}\");\r\n    }\r\n    \r\n    private void OnMessageHandler(string message)\r\n    {\r\n        LogMessage($\"消息事件被触发: {message}\");\r\n    }\r\n    \r\n    private void OnMessageHandler2(string message)\r\n    {\r\n        LogMessage($\"消息事件处理器2: {message}\");\r\n    }\r\n    \r\n    private void OnPositionChangedHandler(Vector3 position)\r\n    {\r\n        LogMessage($\"位置改变事件被触发: {position}\");\r\n    }\r\n    \r\n    private void OnObjectSelectedHandler(GameObject obj)\r\n    {\r\n        LogMessage($\"对象选择事件被触发: {obj?.name ?? \"null\"}\");\r\n    }\r\n    \r\n    private void OnCustomEventHandler(CustomEventData data)\r\n    {\r\n        LogMessage($\"自定义事件被触发 - ID: {data.id}, 消息: {data.message}, 时间: {data.timestamp:F2}, 位置: {data.position}\");\r\n    }\r\n    \r\n    private void Update()\r\n    {\r\n        // 每帧触发更新事件（可选）\r\n        if (Input.GetKeyDown(KeyCode.Space))\r\n        {\r\n            onUpdateEvent?.Invoke();\r\n        }\r\n    }\r\n    \r\n    private void OnDestroy()\r\n    {\r\n        // 触发销毁事件\r\n        onDestroyEvent?.Invoke();\r\n        \r\n        // 移除所有监听器\r\n        RemoveEventListeners();\r\n        \r\n        LogMessage(\"EventsSystemExample 已销毁\");\r\n    }\r\n    \r\n    /// <summary>\r\n    /// 日志输出\r\n    /// </summary>\r\n    /// <param name=\"message\">消息内容</param>\r\n    private void LogMessage(string message)\r\n    {\r\n        if (enableLogging)\r\n        {\r\n            Debug.Log($\"[EventsSystem] {message}\");\r\n        }\r\n    }\r\n    \r\n    private void OnGUI()\r\n    {\r\n        // 简单的GUI界面用于测试\r\n        GUILayout.BeginArea(new Rect(10, 10, 400, 500));\r\n        GUILayout.Label(\"事件系统控制\", EditorStyles.boldLabel);\r\n        \r\n        if (GUILayout.Button(\"触发测试事件\"))\r\n        {\r\n            TriggerTestEvents();\r\n        }\r\n        \r\n        GUILayout.Space(10);\r\n        \r\n        GUILayout.Label($\"测试值: {testValue}\");\r\n        testValue = (int)GUILayout.HorizontalSlider(testValue, 0, 100);\r\n        \r\n        GUILayout.Label($\"测试消息: {testMessage}\");\r\n        testMessage = GUILayout.TextField(testMessage);\r\n        \r\n        GUILayout.Space(10);\r\n        \r\n        if (GUILayout.Button(\"设置测试值\"))\r\n        {\r\n            SetTestValue(testValue);\r\n        }\r\n        \r\n        if (GUILayout.Button(\"设置测试消息\"))\r\n        {\r\n            SetTestMessage(testMessage);\r\n        }\r\n        \r\n        GUILayout.Space(10);\r\n        \r\n        if (GUILayout.Button(\"添加动态监听器\"))\r\n        {\r\n            AddDynamicListener();\r\n        }\r\n        \r\n        if (GUILayout.Button(\"获取监听器数量\"))\r\n        {\r\n            GetListenerCount();\r\n        }\r\n        \r\n        if (GUILayout.Button(\"检查事件状态\"))\r\n        {\r\n            CheckEventStatus();\r\n        }\r\n        \r\n        if (GUILayout.Button(\"清除所有监听器\"))\r\n        {\r\n            ClearAllListeners();\r\n        }\r\n        \r\n        GUILayout.Space(10);\r\n        \r\n        GUILayout.Label($\"事件计数: {eventCount}\");\r\n        GUILayout.Label($\"日志开关: {(enableLogging ? \"开启\" : \"关闭\")}\");\r\n        enableLogging = GUILayout.Toggle(enableLogging, \"启用日志\");\r\n        \r\n        GUILayout.EndArea();\r\n    }\r\n}\r\n\r\n/// <summary>\r\n/// 自定义事件数据结构\r\n/// </summary>\r\n[System.Serializable]\r\npublic class CustomEventData\r\n{\r\n    public int id;\r\n    public string message;\r\n    public float timestamp;\r\n    public Vector3 position;\r\n} "
        }
    ]
}