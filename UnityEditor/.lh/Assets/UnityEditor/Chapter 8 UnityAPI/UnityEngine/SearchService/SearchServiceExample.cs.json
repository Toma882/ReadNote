{
    "sourceFile": "Assets/UnityEditor/Chapter 8 UnityAPI/UnityEngine/SearchService/SearchServiceExample.cs",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 1,
            "patches": [
                {
                    "date": 1750935796673,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1750935877157,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,1 +1,745 @@\n- \n\\ No newline at end of file\n+using UnityEngine;\r\n+using Unity.SearchService;\r\n+\r\n+/// <summary>\r\n+/// UnityEngine.SearchService 命名空间案例演示\r\n+/// 展示搜索服务、索引管理、查询优化等核心功能\r\n+/// </summary>\r\n+public class SearchServiceExample : MonoBehaviour\r\n+{\r\n+    [Header(\"搜索服务配置\")]\r\n+    [SerializeField] private bool enableSearchService = true; //启用搜索服务\r\n+    [SerializeField] private bool enableIndexing = true; //启用索引\r\n+    [SerializeField] private bool enableQueryOptimization = true; //启用查询优化\r\n+    [SerializeField] private bool enableSearchProfiling = true; //启用搜索分析\r\n+    [SerializeField] private bool enableAsyncSearch = true; //启用异步搜索\r\n+    \r\n+    [Header(\"索引配置\")]\r\n+    [SerializeField] private int maxIndexSize = 10000; //最大索引大小\r\n+    [SerializeField] private float indexUpdateInterval = 1f; //索引更新间隔\r\n+    [SerializeField] private bool enableAutoIndexing = true; //启用自动索引\r\n+    [SerializeField] private bool enableIncrementalIndexing = true; //启用增量索引\r\n+    [SerializeField] private string indexStoragePath = \"SearchIndex\"; //索引存储路径\r\n+    \r\n+    [Header(\"搜索参数\")]\r\n+    [SerializeField] private string searchQuery = \"\"; //搜索查询\r\n+    [SerializeField] private int maxSearchResults = 100; //最大搜索结果数\r\n+    [SerializeField] private float searchTimeout = 5f; //搜索超时时间\r\n+    [SerializeField] private bool enableFuzzySearch = true; //启用模糊搜索\r\n+    [SerializeField] private bool enableCaseSensitive = false; //启用大小写敏感\r\n+    [SerializeField] private float fuzzyThreshold = 0.8f; //模糊阈值\r\n+    \r\n+    [Header(\"搜索类型\")]\r\n+    [SerializeField] private bool enableTextSearch = true; //启用文本搜索\r\n+    [SerializeField] private bool enableTagSearch = true; //启用标签搜索\r\n+    [SerializeField] private bool enableTypeSearch = true; //启用类型搜索\r\n+    [SerializeField] private bool enablePropertySearch = true; //启用属性搜索\r\n+    [SerializeField] private bool enableHierarchySearch = true; //启用层级搜索\r\n+    \r\n+    [Header(\"性能监控\")]\r\n+    [SerializeField] private bool enableSearchMonitoring = true; //启用搜索监控\r\n+    [SerializeField] private float monitoringInterval = 1f; //监控间隔\r\n+    [SerializeField] private bool logSearchData = false; //记录搜索数据\r\n+    [SerializeField] private int totalSearches = 0; //总搜索次数\r\n+    [SerializeField] private float averageSearchTime = 0f; //平均搜索时间\r\n+    [SerializeField] private int indexedItems = 0; //已索引项目数\r\n+    \r\n+    [Header(\"搜索状态\")]\r\n+    [SerializeField] private string searchServiceState = \"未初始化\"; //搜索服务状态\r\n+    [SerializeField] private string currentSearchStatus = \"空闲\"; //当前搜索状态\r\n+    [SerializeField] private int lastSearchResults = 0; //上次搜索结果数\r\n+    [SerializeField] private float lastSearchTime = 0f; //上次搜索时间\r\n+    [SerializeField] private string lastSearchQuery = \"\"; //上次搜索查询\r\n+    \r\n+    [Header(\"性能数据\")]\r\n+    [SerializeField] private float[] searchTimeHistory = new float[100]; //搜索时间历史\r\n+    [SerializeField] private int searchTimeIndex = 0; //搜索时间索引\r\n+    [SerializeField] private float[] resultCountHistory = new float[100]; //结果数量历史\r\n+    [SerializeField] private int resultCountIndex = 0; //结果数量索引\r\n+    \r\n+    private SearchService searchService;\r\n+    private SearchIndex searchIndex;\r\n+    private System.Collections.Generic.List<SearchItem> searchItems = new System.Collections.Generic.List<SearchItem>();\r\n+    private System.Collections.Generic.List<SearchResult> lastResults = new System.Collections.Generic.List<SearchResult>();\r\n+    private float lastIndexUpdateTime = 0f;\r\n+    private float lastMonitoringTime = 0f;\r\n+    private bool isInitialized = false;\r\n+\r\n+    private void Start()\r\n+    {\r\n+        InitializeSearchService();\r\n+    }\r\n+\r\n+    /// <summary>\r\n+    /// 初始化搜索服务\r\n+    /// </summary>\r\n+    private void InitializeSearchService()\r\n+    {\r\n+        // 创建搜索服务\r\n+        searchService = new SearchService();\r\n+        \r\n+        // 初始化搜索索引\r\n+        InitializeSearchIndex();\r\n+        \r\n+        // 初始化搜索项目\r\n+        InitializeSearchItems();\r\n+        \r\n+        // 初始化性能监控\r\n+        InitializePerformanceMonitoring();\r\n+        \r\n+        // 配置搜索服务\r\n+        ConfigureSearchService();\r\n+        \r\n+        isInitialized = true;\r\n+        searchServiceState = \"已初始化\";\r\n+        Debug.Log(\"搜索服务初始化完成\");\r\n+    }\r\n+\r\n+    /// <summary>\r\n+    /// 初始化搜索索引\r\n+    /// </summary>\r\n+    private void InitializeSearchIndex()\r\n+    {\r\n+        searchIndex = new SearchIndex();\r\n+        searchIndex.MaxSize = maxIndexSize;\r\n+        searchIndex.EnableIncrementalIndexing = enableIncrementalIndexing;\r\n+        \r\n+        Debug.Log($\"搜索索引初始化完成: 最大大小={maxIndexSize}\");\r\n+    }\r\n+\r\n+    /// <summary>\r\n+    /// 初始化搜索项目\r\n+    /// </summary>\r\n+    private void InitializeSearchItems()\r\n+    {\r\n+        // 创建示例搜索项目\r\n+        CreateSampleSearchItems();\r\n+        \r\n+        // 构建初始索引\r\n+        if (enableIndexing)\r\n+        {\r\n+            BuildSearchIndex();\r\n+        }\r\n+        \r\n+        Debug.Log($\"搜索项目初始化完成: 项目数={searchItems.Count}\");\r\n+    }\r\n+\r\n+    /// <summary>\r\n+    /// 创建示例搜索项目\r\n+    /// </summary>\r\n+    private void CreateSampleSearchItems()\r\n+    {\r\n+        // 创建游戏对象搜索项目\r\n+        for (int i = 0; i < 100; i++)\r\n+        {\r\n+            var item = new SearchItem\r\n+            {\r\n+                id = $\"GameObject_{i}\",\r\n+                name = $\"GameObject {i}\",\r\n+                type = \"GameObject\",\r\n+                tags = new string[] { \"object\", \"game\", \"unity\" },\r\n+                properties = new System.Collections.Generic.Dictionary<string, string>\r\n+                {\r\n+                    { \"position\", $\"({Random.Range(-10f, 10f)}, {Random.Range(-10f, 10f)}, {Random.Range(-10f, 10f)})\" },\r\n+                    { \"scale\", $\"({Random.Range(0.1f, 2f)}, {Random.Range(0.1f, 2f)}, {Random.Range(0.1f, 2f)})\" },\r\n+                    { \"active\", Random.value > 0.5f ? \"true\" : \"false\" }\r\n+                },\r\n+                content = $\"This is GameObject {i} with some sample content for searching.\"\r\n+            };\r\n+            searchItems.Add(item);\r\n+        }\r\n+        \r\n+        // 创建脚本搜索项目\r\n+        for (int i = 0; i < 50; i++)\r\n+        {\r\n+            var item = new SearchItem\r\n+            {\r\n+                id = $\"Script_{i}\",\r\n+                name = $\"Script {i}\",\r\n+                type = \"Script\",\r\n+                tags = new string[] { \"script\", \"code\", \"component\" },\r\n+                properties = new System.Collections.Generic.Dictionary<string, string>\r\n+                {\r\n+                    { \"language\", \"C#\" },\r\n+                    { \"lines\", Random.Range(10, 500).ToString() },\r\n+                    { \"complexity\", Random.Range(1, 10).ToString() }\r\n+                },\r\n+                content = $\"Script {i} contains various functions and methods for game logic.\"\r\n+            };\r\n+            searchItems.Add(item);\r\n+        }\r\n+        \r\n+        // 创建资源搜索项目\r\n+        for (int i = 0; i < 75; i++)\r\n+        {\r\n+            var item = new SearchItem\r\n+            {\r\n+                id = $\"Asset_{i}\",\r\n+                name = $\"Asset {i}\",\r\n+                type = \"Asset\",\r\n+                tags = new string[] { \"asset\", \"resource\", \"file\" },\r\n+                properties = new System.Collections.Generic.Dictionary<string, string>\r\n+                {\r\n+                    { \"size\", Random.Range(1, 1000).ToString() },\r\n+                    { \"format\", \"asset\" },\r\n+                    { \"path\", $\"Assets/Resources/Asset_{i}.asset\" }\r\n+                },\r\n+                content = $\"Asset {i} is a game resource that can be loaded at runtime.\"\r\n+            };\r\n+            searchItems.Add(item);\r\n+        }\r\n+        \r\n+        indexedItems = searchItems.Count;\r\n+    }\r\n+\r\n+    /// <summary>\r\n+    /// 构建搜索索引\r\n+    /// </summary>\r\n+    private void BuildSearchIndex()\r\n+    {\r\n+        float startTime = Time.realtimeSinceStartup;\r\n+        \r\n+        foreach (var item in searchItems)\r\n+        {\r\n+            searchIndex.AddItem(item);\r\n+        }\r\n+        \r\n+        searchIndex.Build();\r\n+        \r\n+        float buildTime = Time.realtimeSinceStartup - startTime;\r\n+        Debug.Log($\"搜索索引构建完成: 耗时={buildTime * 1000:F2}ms, 项目数={indexedItems}\");\r\n+    }\r\n+\r\n+    /// <summary>\r\n+    /// 初始化性能监控\r\n+    /// </summary>\r\n+    private void InitializePerformanceMonitoring()\r\n+    {\r\n+        if (enableSearchMonitoring)\r\n+        {\r\n+            searchTimeHistory = new float[100];\r\n+            resultCountHistory = new float[100];\r\n+            searchTimeIndex = 0;\r\n+            resultCountIndex = 0;\r\n+            \r\n+            Debug.Log(\"性能监控初始化完成\");\r\n+        }\r\n+    }\r\n+\r\n+    /// <summary>\r\n+    /// 配置搜索服务\r\n+    /// </summary>\r\n+    private void ConfigureSearchService()\r\n+    {\r\n+        searchService.EnableAsyncSearch = enableAsyncSearch;\r\n+        searchService.EnableQueryOptimization = enableQueryOptimization;\r\n+        searchService.EnableSearchProfiling = enableSearchProfiling;\r\n+        \r\n+        Debug.Log(\"搜索服务配置完成\");\r\n+    }\r\n+\r\n+    private void Update()\r\n+    {\r\n+        if (!isInitialized) return;\r\n+        \r\n+        // 更新索引\r\n+        if (enableAutoIndexing && Time.time - lastIndexUpdateTime > indexUpdateInterval)\r\n+        {\r\n+            UpdateSearchIndex();\r\n+            lastIndexUpdateTime = Time.time;\r\n+        }\r\n+        \r\n+        // 搜索监控\r\n+        if (enableSearchMonitoring && Time.time - lastMonitoringTime > monitoringInterval)\r\n+        {\r\n+            MonitorSearchPerformance();\r\n+            lastMonitoringTime = Time.time;\r\n+        }\r\n+    }\r\n+\r\n+    /// <summary>\r\n+    /// 更新搜索索引\r\n+    /// </summary>\r\n+    private void UpdateSearchIndex()\r\n+    {\r\n+        if (enableIncrementalIndexing)\r\n+        {\r\n+            // 增量更新索引\r\n+            searchIndex.Update();\r\n+        }\r\n+        else\r\n+        {\r\n+            // 完全重建索引\r\n+            searchIndex.Clear();\r\n+            BuildSearchIndex();\r\n+        }\r\n+        \r\n+        if (logSearchData)\r\n+        {\r\n+            Debug.Log(\"搜索索引已更新\");\r\n+        }\r\n+    }\r\n+\r\n+    /// <summary>\r\n+    /// 监控搜索性能\r\n+    /// </summary>\r\n+    private void MonitorSearchPerformance()\r\n+    {\r\n+        if (logSearchData)\r\n+        {\r\n+            Debug.Log($\"搜索性能监控: 总搜索={totalSearches}, 平均时间={averageSearchTime * 1000:F2}ms, 索引项目={indexedItems}\");\r\n+        }\r\n+    }\r\n+\r\n+    /// <summary>\r\n+    /// 执行搜索\r\n+    /// </summary>\r\n+    /// <param name=\"query\">搜索查询</param>\r\n+    public void ExecuteSearch(string query)\r\n+    {\r\n+        if (string.IsNullOrEmpty(query))\r\n+        {\r\n+            Debug.LogWarning(\"搜索查询不能为空\");\r\n+            return;\r\n+        }\r\n+        \r\n+        searchQuery = query;\r\n+        currentSearchStatus = \"搜索中...\";\r\n+        \r\n+        float startTime = Time.realtimeSinceStartup;\r\n+        \r\n+        try\r\n+        {\r\n+            // 创建搜索请求\r\n+            var searchRequest = new SearchRequest\r\n+            {\r\n+                Query = query,\r\n+                MaxResults = maxSearchResults,\r\n+                Timeout = searchTimeout,\r\n+                EnableFuzzySearch = enableFuzzySearch,\r\n+                EnableCaseSensitive = enableCaseSensitive,\r\n+                FuzzyThreshold = fuzzyThreshold,\r\n+                SearchTypes = GetEnabledSearchTypes()\r\n+            };\r\n+            \r\n+            // 执行搜索\r\n+            if (enableAsyncSearch)\r\n+            {\r\n+                StartCoroutine(ExecuteAsyncSearch(searchRequest));\r\n+            }\r\n+            else\r\n+            {\r\n+                ExecuteSyncSearch(searchRequest);\r\n+            }\r\n+        }\r\n+        catch (System.Exception e)\r\n+        {\r\n+            Debug.LogError($\"搜索执行失败: {e.Message}\");\r\n+            currentSearchStatus = \"搜索失败\";\r\n+        }\r\n+    }\r\n+\r\n+    /// <summary>\r\n+    /// 执行同步搜索\r\n+    /// </summary>\r\n+    private void ExecuteSyncSearch(SearchRequest request)\r\n+    {\r\n+        var results = searchService.Search(request);\r\n+        ProcessSearchResults(results);\r\n+    }\r\n+\r\n+    /// <summary>\r\n+    /// 执行异步搜索\r\n+    /// </summary>\r\n+    private System.Collections.IEnumerator ExecuteAsyncSearch(SearchRequest request)\r\n+    {\r\n+        var searchOperation = searchService.SearchAsync(request);\r\n+        \r\n+        while (!searchOperation.IsDone)\r\n+        {\r\n+            yield return null;\r\n+        }\r\n+        \r\n+        if (searchOperation.HasError)\r\n+        {\r\n+            Debug.LogError($\"异步搜索失败: {searchOperation.Error}\");\r\n+            currentSearchStatus = \"搜索失败\";\r\n+        }\r\n+        else\r\n+        {\r\n+            ProcessSearchResults(searchOperation.Results);\r\n+        }\r\n+    }\r\n+\r\n+    /// <summary>\r\n+    /// 处理搜索结果\r\n+    /// </summary>\r\n+    private void ProcessSearchResults(SearchResult[] results)\r\n+    {\r\n+        lastResults.Clear();\r\n+        lastResults.AddRange(results);\r\n+        \r\n+        lastSearchResults = results.Length;\r\n+        lastSearchTime = Time.realtimeSinceStartup;\r\n+        lastSearchQuery = searchQuery;\r\n+        totalSearches++;\r\n+        \r\n+        // 更新性能数据\r\n+        UpdatePerformanceData();\r\n+        \r\n+        currentSearchStatus = $\"搜索完成 ({results.Length} 个结果)\";\r\n+        \r\n+        Debug.Log($\"搜索完成: 查询='{searchQuery}', 结果数={results.Length}\");\r\n+    }\r\n+\r\n+    /// <summary>\r\n+    /// 更新性能数据\r\n+    /// </summary>\r\n+    private void UpdatePerformanceData()\r\n+    {\r\n+        // 更新搜索时间历史\r\n+        searchTimeHistory[searchTimeIndex] = lastSearchTime;\r\n+        searchTimeIndex = (searchTimeIndex + 1) % 100;\r\n+        \r\n+        // 更新结果数量历史\r\n+        resultCountHistory[resultCountIndex] = lastSearchResults;\r\n+        resultCountIndex = (resultCountIndex + 1) % 100;\r\n+        \r\n+        // 计算平均搜索时间\r\n+        float totalTime = 0f;\r\n+        for (int i = 0; i < 100; i++)\r\n+        {\r\n+            totalTime += searchTimeHistory[i];\r\n+        }\r\n+        averageSearchTime = totalTime / 100;\r\n+    }\r\n+\r\n+    /// <summary>\r\n+    /// 获取启用的搜索类型\r\n+    /// </summary>\r\n+    private SearchType GetEnabledSearchTypes()\r\n+    {\r\n+        SearchType types = SearchType.None;\r\n+        \r\n+        if (enableTextSearch) types |= SearchType.Text;\r\n+        if (enableTagSearch) types |= SearchType.Tag;\r\n+        if (enableTypeSearch) types |= SearchType.Type;\r\n+        if (enablePropertySearch) types |= SearchType.Property;\r\n+        if (enableHierarchySearch) types |= SearchType.Hierarchy;\r\n+        \r\n+        return types;\r\n+    }\r\n+\r\n+    /// <summary>\r\n+    /// 添加搜索项目\r\n+    /// </summary>\r\n+    /// <param name=\"item\">搜索项目</param>\r\n+    public void AddSearchItem(SearchItem item)\r\n+    {\r\n+        searchItems.Add(item);\r\n+        indexedItems++;\r\n+        \r\n+        if (enableIndexing)\r\n+        {\r\n+            searchIndex.AddItem(item);\r\n+        }\r\n+        \r\n+        Debug.Log($\"搜索项目已添加: {item.name}\");\r\n+    }\r\n+\r\n+    /// <summary>\r\n+    /// 移除搜索项目\r\n+    /// </summary>\r\n+    /// <param name=\"itemId\">项目ID</param>\r\n+    public void RemoveSearchItem(string itemId)\r\n+    {\r\n+        for (int i = searchItems.Count - 1; i >= 0; i--)\r\n+        {\r\n+            if (searchItems[i].id == itemId)\r\n+            {\r\n+                searchItems.RemoveAt(i);\r\n+                indexedItems--;\r\n+                \r\n+                if (enableIndexing)\r\n+                {\r\n+                    searchIndex.RemoveItem(itemId);\r\n+                }\r\n+                \r\n+                Debug.Log($\"搜索项目已移除: {itemId}\");\r\n+                break;\r\n+            }\r\n+        }\r\n+    }\r\n+\r\n+    /// <summary>\r\n+    /// 重建搜索索引\r\n+    /// </summary>\r\n+    public void RebuildSearchIndex()\r\n+    {\r\n+        Debug.Log(\"开始重建搜索索引...\");\r\n+        \r\n+        searchIndex.Clear();\r\n+        BuildSearchIndex();\r\n+        \r\n+        Debug.Log(\"搜索索引重建完成\");\r\n+    }\r\n+\r\n+    /// <summary>\r\n+    /// 优化搜索索引\r\n+    /// </summary>\r\n+    public void OptimizeSearchIndex()\r\n+    {\r\n+        Debug.Log(\"开始优化搜索索引...\");\r\n+        \r\n+        searchIndex.Optimize();\r\n+        \r\n+        Debug.Log(\"搜索索引优化完成\");\r\n+    }\r\n+\r\n+    /// <summary>\r\n+    /// 生成搜索报告\r\n+    /// </summary>\r\n+    public void GenerateSearchReport()\r\n+    {\r\n+        Debug.Log(\"=== 搜索服务报告 ===\");\r\n+        Debug.Log($\"搜索服务状态: {searchServiceState}\");\r\n+        Debug.Log($\"当前搜索状态: {currentSearchStatus}\");\r\n+        Debug.Log($\"总搜索次数: {totalSearches}\");\r\n+        Debug.Log($\"平均搜索时间: {averageSearchTime * 1000:F2}ms\");\r\n+        Debug.Log($\"已索引项目数: {indexedItems}\");\r\n+        Debug.Log($\"上次搜索查询: {lastSearchQuery}\");\r\n+        Debug.Log($\"上次搜索结果数: {lastSearchResults}\");\r\n+        Debug.Log($\"上次搜索时间: {lastSearchTime * 1000:F2}ms\");\r\n+        Debug.Log($\"索引大小: {searchIndex.Size}\");\r\n+        Debug.Log($\"索引内存使用: {searchIndex.MemoryUsage / 1024:F1}KB\");\r\n+    }\r\n+\r\n+    /// <summary>\r\n+    /// 导出搜索数据\r\n+    /// </summary>\r\n+    public void ExportSearchData()\r\n+    {\r\n+        var data = new SearchServiceData\r\n+        {\r\n+            timestamp = System.DateTime.Now.ToString(),\r\n+            searchServiceState = searchServiceState,\r\n+            currentSearchStatus = currentSearchStatus,\r\n+            totalSearches = totalSearches,\r\n+            averageSearchTime = averageSearchTime,\r\n+            indexedItems = indexedItems,\r\n+            lastSearchQuery = lastSearchQuery,\r\n+            lastSearchResults = lastSearchResults,\r\n+            lastSearchTime = lastSearchTime,\r\n+            searchTimeHistory = searchTimeHistory,\r\n+            resultCountHistory = resultCountHistory\r\n+        };\r\n+        \r\n+        string json = JsonUtility.ToJson(data, true);\r\n+        string filename = $\"searchservice_{System.DateTime.Now:yyyyMMdd_HHmmss}.json\";\r\n+        \r\n+        System.IO.File.WriteAllText(filename, json);\r\n+        Debug.Log($\"搜索数据已导出: {filename}\");\r\n+    }\r\n+\r\n+    private void OnGUI()\r\n+    {\r\n+        GUILayout.BeginArea(new Rect(10, 10, 400, 800));\r\n+        GUILayout.Label(\"SearchService 搜索服务演示\", UnityEditor.EditorStyles.boldLabel);\r\n+        \r\n+        GUILayout.Space(10);\r\n+        GUILayout.Label(\"搜索服务配置:\");\r\n+        enableSearchService = GUILayout.Toggle(enableSearchService, \"启用搜索服务\");\r\n+        enableIndexing = GUILayout.Toggle(enableIndexing, \"启用索引\");\r\n+        enableQueryOptimization = GUILayout.Toggle(enableQueryOptimization, \"启用查询优化\");\r\n+        enableSearchProfiling = GUILayout.Toggle(enableSearchProfiling, \"启用搜索分析\");\r\n+        enableAsyncSearch = GUILayout.Toggle(enableAsyncSearch, \"启用异步搜索\");\r\n+        \r\n+        GUILayout.Space(10);\r\n+        GUILayout.Label(\"索引配置:\");\r\n+        maxIndexSize = int.TryParse(GUILayout.TextField(\"最大索引大小\", maxIndexSize.ToString()), out var indexSize) ? indexSize : maxIndexSize;\r\n+        indexUpdateInterval = float.TryParse(GUILayout.TextField(\"索引更新间隔\", indexUpdateInterval.ToString()), out var updateInterval) ? updateInterval : indexUpdateInterval;\r\n+        enableAutoIndexing = GUILayout.Toggle(enableAutoIndexing, \"启用自动索引\");\r\n+        enableIncrementalIndexing = GUILayout.Toggle(enableIncrementalIndexing, \"启用增量索引\");\r\n+        \r\n+        GUILayout.Space(10);\r\n+        GUILayout.Label(\"搜索参数:\");\r\n+        searchQuery = GUILayout.TextField(\"搜索查询\", searchQuery);\r\n+        maxSearchResults = int.TryParse(GUILayout.TextField(\"最大搜索结果数\", maxSearchResults.ToString()), out var maxResults) ? maxResults : maxSearchResults;\r\n+        searchTimeout = float.TryParse(GUILayout.TextField(\"搜索超时时间\", searchTimeout.ToString()), out var timeout) ? timeout : searchTimeout;\r\n+        enableFuzzySearch = GUILayout.Toggle(enableFuzzySearch, \"启用模糊搜索\");\r\n+        enableCaseSensitive = GUILayout.Toggle(enableCaseSensitive, \"启用大小写敏感\");\r\n+        fuzzyThreshold = float.TryParse(GUILayout.TextField(\"模糊阈值\", fuzzyThreshold.ToString()), out var threshold) ? threshold : fuzzyThreshold;\r\n+        \r\n+        GUILayout.Space(10);\r\n+        GUILayout.Label(\"搜索类型:\");\r\n+        enableTextSearch = GUILayout.Toggle(enableTextSearch, \"启用文本搜索\");\r\n+        enableTagSearch = GUILayout.Toggle(enableTagSearch, \"启用标签搜索\");\r\n+        enableTypeSearch = GUILayout.Toggle(enableTypeSearch, \"启用类型搜索\");\r\n+        enablePropertySearch = GUILayout.Toggle(enablePropertySearch, \"启用属性搜索\");\r\n+        enableHierarchySearch = GUILayout.Toggle(enableHierarchySearch, \"启用层级搜索\");\r\n+        \r\n+        GUILayout.Space(10);\r\n+        GUILayout.Label(\"搜索状态:\");\r\n+        GUILayout.Label($\"服务状态: {searchServiceState}\");\r\n+        GUILayout.Label($\"搜索状态: {currentSearchStatus}\");\r\n+        GUILayout.Label($\"总搜索次数: {totalSearches}\");\r\n+        GUILayout.Label($\"平均搜索时间: {averageSearchTime * 1000:F2}ms\");\r\n+        GUILayout.Label($\"已索引项目数: {indexedItems}\");\r\n+        GUILayout.Label($\"上次搜索结果: {lastSearchResults}\");\r\n+        \r\n+        GUILayout.Space(10);\r\n+        \r\n+        if (GUILayout.Button(\"执行搜索\"))\r\n+        {\r\n+            ExecuteSearch(searchQuery);\r\n+        }\r\n+        \r\n+        if (GUILayout.Button(\"重建搜索索引\"))\r\n+        {\r\n+            RebuildSearchIndex();\r\n+        }\r\n+        \r\n+        if (GUILayout.Button(\"优化搜索索引\"))\r\n+        {\r\n+            OptimizeSearchIndex();\r\n+        }\r\n+        \r\n+        if (GUILayout.Button(\"生成搜索报告\"))\r\n+        {\r\n+            GenerateSearchReport();\r\n+        }\r\n+        \r\n+        if (GUILayout.Button(\"导出搜索数据\"))\r\n+        {\r\n+            ExportSearchData();\r\n+        }\r\n+        \r\n+        GUILayout.EndArea();\r\n+    }\r\n+}\r\n+\r\n+/// <summary>\r\n+/// 搜索项目\r\n+/// </summary>\r\n+[System.Serializable]\r\n+public class SearchItem\r\n+{\r\n+    public string id;\r\n+    public string name;\r\n+    public string type;\r\n+    public string[] tags;\r\n+    public System.Collections.Generic.Dictionary<string, string> properties;\r\n+    public string content;\r\n+}\r\n+\r\n+/// <summary>\r\n+/// 搜索结果\r\n+/// </summary>\r\n+[System.Serializable]\r\n+public class SearchResult\r\n+{\r\n+    public string id;\r\n+    public string name;\r\n+    public string type;\r\n+    public float relevance;\r\n+    public string[] matchedFields;\r\n+}\r\n+\r\n+/// <summary>\r\n+/// 搜索请求\r\n+/// </summary>\r\n+[System.Serializable]\r\n+public class SearchRequest\r\n+{\r\n+    public string Query;\r\n+    public int MaxResults;\r\n+    public float Timeout;\r\n+    public bool EnableFuzzySearch;\r\n+    public bool EnableCaseSensitive;\r\n+    public float FuzzyThreshold;\r\n+    public SearchType SearchTypes;\r\n+}\r\n+\r\n+/// <summary>\r\n+/// 搜索类型\r\n+/// </summary>\r\n+[System.Flags]\r\n+public enum SearchType\r\n+{\r\n+    None = 0,\r\n+    Text = 1 << 0,\r\n+    Tag = 1 << 1,\r\n+    Type = 1 << 2,\r\n+    Property = 1 << 3,\r\n+    Hierarchy = 1 << 4\r\n+}\r\n+\r\n+/// <summary>\r\n+/// 搜索服务\r\n+/// </summary>\r\n+public class SearchService\r\n+{\r\n+    public bool EnableAsyncSearch { get; set; }\r\n+    public bool EnableQueryOptimization { get; set; }\r\n+    public bool EnableSearchProfiling { get; set; }\r\n+    \r\n+    public SearchResult[] Search(SearchRequest request)\r\n+    {\r\n+        // 模拟搜索实现\r\n+        return new SearchResult[0];\r\n+    }\r\n+    \r\n+    public SearchOperation SearchAsync(SearchRequest request)\r\n+    {\r\n+        // 模拟异步搜索实现\r\n+        return new SearchOperation();\r\n+    }\r\n+}\r\n+\r\n+/// <summary>\r\n+/// 搜索操作\r\n+/// </summary>\r\n+public class SearchOperation\r\n+{\r\n+    public bool IsDone { get; set; }\r\n+    public bool HasError { get; set; }\r\n+    public string Error { get; set; }\r\n+    public SearchResult[] Results { get; set; }\r\n+}\r\n+\r\n+/// <summary>\r\n+/// 搜索索引\r\n+/// </summary>\r\n+public class SearchIndex\r\n+{\r\n+    public int MaxSize { get; set; }\r\n+    public bool EnableIncrementalIndexing { get; set; }\r\n+    public int Size { get; set; }\r\n+    public long MemoryUsage { get; set; }\r\n+    \r\n+    public void AddItem(SearchItem item) { }\r\n+    public void RemoveItem(string itemId) { }\r\n+    public void Build() { }\r\n+    public void Update() { }\r\n+    public void Clear() { }\r\n+    public void Optimize() { }\r\n+}\r\n+\r\n+/// <summary>\r\n+/// 搜索服务数据类\r\n+/// </summary>\r\n+[System.Serializable]\r\n+public class SearchServiceData\r\n+{\r\n+    public string timestamp;\r\n+    public string searchServiceState;\r\n+    public string currentSearchStatus;\r\n+    public int totalSearches;\r\n+    public float averageSearchTime;\r\n+    public int indexedItems;\r\n+    public string lastSearchQuery;\r\n+    public int lastSearchResults;\r\n+    public float lastSearchTime;\r\n+    public float[] searchTimeHistory;\r\n+    public float[] resultCountHistory;\r\n+}\n\\ No newline at end of file\n"
                }
            ],
            "date": 1750935796673,
            "name": "Commit-0",
            "content": " "
        }
    ]
}