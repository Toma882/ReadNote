{
    "sourceFile": "Assets/UnityEditor/Chapter 8 UnityAPI/UnityEngine/Events/EventsExample.cs",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1750931477304,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1750931477304,
            "name": "Commit-0",
            "content": "using UnityEngine;\r\nusing UnityEngine.Events;\r\nusing System.Collections.Generic;\r\n\r\n/// <summary>\r\n/// UnityEngine.Events 命名空间案例演示\r\n/// 展示事件系统的核心功能\r\n/// </summary>\r\npublic class EventsExample : MonoBehaviour\r\n{\r\n    [Header(\"事件系统设置\")]\r\n    [SerializeField] private bool enableEventSystem = true;\r\n    [SerializeField] private bool enableDebugLog = true;\r\n    [SerializeField] private int maxEventListeners = 100;\r\n    \r\n    [Header(\"UnityEvent示例\")]\r\n    [SerializeField] private UnityEvent onStartEvent;\r\n    [SerializeField] private UnityEvent onUpdateEvent;\r\n    [SerializeField] private UnityEvent onDestroyEvent;\r\n    [SerializeField] private UnityEvent<string> onMessageEvent;\r\n    [SerializeField] private UnityEvent<int> onNumberEvent;\r\n    [SerializeField] private UnityEvent<float> onFloatEvent;\r\n    [SerializeField] private UnityEvent<Vector3> onVector3Event;\r\n    [SerializeField] private UnityEvent<GameObject> onGameObjectEvent;\r\n    \r\n    [Header(\"自定义事件\")]\r\n    [SerializeField] private CustomEvent onCustomEvent;\r\n    [SerializeField] private PlayerEvent onPlayerEvent;\r\n    [SerializeField] private ScoreEvent onScoreEvent;\r\n    [SerializeField] private DamageEvent onDamageEvent;\r\n    \r\n    [Header(\"事件状态\")]\r\n    [SerializeField] private bool isEventSystemActive = false;\r\n    [SerializeField] private int totalEventCount = 0;\r\n    [SerializeField] private int activeEventCount = 0;\r\n    [SerializeField] private List<string> eventHistory = new List<string>();\r\n    \r\n    [Header(\"事件参数\")]\r\n    [SerializeField] private string messageText = \"Hello World\";\r\n    [SerializeField] private int numberValue = 42;\r\n    [SerializeField] private float floatValue = 3.14f;\r\n    [SerializeField] private Vector3 vectorValue = Vector3.one;\r\n    \r\n    // 事件系统\r\n    private EventSystem eventSystem;\r\n    private List<UnityEventBase> registeredEvents = new List<UnityEventBase>();\r\n    \r\n    // 事件回调\r\n    private System.Action<string> onEventTriggered;\r\n    private System.Action<UnityEventBase> onEventRegistered;\r\n    private System.Action<UnityEventBase> onEventUnregistered;\r\n    \r\n    // 自定义事件类\r\n    [System.Serializable]\r\n    public class CustomEvent : UnityEvent<string, int>\r\n    {\r\n    }\r\n    \r\n    [System.Serializable]\r\n    public class PlayerEvent : UnityEvent<GameObject, string>\r\n    {\r\n    }\r\n    \r\n    [System.Serializable]\r\n    public class ScoreEvent : UnityEvent<int, int> // currentScore, previousScore\r\n    {\r\n    }\r\n    \r\n    [System.Serializable]\r\n    public class DamageEvent : UnityEvent<GameObject, float, Vector3> // target, damage, hitPoint\r\n    {\r\n    }\r\n    \r\n    private void Start()\r\n    {\r\n        InitializeEventSystem();\r\n    }\r\n    \r\n    /// <summary>\r\n    /// 初始化事件系统\r\n    /// </summary>\r\n    private void InitializeEventSystem()\r\n    {\r\n        // 获取或创建事件系统\r\n        eventSystem = FindObjectOfType<EventSystem>();\r\n        if (eventSystem == null)\r\n        {\r\n            GameObject eventSystemObj = new GameObject(\"EventSystem\");\r\n            eventSystem = eventSystemObj.AddComponent<EventSystem>();\r\n            eventSystemObj.AddComponent<StandaloneInputModule>();\r\n        }\r\n        \r\n        // 初始化UnityEvent\r\n        InitializeUnityEvents();\r\n        \r\n        // 注册事件监听器\r\n        RegisterEventListeners();\r\n        \r\n        // 触发开始事件\r\n        TriggerStartEvent();\r\n        \r\n        isEventSystemActive = true;\r\n        Debug.Log(\"事件系统初始化完成\");\r\n    }\r\n    \r\n    /// <summary>\r\n    /// 初始化UnityEvent\r\n    /// </summary>\r\n    private void InitializeUnityEvents()\r\n    {\r\n        // 初始化基本事件\r\n        if (onStartEvent == null) onStartEvent = new UnityEvent();\r\n        if (onUpdateEvent == null) onUpdateEvent = new UnityEvent();\r\n        if (onDestroyEvent == null) onDestroyEvent = new UnityEvent();\r\n        \r\n        // 初始化带参数的事件\r\n        if (onMessageEvent == null) onMessageEvent = new UnityEvent<string>();\r\n        if (onNumberEvent == null) onNumberEvent = new UnityEvent<int>();\r\n        if (onFloatEvent == null) onFloatEvent = new UnityEvent<float>();\r\n        if (onVector3Event == null) onVector3Event = new UnityEvent<Vector3>();\r\n        if (onGameObjectEvent == null) onGameObjectEvent = new UnityEvent<GameObject>();\r\n        \r\n        // 初始化自定义事件\r\n        if (onCustomEvent == null) onCustomEvent = new CustomEvent();\r\n        if (onPlayerEvent == null) onPlayerEvent = new PlayerEvent();\r\n        if (onScoreEvent == null) onScoreEvent = new ScoreEvent();\r\n        if (onDamageEvent == null) onDamageEvent = new DamageEvent();\r\n        \r\n        // 添加到注册列表\r\n        registeredEvents.Add(onStartEvent);\r\n        registeredEvents.Add(onUpdateEvent);\r\n        registeredEvents.Add(onDestroyEvent);\r\n        registeredEvents.Add(onMessageEvent);\r\n        registeredEvents.Add(onNumberEvent);\r\n        registeredEvents.Add(onFloatEvent);\r\n        registeredEvents.Add(onVector3Event);\r\n        registeredEvents.Add(onGameObjectEvent);\r\n        registeredEvents.Add(onCustomEvent);\r\n        registeredEvents.Add(onPlayerEvent);\r\n        registeredEvents.Add(onScoreEvent);\r\n        registeredEvents.Add(onDamageEvent);\r\n        \r\n        totalEventCount = registeredEvents.Count;\r\n        activeEventCount = 0;\r\n    }\r\n    \r\n    /// <summary>\r\n    /// 注册事件监听器\r\n    /// </summary>\r\n    private void RegisterEventListeners()\r\n    {\r\n        // 注册基本事件监听器\r\n        onStartEvent.AddListener(OnStartEventHandler);\r\n        onUpdateEvent.AddListener(OnUpdateEventHandler);\r\n        onDestroyEvent.AddListener(OnDestroyEventHandler);\r\n        \r\n        // 注册带参数的事件监听器\r\n        onMessageEvent.AddListener(OnMessageEventHandler);\r\n        onNumberEvent.AddListener(OnNumberEventHandler);\r\n        onFloatEvent.AddListener(OnFloatEventHandler);\r\n        onVector3Event.AddListener(OnVector3EventHandler);\r\n        onGameObjectEvent.AddListener(OnGameObjectEventHandler);\r\n        \r\n        // 注册自定义事件监听器\r\n        onCustomEvent.AddListener(OnCustomEventHandler);\r\n        onPlayerEvent.AddListener(OnPlayerEventHandler);\r\n        onScoreEvent.AddListener(OnScoreEventHandler);\r\n        onDamageEvent.AddListener(OnDamageEventHandler);\r\n        \r\n        activeEventCount = registeredEvents.Count;\r\n        \r\n        Debug.Log($\"注册了 {activeEventCount} 个事件监听器\");\r\n    }\r\n    \r\n    /// <summary>\r\n    /// 触发开始事件\r\n    /// </summary>\r\n    private void TriggerStartEvent()\r\n    {\r\n        if (onStartEvent != null)\r\n        {\r\n            onStartEvent.Invoke();\r\n            LogEvent(\"StartEvent\");\r\n        }\r\n    }\r\n    \r\n    /// <summary>\r\n    /// 触发消息事件\r\n    /// </summary>\r\n    /// <param name=\"message\">消息内容</param>\r\n    public void TriggerMessageEvent(string message)\r\n    {\r\n        if (onMessageEvent != null)\r\n        {\r\n            onMessageEvent.Invoke(message);\r\n            LogEvent($\"MessageEvent: {message}\");\r\n        }\r\n    }\r\n    \r\n    /// <summary>\r\n    /// 触发数字事件\r\n    /// </summary>\r\n    /// <param name=\"number\">数字值</param>\r\n    public void TriggerNumberEvent(int number)\r\n    {\r\n        if (onNumberEvent != null)\r\n        {\r\n            onNumberEvent.Invoke(number);\r\n            LogEvent($\"NumberEvent: {number}\");\r\n        }\r\n    }\r\n    \r\n    /// <summary>\r\n    /// 触发浮点数事件\r\n    /// </summary>\r\n    /// <param name=\"value\">浮点数值</param>\r\n    public void TriggerFloatEvent(float value)\r\n    {\r\n        if (onFloatEvent != null)\r\n        {\r\n            onFloatEvent.Invoke(value);\r\n            LogEvent($\"FloatEvent: {value}\");\r\n        }\r\n    }\r\n    \r\n    /// <summary>\r\n    /// 触发Vector3事件\r\n    /// </summary>\r\n    /// <param name=\"vector\">向量值</param>\r\n    public void TriggerVector3Event(Vector3 vector)\r\n    {\r\n        if (onVector3Event != null)\r\n        {\r\n            onVector3Event.Invoke(vector);\r\n            LogEvent($\"Vector3Event: {vector}\");\r\n        }\r\n    }\r\n    \r\n    /// <summary>\r\n    /// 触发GameObject事件\r\n    /// </summary>\r\n    /// <param name=\"gameObject\">游戏对象</param>\r\n    public void TriggerGameObjectEvent(GameObject gameObject)\r\n    {\r\n        if (onGameObjectEvent != null)\r\n        {\r\n            onGameObjectEvent.Invoke(gameObject);\r\n            LogEvent($\"GameObjectEvent: {gameObject.name}\");\r\n        }\r\n    }\r\n    \r\n    /// <summary>\r\n    /// 触发自定义事件\r\n    /// </summary>\r\n    /// <param name=\"message\">消息</param>\r\n    /// <param name=\"number\">数字</param>\r\n    public void TriggerCustomEvent(string message, int number)\r\n    {\r\n        if (onCustomEvent != null)\r\n        {\r\n            onCustomEvent.Invoke(message, number);\r\n            LogEvent($\"CustomEvent: {message}, {number}\");\r\n        }\r\n    }\r\n    \r\n    /// <summary>\r\n    /// 触发玩家事件\r\n    /// </summary>\r\n    /// <param name=\"player\">玩家对象</param>\r\n    /// <param name=\"action\">动作</param>\r\n    public void TriggerPlayerEvent(GameObject player, string action)\r\n    {\r\n        if (onPlayerEvent != null)\r\n        {\r\n            onPlayerEvent.Invoke(player, action);\r\n            LogEvent($\"PlayerEvent: {player.name}, {action}\");\r\n        }\r\n    }\r\n    \r\n    /// <summary>\r\n    /// 触发分数事件\r\n    /// </summary>\r\n    /// <param name=\"currentScore\">当前分数</param>\r\n    /// <param name=\"previousScore\">之前分数</param>\r\n    public void TriggerScoreEvent(int currentScore, int previousScore)\r\n    {\r\n        if (onScoreEvent != null)\r\n        {\r\n            onScoreEvent.Invoke(currentScore, previousScore);\r\n            LogEvent($\"ScoreEvent: {currentScore} (was {previousScore})\");\r\n        }\r\n    }\r\n    \r\n    /// <summary>\r\n    /// 触发伤害事件\r\n    /// </summary>\r\n    /// <param name=\"target\">目标</param>\r\n    /// <param name=\"damage\">伤害值</param>\r\n    /// <param name=\"hitPoint\">击中点</param>\r\n    public void TriggerDamageEvent(GameObject target, float damage, Vector3 hitPoint)\r\n    {\r\n        if (onDamageEvent != null)\r\n        {\r\n            onDamageEvent.Invoke(target, damage, hitPoint);\r\n            LogEvent($\"DamageEvent: {target.name}, {damage} damage at {hitPoint}\");\r\n        }\r\n    }\r\n    \r\n    /// <summary>\r\n    /// 添加事件监听器\r\n    /// </summary>\r\n    /// <param name=\"eventType\">事件类型</param>\r\n    /// <param name=\"listener\">监听器</param>\r\n    public void AddEventListener(string eventType, UnityAction listener)\r\n    {\r\n        switch (eventType.ToLower())\r\n        {\r\n            case \"start\":\r\n                onStartEvent.AddListener(listener);\r\n                break;\r\n            case \"update\":\r\n                onUpdateEvent.AddListener(listener);\r\n                break;\r\n            case \"destroy\":\r\n                onDestroyEvent.AddListener(listener);\r\n                break;\r\n            default:\r\n                Debug.LogWarning($\"未知的事件类型: {eventType}\");\r\n                break;\r\n        }\r\n        \r\n        Debug.Log($\"添加事件监听器: {eventType}\");\r\n    }\r\n    \r\n    /// <summary>\r\n    /// 移除事件监听器\r\n    /// </summary>\r\n    /// <param name=\"eventType\">事件类型</param>\r\n    /// <param name=\"listener\">监听器</param>\r\n    public void RemoveEventListener(string eventType, UnityAction listener)\r\n    {\r\n        switch (eventType.ToLower())\r\n        {\r\n            case \"start\":\r\n                onStartEvent.RemoveListener(listener);\r\n                break;\r\n            case \"update\":\r\n                onUpdateEvent.RemoveListener(listener);\r\n                break;\r\n            case \"destroy\":\r\n                onDestroyEvent.RemoveListener(listener);\r\n                break;\r\n            default:\r\n                Debug.LogWarning($\"未知的事件类型: {eventType}\");\r\n                break;\r\n        }\r\n        \r\n        Debug.Log($\"移除事件监听器: {eventType}\");\r\n    }\r\n    \r\n    /// <summary>\r\n    /// 清除所有事件监听器\r\n    /// </summary>\r\n    public void ClearAllEventListeners()\r\n    {\r\n        foreach (var unityEvent in registeredEvents)\r\n        {\r\n            if (unityEvent != null)\r\n            {\r\n                unityEvent.RemoveAllListeners();\r\n            }\r\n        }\r\n        \r\n        Debug.Log(\"所有事件监听器已清除\");\r\n    }\r\n    \r\n    /// <summary>\r\n    /// 获取事件监听器数量\r\n    /// </summary>\r\n    /// <param name=\"eventType\">事件类型</param>\r\n    /// <returns>监听器数量</returns>\r\n    public int GetEventListenerCount(string eventType)\r\n    {\r\n        switch (eventType.ToLower())\r\n        {\r\n            case \"start\":\r\n                return onStartEvent.GetPersistentEventCount();\r\n            case \"update\":\r\n                return onUpdateEvent.GetPersistentEventCount();\r\n            case \"destroy\":\r\n                return onDestroyEvent.GetPersistentEventCount();\r\n            case \"message\":\r\n                return onMessageEvent.GetPersistentEventCount();\r\n            case \"number\":\r\n                return onNumberEvent.GetPersistentEventCount();\r\n            case \"float\":\r\n                return onFloatEvent.GetPersistentEventCount();\r\n            case \"vector3\":\r\n                return onVector3Event.GetPersistentEventCount();\r\n            case \"gameobject\":\r\n                return onGameObjectEvent.GetPersistentEventCount();\r\n            default:\r\n                Debug.LogWarning($\"未知的事件类型: {eventType}\");\r\n                return 0;\r\n        }\r\n    }\r\n    \r\n    /// <summary>\r\n    /// 记录事件\r\n    /// </summary>\r\n    /// <param name=\"eventName\">事件名称</param>\r\n    private void LogEvent(string eventName)\r\n    {\r\n        if (enableDebugLog)\r\n        {\r\n            Debug.Log($\"事件触发: {eventName}\");\r\n        }\r\n        \r\n        // 添加到事件历史\r\n        eventHistory.Add($\"{System.DateTime.Now:HH:mm:ss} - {eventName}\");\r\n        \r\n        // 限制历史记录数量\r\n        if (eventHistory.Count > 50)\r\n        {\r\n            eventHistory.RemoveAt(0);\r\n        }\r\n        \r\n        onEventTriggered?.Invoke(eventName);\r\n    }\r\n    \r\n    // 事件处理器\r\n    private void OnStartEventHandler()\r\n    {\r\n        Debug.Log(\"开始事件处理器被调用\");\r\n    }\r\n    \r\n    private void OnUpdateEventHandler()\r\n    {\r\n        Debug.Log(\"更新事件处理器被调用\");\r\n    }\r\n    \r\n    private void OnDestroyEventHandler()\r\n    {\r\n        Debug.Log(\"销毁事件处理器被调用\");\r\n    }\r\n    \r\n    private void OnMessageEventHandler(string message)\r\n    {\r\n        Debug.Log($\"消息事件处理器: {message}\");\r\n    }\r\n    \r\n    private void OnNumberEventHandler(int number)\r\n    {\r\n        Debug.Log($\"数字事件处理器: {number}\");\r\n    }\r\n    \r\n    private void OnFloatEventHandler(float value)\r\n    {\r\n        Debug.Log($\"浮点数事件处理器: {value}\");\r\n    }\r\n    \r\n    private void OnVector3EventHandler(Vector3 vector)\r\n    {\r\n        Debug.Log($\"Vector3事件处理器: {vector}\");\r\n    }\r\n    \r\n    private void OnGameObjectEventHandler(GameObject gameObject)\r\n    {\r\n        Debug.Log($\"GameObject事件处理器: {gameObject.name}\");\r\n    }\r\n    \r\n    private void OnCustomEventHandler(string message, int number)\r\n    {\r\n        Debug.Log($\"自定义事件处理器: {message}, {number}\");\r\n    }\r\n    \r\n    private void OnPlayerEventHandler(GameObject player, string action)\r\n    {\r\n        Debug.Log($\"玩家事件处理器: {player.name} - {action}\");\r\n    }\r\n    \r\n    private void OnScoreEventHandler(int currentScore, int previousScore)\r\n    {\r\n        Debug.Log($\"分数事件处理器: {currentScore} (之前: {previousScore})\");\r\n    }\r\n    \r\n    private void OnDamageEventHandler(GameObject target, float damage, Vector3 hitPoint)\r\n    {\r\n        Debug.Log($\"伤害事件处理器: {target.name} 受到 {damage} 点伤害，击中点: {hitPoint}\");\r\n    }\r\n    \r\n    /// <summary>\r\n    /// 获取事件系统信息\r\n    /// </summary>\r\n    public void GetEventSystemInfo()\r\n    {\r\n        Debug.Log(\"=== 事件系统信息 ===\");\r\n        Debug.Log($\"事件系统启用: {enableEventSystem}\");\r\n        Debug.Log($\"事件系统活跃: {isEventSystemActive}\");\r\n        Debug.Log($\"总事件数量: {totalEventCount}\");\r\n        Debug.Log($\"活跃事件数量: {activeEventCount}\");\r\n        Debug.Log($\"调试日志: {enableDebugLog}\");\r\n        Debug.Log($\"最大监听器数量: {maxEventListeners}\");\r\n        \r\n        Debug.Log(\"事件监听器数量:\");\r\n        Debug.Log($\"  开始事件: {GetEventListenerCount(\"start\")}\");\r\n        Debug.Log($\"  更新事件: {GetEventListenerCount(\"update\")}\");\r\n        Debug.Log($\"  销毁事件: {GetEventListenerCount(\"destroy\")}\");\r\n        Debug.Log($\"  消息事件: {GetEventListenerCount(\"message\")}\");\r\n        Debug.Log($\"  数字事件: {GetEventListenerCount(\"number\")}\");\r\n        Debug.Log($\"  浮点数事件: {GetEventListenerCount(\"float\")}\");\r\n        Debug.Log($\"  Vector3事件: {GetEventListenerCount(\"vector3\")}\");\r\n        Debug.Log($\"  GameObject事件: {GetEventListenerCount(\"gameobject\")}\");\r\n        \r\n        Debug.Log($\"事件历史记录数量: {eventHistory.Count}\");\r\n        if (eventHistory.Count > 0)\r\n        {\r\n            Debug.Log(\"最近的事件:\");\r\n            for (int i = Mathf.Max(0, eventHistory.Count - 5); i < eventHistory.Count; i++)\r\n            {\r\n                Debug.Log($\"  {eventHistory[i]}\");\r\n            }\r\n        }\r\n    }\r\n    \r\n    /// <summary>\r\n    /// 重置事件系统\r\n    /// </summary>\r\n    public void ResetEventSystem()\r\n    {\r\n        // 清除所有监听器\r\n        ClearAllEventListeners();\r\n        \r\n        // 重新注册监听器\r\n        RegisterEventListeners();\r\n        \r\n        // 清空事件历史\r\n        eventHistory.Clear();\r\n        \r\n        Debug.Log(\"事件系统已重置\");\r\n    }\r\n    \r\n    private void Update()\r\n    {\r\n        // 触发更新事件\r\n        if (onUpdateEvent != null)\r\n        {\r\n            onUpdateEvent.Invoke();\r\n        }\r\n    }\r\n    \r\n    private void OnDestroy()\r\n    {\r\n        // 触发销毁事件\r\n        if (onDestroyEvent != null)\r\n        {\r\n            onDestroyEvent.Invoke();\r\n        }\r\n    }\r\n    \r\n    private void OnGUI()\r\n    {\r\n        // 简单的GUI界面用于测试\r\n        GUILayout.BeginArea(new Rect(10, 10, 400, 800));\r\n        GUILayout.Label(\"事件系统演示\", EditorStyles.boldLabel);\r\n        \r\n        GUILayout.Space(10);\r\n        \r\n        // 事件状态\r\n        GUILayout.Label($\"事件系统活跃: {isEventSystemActive}\");\r\n        GUILayout.Label($\"总事件数量: {totalEventCount}\");\r\n        GUILayout.Label($\"活跃事件数量: {activeEventCount}\");\r\n        GUILayout.Label($\"事件历史数量: {eventHistory.Count}\");\r\n        \r\n        GUILayout.Space(10);\r\n        \r\n        // 基本事件触发\r\n        GUILayout.Label(\"基本事件:\", EditorStyles.boldLabel);\r\n        if (GUILayout.Button(\"触发开始事件\"))\r\n        {\r\n            TriggerStartEvent();\r\n        }\r\n        \r\n        GUILayout.Space(10);\r\n        \r\n        // 带参数的事件触发\r\n        GUILayout.Label(\"带参数的事件:\", EditorStyles.boldLabel);\r\n        \r\n        if (GUILayout.Button(\"触发消息事件\"))\r\n        {\r\n            TriggerMessageEvent(messageText);\r\n        }\r\n        \r\n        if (GUILayout.Button(\"触发数字事件\"))\r\n        {\r\n            TriggerNumberEvent(numberValue);\r\n        }\r\n        \r\n        if (GUILayout.Button(\"触发浮点数事件\"))\r\n        {\r\n            TriggerFloatEvent(floatValue);\r\n        }\r\n        \r\n        if (GUILayout.Button(\"触发Vector3事件\"))\r\n        {\r\n            TriggerVector3Event(vectorValue);\r\n        }\r\n        \r\n        if (GUILayout.Button(\"触发GameObject事件\"))\r\n        {\r\n            TriggerGameObjectEvent(gameObject);\r\n        }\r\n        \r\n        GUILayout.Space(10);\r\n        \r\n        // 自定义事件触发\r\n        GUILayout.Label(\"自定义事件:\", EditorStyles.boldLabel);\r\n        \r\n        if (GUILayout.Button(\"触发自定义事件\"))\r\n        {\r\n            TriggerCustomEvent(\"自定义消息\", 123);\r\n        }\r\n        \r\n        if (GUILayout.Button(\"触发玩家事件\"))\r\n        {\r\n            TriggerPlayerEvent(gameObject, \"跳跃\");\r\n        }\r\n        \r\n        if (GUILayout.Button(\"触发分数事件\"))\r\n        {\r\n            TriggerScoreEvent(100, 50);\r\n        }\r\n        \r\n        if (GUILayout.Button(\"触发伤害事件\"))\r\n        {\r\n            TriggerDamageEvent(gameObject, 25f, transform.position);\r\n        }\r\n        \r\n        GUILayout.Space(10);\r\n        \r\n        // 事件管理\r\n        GUILayout.Label(\"事件管理:\", EditorStyles.boldLabel);\r\n        \r\n        if (GUILayout.Button(\"清除所有监听器\"))\r\n        {\r\n            ClearAllEventListeners();\r\n        }\r\n        \r\n        if (GUILayout.Button(\"重置事件系统\"))\r\n        {\r\n            ResetEventSystem();\r\n        }\r\n        \r\n        GUILayout.Space(10);\r\n        \r\n        if (GUILayout.Button(\"获取事件系统信息\"))\r\n        {\r\n            GetEventSystemInfo();\r\n        }\r\n        \r\n        GUILayout.EndArea();\r\n    }\r\n} "
        }
    ]
}