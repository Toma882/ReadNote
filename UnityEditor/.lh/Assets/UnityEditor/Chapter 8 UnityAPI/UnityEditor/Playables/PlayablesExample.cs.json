{
    "sourceFile": "Assets/UnityEditor/Chapter 8 UnityAPI/UnityEditor/Playables/PlayablesExample.cs",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1750940869775,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1750940869775,
            "name": "Commit-0",
            "content": "using UnityEngine;\r\nusing UnityEditor;\r\nusing UnityEditor.Playables;\r\nusing UnityEngine.Playables;\r\nusing UnityEngine.Timeline;\r\nusing System.Collections.Generic;\r\n\r\nnamespace UnityEditor.Playables.Examples\r\n{\r\n    /// <summary>\r\n    /// UnityEditor.Playables 命名空间使用示例\r\n    /// 演示可播放编辑器系统的创建、编辑和管理功能\r\n    /// </summary>\r\n    public class PlayablesExample : MonoBehaviour\r\n    {\r\n        [Header(\"可播放配置\")]\r\n        [SerializeField] private bool enablePlayables = true;\r\n        [SerializeField] private string timelineName = \"CustomTimeline\";\r\n        [SerializeField] private float timelineDuration = 10f;\r\n        [SerializeField] private bool autoPlay = false;\r\n        \r\n        [Header(\"可播放状态\")]\r\n        [SerializeField] private bool isPlaying = false;\r\n        [SerializeField] private float currentTime = 0f;\r\n        [SerializeField] private float totalDuration = 0f;\r\n        [SerializeField] private string currentTrack = \"\";\r\n        \r\n        [Header(\"目标对象\")]\r\n        [SerializeField] private GameObject targetObject;\r\n        [SerializeField] private PlayableDirector playableDirector;\r\n        [SerializeField] private TimelineAsset timelineAsset;\r\n        \r\n        [Header(\"轨道数据\")]\r\n        [SerializeField] private List<TrackAsset> availableTracks = new List<TrackAsset>();\r\n        [SerializeField] private TrackAsset currentTrackAsset;\r\n        \r\n        private PlayableGraph playableGraph;\r\n        private Dictionary<string, Playable> playableRegistry = new Dictionary<string, Playable>();\r\n        \r\n        /// <summary>\r\n        /// 初始化可播放系统\r\n        /// </summary>\r\n        private void Start()\r\n        {\r\n            InitializePlayablesSystem();\r\n        }\r\n        \r\n        /// <summary>\r\n        /// 初始化可播放系统\r\n        /// </summary>\r\n        private void InitializePlayablesSystem()\r\n        {\r\n            if (!enablePlayables)\r\n            {\r\n                Debug.Log(\"可播放系统已禁用\");\r\n                return;\r\n            }\r\n            \r\n            try\r\n            {\r\n                // 创建PlayableDirector\r\n                if (playableDirector == null)\r\n                {\r\n                    playableDirector = gameObject.AddComponent<PlayableDirector>();\r\n                }\r\n                \r\n                // 创建时间轴资源\r\n                CreateTimelineAsset();\r\n                \r\n                // 初始化PlayableGraph\r\n                InitializePlayableGraph();\r\n                \r\n                Debug.Log(\"可播放系统初始化完成\");\r\n            }\r\n            catch (System.Exception e)\r\n            {\r\n                Debug.LogError($\"可播放系统初始化失败: {e.Message}\");\r\n            }\r\n        }\r\n        \r\n        /// <summary>\r\n        /// 创建时间轴资源\r\n        /// </summary>\r\n        private void CreateTimelineAsset()\r\n        {\r\n            timelineAsset = ScriptableObject.CreateInstance<TimelineAsset>();\r\n            timelineAsset.name = timelineName;\r\n            timelineAsset.durationMode = TimelineAsset.DurationMode.FixedLength;\r\n            timelineAsset.fixedDuration = timelineDuration;\r\n            \r\n            // 保存时间轴资源\r\n            string path = $\"Assets/Timelines/{timelineName}.playable\";\r\n            string directory = System.IO.Path.GetDirectoryName(path);\r\n            if (!System.IO.Directory.Exists(directory))\r\n            {\r\n                System.IO.Directory.CreateDirectory(directory);\r\n            }\r\n            \r\n            AssetDatabase.CreateAsset(timelineAsset, path);\r\n            AssetDatabase.SaveAssets();\r\n            \r\n            // 设置到PlayableDirector\r\n            playableDirector.playableAsset = timelineAsset;\r\n            \r\n            Debug.Log($\"时间轴资源已创建: {path}\");\r\n        }\r\n        \r\n        /// <summary>\r\n        /// 初始化PlayableGraph\r\n        /// </summary>\r\n        private void InitializePlayableGraph()\r\n        {\r\n            playableGraph = PlayableGraph.Create(\"CustomPlayableGraph\");\r\n            playableGraph.SetTimeUpdateMode(DirectorUpdateMode.GameTime);\r\n            \r\n            Debug.Log(\"PlayableGraph已初始化\");\r\n        }\r\n        \r\n        /// <summary>\r\n        /// 创建动画轨道\r\n        /// </summary>\r\n        public AnimationTrack CreateAnimationTrack(string trackName)\r\n        {\r\n            if (timelineAsset == null)\r\n            {\r\n                Debug.LogError(\"时间轴资源为空\");\r\n                return null;\r\n            }\r\n            \r\n            var animationTrack = timelineAsset.CreateTrack<AnimationTrack>(null, trackName);\r\n            availableTracks.Add(animationTrack);\r\n            currentTrack = trackName;\r\n            \r\n            Debug.Log($\"动画轨道已创建: {trackName}\");\r\n            return animationTrack;\r\n        }\r\n        \r\n        /// <summary>\r\n        /// 创建音频轨道\r\n        /// </summary>\r\n        public AudioTrack CreateAudioTrack(string trackName)\r\n        {\r\n            if (timelineAsset == null)\r\n            {\r\n                Debug.LogError(\"时间轴资源为空\");\r\n                return null;\r\n            }\r\n            \r\n            var audioTrack = timelineAsset.CreateTrack<AudioTrack>(null, trackName);\r\n            availableTracks.Add(audioTrack);\r\n            currentTrack = trackName;\r\n            \r\n            Debug.Log($\"音频轨道已创建: {trackName}\");\r\n            return audioTrack;\r\n        }\r\n        \r\n        /// <summary>\r\n        /// 创建激活轨道\r\n        /// </summary>\r\n        public ActivationTrack CreateActivationTrack(string trackName)\r\n        {\r\n            if (timelineAsset == null)\r\n            {\r\n                Debug.LogError(\"时间轴资源为空\");\r\n                return null;\r\n            }\r\n            \r\n            var activationTrack = timelineAsset.CreateTrack<ActivationTrack>(null, trackName);\r\n            availableTracks.Add(activationTrack);\r\n            currentTrack = trackName;\r\n            \r\n            Debug.Log($\"激活轨道已创建: {trackName}\");\r\n            return activationTrack;\r\n        }\r\n        \r\n        /// <summary>\r\n        /// 创建控制轨道\r\n        /// </summary>\r\n        public ControlTrack CreateControlTrack(string trackName)\r\n        {\r\n            if (timelineAsset == null)\r\n            {\r\n                Debug.LogError(\"时间轴资源为空\");\r\n                return null;\r\n            }\r\n            \r\n            var controlTrack = timelineAsset.CreateTrack<ControlTrack>(null, trackName);\r\n            availableTracks.Add(controlTrack);\r\n            currentTrack = trackName;\r\n            \r\n            Debug.Log($\"控制轨道已创建: {trackName}\");\r\n            return controlTrack;\r\n        }\r\n        \r\n        /// <summary>\r\n        /// 添加动画片段\r\n        /// </summary>\r\n        public void AddAnimationClip(AnimationTrack track, AnimationClip clip, float startTime)\r\n        {\r\n            if (track == null || clip == null)\r\n            {\r\n                Debug.LogWarning(\"轨道或动画片段为空\");\r\n                return;\r\n            }\r\n            \r\n            var timelineClip = track.CreateDefaultClip();\r\n            timelineClip.animationClip = clip;\r\n            timelineClip.start = startTime;\r\n            timelineClip.duration = clip.length;\r\n            \r\n            Debug.Log($\"动画片段已添加到轨道: {clip.name}\");\r\n        }\r\n        \r\n        /// <summary>\r\n        /// 添加音频片段\r\n        /// </summary>\r\n        public void AddAudioClip(AudioTrack track, AudioClip clip, float startTime)\r\n        {\r\n            if (track == null || clip == null)\r\n            {\r\n                Debug.LogWarning(\"轨道或音频片段为空\");\r\n                return;\r\n            }\r\n            \r\n            var timelineClip = track.CreateDefaultClip();\r\n            timelineClip.audioClip = clip;\r\n            timelineClip.start = startTime;\r\n            timelineClip.duration = clip.length;\r\n            \r\n            Debug.Log($\"音频片段已添加到轨道: {clip.name}\");\r\n        }\r\n        \r\n        /// <summary>\r\n        /// 播放时间轴\r\n        /// </summary>\r\n        public void PlayTimeline()\r\n        {\r\n            if (playableDirector == null)\r\n            {\r\n                Debug.LogWarning(\"PlayableDirector为空\");\r\n                return;\r\n            }\r\n            \r\n            playableDirector.Play();\r\n            isPlaying = true;\r\n            Debug.Log(\"时间轴开始播放\");\r\n        }\r\n        \r\n        /// <summary>\r\n        /// 暂停时间轴\r\n        /// </summary>\r\n        public void PauseTimeline()\r\n        {\r\n            if (playableDirector == null)\r\n            {\r\n                Debug.LogWarning(\"PlayableDirector为空\");\r\n                return;\r\n            }\r\n            \r\n            playableDirector.Pause();\r\n            isPlaying = false;\r\n            Debug.Log(\"时间轴已暂停\");\r\n        }\r\n        \r\n        /// <summary>\r\n        /// 停止时间轴\r\n        /// </summary>\r\n        public void StopTimeline()\r\n        {\r\n            if (playableDirector == null)\r\n            {\r\n                Debug.LogWarning(\"PlayableDirector为空\");\r\n                return;\r\n            }\r\n            \r\n            playableDirector.Stop();\r\n            isPlaying = false;\r\n            currentTime = 0f;\r\n            Debug.Log(\"时间轴已停止\");\r\n        }\r\n        \r\n        /// <summary>\r\n        /// 设置播放时间\r\n        /// </summary>\r\n        public void SetPlaybackTime(double time)\r\n        {\r\n            if (playableDirector == null)\r\n            {\r\n                Debug.LogWarning(\"PlayableDirector为空\");\r\n                return;\r\n            }\r\n            \r\n            playableDirector.time = time;\r\n            currentTime = (float)time;\r\n            Debug.Log($\"播放时间已设置为: {time}\");\r\n        }\r\n        \r\n        /// <summary>\r\n        /// 设置播放速度\r\n        /// </summary>\r\n        public void SetPlaybackSpeed(float speed)\r\n        {\r\n            if (playableDirector == null)\r\n            {\r\n                Debug.LogWarning(\"PlayableDirector为空\");\r\n                return;\r\n            }\r\n            \r\n            playableDirector.playableGraph.GetRootPlayable(0).SetSpeed(speed);\r\n            Debug.Log($\"播放速度已设置为: {speed}\");\r\n        }\r\n        \r\n        /// <summary>\r\n        /// 绑定对象到轨道\r\n        /// </summary>\r\n        public void BindObjectToTrack(TrackAsset track, Object binding)\r\n        {\r\n            if (track == null || binding == null)\r\n            {\r\n                Debug.LogWarning(\"轨道或绑定对象为空\");\r\n                return;\r\n            }\r\n            \r\n            playableDirector.SetGenericBinding(track, binding);\r\n            Debug.Log($\"对象 {binding.name} 已绑定到轨道 {track.name}\");\r\n        }\r\n        \r\n        /// <summary>\r\n        /// 获取轨道信息\r\n        /// </summary>\r\n        public string GetTrackInfo(TrackAsset track)\r\n        {\r\n            if (track == null)\r\n                return \"轨道为空\";\r\n            \r\n            return $\"名称: {track.name}, 类型: {track.GetType().Name}, 片段数量: {track.GetClips().Count}\";\r\n        }\r\n        \r\n        /// <summary>\r\n        /// 删除轨道\r\n        /// </summary>\r\n        public void DeleteTrack(TrackAsset track)\r\n        {\r\n            if (track == null)\r\n            {\r\n                Debug.LogWarning(\"轨道为空\");\r\n                return;\r\n            }\r\n            \r\n            timelineAsset.DeleteTrack(track);\r\n            availableTracks.Remove(track);\r\n            DestroyImmediate(track);\r\n            \r\n            Debug.Log($\"轨道已删除: {track.name}\");\r\n        }\r\n        \r\n        /// <summary>\r\n        /// 导出时间轴\r\n        /// </summary>\r\n        public void ExportTimeline()\r\n        {\r\n            if (timelineAsset == null)\r\n            {\r\n                Debug.LogWarning(\"时间轴资源为空\");\r\n                return;\r\n            }\r\n            \r\n            string exportPath = EditorUtility.SaveFilePanel(\"导出时间轴\", \"\", timelineAsset.name, \"playable\");\r\n            if (string.IsNullOrEmpty(exportPath))\r\n                return;\r\n            \r\n            try\r\n            {\r\n                string sourcePath = AssetDatabase.GetAssetPath(timelineAsset);\r\n                System.IO.File.Copy(sourcePath, exportPath, true);\r\n                Debug.Log($\"时间轴已导出到: {exportPath}\");\r\n            }\r\n            catch (System.Exception e)\r\n            {\r\n                Debug.LogError($\"导出时间轴失败: {e.Message}\");\r\n            }\r\n        }\r\n        \r\n        /// <summary>\r\n        /// 导入时间轴\r\n        /// </summary>\r\n        public void ImportTimeline()\r\n        {\r\n            string importPath = EditorUtility.OpenFilePanel(\"导入时间轴\", \"\", \"playable\");\r\n            if (string.IsNullOrEmpty(importPath))\r\n                return;\r\n            \r\n            try\r\n            {\r\n                string fileName = System.IO.Path.GetFileName(importPath);\r\n                string targetPath = $\"Assets/Timelines/{fileName}\";\r\n                \r\n                // 确保目录存在\r\n                string directory = System.IO.Path.GetDirectoryName(targetPath);\r\n                if (!System.IO.Directory.Exists(directory))\r\n                {\r\n                    System.IO.Directory.CreateDirectory(directory);\r\n                }\r\n                \r\n                System.IO.File.Copy(importPath, targetPath, true);\r\n                AssetDatabase.Refresh();\r\n                \r\n                // 加载时间轴\r\n                timelineAsset = AssetDatabase.LoadAssetAtPath<TimelineAsset>(targetPath);\r\n                if (playableDirector != null)\r\n                {\r\n                    playableDirector.playableAsset = timelineAsset;\r\n                }\r\n                \r\n                Debug.Log($\"时间轴已导入: {targetPath}\");\r\n            }\r\n            catch (System.Exception e)\r\n            {\r\n                Debug.LogError($\"导入时间轴失败: {e.Message}\");\r\n            }\r\n        }\r\n        \r\n        /// <summary>\r\n        /// 获取所有轨道名称\r\n        /// </summary>\r\n        public string[] GetAllTrackNames()\r\n        {\r\n            return availableTracks.Select(t => t.name).ToArray();\r\n        }\r\n        \r\n        /// <summary>\r\n        /// 更新播放状态\r\n        /// </summary>\r\n        private void Update()\r\n        {\r\n            if (playableDirector != null && timelineAsset != null)\r\n            {\r\n                currentTime = (float)playableDirector.time;\r\n                totalDuration = (float)timelineAsset.duration;\r\n                isPlaying = playableDirector.state == PlayState.Playing;\r\n            }\r\n        }\r\n        \r\n        /// <summary>\r\n        /// 清理资源\r\n        /// </summary>\r\n        private void OnDestroy()\r\n        {\r\n            if (playableGraph.IsValid())\r\n            {\r\n                playableGraph.Destroy();\r\n            }\r\n        }\r\n        \r\n        /// <summary>\r\n        /// 在编辑器中显示GUI\r\n        /// </summary>\r\n        private void OnGUI()\r\n        {\r\n            if (!Application.isPlaying) return;\r\n            \r\n            GUILayout.BeginArea(new Rect(10, 10, 500, 700));\r\n            GUILayout.Label(\"UnityEditor.Playables 示例\", EditorStyles.boldLabel);\r\n            \r\n            GUILayout.Space(10);\r\n            GUILayout.Label($\"状态: {(enablePlayables ? \"启用\" : \"禁用\")}\");\r\n            GUILayout.Label($\"播放状态: {(isPlaying ? \"播放中\" : \"已停止\")}\");\r\n            GUILayout.Label($\"当前时间: {currentTime:F2} / {totalDuration:F2}\");\r\n            GUILayout.Label($\"当前轨道: {currentTrack}\");\r\n            \r\n            GUILayout.Space(10);\r\n            GUILayout.Label(\"播放控制\", EditorStyles.boldLabel);\r\n            \r\n            if (GUILayout.Button(\"播放\"))\r\n            {\r\n                PlayTimeline();\r\n            }\r\n            \r\n            if (GUILayout.Button(\"暂停\"))\r\n            {\r\n                PauseTimeline();\r\n            }\r\n            \r\n            if (GUILayout.Button(\"停止\"))\r\n            {\r\n                StopTimeline();\r\n            }\r\n            \r\n            // 时间滑块\r\n            float newTime = GUILayout.HorizontalSlider(currentTime, 0f, totalDuration);\r\n            if (Mathf.Abs(newTime - currentTime) > 0.1f)\r\n            {\r\n                SetPlaybackTime(newTime);\r\n            }\r\n            \r\n            GUILayout.Space(10);\r\n            GUILayout.Label(\"轨道创建\", EditorStyles.boldLabel);\r\n            \r\n            if (GUILayout.Button(\"创建动画轨道\"))\r\n            {\r\n                CreateAnimationTrack(\"AnimationTrack\");\r\n            }\r\n            \r\n            if (GUILayout.Button(\"创建音频轨道\"))\r\n            {\r\n                CreateAudioTrack(\"AudioTrack\");\r\n            }\r\n            \r\n            if (GUILayout.Button(\"创建激活轨道\"))\r\n            {\r\n                CreateActivationTrack(\"ActivationTrack\");\r\n            }\r\n            \r\n            if (GUILayout.Button(\"创建控制轨道\"))\r\n            {\r\n                CreateControlTrack(\"ControlTrack\");\r\n            }\r\n            \r\n            GUILayout.Space(10);\r\n            GUILayout.Label(\"轨道管理\", EditorStyles.boldLabel);\r\n            \r\n            string[] trackNames = GetAllTrackNames();\r\n            if (trackNames.Length > 0)\r\n            {\r\n                int selectedIndex = EditorGUILayout.Popup(\"选择轨道\", 0, trackNames);\r\n                if (selectedIndex >= 0 && selectedIndex < availableTracks.Count)\r\n                {\r\n                    currentTrackAsset = availableTracks[selectedIndex];\r\n                    \r\n                    GUILayout.Label(GetTrackInfo(currentTrackAsset));\r\n                    \r\n                    if (GUILayout.Button(\"删除轨道\"))\r\n                    {\r\n                        DeleteTrack(currentTrackAsset);\r\n                    }\r\n                }\r\n            }\r\n            \r\n            GUILayout.Space(10);\r\n            GUILayout.Label(\"对象绑定\", EditorStyles.boldLabel);\r\n            \r\n            targetObject = (GameObject)EditorGUILayout.ObjectField(\"目标对象\", targetObject, typeof(GameObject), true);\r\n            \r\n            if (GUILayout.Button(\"绑定对象到当前轨道\"))\r\n            {\r\n                if (currentTrackAsset != null && targetObject != null)\r\n                {\r\n                    BindObjectToTrack(currentTrackAsset, targetObject);\r\n                }\r\n            }\r\n            \r\n            GUILayout.Space(10);\r\n            GUILayout.Label(\"导入导出\", EditorStyles.boldLabel);\r\n            \r\n            if (GUILayout.Button(\"导出时间轴\"))\r\n            {\r\n                ExportTimeline();\r\n            }\r\n            \r\n            if (GUILayout.Button(\"导入时间轴\"))\r\n            {\r\n                ImportTimeline();\r\n            }\r\n            \r\n            GUILayout.Space(10);\r\n            GUILayout.Label(\"配置\", EditorStyles.boldLabel);\r\n            \r\n            enablePlayables = EditorGUILayout.Toggle(\"启用可播放\", enablePlayables);\r\n            timelineName = EditorGUILayout.TextField(\"时间轴名称\", timelineName);\r\n            timelineDuration = EditorGUILayout.FloatField(\"时间轴长度\", timelineDuration);\r\n            autoPlay = EditorGUILayout.Toggle(\"自动播放\", autoPlay);\r\n            \r\n            GUILayout.EndArea();\r\n        }\r\n    }\r\n} "
        }
    ]
}