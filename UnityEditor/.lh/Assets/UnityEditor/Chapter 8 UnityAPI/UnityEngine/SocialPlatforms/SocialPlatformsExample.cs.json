{
    "sourceFile": "Assets/UnityEditor/Chapter 8 UnityAPI/UnityEngine/SocialPlatforms/SocialPlatformsExample.cs",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1750938008584,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1750938008584,
            "name": "Commit-0",
            "content": "using UnityEngine;\r\nusing UnityEngine.SocialPlatforms;\r\nusing System.Collections.Generic;\r\n\r\nnamespace UnityEditor.Chapter8.SocialPlatforms\r\n{\r\n    /// <summary>\r\n    /// UnityEngine.SocialPlatforms 社交平台系统案例\r\n    /// 演示社交平台集成、成就系统、排行榜、用户认证等功能\r\n    /// </summary>\r\n    public class SocialPlatformsExample : MonoBehaviour\r\n    {\r\n        [Header(\"社交平台设置\")]\r\n        [SerializeField] private bool autoAuthenticate = true;\r\n        [SerializeField] private bool showLeaderboardUI = true;\r\n        [SerializeField] private bool showAchievementUI = true;\r\n        \r\n        [Header(\"用户信息\")]\r\n        [SerializeField] private string userName = \"\";\r\n        [SerializeField] private string userID = \"\";\r\n        [SerializeField] private bool isAuthenticated = false;\r\n        [SerializeField] private Texture2D userImage;\r\n        \r\n        [Header(\"成就系统\")]\r\n        [SerializeField] private List<AchievementData> achievements = new List<AchievementData>();\r\n        [SerializeField] private int totalAchievements = 0;\r\n        [SerializeField] private int unlockedAchievements = 0;\r\n        \r\n        [Header(\"排行榜\")]\r\n        [SerializeField] private List<LeaderboardData> leaderboards = new List<LeaderboardData>();\r\n        [SerializeField] private string currentLeaderboardID = \"leaderboard_001\";\r\n        [SerializeField] private long currentScore = 0;\r\n        \r\n        [Header(\"分数设置\")]\r\n        [SerializeField] private long scoreToAdd = 100;\r\n        [SerializeField] private string achievementToUnlock = \"achievement_001\";\r\n        \r\n        [Header(\"UI控制\")]\r\n        [SerializeField] private bool showControls = true;\r\n        \r\n        private bool isInitialized = false;\r\n        \r\n        [System.Serializable]\r\n        public class AchievementData\r\n        {\r\n            public string id;\r\n            public string title;\r\n            public string description;\r\n            public bool isUnlocked;\r\n            public float progress;\r\n            public float maxProgress;\r\n        }\r\n        \r\n        [System.Serializable]\r\n        public class LeaderboardData\r\n        {\r\n            public string id;\r\n            public string title;\r\n            public long score;\r\n            public int rank;\r\n        }\r\n        \r\n        private void Start()\r\n        {\r\n            InitializeSocialPlatforms();\r\n        }\r\n        \r\n        /// <summary>\r\n        /// 初始化社交平台\r\n        /// </summary>\r\n        private void InitializeSocialPlatforms()\r\n        {\r\n            if (autoAuthenticate)\r\n            {\r\n                AuthenticateUser();\r\n            }\r\n            \r\n            InitializeAchievements();\r\n            InitializeLeaderboards();\r\n            \r\n            isInitialized = true;\r\n            Debug.Log(\"社交平台系统已初始化\");\r\n        }\r\n        \r\n        /// <summary>\r\n        /// 用户认证\r\n        /// </summary>\r\n        public void AuthenticateUser()\r\n        {\r\n            Social.localUser.Authenticate((bool success) =>\r\n            {\r\n                isAuthenticated = success;\r\n                if (success)\r\n                {\r\n                    userName = Social.localUser.userName;\r\n                    userID = Social.localUser.id;\r\n                    userImage = Social.localUser.image;\r\n                    Debug.Log($\"用户认证成功: {userName}\");\r\n                }\r\n                else\r\n                {\r\n                    Debug.Log(\"用户认证失败\");\r\n                }\r\n            });\r\n        }\r\n        \r\n        /// <summary>\r\n        /// 初始化成就系统\r\n        /// </summary>\r\n        private void InitializeAchievements()\r\n        {\r\n            achievements.Clear();\r\n            \r\n            // 添加示例成就\r\n            AddAchievement(\"achievement_001\", \"初次登录\", \"完成首次登录游戏\", 1, 1);\r\n            AddAchievement(\"achievement_002\", \"得分高手\", \"获得1000分\", 0, 1000);\r\n            AddAchievement(\"achievement_003\", \"连续游戏\", \"连续游戏10分钟\", 0, 600);\r\n            AddAchievement(\"achievement_004\", \"完美表现\", \"获得满分\", 0, 10000);\r\n            AddAchievement(\"achievement_005\", \"社交达人\", \"分享游戏10次\", 0, 10);\r\n            \r\n            totalAchievements = achievements.Count;\r\n            Debug.Log($\"初始化成就系统: {totalAchievements} 个成就\");\r\n        }\r\n        \r\n        /// <summary>\r\n        /// 添加成就\r\n        /// </summary>\r\n        public void AddAchievement(string id, string title, string description, float currentProgress, float maxProgress)\r\n        {\r\n            AchievementData achievement = new AchievementData\r\n            {\r\n                id = id,\r\n                title = title,\r\n                description = description,\r\n                isUnlocked = currentProgress >= maxProgress,\r\n                progress = currentProgress,\r\n                maxProgress = maxProgress\r\n            };\r\n            \r\n            achievements.Add(achievement);\r\n            \r\n            if (achievement.isUnlocked)\r\n            {\r\n                unlockedAchievements++;\r\n            }\r\n        }\r\n        \r\n        /// <summary>\r\n        /// 解锁成就\r\n        /// </summary>\r\n        public void UnlockAchievement(string achievementID)\r\n        {\r\n            if (!isAuthenticated) return;\r\n            \r\n            Social.ReportProgress(achievementID, 100.0, (bool success) =>\r\n            {\r\n                if (success)\r\n                {\r\n                    // 更新本地成就数据\r\n                    AchievementData achievement = achievements.Find(a => a.id == achievementID);\r\n                    if (achievement != null && !achievement.isUnlocked)\r\n                    {\r\n                        achievement.isUnlocked = true;\r\n                        achievement.progress = achievement.maxProgress;\r\n                        unlockedAchievements++;\r\n                        Debug.Log($\"成就解锁: {achievement.title}\");\r\n                    }\r\n                }\r\n                else\r\n                {\r\n                    Debug.Log($\"成就解锁失败: {achievementID}\");\r\n                }\r\n            });\r\n        }\r\n        \r\n        /// <summary>\r\n        /// 更新成就进度\r\n        /// </summary>\r\n        public void UpdateAchievementProgress(string achievementID, float progress)\r\n        {\r\n            if (!isAuthenticated) return;\r\n            \r\n            AchievementData achievement = achievements.Find(a => a.id == achievementID);\r\n            if (achievement != null)\r\n            {\r\n                achievement.progress = Mathf.Min(progress, achievement.maxProgress);\r\n                float percentage = (achievement.progress / achievement.maxProgress) * 100.0f;\r\n                \r\n                Social.ReportProgress(achievementID, percentage, (bool success) =>\r\n                {\r\n                    if (success)\r\n                    {\r\n                        if (achievement.progress >= achievement.maxProgress && !achievement.isUnlocked)\r\n                        {\r\n                            achievement.isUnlocked = true;\r\n                            unlockedAchievements++;\r\n                            Debug.Log($\"成就解锁: {achievement.title}\");\r\n                        }\r\n                        else\r\n                        {\r\n                            Debug.Log($\"成就进度更新: {achievement.title} - {percentage:F1}%\");\r\n                        }\r\n                    }\r\n                });\r\n            }\r\n        }\r\n        \r\n        /// <summary>\r\n        /// 显示成就UI\r\n        /// </summary>\r\n        public void ShowAchievementsUI()\r\n        {\r\n            if (!isAuthenticated) return;\r\n            \r\n            Social.ShowAchievementsUI();\r\n            Debug.Log(\"显示成就界面\");\r\n        }\r\n        \r\n        /// <summary>\r\n        /// 初始化排行榜\r\n        /// </summary>\r\n        private void InitializeLeaderboards()\r\n        {\r\n            leaderboards.Clear();\r\n            \r\n            // 添加示例排行榜\r\n            AddLeaderboard(\"leaderboard_001\", \"总分排行榜\", 0);\r\n            AddLeaderboard(\"leaderboard_002\", \"最高分排行榜\", 0);\r\n            AddLeaderboard(\"leaderboard_003\", \"游戏时长排行榜\", 0);\r\n            \r\n            Debug.Log($\"初始化排行榜: {leaderboards.Count} 个排行榜\");\r\n        }\r\n        \r\n        /// <summary>\r\n        /// 添加排行榜\r\n        /// </summary>\r\n        public void AddLeaderboard(string id, string title, long score)\r\n        {\r\n            LeaderboardData leaderboard = new LeaderboardData\r\n            {\r\n                id = id,\r\n                title = title,\r\n                score = score,\r\n                rank = 0\r\n            };\r\n            \r\n            leaderboards.Add(leaderboard);\r\n        }\r\n        \r\n        /// <summary>\r\n        /// 提交分数\r\n        /// </summary>\r\n        public void SubmitScore(string leaderboardID, long score)\r\n        {\r\n            if (!isAuthenticated) return;\r\n            \r\n            Social.ReportScore(score, leaderboardID, (bool success) =>\r\n            {\r\n                if (success)\r\n                {\r\n                    // 更新本地排行榜数据\r\n                    LeaderboardData leaderboard = leaderboards.Find(l => l.id == leaderboardID);\r\n                    if (leaderboard != null)\r\n                    {\r\n                        leaderboard.score = score;\r\n                        Debug.Log($\"分数提交成功: {leaderboard.title} - {score}\");\r\n                    }\r\n                }\r\n                else\r\n                {\r\n                    Debug.Log($\"分数提交失败: {leaderboardID}\");\r\n                }\r\n            });\r\n        }\r\n        \r\n        /// <summary>\r\n        /// 显示排行榜UI\r\n        /// </summary>\r\n        public void ShowLeaderboardUI()\r\n        {\r\n            if (!isAuthenticated) return;\r\n            \r\n            Social.ShowLeaderboardUI();\r\n            Debug.Log(\"显示排行榜界面\");\r\n        }\r\n        \r\n        /// <summary>\r\n        /// 获取排行榜数据\r\n        /// </summary>\r\n        public void LoadLeaderboardData(string leaderboardID)\r\n        {\r\n            if (!isAuthenticated) return;\r\n            \r\n            ILeaderboard leaderboard = Social.CreateLeaderboard();\r\n            leaderboard.id = leaderboardID;\r\n            leaderboard.LoadScores((bool success) =>\r\n            {\r\n                if (success)\r\n                {\r\n                    Debug.Log($\"加载排行榜数据成功: {leaderboardID}\");\r\n                    Debug.Log($\"排行榜标题: {leaderboard.title}\");\r\n                    Debug.Log($\"排行榜分数范围: {leaderboard.range.min} - {leaderboard.range.max}\");\r\n                    \r\n                    IScore[] scores = leaderboard.scores;\r\n                    for (int i = 0; i < scores.Length; i++)\r\n                    {\r\n                        Debug.Log($\"第{i + 1}名: {scores[i].userID} - {scores[i].value}\");\r\n                    }\r\n                }\r\n                else\r\n                {\r\n                    Debug.Log($\"加载排行榜数据失败: {leaderboardID}\");\r\n                }\r\n            });\r\n        }\r\n        \r\n        /// <summary>\r\n        /// 分享游戏\r\n        /// </summary>\r\n        public void ShareGame()\r\n        {\r\n            if (!isAuthenticated) return;\r\n            \r\n            // 这里可以实现游戏分享功能\r\n            Debug.Log(\"分享游戏功能待实现\");\r\n            \r\n            // 更新分享成就\r\n            UpdateAchievementProgress(\"achievement_005\", GetAchievementProgress(\"achievement_005\") + 1);\r\n        }\r\n        \r\n        /// <summary>\r\n        /// 获取成就进度\r\n        /// </summary>\r\n        public float GetAchievementProgress(string achievementID)\r\n        {\r\n            AchievementData achievement = achievements.Find(a => a.id == achievementID);\r\n            return achievement != null ? achievement.progress : 0f;\r\n        }\r\n        \r\n        /// <summary>\r\n        /// 获取排行榜分数\r\n        /// </summary>\r\n        public long GetLeaderboardScore(string leaderboardID)\r\n        {\r\n            LeaderboardData leaderboard = leaderboards.Find(l => l.id == leaderboardID);\r\n            return leaderboard != null ? leaderboard.score : 0;\r\n        }\r\n        \r\n        /// <summary>\r\n        /// 添加分数\r\n        /// </summary>\r\n        public void AddScore(long score)\r\n        {\r\n            currentScore += score;\r\n            SubmitScore(currentLeaderboardID, currentScore);\r\n            Debug.Log($\"添加分数: {score}, 当前总分: {currentScore}\");\r\n        }\r\n        \r\n        /// <summary>\r\n        /// 解锁指定成就\r\n        /// </summary>\r\n        public void UnlockSpecificAchievement()\r\n        {\r\n            UnlockAchievement(achievementToUnlock);\r\n        }\r\n        \r\n        /// <summary>\r\n        /// 获取用户统计信息\r\n        /// </summary>\r\n        public void GetUserStats()\r\n        {\r\n            if (!isAuthenticated) return;\r\n            \r\n            Debug.Log(\"=== 用户统计信息 ===\");\r\n            Debug.Log($\"用户名: {userName}\");\r\n            Debug.Log($\"用户ID: {userID}\");\r\n            Debug.Log($\"认证状态: {(isAuthenticated ? \"已认证\" : \"未认证\")}\");\r\n            Debug.Log($\"成就进度: {unlockedAchievements}/{totalAchievements}\");\r\n            Debug.Log($\"当前分数: {currentScore}\");\r\n        }\r\n        \r\n        /// <summary>\r\n        /// 重置所有数据\r\n        /// </summary>\r\n        public void ResetAllData()\r\n        {\r\n            // 重置成就\r\n            foreach (AchievementData achievement in achievements)\r\n            {\r\n                achievement.isUnlocked = false;\r\n                achievement.progress = 0;\r\n            }\r\n            unlockedAchievements = 0;\r\n            \r\n            // 重置分数\r\n            currentScore = 0;\r\n            foreach (LeaderboardData leaderboard in leaderboards)\r\n            {\r\n                leaderboard.score = 0;\r\n                leaderboard.rank = 0;\r\n            }\r\n            \r\n            Debug.Log(\"所有数据已重置\");\r\n        }\r\n        \r\n        private void OnGUI()\r\n        {\r\n            if (!showControls) return;\r\n            \r\n            GUILayout.BeginArea(new Rect(10, 10, 400, 700));\r\n            GUILayout.Label(\"UnityEngine.SocialPlatforms 社交平台系统案例\", EditorStyles.boldLabel);\r\n            \r\n            GUILayout.Space(10);\r\n            \r\n            // 用户认证\r\n            GUILayout.Label(\"用户认证\", EditorStyles.boldLabel);\r\n            if (GUILayout.Button($\"认证状态: {(isAuthenticated ? \"已认证\" : \"未认证\")}\"))\r\n            {\r\n                AuthenticateUser();\r\n            }\r\n            \r\n            if (isAuthenticated)\r\n            {\r\n                GUILayout.Label($\"用户名: {userName}\");\r\n                GUILayout.Label($\"用户ID: {userID}\");\r\n            }\r\n            \r\n            GUILayout.Space(10);\r\n            \r\n            // 成就系统\r\n            GUILayout.Label(\"成就系统\", EditorStyles.boldLabel);\r\n            GUILayout.Label($\"成就进度: {unlockedAchievements}/{totalAchievements}\");\r\n            \r\n            if (GUILayout.Button(\"显示成就界面\"))\r\n            {\r\n                ShowAchievementsUI();\r\n            }\r\n            \r\n            if (GUILayout.Button(\"解锁指定成就\"))\r\n            {\r\n                UnlockSpecificAchievement();\r\n            }\r\n            \r\n            // 成就列表\r\n            GUILayout.Label(\"成就列表:\", EditorStyles.boldLabel);\r\n            foreach (AchievementData achievement in achievements)\r\n            {\r\n                string status = achievement.isUnlocked ? \"✓\" : \"○\";\r\n                float percentage = (achievement.progress / achievement.maxProgress) * 100f;\r\n                GUILayout.Label($\"{status} {achievement.title}: {percentage:F1}%\");\r\n            }\r\n            \r\n            GUILayout.Space(10);\r\n            \r\n            // 排行榜\r\n            GUILayout.Label(\"排行榜\", EditorStyles.boldLabel);\r\n            GUILayout.Label($\"当前分数: {currentScore}\");\r\n            \r\n            if (GUILayout.Button(\"显示排行榜界面\"))\r\n            {\r\n                ShowLeaderboardUI();\r\n            }\r\n            \r\n            if (GUILayout.Button(\"加载排行榜数据\"))\r\n            {\r\n                LoadLeaderboardData(currentLeaderboardID);\r\n            }\r\n            \r\n            // 分数操作\r\n            GUILayout.BeginHorizontal();\r\n            if (GUILayout.Button(\"添加分数\")) AddScore(scoreToAdd);\r\n            if (GUILayout.Button(\"分享游戏\")) ShareGame();\r\n            GUILayout.EndHorizontal();\r\n            \r\n            GUILayout.Space(10);\r\n            \r\n            // 设置\r\n            GUILayout.Label(\"设置\", EditorStyles.boldLabel);\r\n            \r\n            long newScoreToAdd = (long)GUILayout.HorizontalSlider(scoreToAdd, 10, 1000);\r\n            if (newScoreToAdd != scoreToAdd)\r\n            {\r\n                scoreToAdd = newScoreToAdd;\r\n            }\r\n            GUILayout.Label($\"添加分数: {scoreToAdd}\");\r\n            \r\n            GUILayout.Space(10);\r\n            \r\n            // 功能按钮\r\n            GUILayout.Label(\"功能\", EditorStyles.boldLabel);\r\n            if (GUILayout.Button(\"获取用户统计\"))\r\n            {\r\n                GetUserStats();\r\n            }\r\n            \r\n            if (GUILayout.Button(\"重置所有数据\"))\r\n            {\r\n                ResetAllData();\r\n            }\r\n            \r\n            GUILayout.Space(10);\r\n            \r\n            // 信息显示\r\n            GUILayout.Label(\"信息\", EditorStyles.boldLabel);\r\n            GUILayout.Label($\"初始化状态: {(isInitialized ? \"已完成\" : \"未完成\")}\");\r\n            GUILayout.Label($\"成就完成率: {(totalAchievements > 0 ? (float)unlockedAchievements / totalAchievements * 100f : 0f):F1}%\");\r\n            \r\n            if (leaderboards.Count > 0)\r\n            {\r\n                LeaderboardData currentLeaderboard = leaderboards.Find(l => l.id == currentLeaderboardID);\r\n                if (currentLeaderboard != null)\r\n                {\r\n                    GUILayout.Label($\"当前排行榜: {currentLeaderboard.title}\");\r\n                }\r\n            }\r\n            \r\n            GUILayout.Space(10);\r\n            \r\n            // 操作提示\r\n            GUILayout.Label(\"操作提示\", EditorStyles.boldLabel);\r\n            GUILayout.Label(\"需要配置相应的社交平台SDK\");\r\n            GUILayout.Label(\"在真机上测试社交功能\");\r\n            GUILayout.Label(\"确保网络连接正常\");\r\n            \r\n            GUILayout.EndArea();\r\n        }\r\n    }\r\n} "
        }
    ]
}