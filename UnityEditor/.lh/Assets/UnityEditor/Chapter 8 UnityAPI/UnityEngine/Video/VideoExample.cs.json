{
    "sourceFile": "Assets/UnityEditor/Chapter 8 UnityAPI/UnityEngine/Video/VideoExample.cs",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 2,
            "patches": [
                {
                    "date": 1750930031090,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1750933145471,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,526 +3,287 @@\n using System.Collections;\r\n \r\n /// <summary>\r\n /// UnityEngine.Video 命名空间案例演示\r\n-/// 展示视频播放系统的核心功能\r\n+/// 展示视频播放器、视频控制、视频渲染等核心功能\r\n /// </summary>\r\n public class VideoExample : MonoBehaviour\r\n {\r\n-    [Header(\"视频组件\")]\r\n-    [SerializeField] private VideoPlayer videoPlayer;\r\n-    [SerializeField] private VideoClip[] videoClips;\r\n-    [SerializeField] private RenderTexture renderTexture;\r\n-    \r\n     [Header(\"视频设置\")]\r\n-    [SerializeField] private bool autoPlay = false;\r\n-    [SerializeField] private bool loop = true;\r\n-    [SerializeField] private float playbackSpeed = 1.0f;\r\n-    [SerializeField] private bool mute = false;\r\n-    [SerializeField] private float volume = 1.0f;\r\n-    \r\n-    [Header(\"视频状态\")]\r\n-    [SerializeField] private bool isPlaying = false;\r\n-    [SerializeField] private bool isPaused = false;\r\n-    [SerializeField] private double currentTime = 0.0;\r\n-    [SerializeField] private double totalTime = 0.0;\r\n-    [SerializeField] private int currentClipIndex = 0;\r\n-    \r\n-    [Header(\"视频信息\")]\r\n-    [SerializeField] private string videoName = \"\";\r\n-    [SerializeField] private Vector2Int videoResolution = Vector2Int.zero;\r\n-    [SerializeField] private double frameRate = 0.0;\r\n-    [SerializeField] private long frameCount = 0;\r\n-    \r\n-    // 视频事件\r\n-    private System.Action<VideoPlayer> onVideoStarted;\r\n-    private System.Action<VideoPlayer> onVideoFinished;\r\n-    private System.Action<VideoPlayer> onVideoError;\r\n-    \r\n+    [SerializeField] private VideoPlayer videoPlayer; //视频播放器\r\n+    [SerializeField] private VideoClip videoClip; //视频片段\r\n+    [SerializeField] private string videoUrl = \"\"; //视频URL\r\n+    [SerializeField] private bool playOnStart = false; //开始时播放\r\n+    [SerializeField] private bool loop = false; //循环播放\r\n+\r\n+    [Header(\"播放控制\")]\r\n+    [SerializeField] private bool isPlaying = false; //是否正在播放\r\n+    [SerializeField] private double currentTime = 0f; //当前时间\r\n+    [SerializeField] private double duration = 0f; //总时长\r\n+    [SerializeField] private float playbackSpeed = 1f; //播放速度\r\n+    [SerializeField] private float volume = 1f; //音量\r\n+\r\n+    [Header(\"渲染设置\")]\r\n+    [SerializeField] private RenderTexture renderTexture; //渲染纹理\r\n+    [SerializeField] private Material targetMaterial; //目标材质\r\n+    [SerializeField] private bool useRenderTexture = false; //使用渲染纹理\r\n+\r\n     private void Start()\r\n     {\r\n-        InitializeVideoSystem();\r\n-    }\r\n-    \r\n-    /// <summary>\r\n-    /// 初始化视频系统\r\n-    /// </summary>\r\n-    private void InitializeVideoSystem()\r\n-    {\r\n-        // 获取或创建VideoPlayer\r\n         if (videoPlayer == null)\r\n         {\r\n             videoPlayer = GetComponent<VideoPlayer>();\r\n-            if (videoPlayer == null)\r\n-            {\r\n-                videoPlayer = gameObject.AddComponent<VideoPlayer>();\r\n-            }\r\n         }\r\n-        \r\n-        // 配置VideoPlayer\r\n-        ConfigureVideoPlayer();\r\n-        \r\n-        // 设置视频事件\r\n-        SetupVideoEvents();\r\n-        \r\n-        // 加载第一个视频\r\n-        if (videoClips != null && videoClips.Length > 0)\r\n+\r\n+        if (videoPlayer == null)\r\n         {\r\n-            LoadVideo(0);\r\n+            videoPlayer = gameObject.AddComponent<VideoPlayer>();\r\n         }\r\n-        \r\n-        Debug.Log(\"视频系统初始化完成\");\r\n+\r\n+        SetupVideoPlayer();\r\n     }\r\n-    \r\n+\r\n     /// <summary>\r\n-    /// 配置VideoPlayer\r\n+    /// 设置视频播放器\r\n     /// </summary>\r\n-    private void ConfigureVideoPlayer()\r\n+    private void SetupVideoPlayer()\r\n     {\r\n-        if (videoPlayer == null) return;\r\n-        \r\n-        // 基本设置\r\n-        videoPlayer.playOnAwake = autoPlay;\r\n-        videoPlayer.isLooping = loop;\r\n-        videoPlayer.playbackSpeed = playbackSpeed;\r\n-        videoPlayer.audioOutputMode = VideoAudioOutputMode.AudioSource;\r\n-        \r\n-        // 渲染设置\r\n-        videoPlayer.renderMode = VideoRenderMode.RenderTexture;\r\n-        if (renderTexture != null)\r\n+        if (videoPlayer != null)\r\n         {\r\n-            videoPlayer.targetTexture = renderTexture;\r\n+            // 设置事件监听\r\n+            videoPlayer.prepareCompleted += OnVideoPrepared;\r\n+            videoPlayer.loopPointReached += OnVideoLoopPointReached;\r\n+            videoPlayer.errorReceived += OnVideoError;\r\n+\r\n+            // 设置基本属性\r\n+            videoPlayer.playOnAwake = playOnStart;\r\n+            videoPlayer.isLooping = loop;\r\n+            videoPlayer.playbackSpeed = playbackSpeed;\r\n+            videoPlayer.SetDirectAudioVolume(0, volume);\r\n+\r\n+            // 设置视频源\r\n+            if (videoClip != null)\r\n+            {\r\n+                videoPlayer.clip = videoClip;\r\n+            }\r\n+            else if (!string.IsNullOrEmpty(videoUrl))\r\n+            {\r\n+                videoPlayer.url = videoUrl;\r\n+            }\r\n+\r\n+            // 设置渲染目标\r\n+            if (useRenderTexture && renderTexture != null)\r\n+            {\r\n+                videoPlayer.targetTexture = renderTexture;\r\n+            }\r\n+            else if (targetMaterial != null)\r\n+            {\r\n+                videoPlayer.renderMode = VideoRenderMode.MaterialOverride;\r\n+                videoPlayer.targetMaterialRenderer = GetComponent<Renderer>();\r\n+                videoPlayer.targetMaterialProperty = \"_MainTex\";\r\n+            }\r\n         }\r\n-        \r\n-        // 音频设置\r\n-        videoPlayer.SetDirectAudioMute(0, mute);\r\n-        videoPlayer.SetDirectAudioVolume(0, volume);\r\n-        \r\n-        Debug.Log(\"VideoPlayer配置完成\");\r\n     }\r\n-    \r\n+\r\n     /// <summary>\r\n-    /// 设置视频事件\r\n+    /// 视频准备完成回调\r\n     /// </summary>\r\n-    private void SetupVideoEvents()\r\n+    private void OnVideoPrepared(VideoPlayer source)\r\n     {\r\n-        if (videoPlayer == null) return;\r\n-        \r\n-        // 视频开始播放事件\r\n-        videoPlayer.started += OnVideoStarted;\r\n-        \r\n-        // 视频结束播放事件\r\n-        videoPlayer.loopPointReached += OnVideoFinished;\r\n-        \r\n-        // 视频错误事件\r\n-        videoPlayer.errorReceived += OnVideoError;\r\n-        \r\n-        // 帧准备事件\r\n-        videoPlayer.frameReady += OnFrameReady;\r\n-        \r\n-        Debug.Log(\"视频事件设置完成\");\r\n+        Debug.Log(\"视频准备完成\");\r\n+        duration = source.length;\r\n+        isPlaying = source.isPlaying;\r\n     }\r\n-    \r\n+\r\n     /// <summary>\r\n-    /// 视频开始播放事件\r\n+    /// 视频循环点到达回调\r\n     /// </summary>\r\n-    /// <param name=\"player\">VideoPlayer实例</param>\r\n-    private void OnVideoStarted(VideoPlayer player)\r\n+    private void OnVideoLoopPointReached(VideoPlayer source)\r\n     {\r\n-        isPlaying = true;\r\n-        isPaused = false;\r\n-        \r\n-        // 更新视频信息\r\n-        UpdateVideoInfo();\r\n-        \r\n-        Debug.Log(\"视频开始播放\");\r\n-        \r\n-        onVideoStarted?.Invoke(player);\r\n+        Debug.Log(\"视频播放完成\");\r\n+        if (!loop)\r\n+        {\r\n+            isPlaying = false;\r\n+        }\r\n     }\r\n-    \r\n+\r\n     /// <summary>\r\n-    /// 视频结束播放事件\r\n+    /// 视频错误回调\r\n     /// </summary>\r\n-    /// <param name=\"player\">VideoPlayer实例</param>\r\n-    private void OnVideoFinished(VideoPlayer player)\r\n+    private void OnVideoError(VideoPlayer source, string message)\r\n     {\r\n-        isPlaying = false;\r\n-        isPaused = false;\r\n-        \r\n-        Debug.Log(\"视频播放结束\");\r\n-        \r\n-        onVideoFinished?.Invoke(player);\r\n-    }\r\n-    \r\n-    /// <summary>\r\n-    /// 视频错误事件\r\n-    /// </summary>\r\n-    /// <param name=\"player\">VideoPlayer实例</param>\r\n-    /// <param name=\"message\">错误信息</param>\r\n-    private void OnVideoError(VideoPlayer player, string message)\r\n-    {\r\n         Debug.LogError($\"视频播放错误: {message}\");\r\n-        \r\n-        onVideoError?.Invoke(player);\r\n     }\r\n-    \r\n-    /// <summary>\r\n-    /// 帧准备事件\r\n-    /// </summary>\r\n-    /// <param name=\"player\">VideoPlayer实例</param>\r\n-    /// <param name=\"frameIdx\">帧索引</param>\r\n-    private void OnFrameReady(VideoPlayer player, long frameIdx)\r\n+\r\n+    private void Update()\r\n     {\r\n-        // 可以在这里处理帧数据\r\n-        if (frameIdx % 30 == 0) // 每30帧输出一次\r\n+        if (videoPlayer != null && videoPlayer.isPrepared)\r\n         {\r\n-            Debug.Log($\"当前帧: {frameIdx}\");\r\n+            currentTime = videoPlayer.time;\r\n+            isPlaying = videoPlayer.isPlaying;\r\n         }\r\n     }\r\n-    \r\n+\r\n     /// <summary>\r\n-    /// 加载视频\r\n-    /// </summary>\r\n-    /// <param name=\"clipIndex\">视频索引</param>\r\n-    public void LoadVideo(int clipIndex)\r\n-    {\r\n-        if (videoPlayer == null || videoClips == null || clipIndex < 0 || clipIndex >= videoClips.Length)\r\n-        {\r\n-            Debug.LogError(\"无效的视频索引\");\r\n-            return;\r\n-        }\r\n-        \r\n-        // 停止当前播放\r\n-        if (isPlaying)\r\n-        {\r\n-            videoPlayer.Stop();\r\n-        }\r\n-        \r\n-        // 加载新视频\r\n-        videoPlayer.clip = videoClips[clipIndex];\r\n-        currentClipIndex = clipIndex;\r\n-        \r\n-        // 更新视频信息\r\n-        UpdateVideoInfo();\r\n-        \r\n-        Debug.Log($\"已加载视频: {videoClips[clipIndex].name}\");\r\n-    }\r\n-    \r\n-    /// <summary>\r\n     /// 播放视频\r\n     /// </summary>\r\n     public void PlayVideo()\r\n     {\r\n-        if (videoPlayer == null || videoPlayer.clip == null)\r\n+        if (videoPlayer != null)\r\n         {\r\n-            Debug.LogError(\"没有可播放的视频\");\r\n-            return;\r\n+            videoPlayer.Play();\r\n+            isPlaying = true;\r\n+            Debug.Log(\"开始播放视频\");\r\n         }\r\n-        \r\n-        videoPlayer.Play();\r\n-        isPlaying = true;\r\n-        isPaused = false;\r\n-        \r\n-        Debug.Log(\"开始播放视频\");\r\n     }\r\n-    \r\n+\r\n     /// <summary>\r\n     /// 暂停视频\r\n     /// </summary>\r\n     public void PauseVideo()\r\n     {\r\n-        if (videoPlayer == null || !isPlaying)\r\n+        if (videoPlayer != null)\r\n         {\r\n-            Debug.Log(\"视频未在播放\");\r\n-            return;\r\n+            videoPlayer.Pause();\r\n+            isPlaying = false;\r\n+            Debug.Log(\"暂停视频\");\r\n         }\r\n-        \r\n-        videoPlayer.Pause();\r\n-        isPaused = true;\r\n-        \r\n-        Debug.Log(\"视频已暂停\");\r\n     }\r\n-    \r\n+\r\n     /// <summary>\r\n-    /// 恢复视频播放\r\n-    /// </summary>\r\n-    public void ResumeVideo()\r\n-    {\r\n-        if (videoPlayer == null || !isPaused)\r\n-        {\r\n-            Debug.Log(\"视频未暂停\");\r\n-            return;\r\n-        }\r\n-        \r\n-        videoPlayer.Play();\r\n-        isPaused = false;\r\n-        \r\n-        Debug.Log(\"视频已恢复播放\");\r\n-    }\r\n-    \r\n-    /// <summary>\r\n     /// 停止视频\r\n     /// </summary>\r\n     public void StopVideo()\r\n     {\r\n-        if (videoPlayer == null)\r\n+        if (videoPlayer != null)\r\n         {\r\n-            return;\r\n+            videoPlayer.Stop();\r\n+            isPlaying = false;\r\n+            Debug.Log(\"停止视频\");\r\n         }\r\n-        \r\n-        videoPlayer.Stop();\r\n-        isPlaying = false;\r\n-        isPaused = false;\r\n-        currentTime = 0.0;\r\n-        \r\n-        Debug.Log(\"视频已停止\");\r\n     }\r\n-    \r\n+\r\n     /// <summary>\r\n-    /// 跳转到指定时间\r\n+    /// 设置播放时间\r\n     /// </summary>\r\n-    /// <param name=\"timeInSeconds\">时间（秒）</param>\r\n-    public void SeekToTime(double timeInSeconds)\r\n+    /// <param name=\"time\">时间（秒）</param>\r\n+    public void SetPlaybackTime(double time)\r\n     {\r\n-        if (videoPlayer == null || videoPlayer.clip == null)\r\n+        if (videoPlayer != null && videoPlayer.isPrepared)\r\n         {\r\n-            Debug.LogError(\"没有可播放的视频\");\r\n-            return;\r\n+            videoPlayer.time = Mathf.Clamp((float)time, 0f, (float)duration);\r\n+            currentTime = videoPlayer.time;\r\n         }\r\n-        \r\n-        timeInSeconds = Mathf.Clamp((float)timeInSeconds, 0f, (float)videoPlayer.length);\r\n-        videoPlayer.time = timeInSeconds;\r\n-        \r\n-        Debug.Log($\"跳转到时间: {timeInSeconds:F2}秒\");\r\n     }\r\n-    \r\n+\r\n     /// <summary>\r\n     /// 设置播放速度\r\n     /// </summary>\r\n     /// <param name=\"speed\">播放速度</param>\r\n     public void SetPlaybackSpeed(float speed)\r\n     {\r\n-        if (videoPlayer == null)\r\n+        playbackSpeed = speed;\r\n+        if (videoPlayer != null)\r\n         {\r\n-            return;\r\n+            videoPlayer.playbackSpeed = speed;\r\n         }\r\n-        \r\n-        playbackSpeed = Mathf.Clamp(speed, 0.1f, 10.0f);\r\n-        videoPlayer.playbackSpeed = playbackSpeed;\r\n-        \r\n-        Debug.Log($\"播放速度已设置为: {playbackSpeed}x\");\r\n     }\r\n-    \r\n+\r\n     /// <summary>\r\n     /// 设置音量\r\n     /// </summary>\r\n-    /// <param name=\"newVolume\">音量 (0-1)</param>\r\n-    public void SetVolume(float newVolume)\r\n+    /// <param name=\"vol\">音量</param>\r\n+    public void SetVolume(float vol)\r\n     {\r\n-        if (videoPlayer == null)\r\n+        volume = Mathf.Clamp01(vol);\r\n+        if (videoPlayer != null)\r\n         {\r\n-            return;\r\n+            videoPlayer.SetDirectAudioVolume(0, volume);\r\n         }\r\n-        \r\n-        volume = Mathf.Clamp01(newVolume);\r\n-        videoPlayer.SetDirectAudioVolume(0, volume);\r\n-        \r\n-        Debug.Log($\"音量已设置为: {volume:F2}\");\r\n     }\r\n-    \r\n+\r\n     /// <summary>\r\n-    /// 设置静音\r\n-    /// </summary>\r\n-    /// <param name=\"muteAudio\">是否静音</param>\r\n-    public void SetMute(bool muteAudio)\r\n-    {\r\n-        if (videoPlayer == null)\r\n-        {\r\n-            return;\r\n-        }\r\n-        \r\n-        mute = muteAudio;\r\n-        videoPlayer.SetDirectAudioMute(0, mute);\r\n-        \r\n-        Debug.Log($\"静音状态已设置为: {mute}\");\r\n-    }\r\n-    \r\n-    /// <summary>\r\n     /// 设置循环播放\r\n     /// </summary>\r\n     /// <param name=\"loopVideo\">是否循环</param>\r\n     public void SetLoop(bool loopVideo)\r\n     {\r\n-        if (videoPlayer == null)\r\n-        {\r\n-            return;\r\n-        }\r\n-        \r\n         loop = loopVideo;\r\n-        videoPlayer.isLooping = loop;\r\n-        \r\n-        Debug.Log($\"循环播放已设置为: {loop}\");\r\n-    }\r\n-    \r\n-    /// <summary>\r\n-    /// 播放下一个视频\r\n-    /// </summary>\r\n-    public void PlayNextVideo()\r\n-    {\r\n-        if (videoClips == null || videoClips.Length == 0)\r\n+        if (videoPlayer != null)\r\n         {\r\n-            Debug.LogError(\"没有可播放的视频\");\r\n-            return;\r\n+            videoPlayer.isLooping = loopVideo;\r\n         }\r\n-        \r\n-        int nextIndex = (currentClipIndex + 1) % videoClips.Length;\r\n-        LoadVideo(nextIndex);\r\n-        PlayVideo();\r\n     }\r\n-    \r\n+\r\n     /// <summary>\r\n-    /// 播放上一个视频\r\n+    /// 获取视频信息\r\n     /// </summary>\r\n-    public void PlayPreviousVideo()\r\n+    public void GetVideoInfo()\r\n     {\r\n-        if (videoClips == null || videoClips.Length == 0)\r\n+        if (videoPlayer != null)\r\n         {\r\n-            Debug.LogError(\"没有可播放的视频\");\r\n-            return;\r\n+            Debug.Log(\"=== 视频信息 ===\");\r\n+            Debug.Log($\"是否准备完成: {videoPlayer.isPrepared}\");\r\n+            Debug.Log($\"是否正在播放: {videoPlayer.isPlaying}\");\r\n+            Debug.Log($\"是否循环: {videoPlayer.isLooping}\");\r\n+            Debug.Log($\"播放速度: {videoPlayer.playbackSpeed}\");\r\n+            Debug.Log($\"当前时间: {videoPlayer.time:F2}s\");\r\n+            Debug.Log($\"总时长: {videoPlayer.length:F2}s\");\r\n+            Debug.Log($\"帧率: {videoPlayer.frameRate}\");\r\n+            Debug.Log($\"分辨率: {videoPlayer.width} x {videoPlayer.height}\");\r\n+            \r\n+            if (videoPlayer.clip != null)\r\n+            {\r\n+                Debug.Log($\"视频片段: {videoPlayer.clip.name}\");\r\n+            }\r\n+            else if (!string.IsNullOrEmpty(videoPlayer.url))\r\n+            {\r\n+                Debug.Log($\"视频URL: {videoPlayer.url}\");\r\n+            }\r\n         }\r\n-        \r\n-        int prevIndex = (currentClipIndex - 1 + videoClips.Length) % videoClips.Length;\r\n-        LoadVideo(prevIndex);\r\n-        PlayVideo();\r\n     }\r\n-    \r\n+\r\n     /// <summary>\r\n-    /// 更新视频信息\r\n+    /// 切换渲染模式\r\n     /// </summary>\r\n-    private void UpdateVideoInfo()\r\n+    public void ToggleRenderMode()\r\n     {\r\n-        if (videoPlayer == null || videoPlayer.clip == null)\r\n-        {\r\n-            return;\r\n-        }\r\n-        \r\n-        VideoClip clip = videoPlayer.clip;\r\n-        videoName = clip.name;\r\n-        videoResolution = new Vector2Int((int)clip.width, (int)clip.height);\r\n-        frameRate = clip.frameRate;\r\n-        frameCount = clip.frameCount;\r\n-        totalTime = clip.length;\r\n-        \r\n-        Debug.Log($\"视频信息更新 - 名称: {videoName}, 分辨率: {videoResolution}, 帧率: {frameRate:F2}\");\r\n+        useRenderTexture = !useRenderTexture;\r\n+        SetupVideoPlayer();\r\n+        Debug.Log($\"切换到{(useRenderTexture ? \"渲染纹理\" : \"材质覆盖\")}模式\");\r\n     }\r\n-    \r\n+\r\n     /// <summary>\r\n-    /// 获取当前播放进度\r\n-    /// </summary>\r\n-    /// <returns>播放进度 (0-1)</returns>\r\n-    public float GetPlaybackProgress()\r\n-    {\r\n-        if (videoPlayer == null || totalTime <= 0)\r\n-        {\r\n-            return 0f;\r\n-        }\r\n-        \r\n-        return (float)(currentTime / totalTime);\r\n-    }\r\n-    \r\n-    /// <summary>\r\n-    /// 设置播放进度\r\n-    /// </summary>\r\n-    /// <param name=\"progress\">播放进度 (0-1)</param>\r\n-    public void SetPlaybackProgress(float progress)\r\n-    {\r\n-        if (videoPlayer == null || totalTime <= 0)\r\n-        {\r\n-            return;\r\n-        }\r\n-        \r\n-        progress = Mathf.Clamp01(progress);\r\n-        double targetTime = progress * totalTime;\r\n-        SeekToTime(targetTime);\r\n-    }\r\n-    \r\n-    /// <summary>\r\n-    /// 获取视频信息\r\n-    /// </summary>\r\n-    public void GetVideoInfo()\r\n-    {\r\n-        Debug.Log(\"=== 视频信息 ===\");\r\n-        Debug.Log($\"VideoPlayer: {(videoPlayer != null ? \"已配置\" : \"无\")}\");\r\n-        Debug.Log($\"当前视频: {videoName}\");\r\n-        Debug.Log($\"视频分辨率: {videoResolution}\");\r\n-        Debug.Log($\"帧率: {frameRate:F2} FPS\");\r\n-        Debug.Log($\"总帧数: {frameCount}\");\r\n-        Debug.Log($\"总时长: {totalTime:F2}秒\");\r\n-        Debug.Log($\"当前时间: {currentTime:F2}秒\");\r\n-        Debug.Log($\"播放进度: {GetPlaybackProgress():P2}\");\r\n-        Debug.Log($\"播放状态: {(isPlaying ? (isPaused ? \"暂停\" : \"播放中\") : \"停止\")}\");\r\n-        Debug.Log($\"播放速度: {playbackSpeed}x\");\r\n-        Debug.Log($\"音量: {volume:F2}\");\r\n-        Debug.Log($\"静音: {mute}\");\r\n-        Debug.Log($\"循环: {loop}\");\r\n-    }\r\n-    \r\n-    /// <summary>\r\n     /// 重置视频设置\r\n     /// </summary>\r\n     public void ResetVideoSettings()\r\n     {\r\n-        if (videoPlayer == null)\r\n+        if (videoPlayer != null)\r\n         {\r\n-            return;\r\n+            videoPlayer.Stop();\r\n+            videoPlayer.time = 0;\r\n+            videoPlayer.playbackSpeed = 1f;\r\n+            videoPlayer.SetDirectAudioVolume(0, 1f);\r\n+            videoPlayer.isLooping = false;\r\n+            \r\n+            isPlaying = false;\r\n+            currentTime = 0f;\r\n+            playbackSpeed = 1f;\r\n+            volume = 1f;\r\n+            loop = false;\r\n+            \r\n+            Debug.Log(\"视频设置已重置\");\r\n         }\r\n-        \r\n-        // 重置设置\r\n-        playbackSpeed = 1.0f;\r\n-        volume = 1.0f;\r\n-        mute = false;\r\n-        loop = true;\r\n-        \r\n-        // 应用设置\r\n-        videoPlayer.playbackSpeed = playbackSpeed;\r\n-        videoPlayer.SetDirectAudioVolume(0, volume);\r\n-        videoPlayer.SetDirectAudioMute(0, mute);\r\n-        videoPlayer.isLooping = loop;\r\n-        \r\n-        // 重置播放位置\r\n-        SeekToTime(0);\r\n-        \r\n-        Debug.Log(\"视频设置已重置\");\r\n     }\r\n-    \r\n-    private void Update()\r\n-    {\r\n-        // 更新当前时间\r\n-        if (videoPlayer != null && isPlaying && !isPaused)\r\n-        {\r\n-            currentTime = videoPlayer.time;\r\n-        }\r\n-    }\r\n-    \r\n+\r\n     private void OnGUI()\r\n     {\r\n-        // 简单的GUI界面用于测试\r\n-        GUILayout.BeginArea(new Rect(10, 10, 400, 700));\r\n-        GUILayout.Label(\"视频系统演示\", EditorStyles.boldLabel);\r\n+        GUILayout.BeginArea(new Rect(10, 10, 350, 500));\r\n+        GUILayout.Label(\"Video 视频系统演示\", UnityEditor.EditorStyles.boldLabel);\r\n         \r\n         GUILayout.Space(10);\r\n+        GUILayout.Label(\"播放控制:\");\r\n         \r\n-        // 视频状态\r\n-        GUILayout.Label($\"当前视频: {videoName}\");\r\n-        GUILayout.Label($\"播放状态: {(isPlaying ? (isPaused ? \"暂停\" : \"播放中\") : \"停止\")}\");\r\n-        GUILayout.Label($\"当前时间: {currentTime:F2}s / {totalTime:F2}s\");\r\n-        GUILayout.Label($\"播放进度: {GetPlaybackProgress():P2}\");\r\n-        GUILayout.Label($\"播放速度: {playbackSpeed:F2}x\");\r\n-        GUILayout.Label($\"音量: {volume:F2}\");\r\n-        \r\n-        GUILayout.Space(10);\r\n-        \r\n-        // 播放控制\r\n         GUILayout.BeginHorizontal();\r\n         if (GUILayout.Button(\"播放\"))\r\n         {\r\n             PlayVideo();\r\n@@ -536,88 +297,59 @@\n             StopVideo();\r\n         }\r\n         GUILayout.EndHorizontal();\r\n         \r\n-        GUILayout.BeginHorizontal();\r\n-        if (GUILayout.Button(\"上一个\"))\r\n-        {\r\n-            PlayPreviousVideo();\r\n-        }\r\n-        if (GUILayout.Button(\"下一个\"))\r\n-        {\r\n-            PlayNextVideo();\r\n-        }\r\n-        GUILayout.EndHorizontal();\r\n+        GUILayout.Space(5);\r\n+        GUILayout.Label($\"状态: {(isPlaying ? \"播放中\" : \"已暂停\")}\");\r\n+        GUILayout.Label($\"时间: {currentTime:F1}s / {duration:F1}s\");\r\n         \r\n         GUILayout.Space(10);\r\n+        GUILayout.Label(\"播放设置:\");\r\n         \r\n-        // 设置控制\r\n-        GUILayout.Label(\"播放速度:\");\r\n-        playbackSpeed = GUILayout.HorizontalSlider(playbackSpeed, 0.1f, 3.0f);\r\n-        if (GUILayout.Button(\"设置速度\"))\r\n+        playbackSpeed = float.TryParse(GUILayout.TextField(\"播放速度\", playbackSpeed.ToString()), out var speed) ? speed : playbackSpeed;\r\n+        if (GUILayout.Button(\"设置播放速度\"))\r\n         {\r\n             SetPlaybackSpeed(playbackSpeed);\r\n         }\r\n         \r\n-        GUILayout.Space(5);\r\n-        \r\n-        GUILayout.Label(\"音量:\");\r\n-        volume = GUILayout.HorizontalSlider(volume, 0f, 1f);\r\n+        volume = float.TryParse(GUILayout.TextField(\"音量\", volume.ToString()), out var vol) ? vol : volume;\r\n         if (GUILayout.Button(\"设置音量\"))\r\n         {\r\n             SetVolume(volume);\r\n         }\r\n         \r\n-        GUILayout.Space(5);\r\n-        \r\n-        mute = GUILayout.Toggle(mute, \"静音\");\r\n-        if (GUILayout.Button(\"设置静音\"))\r\n-        {\r\n-            SetMute(mute);\r\n-        }\r\n-        \r\n-        GUILayout.Space(5);\r\n-        \r\n         loop = GUILayout.Toggle(loop, \"循环播放\");\r\n         if (GUILayout.Button(\"设置循环\"))\r\n         {\r\n             SetLoop(loop);\r\n         }\r\n         \r\n         GUILayout.Space(10);\r\n+        GUILayout.Label(\"时间控制:\");\r\n         \r\n-        // 进度控制\r\n-        GUILayout.Label(\"播放进度:\");\r\n-        float progress = GetPlaybackProgress();\r\n-        progress = GUILayout.HorizontalSlider(progress, 0f, 1f);\r\n-        if (GUILayout.Button(\"跳转到进度\"))\r\n+        float timeInput = (float)currentTime;\r\n+        timeInput = float.TryParse(GUILayout.TextField(\"跳转时间\", timeInput.ToString()), out var time) ? time : timeInput;\r\n+        if (GUILayout.Button(\"跳转到指定时间\"))\r\n         {\r\n-            SetPlaybackProgress(progress);\r\n+            SetPlaybackTime(timeInput);\r\n         }\r\n         \r\n         GUILayout.Space(10);\r\n         \r\n+        if (GUILayout.Button(\"切换渲染模式\"))\r\n+        {\r\n+            ToggleRenderMode();\r\n+        }\r\n+        \r\n         if (GUILayout.Button(\"获取视频信息\"))\r\n         {\r\n             GetVideoInfo();\r\n         }\r\n         \r\n-        if (GUILayout.Button(\"重置设置\"))\r\n+        if (GUILayout.Button(\"重置视频设置\"))\r\n         {\r\n             ResetVideoSettings();\r\n         }\r\n         \r\n         GUILayout.EndArea();\r\n     }\r\n-    \r\n-    private void OnDestroy()\r\n-    {\r\n-        // 清理事件\r\n-        if (videoPlayer != null)\r\n-        {\r\n-            videoPlayer.started -= OnVideoStarted;\r\n-            videoPlayer.loopPointReached -= OnVideoFinished;\r\n-            videoPlayer.errorReceived -= OnVideoError;\r\n-            videoPlayer.frameReady -= OnFrameReady;\r\n-        }\r\n-    }\r\n } \n\\ No newline at end of file\n"
                },
                {
                    "date": 1750937631624,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,355 +1,397 @@\n using UnityEngine;\r\n using UnityEngine.Video;\r\n using System.Collections;\r\n \r\n-/// <summary>\r\n-/// UnityEngine.Video 命名空间案例演示\r\n-/// 展示视频播放器、视频控制、视频渲染等核心功能\r\n-/// </summary>\r\n-public class VideoExample : MonoBehaviour\r\n+namespace UnityEditor.Chapter8.Video\r\n {\r\n-    [Header(\"视频设置\")]\r\n-    [SerializeField] private VideoPlayer videoPlayer; //视频播放器\r\n-    [SerializeField] private VideoClip videoClip; //视频片段\r\n-    [SerializeField] private string videoUrl = \"\"; //视频URL\r\n-    [SerializeField] private bool playOnStart = false; //开始时播放\r\n-    [SerializeField] private bool loop = false; //循环播放\r\n-\r\n-    [Header(\"播放控制\")]\r\n-    [SerializeField] private bool isPlaying = false; //是否正在播放\r\n-    [SerializeField] private double currentTime = 0f; //当前时间\r\n-    [SerializeField] private double duration = 0f; //总时长\r\n-    [SerializeField] private float playbackSpeed = 1f; //播放速度\r\n-    [SerializeField] private float volume = 1f; //音量\r\n-\r\n-    [Header(\"渲染设置\")]\r\n-    [SerializeField] private RenderTexture renderTexture; //渲染纹理\r\n-    [SerializeField] private Material targetMaterial; //目标材质\r\n-    [SerializeField] private bool useRenderTexture = false; //使用渲染纹理\r\n-\r\n-    private void Start()\r\n+    /// <summary>\r\n+    /// UnityEngine.Video 视频系统案例\r\n+    /// 演示VideoPlayer、视频播放控制、视频纹理等功能\r\n+    /// </summary>\r\n+    public class VideoExample : MonoBehaviour\r\n     {\r\n-        if (videoPlayer == null)\r\n+        [Header(\"视频播放器设置\")]\r\n+        [SerializeField] private VideoPlayer videoPlayer;\r\n+        [SerializeField] private RenderTexture renderTexture;\r\n+        [SerializeField] private Material videoMaterial;\r\n+        \r\n+        [Header(\"视频源\")]\r\n+        [SerializeField] private VideoClip videoClip;\r\n+        [SerializeField] private string videoURL = \"http://commondatastorage.googleapis.com/gtv-videos-bucket/sample/BigBuckBunny.mp4\";\r\n+        \r\n+        [Header(\"播放控制\")]\r\n+        [SerializeField] private bool autoPlay = true;\r\n+        [SerializeField] private bool loop = true;\r\n+        [SerializeField] private float playbackSpeed = 1.0f;\r\n+        \r\n+        [Header(\"音频设置\")]\r\n+        [SerializeField] private bool enableAudio = true;\r\n+        [SerializeField] private float audioVolume = 1.0f;\r\n+        \r\n+        [Header(\"UI控制\")]\r\n+        [SerializeField] private bool showControls = true;\r\n+        \r\n+        private bool isPlaying = false;\r\n+        private bool isPaused = false;\r\n+        private double currentTime = 0;\r\n+        private double totalTime = 0;\r\n+        \r\n+        private void Start()\r\n         {\r\n-            videoPlayer = GetComponent<VideoPlayer>();\r\n+            InitializeVideoPlayer();\r\n         }\r\n-\r\n-        if (videoPlayer == null)\r\n+        \r\n+        /// <summary>\r\n+        /// 初始化视频播放器\r\n+        /// </summary>\r\n+        private void InitializeVideoPlayer()\r\n         {\r\n-            videoPlayer = gameObject.AddComponent<VideoPlayer>();\r\n-        }\r\n-\r\n-        SetupVideoPlayer();\r\n-    }\r\n-\r\n-    /// <summary>\r\n-    /// 设置视频播放器\r\n-    /// </summary>\r\n-    private void SetupVideoPlayer()\r\n-    {\r\n-        if (videoPlayer != null)\r\n-        {\r\n-            // 设置事件监听\r\n-            videoPlayer.prepareCompleted += OnVideoPrepared;\r\n-            videoPlayer.loopPointReached += OnVideoLoopPointReached;\r\n-            videoPlayer.errorReceived += OnVideoError;\r\n-\r\n-            // 设置基本属性\r\n-            videoPlayer.playOnAwake = playOnStart;\r\n+            if (videoPlayer == null)\r\n+            {\r\n+                videoPlayer = gameObject.AddComponent<VideoPlayer>();\r\n+            }\r\n+            \r\n+            // 设置视频播放器属性\r\n+            videoPlayer.playOnAwake = autoPlay;\r\n             videoPlayer.isLooping = loop;\r\n             videoPlayer.playbackSpeed = playbackSpeed;\r\n-            videoPlayer.SetDirectAudioVolume(0, volume);\r\n-\r\n+            \r\n+            // 设置音频\r\n+            videoPlayer.audioOutputMode = VideoAudioOutputMode.AudioSource;\r\n+            videoPlayer.SetTargetAudioSource(0, GetComponent<AudioSource>());\r\n+            videoPlayer.audioVolume = audioVolume;\r\n+            \r\n+            // 设置渲染目标\r\n+            if (renderTexture != null)\r\n+            {\r\n+                videoPlayer.targetTexture = renderTexture;\r\n+            }\r\n+            \r\n             // 设置视频源\r\n             if (videoClip != null)\r\n             {\r\n                 videoPlayer.clip = videoClip;\r\n             }\r\n-            else if (!string.IsNullOrEmpty(videoUrl))\r\n+            else if (!string.IsNullOrEmpty(videoURL))\r\n             {\r\n-                videoPlayer.url = videoUrl;\r\n+                videoPlayer.url = videoURL;\r\n             }\r\n-\r\n-            // 设置渲染目标\r\n-            if (useRenderTexture && renderTexture != null)\r\n+            \r\n+            // 注册事件\r\n+            videoPlayer.prepareCompleted += OnVideoPrepared;\r\n+            videoPlayer.loopPointReached += OnVideoLoopPointReached;\r\n+            videoPlayer.errorReceived += OnVideoError;\r\n+            \r\n+            // 准备视频\r\n+            videoPlayer.Prepare();\r\n+        }\r\n+        \r\n+        /// <summary>\r\n+        /// 视频准备完成回调\r\n+        /// </summary>\r\n+        private void OnVideoPrepared(VideoPlayer source)\r\n+        {\r\n+            Debug.Log(\"视频准备完成\");\r\n+            totalTime = source.length;\r\n+            \r\n+            if (autoPlay)\r\n             {\r\n-                videoPlayer.targetTexture = renderTexture;\r\n+                PlayVideo();\r\n             }\r\n-            else if (targetMaterial != null)\r\n-            {\r\n-                videoPlayer.renderMode = VideoRenderMode.MaterialOverride;\r\n-                videoPlayer.targetMaterialRenderer = GetComponent<Renderer>();\r\n-                videoPlayer.targetMaterialProperty = \"_MainTex\";\r\n-            }\r\n         }\r\n-    }\r\n-\r\n-    /// <summary>\r\n-    /// 视频准备完成回调\r\n-    /// </summary>\r\n-    private void OnVideoPrepared(VideoPlayer source)\r\n-    {\r\n-        Debug.Log(\"视频准备完成\");\r\n-        duration = source.length;\r\n-        isPlaying = source.isPlaying;\r\n-    }\r\n-\r\n-    /// <summary>\r\n-    /// 视频循环点到达回调\r\n-    /// </summary>\r\n-    private void OnVideoLoopPointReached(VideoPlayer source)\r\n-    {\r\n-        Debug.Log(\"视频播放完成\");\r\n-        if (!loop)\r\n+        \r\n+        /// <summary>\r\n+        /// 视频循环点到达回调\r\n+        /// </summary>\r\n+        private void OnVideoLoopPointReached(VideoPlayer source)\r\n         {\r\n-            isPlaying = false;\r\n+            Debug.Log(\"视频播放完成，准备循环\");\r\n         }\r\n-    }\r\n-\r\n-    /// <summary>\r\n-    /// 视频错误回调\r\n-    /// </summary>\r\n-    private void OnVideoError(VideoPlayer source, string message)\r\n-    {\r\n-        Debug.LogError($\"视频播放错误: {message}\");\r\n-    }\r\n-\r\n-    private void Update()\r\n-    {\r\n-        if (videoPlayer != null && videoPlayer.isPrepared)\r\n+        \r\n+        /// <summary>\r\n+        /// 视频错误回调\r\n+        /// </summary>\r\n+        private void OnVideoError(VideoPlayer source, string message)\r\n         {\r\n-            currentTime = videoPlayer.time;\r\n-            isPlaying = videoPlayer.isPlaying;\r\n+            Debug.LogError($\"视频播放错误: {message}\");\r\n         }\r\n-    }\r\n-\r\n-    /// <summary>\r\n-    /// 播放视频\r\n-    /// </summary>\r\n-    public void PlayVideo()\r\n-    {\r\n-        if (videoPlayer != null)\r\n+        \r\n+        /// <summary>\r\n+        /// 播放视频\r\n+        /// </summary>\r\n+        public void PlayVideo()\r\n         {\r\n-            videoPlayer.Play();\r\n-            isPlaying = true;\r\n-            Debug.Log(\"开始播放视频\");\r\n+            if (videoPlayer.isPrepared)\r\n+            {\r\n+                videoPlayer.Play();\r\n+                isPlaying = true;\r\n+                isPaused = false;\r\n+                Debug.Log(\"开始播放视频\");\r\n+            }\r\n         }\r\n-    }\r\n-\r\n-    /// <summary>\r\n-    /// 暂停视频\r\n-    /// </summary>\r\n-    public void PauseVideo()\r\n-    {\r\n-        if (videoPlayer != null)\r\n+        \r\n+        /// <summary>\r\n+        /// 暂停视频\r\n+        /// </summary>\r\n+        public void PauseVideo()\r\n         {\r\n-            videoPlayer.Pause();\r\n-            isPlaying = false;\r\n-            Debug.Log(\"暂停视频\");\r\n+            if (isPlaying)\r\n+            {\r\n+                videoPlayer.Pause();\r\n+                isPaused = true;\r\n+                Debug.Log(\"视频已暂停\");\r\n+            }\r\n         }\r\n-    }\r\n-\r\n-    /// <summary>\r\n-    /// 停止视频\r\n-    /// </summary>\r\n-    public void StopVideo()\r\n-    {\r\n-        if (videoPlayer != null)\r\n+        \r\n+        /// <summary>\r\n+        /// 恢复播放\r\n+        /// </summary>\r\n+        public void ResumeVideo()\r\n         {\r\n+            if (isPaused)\r\n+            {\r\n+                videoPlayer.Play();\r\n+                isPaused = false;\r\n+                Debug.Log(\"视频已恢复播放\");\r\n+            }\r\n+        }\r\n+        \r\n+        /// <summary>\r\n+        /// 停止视频\r\n+        /// </summary>\r\n+        public void StopVideo()\r\n+        {\r\n             videoPlayer.Stop();\r\n             isPlaying = false;\r\n-            Debug.Log(\"停止视频\");\r\n+            isPaused = false;\r\n+            Debug.Log(\"视频已停止\");\r\n         }\r\n-    }\r\n-\r\n-    /// <summary>\r\n-    /// 设置播放时间\r\n-    /// </summary>\r\n-    /// <param name=\"time\">时间（秒）</param>\r\n-    public void SetPlaybackTime(double time)\r\n-    {\r\n-        if (videoPlayer != null && videoPlayer.isPrepared)\r\n+        \r\n+        /// <summary>\r\n+        /// 跳转到指定时间\r\n+        /// </summary>\r\n+        public void SeekToTime(double timeInSeconds)\r\n         {\r\n-            videoPlayer.time = Mathf.Clamp((float)time, 0f, (float)duration);\r\n-            currentTime = videoPlayer.time;\r\n+            if (videoPlayer.isPrepared)\r\n+            {\r\n+                videoPlayer.time = Mathf.Clamp((float)timeInSeconds, 0, (float)totalTime);\r\n+                Debug.Log($\"跳转到时间: {timeInSeconds}秒\");\r\n+            }\r\n         }\r\n-    }\r\n-\r\n-    /// <summary>\r\n-    /// 设置播放速度\r\n-    /// </summary>\r\n-    /// <param name=\"speed\">播放速度</param>\r\n-    public void SetPlaybackSpeed(float speed)\r\n-    {\r\n-        playbackSpeed = speed;\r\n-        if (videoPlayer != null)\r\n+        \r\n+        /// <summary>\r\n+        /// 设置播放速度\r\n+        /// </summary>\r\n+        public void SetPlaybackSpeed(float speed)\r\n         {\r\n-            videoPlayer.playbackSpeed = speed;\r\n+            playbackSpeed = Mathf.Clamp(speed, 0.1f, 3.0f);\r\n+            videoPlayer.playbackSpeed = playbackSpeed;\r\n+            Debug.Log($\"播放速度设置为: {playbackSpeed}x\");\r\n         }\r\n-    }\r\n-\r\n-    /// <summary>\r\n-    /// 设置音量\r\n-    /// </summary>\r\n-    /// <param name=\"vol\">音量</param>\r\n-    public void SetVolume(float vol)\r\n-    {\r\n-        volume = Mathf.Clamp01(vol);\r\n-        if (videoPlayer != null)\r\n+        \r\n+        /// <summary>\r\n+        /// 设置音频音量\r\n+        /// </summary>\r\n+        public void SetAudioVolume(float volume)\r\n         {\r\n-            videoPlayer.SetDirectAudioVolume(0, volume);\r\n+            audioVolume = Mathf.Clamp01(volume);\r\n+            videoPlayer.audioVolume = audioVolume;\r\n+            Debug.Log($\"音频音量设置为: {audioVolume}\");\r\n         }\r\n-    }\r\n-\r\n-    /// <summary>\r\n-    /// 设置循环播放\r\n-    /// </summary>\r\n-    /// <param name=\"loopVideo\">是否循环</param>\r\n-    public void SetLoop(bool loopVideo)\r\n-    {\r\n-        loop = loopVideo;\r\n-        if (videoPlayer != null)\r\n+        \r\n+        /// <summary>\r\n+        /// 切换循环播放\r\n+        /// </summary>\r\n+        public void ToggleLoop()\r\n         {\r\n-            videoPlayer.isLooping = loopVideo;\r\n+            loop = !loop;\r\n+            videoPlayer.isLooping = loop;\r\n+            Debug.Log($\"循环播放: {(loop ? \"开启\" : \"关闭\")}\");\r\n         }\r\n-    }\r\n-\r\n-    /// <summary>\r\n-    /// 获取视频信息\r\n-    /// </summary>\r\n-    public void GetVideoInfo()\r\n-    {\r\n-        if (videoPlayer != null)\r\n+        \r\n+        /// <summary>\r\n+        /// 获取当前播放时间\r\n+        /// </summary>\r\n+        public double GetCurrentTime()\r\n         {\r\n-            Debug.Log(\"=== 视频信息 ===\");\r\n-            Debug.Log($\"是否准备完成: {videoPlayer.isPrepared}\");\r\n-            Debug.Log($\"是否正在播放: {videoPlayer.isPlaying}\");\r\n-            Debug.Log($\"是否循环: {videoPlayer.isLooping}\");\r\n-            Debug.Log($\"播放速度: {videoPlayer.playbackSpeed}\");\r\n-            Debug.Log($\"当前时间: {videoPlayer.time:F2}s\");\r\n-            Debug.Log($\"总时长: {videoPlayer.length:F2}s\");\r\n-            Debug.Log($\"帧率: {videoPlayer.frameRate}\");\r\n-            Debug.Log($\"分辨率: {videoPlayer.width} x {videoPlayer.height}\");\r\n-            \r\n-            if (videoPlayer.clip != null)\r\n-            {\r\n-                Debug.Log($\"视频片段: {videoPlayer.clip.name}\");\r\n-            }\r\n-            else if (!string.IsNullOrEmpty(videoPlayer.url))\r\n-            {\r\n-                Debug.Log($\"视频URL: {videoPlayer.url}\");\r\n-            }\r\n+            return videoPlayer.time;\r\n         }\r\n-    }\r\n-\r\n-    /// <summary>\r\n-    /// 切换渲染模式\r\n-    /// </summary>\r\n-    public void ToggleRenderMode()\r\n-    {\r\n-        useRenderTexture = !useRenderTexture;\r\n-        SetupVideoPlayer();\r\n-        Debug.Log($\"切换到{(useRenderTexture ? \"渲染纹理\" : \"材质覆盖\")}模式\");\r\n-    }\r\n-\r\n-    /// <summary>\r\n-    /// 重置视频设置\r\n-    /// </summary>\r\n-    public void ResetVideoSettings()\r\n-    {\r\n-        if (videoPlayer != null)\r\n+        \r\n+        /// <summary>\r\n+        /// 获取视频总时长\r\n+        /// </summary>\r\n+        public double GetTotalTime()\r\n         {\r\n-            videoPlayer.Stop();\r\n-            videoPlayer.time = 0;\r\n-            videoPlayer.playbackSpeed = 1f;\r\n-            videoPlayer.SetDirectAudioVolume(0, 1f);\r\n-            videoPlayer.isLooping = false;\r\n-            \r\n-            isPlaying = false;\r\n-            currentTime = 0f;\r\n-            playbackSpeed = 1f;\r\n-            volume = 1f;\r\n-            loop = false;\r\n-            \r\n-            Debug.Log(\"视频设置已重置\");\r\n+            return videoPlayer.length;\r\n         }\r\n-    }\r\n-\r\n-    private void OnGUI()\r\n-    {\r\n-        GUILayout.BeginArea(new Rect(10, 10, 350, 500));\r\n-        GUILayout.Label(\"Video 视频系统演示\", UnityEditor.EditorStyles.boldLabel);\r\n         \r\n-        GUILayout.Space(10);\r\n-        GUILayout.Label(\"播放控制:\");\r\n-        \r\n-        GUILayout.BeginHorizontal();\r\n-        if (GUILayout.Button(\"播放\"))\r\n+        /// <summary>\r\n+        /// 获取播放进度百分比\r\n+        /// </summary>\r\n+        public float GetProgress()\r\n         {\r\n-            PlayVideo();\r\n+            if (totalTime > 0)\r\n+            {\r\n+                return (float)(currentTime / totalTime);\r\n+            }\r\n+            return 0f;\r\n         }\r\n-        if (GUILayout.Button(\"暂停\"))\r\n-        {\r\n-            PauseVideo();\r\n-        }\r\n-        if (GUILayout.Button(\"停止\"))\r\n-        {\r\n-            StopVideo();\r\n-        }\r\n-        GUILayout.EndHorizontal();\r\n         \r\n-        GUILayout.Space(5);\r\n-        GUILayout.Label($\"状态: {(isPlaying ? \"播放中\" : \"已暂停\")}\");\r\n-        GUILayout.Label($\"时间: {currentTime:F1}s / {duration:F1}s\");\r\n-        \r\n-        GUILayout.Space(10);\r\n-        GUILayout.Label(\"播放设置:\");\r\n-        \r\n-        playbackSpeed = float.TryParse(GUILayout.TextField(\"播放速度\", playbackSpeed.ToString()), out var speed) ? speed : playbackSpeed;\r\n-        if (GUILayout.Button(\"设置播放速度\"))\r\n+        /// <summary>\r\n+        /// 设置视频纹理到材质\r\n+        /// </summary>\r\n+        public void SetVideoTextureToMaterial()\r\n         {\r\n-            SetPlaybackSpeed(playbackSpeed);\r\n+            if (videoMaterial != null && renderTexture != null)\r\n+            {\r\n+                videoMaterial.mainTexture = renderTexture;\r\n+                Debug.Log(\"视频纹理已设置到材质\");\r\n+            }\r\n         }\r\n         \r\n-        volume = float.TryParse(GUILayout.TextField(\"音量\", volume.ToString()), out var vol) ? vol : volume;\r\n-        if (GUILayout.Button(\"设置音量\"))\r\n+        /// <summary>\r\n+        /// 创建视频纹理\r\n+        /// </summary>\r\n+        public void CreateVideoTexture(int width = 1920, int height = 1080)\r\n         {\r\n-            SetVolume(volume);\r\n+            renderTexture = new RenderTexture(width, height, 0);\r\n+            renderTexture.Create();\r\n+            videoPlayer.targetTexture = renderTexture;\r\n+            Debug.Log($\"创建视频纹理: {width}x{height}\");\r\n         }\r\n         \r\n-        loop = GUILayout.Toggle(loop, \"循环播放\");\r\n-        if (GUILayout.Button(\"设置循环\"))\r\n+        /// <summary>\r\n+        /// 截图功能\r\n+        /// </summary>\r\n+        public void TakeScreenshot()\r\n         {\r\n-            SetLoop(loop);\r\n+            if (renderTexture != null)\r\n+            {\r\n+                StartCoroutine(CaptureScreenshot());\r\n+            }\r\n         }\r\n         \r\n-        GUILayout.Space(10);\r\n-        GUILayout.Label(\"时间控制:\");\r\n-        \r\n-        float timeInput = (float)currentTime;\r\n-        timeInput = float.TryParse(GUILayout.TextField(\"跳转时间\", timeInput.ToString()), out var time) ? time : timeInput;\r\n-        if (GUILayout.Button(\"跳转到指定时间\"))\r\n+        private IEnumerator CaptureScreenshot()\r\n         {\r\n-            SetPlaybackTime(timeInput);\r\n+            yield return new WaitForEndOfFrame();\r\n+            \r\n+            RenderTexture.active = renderTexture;\r\n+            Texture2D screenshot = new Texture2D(renderTexture.width, renderTexture.height, TextureFormat.RGB24, false);\r\n+            screenshot.ReadPixels(new Rect(0, 0, renderTexture.width, renderTexture.height), 0, 0);\r\n+            screenshot.Apply();\r\n+            RenderTexture.active = null;\r\n+            \r\n+            byte[] bytes = screenshot.EncodeToPNG();\r\n+            string filename = $\"VideoScreenshot_{System.DateTime.Now:yyyyMMdd_HHmmss}.png\";\r\n+            System.IO.File.WriteAllBytes(Application.persistentDataPath + \"/\" + filename, bytes);\r\n+            \r\n+            Debug.Log($\"截图已保存: {filename}\");\r\n+            DestroyImmediate(screenshot);\r\n         }\r\n         \r\n-        GUILayout.Space(10);\r\n-        \r\n-        if (GUILayout.Button(\"切换渲染模式\"))\r\n+        private void Update()\r\n         {\r\n-            ToggleRenderMode();\r\n+            if (videoPlayer.isPlaying)\r\n+            {\r\n+                currentTime = videoPlayer.time;\r\n+            }\r\n         }\r\n         \r\n-        if (GUILayout.Button(\"获取视频信息\"))\r\n+        private void OnGUI()\r\n         {\r\n-            GetVideoInfo();\r\n+            if (!showControls) return;\r\n+            \r\n+            GUILayout.BeginArea(new Rect(10, 10, 400, 500));\r\n+            GUILayout.Label(\"UnityEngine.Video 视频系统案例\", EditorStyles.boldLabel);\r\n+            \r\n+            GUILayout.Space(10);\r\n+            \r\n+            // 播放控制\r\n+            GUILayout.Label(\"播放控制\", EditorStyles.boldLabel);\r\n+            GUILayout.BeginHorizontal();\r\n+            if (GUILayout.Button(\"播放\")) PlayVideo();\r\n+            if (GUILayout.Button(\"暂停\")) PauseVideo();\r\n+            if (GUILayout.Button(\"停止\")) StopVideo();\r\n+            GUILayout.EndHorizontal();\r\n+            \r\n+            GUILayout.Space(5);\r\n+            \r\n+            // 进度显示\r\n+            float progress = GetProgress();\r\n+            GUILayout.Label($\"进度: {progress:P1} ({currentTime:F1}s / {totalTime:F1}s)\");\r\n+            float newProgress = GUILayout.HorizontalSlider(progress, 0f, 1f);\r\n+            if (Mathf.Abs(newProgress - progress) > 0.01f)\r\n+            {\r\n+                SeekToTime(newProgress * totalTime);\r\n+            }\r\n+            \r\n+            GUILayout.Space(10);\r\n+            \r\n+            // 播放设置\r\n+            GUILayout.Label(\"播放设置\", EditorStyles.boldLabel);\r\n+            \r\n+            float newSpeed = GUILayout.HorizontalSlider(playbackSpeed, 0.1f, 3.0f);\r\n+            if (Mathf.Abs(newSpeed - playbackSpeed) > 0.01f)\r\n+            {\r\n+                SetPlaybackSpeed(newSpeed);\r\n+            }\r\n+            GUILayout.Label($\"播放速度: {playbackSpeed:F1}x\");\r\n+            \r\n+            float newVolume = GUILayout.HorizontalSlider(audioVolume, 0f, 1f);\r\n+            if (Mathf.Abs(newVolume - audioVolume) > 0.01f)\r\n+            {\r\n+                SetAudioVolume(newVolume);\r\n+            }\r\n+            GUILayout.Label($\"音频音量: {audioVolume:F2}\");\r\n+            \r\n+            if (GUILayout.Button($\"循环播放: {(loop ? \"开启\" : \"关闭\")}\"))\r\n+            {\r\n+                ToggleLoop();\r\n+            }\r\n+            \r\n+            GUILayout.Space(10);\r\n+            \r\n+            // 功能按钮\r\n+            GUILayout.Label(\"功能\", EditorStyles.boldLabel);\r\n+            if (GUILayout.Button(\"创建视频纹理\"))\r\n+            {\r\n+                CreateVideoTexture();\r\n+            }\r\n+            \r\n+            if (GUILayout.Button(\"设置视频纹理到材质\"))\r\n+            {\r\n+                SetVideoTextureToMaterial();\r\n+            }\r\n+            \r\n+            if (GUILayout.Button(\"截图\"))\r\n+            {\r\n+                TakeScreenshot();\r\n+            }\r\n+            \r\n+            GUILayout.Space(10);\r\n+            \r\n+            // 状态信息\r\n+            GUILayout.Label(\"状态信息\", EditorStyles.boldLabel);\r\n+            GUILayout.Label($\"准备状态: {(videoPlayer.isPrepared ? \"已准备\" : \"未准备\")}\");\r\n+            GUILayout.Label($\"播放状态: {(isPlaying ? (isPaused ? \"暂停\" : \"播放中\") : \"停止\")}\");\r\n+            GUILayout.Label($\"视频尺寸: {videoPlayer.texture?.width ?? 0} x {videoPlayer.texture?.height ?? 0}\");\r\n+            \r\n+            GUILayout.EndArea();\r\n         }\r\n         \r\n-        if (GUILayout.Button(\"重置视频设置\"))\r\n+        private void OnDestroy()\r\n         {\r\n-            ResetVideoSettings();\r\n+            if (videoPlayer != null)\r\n+            {\r\n+                videoPlayer.prepareCompleted -= OnVideoPrepared;\r\n+                videoPlayer.loopPointReached -= OnVideoLoopPointReached;\r\n+                videoPlayer.errorReceived -= OnVideoError;\r\n+            }\r\n+            \r\n+            if (renderTexture != null)\r\n+            {\r\n+                renderTexture.Release();\r\n+            }\r\n         }\r\n-        \r\n-        GUILayout.EndArea();\r\n     }\r\n } \n\\ No newline at end of file\n"
                }
            ],
            "date": 1750930031090,
            "name": "Commit-0",
            "content": "using UnityEngine;\r\nusing UnityEngine.Video;\r\nusing System.Collections;\r\n\r\n/// <summary>\r\n/// UnityEngine.Video 命名空间案例演示\r\n/// 展示视频播放系统的核心功能\r\n/// </summary>\r\npublic class VideoExample : MonoBehaviour\r\n{\r\n    [Header(\"视频组件\")]\r\n    [SerializeField] private VideoPlayer videoPlayer;\r\n    [SerializeField] private VideoClip[] videoClips;\r\n    [SerializeField] private RenderTexture renderTexture;\r\n    \r\n    [Header(\"视频设置\")]\r\n    [SerializeField] private bool autoPlay = false;\r\n    [SerializeField] private bool loop = true;\r\n    [SerializeField] private float playbackSpeed = 1.0f;\r\n    [SerializeField] private bool mute = false;\r\n    [SerializeField] private float volume = 1.0f;\r\n    \r\n    [Header(\"视频状态\")]\r\n    [SerializeField] private bool isPlaying = false;\r\n    [SerializeField] private bool isPaused = false;\r\n    [SerializeField] private double currentTime = 0.0;\r\n    [SerializeField] private double totalTime = 0.0;\r\n    [SerializeField] private int currentClipIndex = 0;\r\n    \r\n    [Header(\"视频信息\")]\r\n    [SerializeField] private string videoName = \"\";\r\n    [SerializeField] private Vector2Int videoResolution = Vector2Int.zero;\r\n    [SerializeField] private double frameRate = 0.0;\r\n    [SerializeField] private long frameCount = 0;\r\n    \r\n    // 视频事件\r\n    private System.Action<VideoPlayer> onVideoStarted;\r\n    private System.Action<VideoPlayer> onVideoFinished;\r\n    private System.Action<VideoPlayer> onVideoError;\r\n    \r\n    private void Start()\r\n    {\r\n        InitializeVideoSystem();\r\n    }\r\n    \r\n    /// <summary>\r\n    /// 初始化视频系统\r\n    /// </summary>\r\n    private void InitializeVideoSystem()\r\n    {\r\n        // 获取或创建VideoPlayer\r\n        if (videoPlayer == null)\r\n        {\r\n            videoPlayer = GetComponent<VideoPlayer>();\r\n            if (videoPlayer == null)\r\n            {\r\n                videoPlayer = gameObject.AddComponent<VideoPlayer>();\r\n            }\r\n        }\r\n        \r\n        // 配置VideoPlayer\r\n        ConfigureVideoPlayer();\r\n        \r\n        // 设置视频事件\r\n        SetupVideoEvents();\r\n        \r\n        // 加载第一个视频\r\n        if (videoClips != null && videoClips.Length > 0)\r\n        {\r\n            LoadVideo(0);\r\n        }\r\n        \r\n        Debug.Log(\"视频系统初始化完成\");\r\n    }\r\n    \r\n    /// <summary>\r\n    /// 配置VideoPlayer\r\n    /// </summary>\r\n    private void ConfigureVideoPlayer()\r\n    {\r\n        if (videoPlayer == null) return;\r\n        \r\n        // 基本设置\r\n        videoPlayer.playOnAwake = autoPlay;\r\n        videoPlayer.isLooping = loop;\r\n        videoPlayer.playbackSpeed = playbackSpeed;\r\n        videoPlayer.audioOutputMode = VideoAudioOutputMode.AudioSource;\r\n        \r\n        // 渲染设置\r\n        videoPlayer.renderMode = VideoRenderMode.RenderTexture;\r\n        if (renderTexture != null)\r\n        {\r\n            videoPlayer.targetTexture = renderTexture;\r\n        }\r\n        \r\n        // 音频设置\r\n        videoPlayer.SetDirectAudioMute(0, mute);\r\n        videoPlayer.SetDirectAudioVolume(0, volume);\r\n        \r\n        Debug.Log(\"VideoPlayer配置完成\");\r\n    }\r\n    \r\n    /// <summary>\r\n    /// 设置视频事件\r\n    /// </summary>\r\n    private void SetupVideoEvents()\r\n    {\r\n        if (videoPlayer == null) return;\r\n        \r\n        // 视频开始播放事件\r\n        videoPlayer.started += OnVideoStarted;\r\n        \r\n        // 视频结束播放事件\r\n        videoPlayer.loopPointReached += OnVideoFinished;\r\n        \r\n        // 视频错误事件\r\n        videoPlayer.errorReceived += OnVideoError;\r\n        \r\n        // 帧准备事件\r\n        videoPlayer.frameReady += OnFrameReady;\r\n        \r\n        Debug.Log(\"视频事件设置完成\");\r\n    }\r\n    \r\n    /// <summary>\r\n    /// 视频开始播放事件\r\n    /// </summary>\r\n    /// <param name=\"player\">VideoPlayer实例</param>\r\n    private void OnVideoStarted(VideoPlayer player)\r\n    {\r\n        isPlaying = true;\r\n        isPaused = false;\r\n        \r\n        // 更新视频信息\r\n        UpdateVideoInfo();\r\n        \r\n        Debug.Log(\"视频开始播放\");\r\n        \r\n        onVideoStarted?.Invoke(player);\r\n    }\r\n    \r\n    /// <summary>\r\n    /// 视频结束播放事件\r\n    /// </summary>\r\n    /// <param name=\"player\">VideoPlayer实例</param>\r\n    private void OnVideoFinished(VideoPlayer player)\r\n    {\r\n        isPlaying = false;\r\n        isPaused = false;\r\n        \r\n        Debug.Log(\"视频播放结束\");\r\n        \r\n        onVideoFinished?.Invoke(player);\r\n    }\r\n    \r\n    /// <summary>\r\n    /// 视频错误事件\r\n    /// </summary>\r\n    /// <param name=\"player\">VideoPlayer实例</param>\r\n    /// <param name=\"message\">错误信息</param>\r\n    private void OnVideoError(VideoPlayer player, string message)\r\n    {\r\n        Debug.LogError($\"视频播放错误: {message}\");\r\n        \r\n        onVideoError?.Invoke(player);\r\n    }\r\n    \r\n    /// <summary>\r\n    /// 帧准备事件\r\n    /// </summary>\r\n    /// <param name=\"player\">VideoPlayer实例</param>\r\n    /// <param name=\"frameIdx\">帧索引</param>\r\n    private void OnFrameReady(VideoPlayer player, long frameIdx)\r\n    {\r\n        // 可以在这里处理帧数据\r\n        if (frameIdx % 30 == 0) // 每30帧输出一次\r\n        {\r\n            Debug.Log($\"当前帧: {frameIdx}\");\r\n        }\r\n    }\r\n    \r\n    /// <summary>\r\n    /// 加载视频\r\n    /// </summary>\r\n    /// <param name=\"clipIndex\">视频索引</param>\r\n    public void LoadVideo(int clipIndex)\r\n    {\r\n        if (videoPlayer == null || videoClips == null || clipIndex < 0 || clipIndex >= videoClips.Length)\r\n        {\r\n            Debug.LogError(\"无效的视频索引\");\r\n            return;\r\n        }\r\n        \r\n        // 停止当前播放\r\n        if (isPlaying)\r\n        {\r\n            videoPlayer.Stop();\r\n        }\r\n        \r\n        // 加载新视频\r\n        videoPlayer.clip = videoClips[clipIndex];\r\n        currentClipIndex = clipIndex;\r\n        \r\n        // 更新视频信息\r\n        UpdateVideoInfo();\r\n        \r\n        Debug.Log($\"已加载视频: {videoClips[clipIndex].name}\");\r\n    }\r\n    \r\n    /// <summary>\r\n    /// 播放视频\r\n    /// </summary>\r\n    public void PlayVideo()\r\n    {\r\n        if (videoPlayer == null || videoPlayer.clip == null)\r\n        {\r\n            Debug.LogError(\"没有可播放的视频\");\r\n            return;\r\n        }\r\n        \r\n        videoPlayer.Play();\r\n        isPlaying = true;\r\n        isPaused = false;\r\n        \r\n        Debug.Log(\"开始播放视频\");\r\n    }\r\n    \r\n    /// <summary>\r\n    /// 暂停视频\r\n    /// </summary>\r\n    public void PauseVideo()\r\n    {\r\n        if (videoPlayer == null || !isPlaying)\r\n        {\r\n            Debug.Log(\"视频未在播放\");\r\n            return;\r\n        }\r\n        \r\n        videoPlayer.Pause();\r\n        isPaused = true;\r\n        \r\n        Debug.Log(\"视频已暂停\");\r\n    }\r\n    \r\n    /// <summary>\r\n    /// 恢复视频播放\r\n    /// </summary>\r\n    public void ResumeVideo()\r\n    {\r\n        if (videoPlayer == null || !isPaused)\r\n        {\r\n            Debug.Log(\"视频未暂停\");\r\n            return;\r\n        }\r\n        \r\n        videoPlayer.Play();\r\n        isPaused = false;\r\n        \r\n        Debug.Log(\"视频已恢复播放\");\r\n    }\r\n    \r\n    /// <summary>\r\n    /// 停止视频\r\n    /// </summary>\r\n    public void StopVideo()\r\n    {\r\n        if (videoPlayer == null)\r\n        {\r\n            return;\r\n        }\r\n        \r\n        videoPlayer.Stop();\r\n        isPlaying = false;\r\n        isPaused = false;\r\n        currentTime = 0.0;\r\n        \r\n        Debug.Log(\"视频已停止\");\r\n    }\r\n    \r\n    /// <summary>\r\n    /// 跳转到指定时间\r\n    /// </summary>\r\n    /// <param name=\"timeInSeconds\">时间（秒）</param>\r\n    public void SeekToTime(double timeInSeconds)\r\n    {\r\n        if (videoPlayer == null || videoPlayer.clip == null)\r\n        {\r\n            Debug.LogError(\"没有可播放的视频\");\r\n            return;\r\n        }\r\n        \r\n        timeInSeconds = Mathf.Clamp((float)timeInSeconds, 0f, (float)videoPlayer.length);\r\n        videoPlayer.time = timeInSeconds;\r\n        \r\n        Debug.Log($\"跳转到时间: {timeInSeconds:F2}秒\");\r\n    }\r\n    \r\n    /// <summary>\r\n    /// 设置播放速度\r\n    /// </summary>\r\n    /// <param name=\"speed\">播放速度</param>\r\n    public void SetPlaybackSpeed(float speed)\r\n    {\r\n        if (videoPlayer == null)\r\n        {\r\n            return;\r\n        }\r\n        \r\n        playbackSpeed = Mathf.Clamp(speed, 0.1f, 10.0f);\r\n        videoPlayer.playbackSpeed = playbackSpeed;\r\n        \r\n        Debug.Log($\"播放速度已设置为: {playbackSpeed}x\");\r\n    }\r\n    \r\n    /// <summary>\r\n    /// 设置音量\r\n    /// </summary>\r\n    /// <param name=\"newVolume\">音量 (0-1)</param>\r\n    public void SetVolume(float newVolume)\r\n    {\r\n        if (videoPlayer == null)\r\n        {\r\n            return;\r\n        }\r\n        \r\n        volume = Mathf.Clamp01(newVolume);\r\n        videoPlayer.SetDirectAudioVolume(0, volume);\r\n        \r\n        Debug.Log($\"音量已设置为: {volume:F2}\");\r\n    }\r\n    \r\n    /// <summary>\r\n    /// 设置静音\r\n    /// </summary>\r\n    /// <param name=\"muteAudio\">是否静音</param>\r\n    public void SetMute(bool muteAudio)\r\n    {\r\n        if (videoPlayer == null)\r\n        {\r\n            return;\r\n        }\r\n        \r\n        mute = muteAudio;\r\n        videoPlayer.SetDirectAudioMute(0, mute);\r\n        \r\n        Debug.Log($\"静音状态已设置为: {mute}\");\r\n    }\r\n    \r\n    /// <summary>\r\n    /// 设置循环播放\r\n    /// </summary>\r\n    /// <param name=\"loopVideo\">是否循环</param>\r\n    public void SetLoop(bool loopVideo)\r\n    {\r\n        if (videoPlayer == null)\r\n        {\r\n            return;\r\n        }\r\n        \r\n        loop = loopVideo;\r\n        videoPlayer.isLooping = loop;\r\n        \r\n        Debug.Log($\"循环播放已设置为: {loop}\");\r\n    }\r\n    \r\n    /// <summary>\r\n    /// 播放下一个视频\r\n    /// </summary>\r\n    public void PlayNextVideo()\r\n    {\r\n        if (videoClips == null || videoClips.Length == 0)\r\n        {\r\n            Debug.LogError(\"没有可播放的视频\");\r\n            return;\r\n        }\r\n        \r\n        int nextIndex = (currentClipIndex + 1) % videoClips.Length;\r\n        LoadVideo(nextIndex);\r\n        PlayVideo();\r\n    }\r\n    \r\n    /// <summary>\r\n    /// 播放上一个视频\r\n    /// </summary>\r\n    public void PlayPreviousVideo()\r\n    {\r\n        if (videoClips == null || videoClips.Length == 0)\r\n        {\r\n            Debug.LogError(\"没有可播放的视频\");\r\n            return;\r\n        }\r\n        \r\n        int prevIndex = (currentClipIndex - 1 + videoClips.Length) % videoClips.Length;\r\n        LoadVideo(prevIndex);\r\n        PlayVideo();\r\n    }\r\n    \r\n    /// <summary>\r\n    /// 更新视频信息\r\n    /// </summary>\r\n    private void UpdateVideoInfo()\r\n    {\r\n        if (videoPlayer == null || videoPlayer.clip == null)\r\n        {\r\n            return;\r\n        }\r\n        \r\n        VideoClip clip = videoPlayer.clip;\r\n        videoName = clip.name;\r\n        videoResolution = new Vector2Int((int)clip.width, (int)clip.height);\r\n        frameRate = clip.frameRate;\r\n        frameCount = clip.frameCount;\r\n        totalTime = clip.length;\r\n        \r\n        Debug.Log($\"视频信息更新 - 名称: {videoName}, 分辨率: {videoResolution}, 帧率: {frameRate:F2}\");\r\n    }\r\n    \r\n    /// <summary>\r\n    /// 获取当前播放进度\r\n    /// </summary>\r\n    /// <returns>播放进度 (0-1)</returns>\r\n    public float GetPlaybackProgress()\r\n    {\r\n        if (videoPlayer == null || totalTime <= 0)\r\n        {\r\n            return 0f;\r\n        }\r\n        \r\n        return (float)(currentTime / totalTime);\r\n    }\r\n    \r\n    /// <summary>\r\n    /// 设置播放进度\r\n    /// </summary>\r\n    /// <param name=\"progress\">播放进度 (0-1)</param>\r\n    public void SetPlaybackProgress(float progress)\r\n    {\r\n        if (videoPlayer == null || totalTime <= 0)\r\n        {\r\n            return;\r\n        }\r\n        \r\n        progress = Mathf.Clamp01(progress);\r\n        double targetTime = progress * totalTime;\r\n        SeekToTime(targetTime);\r\n    }\r\n    \r\n    /// <summary>\r\n    /// 获取视频信息\r\n    /// </summary>\r\n    public void GetVideoInfo()\r\n    {\r\n        Debug.Log(\"=== 视频信息 ===\");\r\n        Debug.Log($\"VideoPlayer: {(videoPlayer != null ? \"已配置\" : \"无\")}\");\r\n        Debug.Log($\"当前视频: {videoName}\");\r\n        Debug.Log($\"视频分辨率: {videoResolution}\");\r\n        Debug.Log($\"帧率: {frameRate:F2} FPS\");\r\n        Debug.Log($\"总帧数: {frameCount}\");\r\n        Debug.Log($\"总时长: {totalTime:F2}秒\");\r\n        Debug.Log($\"当前时间: {currentTime:F2}秒\");\r\n        Debug.Log($\"播放进度: {GetPlaybackProgress():P2}\");\r\n        Debug.Log($\"播放状态: {(isPlaying ? (isPaused ? \"暂停\" : \"播放中\") : \"停止\")}\");\r\n        Debug.Log($\"播放速度: {playbackSpeed}x\");\r\n        Debug.Log($\"音量: {volume:F2}\");\r\n        Debug.Log($\"静音: {mute}\");\r\n        Debug.Log($\"循环: {loop}\");\r\n    }\r\n    \r\n    /// <summary>\r\n    /// 重置视频设置\r\n    /// </summary>\r\n    public void ResetVideoSettings()\r\n    {\r\n        if (videoPlayer == null)\r\n        {\r\n            return;\r\n        }\r\n        \r\n        // 重置设置\r\n        playbackSpeed = 1.0f;\r\n        volume = 1.0f;\r\n        mute = false;\r\n        loop = true;\r\n        \r\n        // 应用设置\r\n        videoPlayer.playbackSpeed = playbackSpeed;\r\n        videoPlayer.SetDirectAudioVolume(0, volume);\r\n        videoPlayer.SetDirectAudioMute(0, mute);\r\n        videoPlayer.isLooping = loop;\r\n        \r\n        // 重置播放位置\r\n        SeekToTime(0);\r\n        \r\n        Debug.Log(\"视频设置已重置\");\r\n    }\r\n    \r\n    private void Update()\r\n    {\r\n        // 更新当前时间\r\n        if (videoPlayer != null && isPlaying && !isPaused)\r\n        {\r\n            currentTime = videoPlayer.time;\r\n        }\r\n    }\r\n    \r\n    private void OnGUI()\r\n    {\r\n        // 简单的GUI界面用于测试\r\n        GUILayout.BeginArea(new Rect(10, 10, 400, 700));\r\n        GUILayout.Label(\"视频系统演示\", EditorStyles.boldLabel);\r\n        \r\n        GUILayout.Space(10);\r\n        \r\n        // 视频状态\r\n        GUILayout.Label($\"当前视频: {videoName}\");\r\n        GUILayout.Label($\"播放状态: {(isPlaying ? (isPaused ? \"暂停\" : \"播放中\") : \"停止\")}\");\r\n        GUILayout.Label($\"当前时间: {currentTime:F2}s / {totalTime:F2}s\");\r\n        GUILayout.Label($\"播放进度: {GetPlaybackProgress():P2}\");\r\n        GUILayout.Label($\"播放速度: {playbackSpeed:F2}x\");\r\n        GUILayout.Label($\"音量: {volume:F2}\");\r\n        \r\n        GUILayout.Space(10);\r\n        \r\n        // 播放控制\r\n        GUILayout.BeginHorizontal();\r\n        if (GUILayout.Button(\"播放\"))\r\n        {\r\n            PlayVideo();\r\n        }\r\n        if (GUILayout.Button(\"暂停\"))\r\n        {\r\n            PauseVideo();\r\n        }\r\n        if (GUILayout.Button(\"停止\"))\r\n        {\r\n            StopVideo();\r\n        }\r\n        GUILayout.EndHorizontal();\r\n        \r\n        GUILayout.BeginHorizontal();\r\n        if (GUILayout.Button(\"上一个\"))\r\n        {\r\n            PlayPreviousVideo();\r\n        }\r\n        if (GUILayout.Button(\"下一个\"))\r\n        {\r\n            PlayNextVideo();\r\n        }\r\n        GUILayout.EndHorizontal();\r\n        \r\n        GUILayout.Space(10);\r\n        \r\n        // 设置控制\r\n        GUILayout.Label(\"播放速度:\");\r\n        playbackSpeed = GUILayout.HorizontalSlider(playbackSpeed, 0.1f, 3.0f);\r\n        if (GUILayout.Button(\"设置速度\"))\r\n        {\r\n            SetPlaybackSpeed(playbackSpeed);\r\n        }\r\n        \r\n        GUILayout.Space(5);\r\n        \r\n        GUILayout.Label(\"音量:\");\r\n        volume = GUILayout.HorizontalSlider(volume, 0f, 1f);\r\n        if (GUILayout.Button(\"设置音量\"))\r\n        {\r\n            SetVolume(volume);\r\n        }\r\n        \r\n        GUILayout.Space(5);\r\n        \r\n        mute = GUILayout.Toggle(mute, \"静音\");\r\n        if (GUILayout.Button(\"设置静音\"))\r\n        {\r\n            SetMute(mute);\r\n        }\r\n        \r\n        GUILayout.Space(5);\r\n        \r\n        loop = GUILayout.Toggle(loop, \"循环播放\");\r\n        if (GUILayout.Button(\"设置循环\"))\r\n        {\r\n            SetLoop(loop);\r\n        }\r\n        \r\n        GUILayout.Space(10);\r\n        \r\n        // 进度控制\r\n        GUILayout.Label(\"播放进度:\");\r\n        float progress = GetPlaybackProgress();\r\n        progress = GUILayout.HorizontalSlider(progress, 0f, 1f);\r\n        if (GUILayout.Button(\"跳转到进度\"))\r\n        {\r\n            SetPlaybackProgress(progress);\r\n        }\r\n        \r\n        GUILayout.Space(10);\r\n        \r\n        if (GUILayout.Button(\"获取视频信息\"))\r\n        {\r\n            GetVideoInfo();\r\n        }\r\n        \r\n        if (GUILayout.Button(\"重置设置\"))\r\n        {\r\n            ResetVideoSettings();\r\n        }\r\n        \r\n        GUILayout.EndArea();\r\n    }\r\n    \r\n    private void OnDestroy()\r\n    {\r\n        // 清理事件\r\n        if (videoPlayer != null)\r\n        {\r\n            videoPlayer.started -= OnVideoStarted;\r\n            videoPlayer.loopPointReached -= OnVideoFinished;\r\n            videoPlayer.errorReceived -= OnVideoError;\r\n            videoPlayer.frameReady -= OnFrameReady;\r\n        }\r\n    }\r\n} "
        }
    ]
}