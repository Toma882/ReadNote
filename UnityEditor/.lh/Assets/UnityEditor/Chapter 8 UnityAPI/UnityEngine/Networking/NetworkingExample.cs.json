{
    "sourceFile": "Assets/UnityEditor/Chapter 8 UnityAPI/UnityEngine/Networking/NetworkingExample.cs",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1750929737957,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1750929737957,
            "name": "Commit-0",
            "content": "using UnityEngine;\r\nusing UnityEngine.Networking;\r\nusing System.Collections;\r\nusing System.Collections.Generic;\r\nusing System.Text;\r\n\r\n/// <summary>\r\n/// UnityEngine.Networking 命名空间案例演示\r\n/// 展示网络系统的核心功能\r\n/// </summary>\r\npublic class NetworkingExample : MonoBehaviour\r\n{\r\n    [Header(\"网络设置\")]\r\n    [SerializeField] private string serverUrl = \"https://httpbin.org/get\";\r\n    [SerializeField] private string postUrl = \"https://httpbin.org/post\";\r\n    [SerializeField] private string downloadUrl = \"https://httpbin.org/bytes/1024\";\r\n    [SerializeField] private int port = 8080;\r\n    \r\n    [Header(\"网络状态\")]\r\n    [SerializeField] private bool isConnected = false;\r\n    [SerializeField] private string connectionStatus = \"未连接\";\r\n    [SerializeField] private float downloadProgress = 0f;\r\n    [SerializeField] private bool isDownloading = false;\r\n    \r\n    [Header(\"网络数据\")]\r\n    [SerializeField] private string responseData = \"\";\r\n    [SerializeField] private string errorMessage = \"\";\r\n    [SerializeField] private int responseCode = 0;\r\n    \r\n    // 网络请求\r\n    private UnityWebRequest currentRequest;\r\n    private List<UnityWebRequest> activeRequests = new List<UnityWebRequest>();\r\n    \r\n    private void Start()\r\n    {\r\n        InitializeNetworking();\r\n    }\r\n    \r\n    /// <summary>\r\n    /// 初始化网络系统\r\n    /// </summary>\r\n    private void InitializeNetworking()\r\n    {\r\n        // 检查网络连接\r\n        CheckNetworkConnectivity();\r\n        \r\n        Debug.Log(\"网络系统初始化完成\");\r\n    }\r\n    \r\n    /// <summary>\r\n    /// 检查网络连接\r\n    /// </summary>\r\n    private void CheckNetworkConnectivity()\r\n    {\r\n        if (Application.internetReachability == NetworkReachability.NotReachable)\r\n        {\r\n            connectionStatus = \"无网络连接\";\r\n            isConnected = false;\r\n        }\r\n        else if (Application.internetReachability == NetworkReachability.ReachableViaCarrierDataNetwork)\r\n        {\r\n            connectionStatus = \"移动网络连接\";\r\n            isConnected = true;\r\n        }\r\n        else if (Application.internetReachability == NetworkReachability.ReachableViaLocalAreaNetwork)\r\n        {\r\n            connectionStatus = \"WiFi网络连接\";\r\n            isConnected = true;\r\n        }\r\n        \r\n        Debug.Log($\"网络状态: {connectionStatus}\");\r\n    }\r\n    \r\n    /// <summary>\r\n    /// 发送GET请求\r\n    /// </summary>\r\n    public void SendGetRequest()\r\n    {\r\n        if (!isConnected)\r\n        {\r\n            Debug.LogWarning(\"无网络连接，无法发送请求\");\r\n            return;\r\n        }\r\n        \r\n        StartCoroutine(GetRequestCoroutine(serverUrl));\r\n    }\r\n    \r\n    /// <summary>\r\n    /// GET请求协程\r\n    /// </summary>\r\n    /// <param name=\"url\">请求URL</param>\r\n    private IEnumerator GetRequestCoroutine(string url)\r\n    {\r\n        Debug.Log($\"发送GET请求到: {url}\");\r\n        \r\n        using (UnityWebRequest request = UnityWebRequest.Get(url))\r\n        {\r\n            currentRequest = request;\r\n            activeRequests.Add(request);\r\n            \r\n            // 发送请求\r\n            yield return request.SendWebRequest();\r\n            \r\n            // 处理响应\r\n            ProcessResponse(request);\r\n            \r\n            activeRequests.Remove(request);\r\n            currentRequest = null;\r\n        }\r\n    }\r\n    \r\n    /// <summary>\r\n    /// 发送POST请求\r\n    /// </summary>\r\n    /// <param name=\"data\">发送的数据</param>\r\n    public void SendPostRequest(string data = \"Hello World\")\r\n    {\r\n        if (!isConnected)\r\n        {\r\n            Debug.LogWarning(\"无网络连接，无法发送请求\");\r\n            return;\r\n        }\r\n        \r\n        StartCoroutine(PostRequestCoroutine(postUrl, data));\r\n    }\r\n    \r\n    /// <summary>\r\n    /// POST请求协程\r\n    /// </summary>\r\n    /// <param name=\"url\">请求URL</param>\r\n    /// <param name=\"data\">发送的数据</param>\r\n    private IEnumerator PostRequestCoroutine(string url, string data)\r\n    {\r\n        Debug.Log($\"发送POST请求到: {url}\");\r\n        Debug.Log($\"发送数据: {data}\");\r\n        \r\n        byte[] bodyRaw = Encoding.UTF8.GetBytes(data);\r\n        \r\n        using (UnityWebRequest request = new UnityWebRequest(url, \"POST\"))\r\n        {\r\n            request.uploadHandler = new UploadHandlerRaw(bodyRaw);\r\n            request.downloadHandler = new DownloadHandlerBuffer();\r\n            request.SetRequestHeader(\"Content-Type\", \"application/json\");\r\n            \r\n            currentRequest = request;\r\n            activeRequests.Add(request);\r\n            \r\n            // 发送请求\r\n            yield return request.SendWebRequest();\r\n            \r\n            // 处理响应\r\n            ProcessResponse(request);\r\n            \r\n            activeRequests.Remove(request);\r\n            currentRequest = null;\r\n        }\r\n    }\r\n    \r\n    /// <summary>\r\n    /// 下载文件\r\n    /// </summary>\r\n    public void DownloadFile()\r\n    {\r\n        if (!isConnected)\r\n        {\r\n            Debug.LogWarning(\"无网络连接，无法下载文件\");\r\n            return;\r\n        }\r\n        \r\n        StartCoroutine(DownloadFileCoroutine(downloadUrl));\r\n    }\r\n    \r\n    /// <summary>\r\n    /// 文件下载协程\r\n    /// </summary>\r\n    /// <param name=\"url\">下载URL</param>\r\n    private IEnumerator DownloadFileCoroutine(string url)\r\n    {\r\n        Debug.Log($\"开始下载文件: {url}\");\r\n        \r\n        isDownloading = true;\r\n        downloadProgress = 0f;\r\n        \r\n        using (UnityWebRequest request = UnityWebRequest.Get(url))\r\n        {\r\n            currentRequest = request;\r\n            activeRequests.Add(request);\r\n            \r\n            // 发送请求\r\n            var operation = request.SendWebRequest();\r\n            \r\n            // 监控下载进度\r\n            while (!operation.isDone)\r\n            {\r\n                downloadProgress = request.downloadProgress;\r\n                yield return null;\r\n            }\r\n            \r\n            // 处理响应\r\n            ProcessResponse(request);\r\n            \r\n            activeRequests.Remove(request);\r\n            currentRequest = null;\r\n        }\r\n        \r\n        isDownloading = false;\r\n        downloadProgress = 0f;\r\n    }\r\n    \r\n    /// <summary>\r\n    /// 下载图片\r\n    /// </summary>\r\n    /// <param name=\"imageUrl\">图片URL</param>\r\n    public void DownloadImage(string imageUrl = \"https://httpbin.org/image/png\")\r\n    {\r\n        if (!isConnected)\r\n        {\r\n            Debug.LogWarning(\"无网络连接，无法下载图片\");\r\n            return;\r\n        }\r\n        \r\n        StartCoroutine(DownloadImageCoroutine(imageUrl));\r\n    }\r\n    \r\n    /// <summary>\r\n    /// 图片下载协程\r\n    /// </summary>\r\n    /// <param name=\"url\">图片URL</param>\r\n    private IEnumerator DownloadImageCoroutine(string url)\r\n    {\r\n        Debug.Log($\"开始下载图片: {url}\");\r\n        \r\n        using (UnityWebRequest request = UnityWebRequestTexture.GetTexture(url))\r\n        {\r\n            currentRequest = request;\r\n            activeRequests.Add(request);\r\n            \r\n            // 发送请求\r\n            yield return request.SendWebRequest();\r\n            \r\n            // 处理响应\r\n            if (request.result == UnityWebRequest.Result.Success)\r\n            {\r\n                Texture2D texture = DownloadHandlerTexture.GetContent(request);\r\n                Debug.Log($\"图片下载成功，尺寸: {texture.width}x{texture.height}\");\r\n                \r\n                // 可以在这里处理图片，比如保存到本地或应用到材质\r\n            }\r\n            else\r\n            {\r\n                Debug.LogError($\"图片下载失败: {request.error}\");\r\n            }\r\n            \r\n            activeRequests.Remove(request);\r\n            currentRequest = null;\r\n        }\r\n    }\r\n    \r\n    /// <summary>\r\n    /// 发送带认证的请求\r\n    /// </summary>\r\n    /// <param name=\"username\">用户名</param>\r\n    /// <param name=\"password\">密码</param>\r\n    public void SendAuthenticatedRequest(string username, string password)\r\n    {\r\n        if (!isConnected)\r\n        {\r\n            Debug.LogWarning(\"无网络连接，无法发送请求\");\r\n            return;\r\n        }\r\n        \r\n        StartCoroutine(AuthenticatedRequestCoroutine(serverUrl, username, password));\r\n    }\r\n    \r\n    /// <summary>\r\n    /// 认证请求协程\r\n    /// </summary>\r\n    /// <param name=\"url\">请求URL</param>\r\n    /// <param name=\"username\">用户名</param>\r\n    /// <param name=\"password\">密码</param>\r\n    private IEnumerator AuthenticatedRequestCoroutine(string url, string username, string password)\r\n    {\r\n        Debug.Log($\"发送认证请求到: {url}\");\r\n        \r\n        using (UnityWebRequest request = UnityWebRequest.Get(url))\r\n        {\r\n            // 设置认证头\r\n            string auth = System.Convert.ToBase64String(Encoding.UTF8.GetBytes($\"{username}:{password}\"));\r\n            request.SetRequestHeader(\"Authorization\", $\"Basic {auth}\");\r\n            \r\n            currentRequest = request;\r\n            activeRequests.Add(request);\r\n            \r\n            // 发送请求\r\n            yield return request.SendWebRequest();\r\n            \r\n            // 处理响应\r\n            ProcessResponse(request);\r\n            \r\n            activeRequests.Remove(request);\r\n            currentRequest = null;\r\n        }\r\n    }\r\n    \r\n    /// <summary>\r\n    /// 发送带自定义头的请求\r\n    /// </summary>\r\n    public void SendCustomHeaderRequest()\r\n    {\r\n        if (!isConnected)\r\n        {\r\n            Debug.LogWarning(\"无网络连接，无法发送请求\");\r\n            return;\r\n        }\r\n        \r\n        StartCoroutine(CustomHeaderRequestCoroutine(serverUrl));\r\n    }\r\n    \r\n    /// <summary>\r\n    /// 自定义头请求协程\r\n    /// </summary>\r\n    /// <param name=\"url\">请求URL</param>\r\n    private IEnumerator CustomHeaderRequestCoroutine(string url)\r\n    {\r\n        Debug.Log($\"发送自定义头请求到: {url}\");\r\n        \r\n        using (UnityWebRequest request = UnityWebRequest.Get(url))\r\n        {\r\n            // 设置自定义头\r\n            request.SetRequestHeader(\"User-Agent\", \"Unity Networking Example\");\r\n            request.SetRequestHeader(\"Accept\", \"application/json\");\r\n            request.SetRequestHeader(\"X-Custom-Header\", \"CustomValue\");\r\n            \r\n            currentRequest = request;\r\n            activeRequests.Add(request);\r\n            \r\n            // 发送请求\r\n            yield return request.SendWebRequest();\r\n            \r\n            // 处理响应\r\n            ProcessResponse(request);\r\n            \r\n            activeRequests.Remove(request);\r\n            currentRequest = null;\r\n        }\r\n    }\r\n    \r\n    /// <summary>\r\n    /// 处理网络响应\r\n    /// </summary>\r\n    /// <param name=\"request\">网络请求</param>\r\n    private void ProcessResponse(UnityWebRequest request)\r\n    {\r\n        responseCode = (int)request.responseCode;\r\n        \r\n        if (request.result == UnityWebRequest.Result.Success)\r\n        {\r\n            responseData = request.downloadHandler.text;\r\n            errorMessage = \"\";\r\n            Debug.Log($\"请求成功 (状态码: {responseCode})\");\r\n            Debug.Log($\"响应数据: {responseData}\");\r\n        }\r\n        else\r\n        {\r\n            responseData = \"\";\r\n            errorMessage = request.error;\r\n            Debug.LogError($\"请求失败: {request.error}\");\r\n        }\r\n    }\r\n    \r\n    /// <summary>\r\n    /// 取消所有请求\r\n    /// </summary>\r\n    public void CancelAllRequests()\r\n    {\r\n        foreach (var request in activeRequests)\r\n        {\r\n            if (request != null)\r\n            {\r\n                request.Abort();\r\n            }\r\n        }\r\n        \r\n        activeRequests.Clear();\r\n        currentRequest = null;\r\n        \r\n        Debug.Log(\"所有网络请求已取消\");\r\n    }\r\n    \r\n    /// <summary>\r\n    /// 获取网络信息\r\n    /// </summary>\r\n    public void GetNetworkInfo()\r\n    {\r\n        Debug.Log(\"=== 网络信息 ===\");\r\n        Debug.Log($\"网络可达性: {Application.internetReachability}\");\r\n        Debug.Log($\"连接状态: {connectionStatus}\");\r\n        Debug.Log($\"是否连接: {isConnected}\");\r\n        Debug.Log($\"活跃请求数: {activeRequests.Count}\");\r\n        Debug.Log($\"当前请求: {(currentRequest != null ? \"有\" : \"无\")}\");\r\n        Debug.Log($\"下载进度: {downloadProgress:P0}\");\r\n        Debug.Log($\"是否下载中: {isDownloading}\");\r\n    }\r\n    \r\n    /// <summary>\r\n    /// 测试网络延迟\r\n    /// </summary>\r\n    public void TestNetworkLatency()\r\n    {\r\n        if (!isConnected)\r\n        {\r\n            Debug.LogWarning(\"无网络连接，无法测试延迟\");\r\n            return;\r\n        }\r\n        \r\n        StartCoroutine(LatencyTestCoroutine());\r\n    }\r\n    \r\n    /// <summary>\r\n    /// 延迟测试协程\r\n    /// </summary>\r\n    private IEnumerator LatencyTestCoroutine()\r\n    {\r\n        Debug.Log(\"开始网络延迟测试...\");\r\n        \r\n        float startTime = Time.time;\r\n        \r\n        using (UnityWebRequest request = UnityWebRequest.Get(serverUrl))\r\n        {\r\n            yield return request.SendWebRequest();\r\n            \r\n            float endTime = Time.time;\r\n            float latency = (endTime - startTime) * 1000f; // 转换为毫秒\r\n            \r\n            if (request.result == UnityWebRequest.Result.Success)\r\n            {\r\n                Debug.Log($\"网络延迟测试完成: {latency:F2}ms\");\r\n            }\r\n            else\r\n            {\r\n                Debug.LogError($\"延迟测试失败: {request.error}\");\r\n            }\r\n        }\r\n    }\r\n    \r\n    /// <summary>\r\n    /// 检查网络连接状态\r\n    /// </summary>\r\n    public void CheckConnectionStatus()\r\n    {\r\n        CheckNetworkConnectivity();\r\n        Debug.Log($\"网络连接状态已更新: {connectionStatus}\");\r\n    }\r\n    \r\n    private void Update()\r\n    {\r\n        // 定期检查网络状态\r\n        if (Time.frameCount % 300 == 0) // 每300帧检查一次\r\n        {\r\n            CheckNetworkConnectivity();\r\n        }\r\n    }\r\n    \r\n    private void OnDestroy()\r\n    {\r\n        // 清理所有网络请求\r\n        CancelAllRequests();\r\n    }\r\n    \r\n    private void OnGUI()\r\n    {\r\n        // 简单的GUI界面用于测试\r\n        GUILayout.BeginArea(new Rect(10, 10, 400, 600));\r\n        GUILayout.Label(\"网络系统演示\", EditorStyles.boldLabel);\r\n        \r\n        GUILayout.Space(10);\r\n        \r\n        // 网络状态\r\n        GUILayout.Label($\"连接状态: {connectionStatus}\");\r\n        GUILayout.Label($\"是否连接: {isConnected}\");\r\n        GUILayout.Label($\"活跃请求: {activeRequests.Count}\");\r\n        GUILayout.Label($\"响应码: {responseCode}\");\r\n        \r\n        if (isDownloading)\r\n        {\r\n            GUILayout.Label($\"下载进度: {downloadProgress:P0}\");\r\n        }\r\n        \r\n        GUILayout.Space(10);\r\n        \r\n        // 请求按钮\r\n        if (GUILayout.Button(\"发送GET请求\"))\r\n        {\r\n            SendGetRequest();\r\n        }\r\n        \r\n        if (GUILayout.Button(\"发送POST请求\"))\r\n        {\r\n            SendPostRequest();\r\n        }\r\n        \r\n        if (GUILayout.Button(\"下载文件\"))\r\n        {\r\n            DownloadFile();\r\n        }\r\n        \r\n        if (GUILayout.Button(\"下载图片\"))\r\n        {\r\n            DownloadImage();\r\n        }\r\n        \r\n        GUILayout.Space(10);\r\n        \r\n        if (GUILayout.Button(\"发送认证请求\"))\r\n        {\r\n            SendAuthenticatedRequest(\"user\", \"pass\");\r\n        }\r\n        \r\n        if (GUILayout.Button(\"发送自定义头请求\"))\r\n        {\r\n            SendCustomHeaderRequest();\r\n        }\r\n        \r\n        GUILayout.Space(10);\r\n        \r\n        if (GUILayout.Button(\"测试网络延迟\"))\r\n        {\r\n            TestNetworkLatency();\r\n        }\r\n        \r\n        if (GUILayout.Button(\"检查连接状态\"))\r\n        {\r\n            CheckConnectionStatus();\r\n        }\r\n        \r\n        if (GUILayout.Button(\"获取网络信息\"))\r\n        {\r\n            GetNetworkInfo();\r\n        }\r\n        \r\n        if (GUILayout.Button(\"取消所有请求\"))\r\n        {\r\n            CancelAllRequests();\r\n        }\r\n        \r\n        GUILayout.Space(10);\r\n        \r\n        // 显示响应数据\r\n        if (!string.IsNullOrEmpty(responseData))\r\n        {\r\n            GUILayout.Label(\"响应数据:\");\r\n            GUILayout.TextArea(responseData, GUILayout.Height(100));\r\n        }\r\n        \r\n        // 显示错误信息\r\n        if (!string.IsNullOrEmpty(errorMessage))\r\n        {\r\n            GUILayout.Label(\"错误信息:\");\r\n            GUILayout.TextArea(errorMessage, GUILayout.Height(50));\r\n        }\r\n        \r\n        GUILayout.EndArea();\r\n    }\r\n} "
        }
    ]
}