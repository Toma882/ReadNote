{
    "sourceFile": "Assets/UnityEditor/Chapter 8 UnityAPI/UnityEngine/AI/AINavMeshExample.cs",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 3,
            "patches": [
                {
                    "date": 1750932169759,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1750932176510,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,9 +8,9 @@\n [RequireComponent(typeof(NavMeshAgent))]\r\n public class AINavMeshExample : MonoBehaviour\r\n {\r\n     [Header(\"导航设置\")]\r\n-    [SerializeField] private Transform target;\r\n+    [SerializeField] private Transform target; --\r\n     [SerializeField] private bool autoUpdateDestination = true;\r\n     [SerializeField] private float updateInterval = 0.5f;\r\n     [SerializeField] private bool enableObstacle = false;\r\n     [SerializeField] private float obstacleRadius = 0.5f;\r\n"
                },
                {
                    "date": 1750932219894,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,9 +8,9 @@\n [RequireComponent(typeof(NavMeshAgent))]\r\n public class AINavMeshExample : MonoBehaviour\r\n {\r\n     [Header(\"导航设置\")]\r\n-    [SerializeField] private Transform target; --\r\n+        [SerializeField] private Transform target; //\r\n     [SerializeField] private bool autoUpdateDestination = true;\r\n     [SerializeField] private float updateInterval = 0.5f;\r\n     [SerializeField] private bool enableObstacle = false;\r\n     [SerializeField] private float obstacleRadius = 0.5f;\r\n"
                },
                {
                    "date": 1750932225111,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,16 +8,16 @@\n [RequireComponent(typeof(NavMeshAgent))]\r\n public class AINavMeshExample : MonoBehaviour\r\n {\r\n     [Header(\"导航设置\")]\r\n-        [SerializeField] private Transform target; //\r\n-    [SerializeField] private bool autoUpdateDestination = true;\r\n-    [SerializeField] private float updateInterval = 0.5f;\r\n-    [SerializeField] private bool enableObstacle = false;\r\n-    [SerializeField] private float obstacleRadius = 0.5f;\r\n-    [SerializeField] private float obstacleHeight = 2f;\r\n+    [SerializeField] private Transform target; //目标位置\r\n+    [SerializeField] private bool autoUpdateDestination = true; //是否自动更新目标位置\r\n+    [SerializeField] private float updateInterval = 0.5f; //更新间隔\r\n+    [SerializeField] private bool enableObstacle = false; //是否启用障碍\r\n+    [SerializeField] private float obstacleRadius = 0.5f; //障碍半径\r\n+    [SerializeField] private float obstacleHeight = 2f; //障碍高度\r\n \r\n-    private NavMeshAgent agent;\r\n+    private NavMeshAgent agent; //导航代理\r\n     private NavMeshObstacle obstacle;\r\n     private float timer;\r\n \r\n     private void Awake()\r\n"
                }
            ],
            "date": 1750932169759,
            "name": "Commit-0",
            "content": "using UnityEngine;\r\nusing UnityEngine.AI;\r\n\r\n/// <summary>\r\n/// UnityEngine.AI 命名空间案例演示\r\n/// 展示NavMeshAgent、NavMeshObstacle等AI导航核心功能\r\n/// </summary>\r\n[RequireComponent(typeof(NavMeshAgent))]\r\npublic class AINavMeshExample : MonoBehaviour\r\n{\r\n    [Header(\"导航设置\")]\r\n    [SerializeField] private Transform target;\r\n    [SerializeField] private bool autoUpdateDestination = true;\r\n    [SerializeField] private float updateInterval = 0.5f;\r\n    [SerializeField] private bool enableObstacle = false;\r\n    [SerializeField] private float obstacleRadius = 0.5f;\r\n    [SerializeField] private float obstacleHeight = 2f;\r\n\r\n    private NavMeshAgent agent;\r\n    private NavMeshObstacle obstacle;\r\n    private float timer;\r\n\r\n    private void Awake()\r\n    {\r\n        agent = GetComponent<NavMeshAgent>();\r\n        if (enableObstacle)\r\n        {\r\n            obstacle = gameObject.AddComponent<NavMeshObstacle>();\r\n            obstacle.radius = obstacleRadius;\r\n            obstacle.height = obstacleHeight;\r\n            obstacle.carving = true;\r\n        }\r\n    }\r\n\r\n    private void Start()\r\n    {\r\n        if (target != null)\r\n        {\r\n            agent.SetDestination(target.position);\r\n        }\r\n    }\r\n\r\n    private void Update()\r\n    {\r\n        if (autoUpdateDestination && target != null)\r\n        {\r\n            timer += Time.deltaTime;\r\n            if (timer >= updateInterval)\r\n            {\r\n                agent.SetDestination(target.position);\r\n                timer = 0f;\r\n            }\r\n        }\r\n    }\r\n\r\n    private void OnDrawGizmos()\r\n    {\r\n        if (agent != null && agent.hasPath)\r\n        {\r\n            Gizmos.color = Color.green;\r\n            var path = agent.path;\r\n            Vector3 prev = agent.transform.position;\r\n            foreach (var corner in path.corners)\r\n            {\r\n                Gizmos.DrawLine(prev, corner);\r\n                prev = corner;\r\n            }\r\n        }\r\n    }\r\n\r\n    private void OnGUI()\r\n    {\r\n        GUILayout.BeginArea(new Rect(10, 10, 350, 300));\r\n        GUILayout.Label(\"AI导航演示 (NavMeshAgent)\", UnityEditor.EditorStyles.boldLabel);\r\n        GUILayout.Label($\"当前位置: {transform.position}\");\r\n        if (target != null)\r\n        {\r\n            GUILayout.Label($\"目标位置: {target.position}\");\r\n        }\r\n        GUILayout.Label($\"是否启用障碍: {enableObstacle}\");\r\n        GUILayout.Label($\"自动更新目标: {autoUpdateDestination}\");\r\n        if (GUILayout.Button(\"立即寻路到目标\") && target != null)\r\n        {\r\n            agent.SetDestination(target.position);\r\n        }\r\n        if (GUILayout.Button(\"停止寻路\"))\r\n        {\r\n            agent.isStopped = true;\r\n        }\r\n        if (GUILayout.Button(\"恢复寻路\"))\r\n        {\r\n            agent.isStopped = false;\r\n        }\r\n        GUILayout.EndArea();\r\n    }\r\n} "
        }
    ]
}