{
    "sourceFile": "Assets/UnityEditor/Chapter 4 EditorWindow/InspectorGUIWindow.cs",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 1,
            "patches": [
                {
                    "date": 1746880366728,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1746882817440,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -40,10 +40,9 @@\n                 var target = Array.Find(attributes,\r\n                     m => m is ComponentGUIInspectorAttribute);\r\n                 var attribute = target as ComponentGUIInspectorAttribute;\r\n                 var instance = Activator.CreateInstance(type);\r\n-                inspectorDic.Add(attribute.ComponentType.FullName,\r\n-                    instance as IComponentGUIInspector);\r\n+                inspectorDic.Add(attribute.ComponentType.FullName,instance as IComponentGUIInspector);\r\n             }\r\n         }\r\n \r\n         expandRect = new Rect(0f, 80f, 600f, 500f);\r\n"
                }
            ],
            "date": 1746880366728,
            "name": "Commit-0",
            "content": "using System;\r\nusing System.Linq;\r\nusing System.Collections.Generic;\r\n\r\nusing UnityEngine;\r\n\r\npublic class InspectorGUIWindow : MonoBehaviour\r\n{\r\n    //层级窗口\r\n    private HierarchyGUIWindow hierarchyGUIWindow;\r\n    private Rect expandRect;\r\n    private Rect retractRect;\r\n    private Rect dragableRect;\r\n    private bool isExpand;\r\n    //当前选中的物体\r\n    private GameObject selected;\r\n    //当前选中物体的组件集合\r\n    private Component[] components;\r\n    private Vector2 listScroll;\r\n    private Vector2 inspectorScroll;\r\n    //当前选中的组件\r\n    private Component currentComponent;\r\n    private Dictionary<string, IComponentGUIInspector> inspectorDic;\r\n\r\n    private void Start()\r\n    {\r\n        hierarchyGUIWindow = GetComponent<HierarchyGUIWindow>();\r\n    }\r\n\r\n    private void OnEnable()\r\n    {\r\n        inspectorDic = new Dictionary<string, IComponentGUIInspector>();\r\n        var types = GetType().Assembly.GetTypes().Where( m => m.IsSubclassOf(typeof(ComponentGUIInspector))).ToArray();\r\n        for (int i = 0; i < types.Length; i++)\r\n        {\r\n            var type = types[i];\r\n            var attributes = type.GetCustomAttributes(false);\r\n            if (attributes.Any(m => m is ComponentGUIInspectorAttribute))\r\n            {\r\n                var target = Array.Find(attributes,\r\n                    m => m is ComponentGUIInspectorAttribute);\r\n                var attribute = target as ComponentGUIInspectorAttribute;\r\n                var instance = Activator.CreateInstance(type);\r\n                inspectorDic.Add(attribute.ComponentType.FullName,\r\n                    instance as IComponentGUIInspector);\r\n            }\r\n        }\r\n\r\n        expandRect = new Rect(0f, 80f, 600f, 500f);\r\n        retractRect = new Rect(0f, 80f, 100f, 60f);\r\n        dragableRect = new Rect(0f, 0f, 600f, 20f);\r\n    }\r\n    private void OnDisable()\r\n    {\r\n        components = null;\r\n        currentComponent = null;\r\n        inspectorDic.Clear();\r\n        inspectorDic = null;\r\n    }\r\n\r\n    private void OnGUI()\r\n    {\r\n        if (isExpand)\r\n        {\r\n            expandRect = GUI.Window(2, expandRect,\r\n                OnExpandGUI, \"Inspector\");\r\n            //限制窗口拖动范围\r\n            expandRect.x = Mathf.Clamp(expandRect.x,\r\n                0f, Screen.width - 600f);\r\n            expandRect.y = Mathf.Clamp(expandRect.y,\r\n                0f, Screen.height - 500f);\r\n            dragableRect = new Rect(0f, 0f, 600f, 20f);\r\n        }\r\n        else\r\n        {\r\n            retractRect = GUI.Window(2, retractRect,\r\n                OnRetractGUI, \"Inspector\");\r\n            //限制窗口拖动范围\r\n            retractRect.x = Mathf.Clamp(retractRect.x,\r\n                0f, Screen.width - 100f);\r\n            retractRect.y = Mathf.Clamp(retractRect.y,\r\n                0f, Screen.height - 60f);\r\n            dragableRect = new Rect(0f, 0f, 100f, 20f);\r\n        }\r\n    }\r\n    private void OnExpandGUI(int windowId)\r\n    {\r\n        GUI.DragWindow(dragableRect);\r\n        //关闭窗口\r\n        if (GUILayout.Button(\"Close\", GUILayout.Height(20f)))\r\n            isExpand = false;\r\n\r\n        if (hierarchyGUIWindow.currentSelected == null)\r\n        {\r\n            GUILayout.Label(\"未选中任何物体\");\r\n            return;\r\n        }\r\n        if (selected != hierarchyGUIWindow.currentSelected)\r\n        {\r\n            selected = hierarchyGUIWindow.currentSelected;\r\n            components = selected.GetComponents<Component>();\r\n            currentComponent = components[0];\r\n        }\r\n        GUILayout.BeginHorizontal(\"Box\");\r\n        {\r\n            bool active = GUILayout.Toggle(selected.activeSelf, \r\n                string.Empty);\r\n            if (active != selected.activeSelf)\r\n            {\r\n                selected.SetActive(active);\r\n            }\r\n            selected.name = GUILayout.TextField(selected.name,\r\n                GUILayout.Width(Screen.width * .1f));\r\n            GUILayout.FlexibleSpace();\r\n            GUILayout.Label(string.Format(\"Tag:{0}\", selected.tag));\r\n            GUILayout.Space(10f);\r\n            GUILayout.Label(string.Format(\"Layer:{0}\", \r\n                LayerMask.LayerToName(selected.layer)));\r\n        }\r\n        GUILayout.EndHorizontal();\r\n\r\n        GUILayout.BeginHorizontal();\r\n        {\r\n            GUILayout.BeginVertical(\"Box\", GUILayout.ExpandHeight(true),\r\n                GUILayout.Width(Screen.width * .075f));\r\n            OnListGUI();\r\n            GUILayout.EndVertical();\r\n\r\n            GUILayout.BeginVertical(\"Box\", GUILayout.ExpandHeight(true));\r\n            OnComponentInspector();\r\n            GUILayout.EndVertical();\r\n        }\r\n        GUILayout.EndHorizontal();\r\n    }\r\n    private void OnRetractGUI(int windowId)\r\n    {\r\n        GUI.DragWindow(dragableRect);\r\n        //打开窗口\r\n        if (GUILayout.Button(\"Open\", GUILayout.Height(30f)))\r\n            isExpand = true;\r\n    }\r\n\r\n    private void OnListGUI()\r\n    {\r\n        listScroll = GUILayout.BeginScrollView(listScroll);\r\n        for (int i = 0; i < components.Length; i++)\r\n        {\r\n            if (GUILayout.Toggle(components[i] == currentComponent, \r\n                components[i].GetType().Name))\r\n            {\r\n                currentComponent = components[i];\r\n            }\r\n        }\r\n        GUILayout.EndScrollView();\r\n    }\r\n    private void OnComponentInspector()\r\n    {\r\n        inspectorScroll = GUILayout.BeginScrollView(inspectorScroll);\r\n        string name = currentComponent.GetType().FullName;\r\n        if (inspectorDic.ContainsKey(name))\r\n        {\r\n            inspectorDic[name].Draw(currentComponent);\r\n        }\r\n        else\r\n        {\r\n            GUILayout.Label(\"暂不支持该类型组件的调试\");\r\n        }\r\n        GUILayout.EndScrollView();\r\n    }\r\n}"
        }
    ]
}