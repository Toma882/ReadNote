{
    "sourceFile": "Assets/UnityEditor/Chapter 8 UnityAPI/UnityEditor/Presets/PresetsExample.cs",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1750940774775,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1750940774775,
            "name": "Commit-0",
            "content": "using UnityEngine;\r\nusing UnityEditor;\r\nusing UnityEditor.Presets;\r\nusing System.Collections.Generic;\r\nusing System.Linq;\r\n\r\nnamespace UnityEditor.Presets.Examples\r\n{\r\n    /// <summary>\r\n    /// UnityEditor.Presets 命名空间使用示例\r\n    /// 演示预设系统的创建、应用和管理功能\r\n    /// </summary>\r\n    public class PresetsExample : MonoBehaviour\r\n    {\r\n        [Header(\"预设配置\")]\r\n        [SerializeField] private bool enablePresets = true;\r\n        [SerializeField] private string presetName = \"DefaultPreset\";\r\n        [SerializeField] private string presetCategory = \"Custom\";\r\n        [SerializeField] private bool autoApply = false;\r\n        \r\n        [Header(\"预设状态\")]\r\n        [SerializeField] private int presetCount = 0;\r\n        [SerializeField] private string lastAppliedPreset = \"\";\r\n        [SerializeField] private bool isPresetValid = false;\r\n        \r\n        [Header(\"目标对象\")]\r\n        [SerializeField] private Object targetObject;\r\n        [SerializeField] private Component targetComponent;\r\n        \r\n        [Header(\"预设数据\")]\r\n        [SerializeField] private List<Preset> availablePresets = new List<Preset>();\r\n        [SerializeField] private Preset currentPreset;\r\n        \r\n        private PresetManager presetManager;\r\n        private Dictionary<string, Preset> presetRegistry = new Dictionary<string, Preset>();\r\n        \r\n        /// <summary>\r\n        /// 初始化预设系统\r\n        /// </summary>\r\n        private void Start()\r\n        {\r\n            InitializePresetSystem();\r\n        }\r\n        \r\n        /// <summary>\r\n        /// 初始化预设系统\r\n        /// </summary>\r\n        private void InitializePresetSystem()\r\n        {\r\n            if (!enablePresets)\r\n            {\r\n                Debug.Log(\"预设系统已禁用\");\r\n                return;\r\n            }\r\n            \r\n            try\r\n            {\r\n                // 获取预设管理器\r\n                presetManager = PresetManager.DefaultPresetManager;\r\n                \r\n                // 加载可用预设\r\n                LoadAvailablePresets();\r\n                \r\n                // 创建默认预设\r\n                CreateDefaultPresets();\r\n                \r\n                Debug.Log(\"预设系统初始化完成\");\r\n            }\r\n            catch (System.Exception e)\r\n            {\r\n                Debug.LogError($\"预设系统初始化失败: {e.Message}\");\r\n            }\r\n        }\r\n        \r\n        /// <summary>\r\n        /// 加载可用预设\r\n        /// </summary>\r\n        private void LoadAvailablePresets()\r\n        {\r\n            availablePresets.Clear();\r\n            presetRegistry.Clear();\r\n            \r\n            // 获取所有预设资源\r\n            string[] presetGuids = AssetDatabase.FindAssets(\"t:Preset\");\r\n            foreach (string guid in presetGuids)\r\n            {\r\n                string path = AssetDatabase.GUIDToAssetPath(guid);\r\n                Preset preset = AssetDatabase.LoadAssetAtPath<Preset>(path);\r\n                if (preset != null)\r\n                {\r\n                    availablePresets.Add(preset);\r\n                    presetRegistry[preset.name] = preset;\r\n                }\r\n            }\r\n            \r\n            presetCount = availablePresets.Count;\r\n            Debug.Log($\"加载了 {presetCount} 个预设\");\r\n        }\r\n        \r\n        /// <summary>\r\n        /// 创建默认预设\r\n        /// </summary>\r\n        private void CreateDefaultPresets()\r\n        {\r\n            // 创建Transform预设\r\n            CreateTransformPreset();\r\n            \r\n            // 创建Material预设\r\n            CreateMaterialPreset();\r\n            \r\n            // 创建AudioSource预设\r\n            CreateAudioSourcePreset();\r\n        }\r\n        \r\n        /// <summary>\r\n        /// 创建Transform预设\r\n        /// </summary>\r\n        private void CreateTransformPreset()\r\n        {\r\n            var transformPreset = new Preset();\r\n            var transform = new GameObject(\"TempTransform\").transform;\r\n            transformPreset.UpdateProperties(transform);\r\n            \r\n            transformPreset.name = \"DefaultTransform\";\r\n            transformPreset.category = presetCategory;\r\n            \r\n            SavePreset(transformPreset, \"DefaultTransform\");\r\n            DestroyImmediate(transform.gameObject);\r\n        }\r\n        \r\n        /// <summary>\r\n        /// 创建Material预设\r\n        /// </summary>\r\n        private void CreateMaterialPreset()\r\n        {\r\n            var materialPreset = new Preset();\r\n            var material = new Material(Shader.Find(\"Standard\"));\r\n            materialPreset.UpdateProperties(material);\r\n            \r\n            materialPreset.name = \"DefaultMaterial\";\r\n            materialPreset.category = presetCategory;\r\n            \r\n            SavePreset(materialPreset, \"DefaultMaterial\");\r\n            DestroyImmediate(material);\r\n        }\r\n        \r\n        /// <summary>\r\n        /// 创建AudioSource预设\r\n        /// </summary>\r\n        private void CreateAudioSourcePreset()\r\n        {\r\n            var audioPreset = new Preset();\r\n            var audioSource = new GameObject(\"TempAudio\").AddComponent<AudioSource>();\r\n            audioPreset.UpdateProperties(audioSource);\r\n            \r\n            audioPreset.name = \"DefaultAudioSource\";\r\n            audioPreset.category = presetCategory;\r\n            \r\n            SavePreset(audioPreset, \"DefaultAudioSource\");\r\n            DestroyImmediate(audioSource.gameObject);\r\n        }\r\n        \r\n        /// <summary>\r\n        /// 保存预设\r\n        /// </summary>\r\n        private void SavePreset(Preset preset, string fileName)\r\n        {\r\n            string path = $\"Assets/Presets/{fileName}.preset\";\r\n            \r\n            // 确保目录存在\r\n            string directory = System.IO.Path.GetDirectoryName(path);\r\n            if (!System.IO.Directory.Exists(directory))\r\n            {\r\n                System.IO.Directory.CreateDirectory(directory);\r\n            }\r\n            \r\n            AssetDatabase.CreateAsset(preset, path);\r\n            AssetDatabase.SaveAssets();\r\n            \r\n            Debug.Log($\"预设已保存: {path}\");\r\n        }\r\n        \r\n        /// <summary>\r\n        /// 应用预设到对象\r\n        /// </summary>\r\n        public void ApplyPreset(Preset preset, Object target)\r\n        {\r\n            if (preset == null || target == null)\r\n            {\r\n                Debug.LogWarning(\"预设或目标对象为空\");\r\n                return;\r\n            }\r\n            \r\n            if (preset.CanBeAppliedTo(target))\r\n            {\r\n                preset.ApplyTo(target);\r\n                lastAppliedPreset = preset.name;\r\n                isPresetValid = true;\r\n                \r\n                Debug.Log($\"预设 '{preset.name}' 已应用到 {target.name}\");\r\n            }\r\n            else\r\n            {\r\n                Debug.LogWarning($\"预设 '{preset.name}' 不能应用到 {target.name}\");\r\n                isPresetValid = false;\r\n            }\r\n        }\r\n        \r\n        /// <summary>\r\n        /// 应用预设到组件\r\n        /// </summary>\r\n        public void ApplyPresetToComponent(Preset preset, Component component)\r\n        {\r\n            if (preset == null || component == null)\r\n            {\r\n                Debug.LogWarning(\"预设或组件为空\");\r\n                return;\r\n            }\r\n            \r\n            if (preset.CanBeAppliedTo(component))\r\n            {\r\n                preset.ApplyTo(component);\r\n                lastAppliedPreset = preset.name;\r\n                isPresetValid = true;\r\n                \r\n                Debug.Log($\"预设 '{preset.name}' 已应用到组件 {component.GetType().Name}\");\r\n            }\r\n            else\r\n            {\r\n                Debug.LogWarning($\"预设 '{preset.name}' 不能应用到组件 {component.GetType().Name}\");\r\n                isPresetValid = false;\r\n            }\r\n        }\r\n        \r\n        /// <summary>\r\n        /// 从对象创建预设\r\n        /// </summary>\r\n        public Preset CreatePresetFromObject(Object sourceObject, string presetName)\r\n        {\r\n            if (sourceObject == null)\r\n            {\r\n                Debug.LogError(\"源对象为空\");\r\n                return null;\r\n            }\r\n            \r\n            var preset = new Preset();\r\n            preset.UpdateProperties(sourceObject);\r\n            preset.name = presetName;\r\n            preset.category = presetCategory;\r\n            \r\n            SavePreset(preset, presetName);\r\n            availablePresets.Add(preset);\r\n            presetRegistry[presetName] = preset;\r\n            presetCount = availablePresets.Count;\r\n            \r\n            Debug.Log($\"从 {sourceObject.name} 创建预设: {presetName}\");\r\n            return preset;\r\n        }\r\n        \r\n        /// <summary>\r\n        /// 从组件创建预设\r\n        /// </summary>\r\n        public Preset CreatePresetFromComponent(Component component, string presetName)\r\n        {\r\n            if (component == null)\r\n            {\r\n                Debug.LogError(\"组件为空\");\r\n                return null;\r\n            }\r\n            \r\n            var preset = new Preset();\r\n            preset.UpdateProperties(component);\r\n            preset.name = presetName;\r\n            preset.category = presetCategory;\r\n            \r\n            SavePreset(preset, presetName);\r\n            availablePresets.Add(preset);\r\n            presetRegistry[presetName] = preset;\r\n            presetCount = availablePresets.Count;\r\n            \r\n            Debug.Log($\"从组件 {component.GetType().Name} 创建预设: {presetName}\");\r\n            return preset;\r\n        }\r\n        \r\n        /// <summary>\r\n        /// 删除预设\r\n        /// </summary>\r\n        public void DeletePreset(string presetName)\r\n        {\r\n            if (presetRegistry.ContainsKey(presetName))\r\n            {\r\n                Preset preset = presetRegistry[presetName];\r\n                string path = AssetDatabase.GetAssetPath(preset);\r\n                \r\n                AssetDatabase.DeleteAsset(path);\r\n                availablePresets.Remove(preset);\r\n                presetRegistry.Remove(presetName);\r\n                presetCount = availablePresets.Count;\r\n                \r\n                Debug.Log($\"预设已删除: {presetName}\");\r\n            }\r\n        }\r\n        \r\n        /// <summary>\r\n        /// 获取预设信息\r\n        /// </summary>\r\n        public string GetPresetInfo(Preset preset)\r\n        {\r\n            if (preset == null)\r\n                return \"预设为空\";\r\n            \r\n            return $\"名称: {preset.name}, 类别: {preset.category}, 目标类型: {preset.GetTargetTypeName()}\";\r\n        }\r\n        \r\n        /// <summary>\r\n        /// 验证预设有效性\r\n        /// </summary>\r\n        public bool ValidatePreset(Preset preset, Object target)\r\n        {\r\n            if (preset == null || target == null)\r\n                return false;\r\n            \r\n            return preset.CanBeAppliedTo(target);\r\n        }\r\n        \r\n        /// <summary>\r\n        /// 批量应用预设\r\n        /// </summary>\r\n        public void BatchApplyPreset(Preset preset, Object[] targets)\r\n        {\r\n            if (preset == null || targets == null)\r\n            {\r\n                Debug.LogWarning(\"预设或目标数组为空\");\r\n                return;\r\n            }\r\n            \r\n            int successCount = 0;\r\n            foreach (Object target in targets)\r\n            {\r\n                if (ValidatePreset(preset, target))\r\n                {\r\n                    ApplyPreset(preset, target);\r\n                    successCount++;\r\n                }\r\n            }\r\n            \r\n            Debug.Log($\"批量应用完成: {successCount}/{targets.Length} 个对象成功应用预设\");\r\n        }\r\n        \r\n        /// <summary>\r\n        /// 导出预设\r\n        /// </summary>\r\n        public void ExportPreset(Preset preset)\r\n        {\r\n            if (preset == null)\r\n            {\r\n                Debug.LogWarning(\"预设为空\");\r\n                return;\r\n            }\r\n            \r\n            string exportPath = EditorUtility.SaveFilePanel(\"导出预设\", \"\", preset.name, \"preset\");\r\n            if (string.IsNullOrEmpty(exportPath))\r\n                return;\r\n            \r\n            try\r\n            {\r\n                string sourcePath = AssetDatabase.GetAssetPath(preset);\r\n                System.IO.File.Copy(sourcePath, exportPath, true);\r\n                Debug.Log($\"预设已导出到: {exportPath}\");\r\n            }\r\n            catch (System.Exception e)\r\n            {\r\n                Debug.LogError($\"导出预设失败: {e.Message}\");\r\n            }\r\n        }\r\n        \r\n        /// <summary>\r\n        /// 导入预设\r\n        /// </summary>\r\n        public void ImportPreset()\r\n        {\r\n            string importPath = EditorUtility.OpenFilePanel(\"导入预设\", \"\", \"preset\");\r\n            if (string.IsNullOrEmpty(importPath))\r\n                return;\r\n            \r\n            try\r\n            {\r\n                string fileName = System.IO.Path.GetFileName(importPath);\r\n                string targetPath = $\"Assets/Presets/{fileName}\";\r\n                \r\n                // 确保目录存在\r\n                string directory = System.IO.Path.GetDirectoryName(targetPath);\r\n                if (!System.IO.Directory.Exists(directory))\r\n                {\r\n                    System.IO.Directory.CreateDirectory(directory);\r\n                }\r\n                \r\n                System.IO.File.Copy(importPath, targetPath, true);\r\n                AssetDatabase.Refresh();\r\n                \r\n                // 重新加载预设\r\n                LoadAvailablePresets();\r\n                \r\n                Debug.Log($\"预设已导入: {targetPath}\");\r\n            }\r\n            catch (System.Exception e)\r\n            {\r\n                Debug.LogError($\"导入预设失败: {e.Message}\");\r\n            }\r\n        }\r\n        \r\n        /// <summary>\r\n        /// 获取所有预设名称\r\n        /// </summary>\r\n        public string[] GetAllPresetNames()\r\n        {\r\n            return availablePresets.Select(p => p.name).ToArray();\r\n        }\r\n        \r\n        /// <summary>\r\n        /// 按类别获取预设\r\n        /// </summary>\r\n        public Preset[] GetPresetsByCategory(string category)\r\n        {\r\n            return availablePresets.Where(p => p.category == category).ToArray();\r\n        }\r\n        \r\n        /// <summary>\r\n        /// 在编辑器中显示GUI\r\n        /// </summary>\r\n        private void OnGUI()\r\n        {\r\n            if (!Application.isPlaying) return;\r\n            \r\n            GUILayout.BeginArea(new Rect(10, 10, 500, 700));\r\n            GUILayout.Label(\"UnityEditor.Presets 示例\", EditorStyles.boldLabel);\r\n            \r\n            GUILayout.Space(10);\r\n            GUILayout.Label($\"状态: {(enablePresets ? \"启用\" : \"禁用\")}\");\r\n            GUILayout.Label($\"预设数量: {presetCount}\");\r\n            GUILayout.Label($\"最后应用: {lastAppliedPreset}\");\r\n            GUILayout.Label($\"预设有效: {(isPresetValid ? \"是\" : \"否\")}\");\r\n            \r\n            GUILayout.Space(10);\r\n            GUILayout.Label(\"目标对象\", EditorStyles.boldLabel);\r\n            \r\n            targetObject = EditorGUILayout.ObjectField(\"目标对象\", targetObject, typeof(Object), true);\r\n            targetComponent = (Component)EditorGUILayout.ObjectField(\"目标组件\", targetComponent, typeof(Component), true);\r\n            \r\n            GUILayout.Space(10);\r\n            GUILayout.Label(\"预设应用\", EditorStyles.boldLabel);\r\n            \r\n            string[] presetNames = GetAllPresetNames();\r\n            if (presetNames.Length > 0)\r\n            {\r\n                int selectedIndex = EditorGUILayout.Popup(\"选择预设\", 0, presetNames);\r\n                if (selectedIndex >= 0 && selectedIndex < availablePresets.Count)\r\n                {\r\n                    currentPreset = availablePresets[selectedIndex];\r\n                    \r\n                    if (GUILayout.Button(\"应用预设到对象\"))\r\n                    {\r\n                        ApplyPreset(currentPreset, targetObject);\r\n                    }\r\n                    \r\n                    if (GUILayout.Button(\"应用预设到组件\"))\r\n                    {\r\n                        ApplyPresetToComponent(currentPreset, targetComponent);\r\n                    }\r\n                }\r\n            }\r\n            \r\n            GUILayout.Space(10);\r\n            GUILayout.Label(\"预设创建\", EditorStyles.boldLabel);\r\n            \r\n            presetName = GUILayout.TextField(\"预设名称\", presetName);\r\n            \r\n            if (GUILayout.Button(\"从对象创建预设\"))\r\n            {\r\n                CreatePresetFromObject(targetObject, presetName);\r\n            }\r\n            \r\n            if (GUILayout.Button(\"从组件创建预设\"))\r\n            {\r\n                CreatePresetFromComponent(targetComponent, presetName);\r\n            }\r\n            \r\n            GUILayout.Space(10);\r\n            GUILayout.Label(\"预设管理\", EditorStyles.boldLabel);\r\n            \r\n            if (GUILayout.Button(\"刷新预设列表\"))\r\n            {\r\n                LoadAvailablePresets();\r\n            }\r\n            \r\n            if (GUILayout.Button(\"删除选中预设\"))\r\n            {\r\n                if (currentPreset != null)\r\n                {\r\n                    DeletePreset(currentPreset.name);\r\n                }\r\n            }\r\n            \r\n            if (GUILayout.Button(\"导出选中预设\"))\r\n            {\r\n                if (currentPreset != null)\r\n                {\r\n                    ExportPreset(currentPreset);\r\n                }\r\n            }\r\n            \r\n            if (GUILayout.Button(\"导入预设\"))\r\n            {\r\n                ImportPreset();\r\n            }\r\n            \r\n            GUILayout.Space(10);\r\n            GUILayout.Label(\"预设信息\", EditorStyles.boldLabel);\r\n            \r\n            if (currentPreset != null)\r\n            {\r\n                GUILayout.Label(GetPresetInfo(currentPreset));\r\n                \r\n                if (targetObject != null)\r\n                {\r\n                    bool isValid = ValidatePreset(currentPreset, targetObject);\r\n                    GUILayout.Label($\"对目标有效: {(isValid ? \"是\" : \"否\")}\");\r\n                }\r\n            }\r\n            \r\n            GUILayout.Space(10);\r\n            GUILayout.Label(\"配置\", EditorStyles.boldLabel);\r\n            \r\n            enablePresets = EditorGUILayout.Toggle(\"启用预设\", enablePresets);\r\n            presetCategory = EditorGUILayout.TextField(\"预设类别\", presetCategory);\r\n            autoApply = EditorGUILayout.Toggle(\"自动应用\", autoApply);\r\n            \r\n            GUILayout.EndArea();\r\n        }\r\n    }\r\n} "
        }
    ]
}