{
    "sourceFile": "Assets/UnityEditor/Chapter 7 EditorPrefs/ResourceComponent/README.md",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 1,
            "patches": [
                {
                    "date": 1746899977843,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1746900172590,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -192,5 +192,5 @@\n ## 相关资源\r\n - [Unity文档: AssetBundle](https://docs.unity3d.com/Manual/AssetBundlesIntro.html)\r\n - [Unity文档: 资源管理](https://docs.unity3d.com/Manual/SpecialFolders.html)\r\n - [Unity文档: 场景管理](https://docs.unity3d.com/ScriptReference/SceneManagement.SceneManager.html)\r\n-- [Unity文档: AssetDatabase](https://docs.unity3d.com/ScriptReference/AssetDatabase.html)\n\\ No newline at end of file\n+- [Unity文档: AssetDatabase](https://docs.unity3d.com/ScriptReference/AssetDatabase.html)\r\n"
                }
            ],
            "date": 1746899977843,
            "name": "Commit-0",
            "content": "# ResourceComponent 模块\r\n\r\n## 概述\r\nResourceComponent 模块是一个强大的资源管理系统，用于统一处理Unity项目中的资源加载、卸载和管理。该组件支持多种运行模式，包括编辑器模式、模拟模式和真实环境模式，可以无缝切换不同的资源来源，为游戏开发提供了灵活的资源管理解决方案。该组件的主要功能包括资源映射表管理、AssetBundle加载和依赖处理、场景异步加载以及资源释放管理等。\r\n\r\n## 核心功能\r\n- **多模式资源加载**：支持编辑器模式、模拟模式和真实环境模式\r\n- **资源映射管理**：通过映射表建立资源路径与AssetBundle的关联\r\n- **AssetBundle管理**：处理AssetBundle的加载、卸载和依赖关系\r\n- **场景异步加载**：支持场景的异步加载和卸载\r\n- **资源生命周期管理**：提供完整的资源加载和卸载API\r\n\r\n## 重要接口和类\r\n\r\n### `ResourceComponent` 类\r\n核心资源管理组件，提供资源加载和卸载的主要功能。\r\n\r\n| 属性/方法 | 说明 |\r\n|---------|------|\r\n| `MODE` | 枚举，定义了资源加载的三种模式：EDITOR、SIMULATIVE、REALITY |\r\n| `LoadAssetAsync<T>()` | 异步加载指定路径的资源，支持加载进度回调 |\r\n| `LoadSceneAsync()` | 异步加载指定路径的场景，支持加载进度回调 |\r\n| `UnloadAsset()` | 卸载指定路径的资源 |\r\n| `UnloadAllAsset()` | 卸载所有已加载的资源 |\r\n| `UnloadScene()` | 卸载指定路径的场景 |\r\n\r\n### `AssetInfo` 类\r\n表示单个资源的信息，包含资源名称、路径和所属的AssetBundle包名称。\r\n\r\n| 属性/方法 | 说明 |\r\n|---------|------|\r\n| `name` | 资源名称，不包含扩展名 |\r\n| `path` | 资源在项目中的完整路径 |\r\n| `abName` | 资源所属的AssetBundle包名称 |\r\n| `ToString()` | 返回资产信息的字符串表示 |\r\n\r\n### `AssetsInfo` 类\r\n包含多个`AssetInfo`的集合，用于序列化和反序列化资源映射表。\r\n\r\n| 属性/方法 | 说明 |\r\n|---------|------|\r\n| `list` | 存储所有`AssetInfo`的列表 |\r\n\r\n## UML类图\r\n\r\n```\r\n+-------------------+       +------------------+       +-------------+\r\n| ResourceComponent |       |   AssetsInfo     |       |  AssetInfo  |\r\n+-------------------+       +------------------+       +-------------+\r\n| -mode: MODE       |       | +list: List<>    |------>| +name: string|\r\n| -assetBundleUrl   |       +------------------+       | +path: string|\r\n| -map: Dictionary  |<------------------------------>| +abName:string|\r\n| -assetBundles: Dic|                                  +-------------+\r\n| -scenes: Dictionary|\r\n| +LoadAssetAsync<T>|\r\n| +LoadSceneAsync   |\r\n| +UnloadAsset      |\r\n| +UnloadAllAsset   |\r\n| +UnloadScene      |\r\n+-------------------+\r\n\r\n+----------------+\r\n|      MODE      |\r\n+----------------+\r\n| EDITOR         |\r\n| SIMULATIVE     |\r\n| REALITY        |\r\n+----------------+\r\n```\r\n\r\n## 资源加载流程图\r\n\r\n```\r\n资源请求 --> 检查映射表 --> 检查加载模式\r\n    |\r\n    +--> [EDITOR模式] --> 使用AssetDatabase直接加载\r\n    |\r\n    +--> [SIMULATIVE/REALITY模式] --> 查找AssetBundle --> 加载依赖项 --> 加载AssetBundle --> 从AssetBundle加载资源\r\n```\r\n\r\n## 思维导图\r\n\r\n```\r\nResourceComponent\r\n├── 资源管理模式\r\n│   ├── 编辑器模式 (EDITOR)\r\n│   │   └── 直接从AssetDatabase加载\r\n│   ├── 模拟模式 (SIMULATIVE)\r\n│   │   └── 从StreamingAssets加载AssetBundle\r\n│   └── 真实环境模式 (REALITY)\r\n│       └── 从自定义URL加载AssetBundle\r\n├── 资源映射管理\r\n│   ├── 资源映射表 (map.dat)\r\n│   │   ├── 资源路径到AssetBundle的映射\r\n│   │   └── 基于AssetsInfo和AssetInfo的序列化\r\n│   └── 映射表加载\r\n│       └── 从StreamingAssets或指定URL下载\r\n├── AssetBundle管理\r\n│   ├── AssetBundle清单\r\n│   │   └── AssetBundleManifest\r\n│   ├── 依赖加载\r\n│   │   └── 递归加载所有依赖项\r\n│   └── AssetBundle缓存\r\n│       └── 避免重复加载\r\n├── 资源操作接口\r\n│   ├── 资源加载\r\n│   │   ├── LoadAssetAsync<T>\r\n│   │   └── 支持加载进度回调\r\n│   ├── 场景加载\r\n│   │   ├── LoadSceneAsync\r\n│   │   └── 支持加载进度回调\r\n│   └── 资源卸载\r\n│       ├── UnloadAsset\r\n│       ├── UnloadAllAsset\r\n│       └── UnloadScene\r\n└── 异步操作支持\r\n    ├── 协程实现\r\n    ├── 进度回调\r\n    └── 完成回调\r\n```\r\n\r\n## 应用场景\r\n1. **大型游戏资源管理**：为大型游戏提供统一的资源管理接口，简化资源操作\r\n2. **热更新支持**：通过切换资源加载模式，支持游戏资源热更新\r\n3. **资源加载优化**：自动管理AssetBundle依赖关系，避免重复加载\r\n4. **开发与发布无缝切换**：在开发阶段使用编辑器模式，发布时自动切换到真实环境模式\r\n5. **场景管理**：提供场景的异步加载和卸载功能，支持多场景管理\r\n\r\n## 最佳实践\r\n1. **资源命名与组织**：建立清晰的资源命名和路径组织规范，便于管理\r\n2. **AssetBundle打包策略**：根据游戏需求合理规划AssetBundle的打包粒度\r\n3. **依赖关系管理**：注意资源间的依赖关系，避免循环依赖\r\n4. **异步加载使用**：对于大型资源或场景，始终使用异步加载避免卡顿\r\n5. **资源释放及时性**：及时释放不需要的资源，避免内存泄漏\r\n6. **预加载关键资源**：对关键资源进行预加载，提高游戏响应速度\r\n\r\n## 代码示例\r\n```csharp\r\n// 1. 组件初始化\r\nResourceComponent resourceManager;\r\n\r\nvoid Start() \r\n{\r\n    resourceManager = GetComponent<ResourceComponent>();\r\n}\r\n\r\n// 2. 异步加载纹理资源\r\npublic void LoadTexture(string path) \r\n{\r\n    resourceManager.LoadAssetAsync<Texture2D>(path, \r\n        (success, texture) => {\r\n            if (success && texture != null) {\r\n                // 使用加载的纹理\r\n                myRenderer.material.mainTexture = texture;\r\n            }\r\n        },\r\n        (progress) => {\r\n            // 更新加载进度\r\n            loadingBar.value = progress;\r\n        }\r\n    );\r\n}\r\n\r\n// 3. 异步加载场景\r\npublic void LoadGameLevel(string scenePath) \r\n{\r\n    resourceManager.LoadSceneAsync(scenePath,\r\n        (success) => {\r\n            if (success) {\r\n                // 场景加载完成后的操作\r\n                HideLoadingScreen();\r\n            }\r\n        },\r\n        (progress) => {\r\n            // 更新场景加载进度\r\n            sceneLoadingBar.value = progress;\r\n        }\r\n    );\r\n}\r\n\r\n// 4. 释放资源\r\npublic void ReleaseResources() \r\n{\r\n    // 卸载特定资源\r\n    resourceManager.UnloadAsset(\"Assets/Textures/background.png\");\r\n    \r\n    // 在场景转换后卸载所有资源\r\n    resourceManager.UnloadAllAsset(true);\r\n}\r\n```\r\n\r\n## 相关资源\r\n- [Unity文档: AssetBundle](https://docs.unity3d.com/Manual/AssetBundlesIntro.html)\r\n- [Unity文档: 资源管理](https://docs.unity3d.com/Manual/SpecialFolders.html)\r\n- [Unity文档: 场景管理](https://docs.unity3d.com/ScriptReference/SceneManagement.SceneManager.html)\r\n- [Unity文档: AssetDatabase](https://docs.unity3d.com/ScriptReference/AssetDatabase.html)"
        }
    ]
}