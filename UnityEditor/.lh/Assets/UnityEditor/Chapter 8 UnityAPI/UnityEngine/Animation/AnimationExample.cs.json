{
    "sourceFile": "Assets/UnityEditor/Chapter 8 UnityAPI/UnityEngine/Animation/AnimationExample.cs",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 1,
            "patches": [
                {
                    "date": 1750930446497,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1750930503669,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,1 +1,678 @@\n- \n\\ No newline at end of file\n+using UnityEngine;\r\n+using System.Collections.Generic;\r\n+\r\n+/// <summary>\r\n+/// UnityEngine.Animation 命名空间案例演示\r\n+/// 展示动画系统的核心功能\r\n+/// </summary>\r\n+public class AnimationExample : MonoBehaviour\r\n+{\r\n+    [Header(\"动画组件\")]\r\n+    [SerializeField] private Animator animator;\r\n+    [SerializeField] private Animation legacyAnimation;\r\n+    [SerializeField] private AnimationClip[] animationClips;\r\n+    \r\n+    [Header(\"动画设置\")]\r\n+    [SerializeField] private bool enableAnimation = true;\r\n+    [SerializeField] private float playbackSpeed = 1.0f;\r\n+    [SerializeField] private bool loopAnimation = true;\r\n+    [SerializeField] private bool crossFade = true;\r\n+    [SerializeField] private float crossFadeTime = 0.25f;\r\n+    \r\n+    [Header(\"动画状态\")]\r\n+    [SerializeField] private bool isPlaying = false;\r\n+    [SerializeField] private bool isPaused = false;\r\n+    [SerializeField] private string currentAnimation = \"\";\r\n+    [SerializeField] private float currentTime = 0f;\r\n+    [SerializeField] private float totalTime = 0f;\r\n+    [SerializeField] private int currentClipIndex = 0;\r\n+    \r\n+    [Header(\"动画参数\")]\r\n+    [SerializeField] private float speedParameter = 0f;\r\n+    [SerializeField] private float jumpParameter = 0f;\r\n+    [SerializeField] private bool isGroundedParameter = true;\r\n+    [SerializeField] private int stateParameter = 0;\r\n+    \r\n+    [Header(\"动画层\")]\r\n+    [SerializeField] private int baseLayerIndex = 0;\r\n+    [SerializeField] private int upperBodyLayerIndex = 1;\r\n+    [SerializeField] private float upperBodyWeight = 1.0f;\r\n+    [SerializeField] private AvatarMask upperBodyMask;\r\n+    \r\n+    // 动画事件\r\n+    private System.Action<string> onAnimationStart;\r\n+    private System.Action<string> onAnimationEnd;\r\n+    private System.Action<string> onAnimationEvent;\r\n+    \r\n+    private void Start()\r\n+    {\r\n+        InitializeAnimationSystem();\r\n+    }\r\n+    \r\n+    /// <summary>\r\n+    /// 初始化动画系统\r\n+    /// </summary>\r\n+    private void InitializeAnimationSystem()\r\n+    {\r\n+        // 获取或创建Animator\r\n+        if (animator == null)\r\n+        {\r\n+            animator = GetComponent<Animator>();\r\n+            if (animator == null)\r\n+            {\r\n+                animator = gameObject.AddComponent<Animator>();\r\n+            }\r\n+        }\r\n+        \r\n+        // 获取或创建Legacy Animation\r\n+        if (legacyAnimation == null)\r\n+        {\r\n+            legacyAnimation = GetComponent<Animation>();\r\n+            if (legacyAnimation == null)\r\n+            {\r\n+                legacyAnimation = gameObject.AddComponent<Animation>();\r\n+            }\r\n+        }\r\n+        \r\n+        // 配置动画组件\r\n+        ConfigureAnimationComponents();\r\n+        \r\n+        // 设置动画事件\r\n+        SetupAnimationEvents();\r\n+        \r\n+        // 加载动画片段\r\n+        LoadAnimationClips();\r\n+        \r\n+        Debug.Log(\"动画系统初始化完成\");\r\n+    }\r\n+    \r\n+    /// <summary>\r\n+    /// 配置动画组件\r\n+    /// </summary>\r\n+    private void ConfigureAnimationComponents()\r\n+    {\r\n+        if (animator != null)\r\n+        {\r\n+            // 设置Animator参数\r\n+            animator.speed = playbackSpeed;\r\n+            animator.applyRootMotion = false;\r\n+            animator.cullingMode = AnimatorCullingMode.CullUpdateTransforms;\r\n+            \r\n+            // 设置动画层\r\n+            if (animator.layerCount > 1)\r\n+            {\r\n+                animator.SetLayerWeight(upperBodyLayerIndex, upperBodyWeight);\r\n+                if (upperBodyMask != null)\r\n+                {\r\n+                    animator.SetLayerWeight(upperBodyLayerIndex, upperBodyWeight);\r\n+                }\r\n+            }\r\n+        }\r\n+        \r\n+        if (legacyAnimation != null)\r\n+        {\r\n+            // 设置Legacy Animation参数\r\n+            legacyAnimation.playAutomatically = false;\r\n+            legacyAnimation.wrapMode = loopAnimation ? WrapMode.Loop : WrapMode.Once;\r\n+        }\r\n+        \r\n+        Debug.Log(\"动画组件配置完成\");\r\n+    }\r\n+    \r\n+    /// <summary>\r\n+    /// 设置动画事件\r\n+    /// </summary>\r\n+    private void SetupAnimationEvents()\r\n+    {\r\n+        if (animator != null)\r\n+        {\r\n+            // 监听动画状态变化\r\n+            StartCoroutine(MonitorAnimationState());\r\n+        }\r\n+        \r\n+        Debug.Log(\"动画事件设置完成\");\r\n+    }\r\n+    \r\n+    /// <summary>\r\n+    /// 监控动画状态\r\n+    /// </summary>\r\n+    private System.Collections.IEnumerator MonitorAnimationState()\r\n+    {\r\n+        string previousState = \"\";\r\n+        \r\n+        while (true)\r\n+        {\r\n+            if (animator != null && animator.isActiveAndEnabled)\r\n+            {\r\n+                AnimatorStateInfo currentState = animator.GetCurrentAnimatorStateInfo(0);\r\n+                string currentStateName = currentState.IsName(\"\") ? \"Unknown\" : currentState.fullPathHash.ToString();\r\n+                \r\n+                if (currentStateName != previousState)\r\n+                {\r\n+                    if (!string.IsNullOrEmpty(previousState))\r\n+                    {\r\n+                        onAnimationEnd?.Invoke(previousState);\r\n+                    }\r\n+                    \r\n+                    onAnimationStart?.Invoke(currentStateName);\r\n+                    previousState = currentStateName;\r\n+                }\r\n+            }\r\n+            \r\n+            yield return new WaitForSeconds(0.1f);\r\n+        }\r\n+    }\r\n+    \r\n+    /// <summary>\r\n+    /// 加载动画片段\r\n+    /// </summary>\r\n+    private void LoadAnimationClips()\r\n+    {\r\n+        if (animationClips != null && animationClips.Length > 0)\r\n+        {\r\n+            // 加载到Legacy Animation\r\n+            if (legacyAnimation != null)\r\n+            {\r\n+                foreach (var clip in animationClips)\r\n+                {\r\n+                    if (clip != null)\r\n+                    {\r\n+                        legacyAnimation.AddClip(clip, clip.name);\r\n+                    }\r\n+                }\r\n+            }\r\n+            \r\n+            Debug.Log($\"加载了 {animationClips.Length} 个动画片段\");\r\n+        }\r\n+    }\r\n+    \r\n+    /// <summary>\r\n+    /// 播放动画\r\n+    /// </summary>\r\n+    /// <param name=\"animationName\">动画名称</param>\r\n+    public void PlayAnimation(string animationName)\r\n+    {\r\n+        if (string.IsNullOrEmpty(animationName))\r\n+        {\r\n+            Debug.LogError(\"动画名称不能为空\");\r\n+            return;\r\n+        }\r\n+        \r\n+        // 尝试使用Animator播放\r\n+        if (animator != null && animator.isActiveAndEnabled)\r\n+        {\r\n+            animator.Play(animationName);\r\n+            currentAnimation = animationName;\r\n+            isPlaying = true;\r\n+            isPaused = false;\r\n+            \r\n+            Debug.Log($\"Animator播放动画: {animationName}\");\r\n+            return;\r\n+        }\r\n+        \r\n+        // 尝试使用Legacy Animation播放\r\n+        if (legacyAnimation != null && legacyAnimation.GetClip(animationName) != null)\r\n+        {\r\n+            if (crossFade)\r\n+            {\r\n+                legacyAnimation.CrossFade(animationName, crossFadeTime);\r\n+            }\r\n+            else\r\n+            {\r\n+                legacyAnimation.Play(animationName);\r\n+            }\r\n+            \r\n+            currentAnimation = animationName;\r\n+            isPlaying = true;\r\n+            isPaused = false;\r\n+            \r\n+            Debug.Log($\"Legacy Animation播放动画: {animationName}\");\r\n+            return;\r\n+        }\r\n+        \r\n+        Debug.LogError($\"找不到动画: {animationName}\");\r\n+    }\r\n+    \r\n+    /// <summary>\r\n+    /// 播放动画片段\r\n+    /// </summary>\r\n+    /// <param name=\"clipIndex\">片段索引</param>\r\n+    public void PlayAnimationClip(int clipIndex)\r\n+    {\r\n+        if (animationClips == null || clipIndex < 0 || clipIndex >= animationClips.Length)\r\n+        {\r\n+            Debug.LogError(\"无效的动画片段索引\");\r\n+            return;\r\n+        }\r\n+        \r\n+        AnimationClip clip = animationClips[clipIndex];\r\n+        if (clip != null)\r\n+        {\r\n+            PlayAnimation(clip.name);\r\n+            currentClipIndex = clipIndex;\r\n+        }\r\n+    }\r\n+    \r\n+    /// <summary>\r\n+    /// 暂停动画\r\n+    /// </summary>\r\n+    public void PauseAnimation()\r\n+    {\r\n+        if (animator != null)\r\n+        {\r\n+            animator.speed = 0f;\r\n+        }\r\n+        \r\n+        if (legacyAnimation != null)\r\n+        {\r\n+            legacyAnimation.Sample();\r\n+        }\r\n+        \r\n+        isPaused = true;\r\n+        Debug.Log(\"动画已暂停\");\r\n+    }\r\n+    \r\n+    /// <summary>\r\n+    /// 恢复动画\r\n+    /// </summary>\r\n+    public void ResumeAnimation()\r\n+    {\r\n+        if (animator != null)\r\n+        {\r\n+            animator.speed = playbackSpeed;\r\n+        }\r\n+        \r\n+        if (legacyAnimation != null)\r\n+        {\r\n+            legacyAnimation.Play();\r\n+        }\r\n+        \r\n+        isPaused = false;\r\n+        Debug.Log(\"动画已恢复\");\r\n+    }\r\n+    \r\n+    /// <summary>\r\n+    /// 停止动画\r\n+    /// </summary>\r\n+    public void StopAnimation()\r\n+    {\r\n+        if (animator != null)\r\n+        {\r\n+            animator.Play(\"Idle\");\r\n+        }\r\n+        \r\n+        if (legacyAnimation != null)\r\n+        {\r\n+            legacyAnimation.Stop();\r\n+        }\r\n+        \r\n+        isPlaying = false;\r\n+        isPaused = false;\r\n+        currentTime = 0f;\r\n+        \r\n+        Debug.Log(\"动画已停止\");\r\n+    }\r\n+    \r\n+    /// <summary>\r\n+    /// 设置播放速度\r\n+    /// </summary>\r\n+    /// <param name=\"speed\">播放速度</param>\r\n+    public void SetPlaybackSpeed(float speed)\r\n+    {\r\n+        playbackSpeed = Mathf.Clamp(speed, 0.1f, 5.0f);\r\n+        \r\n+        if (animator != null)\r\n+        {\r\n+            animator.speed = playbackSpeed;\r\n+        }\r\n+        \r\n+        if (legacyAnimation != null)\r\n+        {\r\n+            legacyAnimation.playbackSpeed = playbackSpeed;\r\n+        }\r\n+        \r\n+        Debug.Log($\"播放速度已设置为: {playbackSpeed}\");\r\n+    }\r\n+    \r\n+    /// <summary>\r\n+    /// 设置动画参数\r\n+    /// </summary>\r\n+    /// <param name=\"parameterName\">参数名称</param>\r\n+    /// <param name=\"value\">参数值</param>\r\n+    public void SetAnimationParameter(string parameterName, float value)\r\n+    {\r\n+        if (animator != null)\r\n+        {\r\n+            animator.SetFloat(parameterName, value);\r\n+        }\r\n+        \r\n+        Debug.Log($\"设置动画参数 {parameterName}: {value}\");\r\n+    }\r\n+    \r\n+    /// <summary>\r\n+    /// 设置动画参数\r\n+    /// </summary>\r\n+    /// <param name=\"parameterName\">参数名称</param>\r\n+    /// <param name=\"value\">参数值</param>\r\n+    public void SetAnimationParameter(string parameterName, bool value)\r\n+    {\r\n+        if (animator != null)\r\n+        {\r\n+            animator.SetBool(parameterName, value);\r\n+        }\r\n+        \r\n+        Debug.Log($\"设置动画参数 {parameterName}: {value}\");\r\n+    }\r\n+    \r\n+    /// <summary>\r\n+    /// 设置动画参数\r\n+    /// </summary>\r\n+    /// <param name=\"parameterName\">参数名称</param>\r\n+    /// <param name=\"value\">参数值</param>\r\n+    public void SetAnimationParameter(string parameterName, int value)\r\n+    {\r\n+        if (animator != null)\r\n+        {\r\n+            animator.SetInteger(parameterName, value);\r\n+        }\r\n+        \r\n+        Debug.Log($\"设置动画参数 {parameterName}: {value}\");\r\n+    }\r\n+    \r\n+    /// <summary>\r\n+    /// 触发动画触发器\r\n+    /// </summary>\r\n+    /// <param name=\"triggerName\">触发器名称</param>\r\n+    public void SetAnimationTrigger(string triggerName)\r\n+    {\r\n+        if (animator != null)\r\n+        {\r\n+            animator.SetTrigger(triggerName);\r\n+        }\r\n+        \r\n+        Debug.Log($\"触发动画触发器: {triggerName}\");\r\n+    }\r\n+    \r\n+    /// <summary>\r\n+    /// 重置动画触发器\r\n+    /// </summary>\r\n+    /// <param name=\"triggerName\">触发器名称</param>\r\n+    public void ResetAnimationTrigger(string triggerName)\r\n+    {\r\n+        if (animator != null)\r\n+        {\r\n+            animator.ResetTrigger(triggerName);\r\n+        }\r\n+        \r\n+        Debug.Log($\"重置动画触发器: {triggerName}\");\r\n+    }\r\n+    \r\n+    /// <summary>\r\n+    /// 设置动画层权重\r\n+    /// </summary>\r\n+    /// <param name=\"layerIndex\">层索引</param>\r\n+    /// <param name=\"weight\">权重</param>\r\n+    public void SetLayerWeight(int layerIndex, float weight)\r\n+    {\r\n+        if (animator != null && layerIndex >= 0 && layerIndex < animator.layerCount)\r\n+        {\r\n+            animator.SetLayerWeight(layerIndex, Mathf.Clamp01(weight));\r\n+        }\r\n+        \r\n+        Debug.Log($\"设置动画层 {layerIndex} 权重: {weight}\");\r\n+    }\r\n+    \r\n+    /// <summary>\r\n+    /// 播放下一个动画\r\n+    /// </summary>\r\n+    public void PlayNextAnimation()\r\n+    {\r\n+        if (animationClips == null || animationClips.Length == 0)\r\n+        {\r\n+            Debug.LogError(\"没有可播放的动画\");\r\n+            return;\r\n+        }\r\n+        \r\n+        int nextIndex = (currentClipIndex + 1) % animationClips.Length;\r\n+        PlayAnimationClip(nextIndex);\r\n+    }\r\n+    \r\n+    /// <summary>\r\n+    /// 播放上一个动画\r\n+    /// </summary>\r\n+    public void PlayPreviousAnimation()\r\n+    {\r\n+        if (animationClips == null || animationClips.Length == 0)\r\n+        {\r\n+            Debug.LogError(\"没有可播放的动画\");\r\n+            return;\r\n+        }\r\n+        \r\n+        int prevIndex = (currentClipIndex - 1 + animationClips.Length) % animationClips.Length;\r\n+        PlayAnimationClip(prevIndex);\r\n+    }\r\n+    \r\n+    /// <summary>\r\n+    /// 获取动画信息\r\n+    /// </summary>\r\n+    public void GetAnimationInfo()\r\n+    {\r\n+        Debug.Log(\"=== 动画系统信息 ===\");\r\n+        Debug.Log($\"动画启用: {enableAnimation}\");\r\n+        Debug.Log($\"当前动画: {currentAnimation}\");\r\n+        Debug.Log($\"播放状态: {(isPlaying ? (isPaused ? \"暂停\" : \"播放中\") : \"停止\")}\");\r\n+        Debug.Log($\"播放速度: {playbackSpeed}\");\r\n+        Debug.Log($\"循环播放: {loopAnimation}\");\r\n+        Debug.Log($\"当前时间: {currentTime:F2}s / {totalTime:F2}s\");\r\n+        Debug.Log($\"当前片段索引: {currentClipIndex}\");\r\n+        \r\n+        if (animator != null)\r\n+        {\r\n+            Debug.Log($\"Animator: 已配置\");\r\n+            Debug.Log($\"动画层数量: {animator.layerCount}\");\r\n+            Debug.Log($\"参数数量: {animator.parameters.Length}\");\r\n+            \r\n+            foreach (var param in animator.parameters)\r\n+            {\r\n+                Debug.Log($\"  参数: {param.name} ({param.type})\");\r\n+            }\r\n+        }\r\n+        \r\n+        if (legacyAnimation != null)\r\n+        {\r\n+            Debug.Log($\"Legacy Animation: 已配置\");\r\n+            Debug.Log($\"动画片段数量: {legacyAnimation.GetClipCount()}\");\r\n+        }\r\n+        \r\n+        if (animationClips != null)\r\n+        {\r\n+            Debug.Log($\"动画片段数组: {animationClips.Length} 个片段\");\r\n+            for (int i = 0; i < animationClips.Length; i++)\r\n+            {\r\n+                if (animationClips[i] != null)\r\n+                {\r\n+                    Debug.Log($\"  片段 {i}: {animationClips[i].name} ({animationClips[i].length:F2}s)\");\r\n+                }\r\n+            }\r\n+        }\r\n+    }\r\n+    \r\n+    /// <summary>\r\n+    /// 重置动画设置\r\n+    /// </summary>\r\n+    public void ResetAnimationSettings()\r\n+    {\r\n+        // 重置设置\r\n+        playbackSpeed = 1.0f;\r\n+        loopAnimation = true;\r\n+        crossFade = true;\r\n+        crossFadeTime = 0.25f;\r\n+        \r\n+        // 重置参数\r\n+        speedParameter = 0f;\r\n+        jumpParameter = 0f;\r\n+        isGroundedParameter = true;\r\n+        stateParameter = 0;\r\n+        \r\n+        // 应用设置\r\n+        SetPlaybackSpeed(playbackSpeed);\r\n+        \r\n+        if (animator != null)\r\n+        {\r\n+            animator.SetFloat(\"Speed\", speedParameter);\r\n+            animator.SetFloat(\"Jump\", jumpParameter);\r\n+            animator.SetBool(\"IsGrounded\", isGroundedParameter);\r\n+            animator.SetInteger(\"State\", stateParameter);\r\n+        }\r\n+        \r\n+        Debug.Log(\"动画设置已重置\");\r\n+    }\r\n+    \r\n+    /// <summary>\r\n+    /// 动画事件回调\r\n+    /// </summary>\r\n+    /// <param name=\"eventName\">事件名称</param>\r\n+    public void OnAnimationEvent(string eventName)\r\n+    {\r\n+        Debug.Log($\"动画事件: {eventName}\");\r\n+        onAnimationEvent?.Invoke(eventName);\r\n+    }\r\n+    \r\n+    private void Update()\r\n+    {\r\n+        // 更新动画状态\r\n+        if (legacyAnimation != null && legacyAnimation.isPlaying)\r\n+        {\r\n+            currentTime = legacyAnimation.time;\r\n+            if (legacyAnimation.clip != null)\r\n+            {\r\n+                totalTime = legacyAnimation.clip.length;\r\n+            }\r\n+        }\r\n+        \r\n+        // 更新Animator参数\r\n+        if (animator != null)\r\n+        {\r\n+            animator.SetFloat(\"Speed\", speedParameter);\r\n+            animator.SetFloat(\"Jump\", jumpParameter);\r\n+            animator.SetBool(\"IsGrounded\", isGroundedParameter);\r\n+            animator.SetInteger(\"State\", stateParameter);\r\n+        }\r\n+    }\r\n+    \r\n+    private void OnGUI()\r\n+    {\r\n+        // 简单的GUI界面用于测试\r\n+        GUILayout.BeginArea(new Rect(10, 10, 400, 700));\r\n+        GUILayout.Label(\"动画系统演示\", EditorStyles.boldLabel);\r\n+        \r\n+        GUILayout.Space(10);\r\n+        \r\n+        // 动画状态\r\n+        GUILayout.Label($\"当前动画: {currentAnimation}\");\r\n+        GUILayout.Label($\"播放状态: {(isPlaying ? (isPaused ? \"暂停\" : \"播放中\") : \"停止\")}\");\r\n+        GUILayout.Label($\"播放速度: {playbackSpeed:F2}\");\r\n+        GUILayout.Label($\"当前时间: {currentTime:F2}s / {totalTime:F2}s\");\r\n+        \r\n+        GUILayout.Space(10);\r\n+        \r\n+        // 播放控制\r\n+        GUILayout.BeginHorizontal();\r\n+        if (GUILayout.Button(\"播放\"))\r\n+        {\r\n+            if (animationClips != null && animationClips.Length > 0)\r\n+            {\r\n+                PlayAnimationClip(currentClipIndex);\r\n+            }\r\n+        }\r\n+        if (GUILayout.Button(\"暂停\"))\r\n+        {\r\n+            PauseAnimation();\r\n+        }\r\n+        if (GUILayout.Button(\"停止\"))\r\n+        {\r\n+            StopAnimation();\r\n+        }\r\n+        GUILayout.EndHorizontal();\r\n+        \r\n+        GUILayout.BeginHorizontal();\r\n+        if (GUILayout.Button(\"上一个\"))\r\n+        {\r\n+            PlayPreviousAnimation();\r\n+        }\r\n+        if (GUILayout.Button(\"下一个\"))\r\n+        {\r\n+            PlayNextAnimation();\r\n+        }\r\n+        GUILayout.EndHorizontal();\r\n+        \r\n+        GUILayout.Space(10);\r\n+        \r\n+        // 播放速度控制\r\n+        GUILayout.Label(\"播放速度:\");\r\n+        playbackSpeed = GUILayout.HorizontalSlider(playbackSpeed, 0.1f, 3.0f);\r\n+        if (GUILayout.Button(\"设置播放速度\"))\r\n+        {\r\n+            SetPlaybackSpeed(playbackSpeed);\r\n+        }\r\n+        \r\n+        GUILayout.Space(10);\r\n+        \r\n+        // 动画参数控制\r\n+        GUILayout.Label(\"动画参数:\");\r\n+        \r\n+        GUILayout.Label($\"速度: {speedParameter:F2}\");\r\n+        speedParameter = GUILayout.HorizontalSlider(speedParameter, 0f, 10f);\r\n+        if (GUILayout.Button(\"设置速度\"))\r\n+        {\r\n+            SetAnimationParameter(\"Speed\", speedParameter);\r\n+        }\r\n+        \r\n+        GUILayout.Label($\"跳跃: {jumpParameter:F2}\");\r\n+        jumpParameter = GUILayout.HorizontalSlider(jumpParameter, 0f, 10f);\r\n+        if (GUILayout.Button(\"设置跳跃\"))\r\n+        {\r\n+            SetAnimationParameter(\"Jump\", jumpParameter);\r\n+        }\r\n+        \r\n+        isGroundedParameter = GUILayout.Toggle(isGroundedParameter, \"着地状态\");\r\n+        if (GUILayout.Button(\"设置着地状态\"))\r\n+        {\r\n+            SetAnimationParameter(\"IsGrounded\", isGroundedParameter);\r\n+        }\r\n+        \r\n+        GUILayout.Label($\"状态: {stateParameter}\");\r\n+        stateParameter = (int)GUILayout.HorizontalSlider(stateParameter, 0, 5);\r\n+        if (GUILayout.Button(\"设置状态\"))\r\n+        {\r\n+            SetAnimationParameter(\"State\", stateParameter);\r\n+        }\r\n+        \r\n+        GUILayout.Space(10);\r\n+        \r\n+        // 触发器\r\n+        if (GUILayout.Button(\"触发跳跃\"))\r\n+        {\r\n+            SetAnimationTrigger(\"Jump\");\r\n+        }\r\n+        \r\n+        if (GUILayout.Button(\"触发攻击\"))\r\n+        {\r\n+            SetAnimationTrigger(\"Attack\");\r\n+        }\r\n+        \r\n+        GUILayout.Space(10);\r\n+        \r\n+        if (GUILayout.Button(\"获取动画信息\"))\r\n+        {\r\n+            GetAnimationInfo();\r\n+        }\r\n+        \r\n+        if (GUILayout.Button(\"重置设置\"))\r\n+        {\r\n+            ResetAnimationSettings();\r\n+        }\r\n+        \r\n+        GUILayout.EndArea();\r\n+    }\r\n+} \n\\ No newline at end of file\n"
                }
            ],
            "date": 1750930446497,
            "name": "Commit-0",
            "content": " "
        }
    ]
}