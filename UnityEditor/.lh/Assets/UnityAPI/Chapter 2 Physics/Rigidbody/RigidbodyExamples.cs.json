{
    "sourceFile": "Assets/UnityAPI/Chapter 2 Physics/Rigidbody/RigidbodyExamples.cs",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 1,
            "patches": [
                {
                    "date": 1750927909138,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1750928103626,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -509,5 +509,5 @@\n         GUILayout.Label(\"K - 切换运动学\");\r\n         \r\n         GUILayout.EndArea();\r\n     }\r\n-} \n\\ No newline at end of file\n+}\r\n"
                }
            ],
            "date": 1750927909138,
            "name": "Commit-0",
            "content": "using UnityEngine;\r\n\r\n/// <summary>\r\n/// Rigidbody API使用案例\r\n/// 演示刚体组件的各种物理功能\r\n/// </summary>\r\npublic class RigidbodyExamples : MonoBehaviour\r\n{\r\n    [Header(\"刚体设置\")]\r\n    [SerializeField] private Rigidbody targetRigidbody;\r\n    [SerializeField] private float mass = 1f;\r\n    [SerializeField] private float drag = 0.05f;\r\n    [SerializeField] private float angularDrag = 0.05f;\r\n    [SerializeField] private bool useGravity = true;\r\n    [SerializeField] private bool isKinematic = false;\r\n    \r\n    [Header(\"力应用\")]\r\n    [SerializeField] private float forceMagnitude = 10f;\r\n    [SerializeField] private float torqueMagnitude = 5f;\r\n    [SerializeField] private Vector3 forceDirection = Vector3.up;\r\n    \r\n    [Header(\"物理材质\")]\r\n    [SerializeField] private PhysicMaterial physicMaterial;\r\n    \r\n    [Header(\"约束\")]\r\n    [SerializeField] private bool freezePositionX = false;\r\n    [SerializeField] private bool freezePositionY = false;\r\n    [SerializeField] private bool freezePositionZ = false;\r\n    [SerializeField] private bool freezeRotationX = false;\r\n    [SerializeField] private bool freezeRotationY = false;\r\n    [SerializeField] private bool freezeRotationZ = false;\r\n    \r\n    private Vector3 originalPosition;\r\n    private Quaternion originalRotation;\r\n    private bool isInitialized = false;\r\n    \r\n    private void Start()\r\n    {\r\n        InitializeRigidbody();\r\n        DemonstrateRigidbodyBasics();\r\n        DemonstrateRigidbodyForces();\r\n        DemonstrateRigidbodyConstraints();\r\n        DemonstrateRigidbodyCollision();\r\n    }\r\n    \r\n    /// <summary>\r\n    /// 初始化刚体组件\r\n    /// </summary>\r\n    private void InitializeRigidbody()\r\n    {\r\n        // 如果没有指定目标刚体，使用自身的刚体\r\n        if (targetRigidbody == null)\r\n        {\r\n            targetRigidbody = GetComponent<Rigidbody>();\r\n            \r\n            // 如果没有刚体组件，添加一个\r\n            if (targetRigidbody == null)\r\n            {\r\n                targetRigidbody = gameObject.AddComponent<Rigidbody>();\r\n            }\r\n        }\r\n        \r\n        // 保存原始变换\r\n        originalPosition = targetRigidbody.position;\r\n        originalRotation = targetRigidbody.rotation;\r\n        \r\n        // 配置刚体属性\r\n        ConfigureRigidbody();\r\n        \r\n        isInitialized = true;\r\n    }\r\n    \r\n    /// <summary>\r\n    /// 配置刚体属性\r\n    /// </summary>\r\n    private void ConfigureRigidbody()\r\n    {\r\n        targetRigidbody.mass = mass;\r\n        targetRigidbody.drag = drag;\r\n        targetRigidbody.angularDrag = angularDrag;\r\n        targetRigidbody.useGravity = useGravity;\r\n        targetRigidbody.isKinematic = isKinematic;\r\n        \r\n        // 设置物理材质\r\n        if (physicMaterial != null)\r\n        {\r\n            Collider collider = targetRigidbody.GetComponent<Collider>();\r\n            if (collider != null)\r\n            {\r\n                collider.material = physicMaterial;\r\n            }\r\n        }\r\n        \r\n        // 设置约束\r\n        SetConstraints();\r\n    }\r\n    \r\n    /// <summary>\r\n    /// 设置刚体约束\r\n    /// </summary>\r\n    private void SetConstraints()\r\n    {\r\n        RigidbodyConstraints constraints = RigidbodyConstraints.None;\r\n        \r\n        if (freezePositionX) constraints |= RigidbodyConstraints.FreezePositionX;\r\n        if (freezePositionY) constraints |= RigidbodyConstraints.FreezePositionY;\r\n        if (freezePositionZ) constraints |= RigidbodyConstraints.FreezePositionZ;\r\n        if (freezeRotationX) constraints |= RigidbodyConstraints.FreezeRotationX;\r\n        if (freezeRotationY) constraints |= RigidbodyConstraints.FreezeRotationY;\r\n        if (freezeRotationZ) constraints |= RigidbodyConstraints.FreezeRotationZ;\r\n        \r\n        targetRigidbody.constraints = constraints;\r\n    }\r\n    \r\n    /// <summary>\r\n    /// 演示刚体基础属性\r\n    /// </summary>\r\n    private void DemonstrateRigidbodyBasics()\r\n    {\r\n        Debug.Log(\"=== Rigidbody基础属性示例 ===\");\r\n        \r\n        // 1. 基础属性\r\n        Debug.Log($\"质量: {targetRigidbody.mass}\");\r\n        Debug.Log($\"阻力: {targetRigidbody.drag}\");\r\n        Debug.Log($\"角阻力: {targetRigidbody.angularDrag}\");\r\n        Debug.Log($\"使用重力: {targetRigidbody.useGravity}\");\r\n        Debug.Log($\"是否为运动学: {targetRigidbody.isKinematic}\");\r\n        \r\n        // 2. 位置和旋转\r\n        Debug.Log($\"位置: {targetRigidbody.position}\");\r\n        Debug.Log($\"旋转: {targetRigidbody.rotation.eulerAngles}\");\r\n        Debug.Log($\"本地位置: {targetRigidbody.localPosition}\");\r\n        Debug.Log($\"本地旋转: {targetRigidbody.localRotation.eulerAngles}\");\r\n        \r\n        // 3. 速度和角速度\r\n        Debug.Log($\"速度: {targetRigidbody.velocity}\");\r\n        Debug.Log($\"角速度: {targetRigidbody.angularVelocity}\");\r\n        \r\n        // 4. 惯性张量\r\n        Debug.Log($\"惯性张量: {targetRigidbody.inertiaTensor}\");\r\n        Debug.Log($\"惯性张量旋转: {targetRigidbody.inertiaTensorRotation.eulerAngles}\");\r\n        \r\n        // 5. 质心\r\n        Debug.Log($\"质心: {targetRigidbody.centerOfMass}\");\r\n        Debug.Log($\"世界质心: {targetRigidbody.worldCenterOfMass}\");\r\n    }\r\n    \r\n    /// <summary>\r\n    /// 演示刚体力应用\r\n    /// </summary>\r\n    private void DemonstrateRigidbodyForces()\r\n    {\r\n        Debug.Log(\"=== Rigidbody力应用示例 ===\");\r\n        \r\n        // 1. AddForce - 添加力\r\n        Vector3 force = forceDirection.normalized * forceMagnitude;\r\n        targetRigidbody.AddForce(force, ForceMode.Force);\r\n        Debug.Log($\"添加力: {force}\");\r\n        \r\n        // 2. AddTorque - 添加扭矩\r\n        Vector3 torque = Vector3.up * torqueMagnitude;\r\n        targetRigidbody.AddTorque(torque, ForceMode.Force);\r\n        Debug.Log($\"添加扭矩: {torque}\");\r\n        \r\n        // 3. AddForceAtPosition - 在指定位置添加力\r\n        Vector3 forceAtPosition = Vector3.right * forceMagnitude;\r\n        Vector3 forcePosition = targetRigidbody.position + Vector3.up * 2f;\r\n        targetRigidbody.AddForceAtPosition(forceAtPosition, forcePosition, ForceMode.Impulse);\r\n        Debug.Log($\"在位置 {forcePosition} 添加力: {forceAtPosition}\");\r\n        \r\n        // 4. AddExplosionForce - 添加爆炸力\r\n        Vector3 explosionPosition = targetRigidbody.position + Vector3.forward * 5f;\r\n        float explosionForce = 10f;\r\n        float explosionRadius = 5f;\r\n        float explosionUpwardModifier = 1f;\r\n        targetRigidbody.AddExplosionForce(explosionForce, explosionPosition, explosionRadius, explosionUpwardModifier, ForceMode.Impulse);\r\n        Debug.Log($\"在位置 {explosionPosition} 添加爆炸力: {explosionForce}\");\r\n    }\r\n    \r\n    /// <summary>\r\n    /// 演示刚体约束\r\n    /// </summary>\r\n    private void DemonstrateRigidbodyConstraints()\r\n    {\r\n        Debug.Log(\"=== Rigidbody约束示例 ===\");\r\n        \r\n        // 1. 冻结位置\r\n        RigidbodyConstraints positionConstraints = RigidbodyConstraints.FreezePositionX | RigidbodyConstraints.FreezePositionZ;\r\n        targetRigidbody.constraints = positionConstraints;\r\n        Debug.Log(\"冻结X和Z轴位置\");\r\n        \r\n        // 2. 冻结旋转\r\n        RigidbodyConstraints rotationConstraints = RigidbodyConstraints.FreezeRotationX | RigidbodyConstraints.FreezeRotationZ;\r\n        targetRigidbody.constraints = rotationConstraints;\r\n        Debug.Log(\"冻结X和Z轴旋转\");\r\n        \r\n        // 3. 冻结所有\r\n        targetRigidbody.constraints = RigidbodyConstraints.FreezeAll;\r\n        Debug.Log(\"冻结所有轴\");\r\n        \r\n        // 4. 恢复约束\r\n        SetConstraints();\r\n        Debug.Log(\"恢复自定义约束\");\r\n    }\r\n    \r\n    /// <summary>\r\n    /// 演示刚体碰撞\r\n    /// </summary>\r\n    private void DemonstrateRigidbodyCollision()\r\n    {\r\n        Debug.Log(\"=== Rigidbody碰撞示例 ===\");\r\n        \r\n        // 创建一些碰撞对象\r\n        CreateCollisionObjects();\r\n        \r\n        // 演示碰撞检测\r\n        DemonstrateCollisionDetection();\r\n    }\r\n    \r\n    /// <summary>\r\n    /// 创建碰撞对象\r\n    /// </summary>\r\n    private void CreateCollisionObjects()\r\n    {\r\n        // 创建地面\r\n        GameObject ground = GameObject.CreatePrimitive(PrimitiveType.Plane);\r\n        ground.name = \"Ground\";\r\n        ground.transform.position = Vector3.down * 2f;\r\n        \r\n        // 创建墙壁\r\n        GameObject wall1 = GameObject.CreatePrimitive(PrimitiveType.Cube);\r\n        wall1.name = \"Wall1\";\r\n        wall1.transform.position = Vector3.right * 10f;\r\n        wall1.transform.localScale = new Vector3(1f, 5f, 10f);\r\n        \r\n        GameObject wall2 = GameObject.CreatePrimitive(PrimitiveType.Cube);\r\n        wall2.name = \"Wall2\";\r\n        wall2.transform.position = Vector3.left * 10f;\r\n        wall2.transform.localScale = new Vector3(1f, 5f, 10f);\r\n        \r\n        // 创建其他刚体对象\r\n        for (int i = 0; i < 3; i++)\r\n        {\r\n            GameObject cube = GameObject.CreatePrimitive(PrimitiveType.Cube);\r\n            cube.name = $\"PhysicsCube_{i}\";\r\n            cube.transform.position = new Vector3(Random.Range(-5f, 5f), 5f + i * 2f, Random.Range(-5f, 5f));\r\n            \r\n            Rigidbody rb = cube.AddComponent<Rigidbody>();\r\n            rb.mass = Random.Range(0.5f, 2f);\r\n        }\r\n    }\r\n    \r\n    /// <summary>\r\n    /// 演示碰撞检测\r\n    /// </summary>\r\n    private void DemonstrateCollisionDetection()\r\n    {\r\n        // 检查是否与其他刚体接触\r\n        Collider[] nearbyColliders = Physics.OverlapSphere(targetRigidbody.position, 2f);\r\n        Debug.Log($\"附近有 {nearbyColliders.Length} 个碰撞器\");\r\n        \r\n        foreach (Collider collider in nearbyColliders)\r\n        {\r\n            if (collider.gameObject != gameObject)\r\n            {\r\n                Debug.Log($\"检测到碰撞器: {collider.name}\");\r\n            }\r\n        }\r\n    }\r\n    \r\n    /// <summary>\r\n    /// 在Update中处理输入和更新\r\n    /// </summary>\r\n    private void Update()\r\n    {\r\n        if (!isInitialized) return;\r\n        \r\n        HandleInput();\r\n        UpdateRigidbodyInfo();\r\n    }\r\n    \r\n    /// <summary>\r\n    /// 处理输入\r\n    /// </summary>\r\n    private void HandleInput()\r\n    {\r\n        // 空格键 - 重置位置\r\n        if (Input.GetKeyDown(KeyCode.Space))\r\n        {\r\n            ResetRigidbody();\r\n        }\r\n        \r\n        // F键 - 添加力\r\n        if (Input.GetKeyDown(KeyCode.F))\r\n        {\r\n            AddRandomForce();\r\n        }\r\n        \r\n        // T键 - 添加扭矩\r\n        if (Input.GetKeyDown(KeyCode.T))\r\n        {\r\n            AddRandomTorque();\r\n        }\r\n        \r\n        // E键 - 添加爆炸力\r\n        if (Input.GetKeyDown(KeyCode.E))\r\n        {\r\n            AddExplosionForce();\r\n        }\r\n        \r\n        // G键 - 切换重力\r\n        if (Input.GetKeyDown(KeyCode.G))\r\n        {\r\n            ToggleGravity();\r\n        }\r\n        \r\n        // K键 - 切换运动学模式\r\n        if (Input.GetKeyDown(KeyCode.K))\r\n        {\r\n            ToggleKinematic();\r\n        }\r\n        \r\n        // WASD - 移动力\r\n        Vector3 moveForce = Vector3.zero;\r\n        if (Input.GetKey(KeyCode.W)) moveForce += Vector3.forward;\r\n        if (Input.GetKey(KeyCode.S)) moveForce += Vector3.back;\r\n        if (Input.GetKey(KeyCode.A)) moveForce += Vector3.left;\r\n        if (Input.GetKey(KeyCode.D)) moveForce += Vector3.right;\r\n        \r\n        if (moveForce != Vector3.zero)\r\n        {\r\n            targetRigidbody.AddForce(moveForce.normalized * forceMagnitude * Time.deltaTime, ForceMode.Force);\r\n        }\r\n        \r\n        // QE - 旋转扭矩\r\n        if (Input.GetKey(KeyCode.Q))\r\n        {\r\n            targetRigidbody.AddTorque(Vector3.up * -torqueMagnitude * Time.deltaTime, ForceMode.Force);\r\n        }\r\n        if (Input.GetKey(KeyCode.E))\r\n        {\r\n            targetRigidbody.AddTorque(Vector3.up * torqueMagnitude * Time.deltaTime, ForceMode.Force);\r\n        }\r\n    }\r\n    \r\n    /// <summary>\r\n    /// 更新刚体信息\r\n    /// </summary>\r\n    private void UpdateRigidbodyInfo()\r\n    {\r\n        // 检查速度限制\r\n        if (targetRigidbody.velocity.magnitude > 20f)\r\n        {\r\n            targetRigidbody.velocity = targetRigidbody.velocity.normalized * 20f;\r\n        }\r\n        \r\n        if (targetRigidbody.angularVelocity.magnitude > 10f)\r\n        {\r\n            targetRigidbody.angularVelocity = targetRigidbody.angularVelocity.normalized * 10f;\r\n        }\r\n    }\r\n    \r\n    /// <summary>\r\n    /// 重置刚体\r\n    /// </summary>\r\n    private void ResetRigidbody()\r\n    {\r\n        targetRigidbody.position = originalPosition;\r\n        targetRigidbody.rotation = originalRotation;\r\n        targetRigidbody.velocity = Vector3.zero;\r\n        targetRigidbody.angularVelocity = Vector3.zero;\r\n        Debug.Log(\"重置刚体状态\");\r\n    }\r\n    \r\n    /// <summary>\r\n    /// 添加随机力\r\n    /// </summary>\r\n    private void AddRandomForce()\r\n    {\r\n        Vector3 randomForce = new Vector3(\r\n            Random.Range(-forceMagnitude, forceMagnitude),\r\n            Random.Range(0, forceMagnitude),\r\n            Random.Range(-forceMagnitude, forceMagnitude)\r\n        );\r\n        \r\n        targetRigidbody.AddForce(randomForce, ForceMode.Impulse);\r\n        Debug.Log($\"添加随机力: {randomForce}\");\r\n    }\r\n    \r\n    /// <summary>\r\n    /// 添加随机扭矩\r\n    /// </summary>\r\n    private void AddRandomTorque()\r\n    {\r\n        Vector3 randomTorque = new Vector3(\r\n            Random.Range(-torqueMagnitude, torqueMagnitude),\r\n            Random.Range(-torqueMagnitude, torqueMagnitude),\r\n            Random.Range(-torqueMagnitude, torqueMagnitude)\r\n        );\r\n        \r\n        targetRigidbody.AddTorque(randomTorque, ForceMode.Impulse);\r\n        Debug.Log($\"添加随机扭矩: {randomTorque}\");\r\n    }\r\n    \r\n    /// <summary>\r\n    /// 添加爆炸力\r\n    /// </summary>\r\n    private void AddExplosionForce()\r\n    {\r\n        Vector3 explosionPosition = targetRigidbody.position + Vector3.forward * 3f;\r\n        targetRigidbody.AddExplosionForce(15f, explosionPosition, 5f, 2f, ForceMode.Impulse);\r\n        Debug.Log($\"在位置 {explosionPosition} 添加爆炸力\");\r\n    }\r\n    \r\n    /// <summary>\r\n    /// 切换重力\r\n    /// </summary>\r\n    private void ToggleGravity()\r\n    {\r\n        targetRigidbody.useGravity = !targetRigidbody.useGravity;\r\n        Debug.Log($\"重力状态: {(targetRigidbody.useGravity ? \"开启\" : \"关闭\")}\");\r\n    }\r\n    \r\n    /// <summary>\r\n    /// 切换运动学模式\r\n    /// </summary>\r\n    private void ToggleKinematic()\r\n    {\r\n        targetRigidbody.isKinematic = !targetRigidbody.isKinematic;\r\n        Debug.Log($\"运动学模式: {(targetRigidbody.isKinematic ? \"开启\" : \"关闭\")}\");\r\n    }\r\n    \r\n    /// <summary>\r\n    /// 碰撞事件\r\n    /// </summary>\r\n    private void OnCollisionEnter(Collision collision)\r\n    {\r\n        Debug.Log($\"碰撞进入: {collision.gameObject.name}\");\r\n        Debug.Log($\"碰撞力: {collision.impulse.magnitude}\");\r\n        Debug.Log($\"碰撞点: {collision.contacts[0].point}\");\r\n    }\r\n    \r\n    private void OnCollisionStay(Collision collision)\r\n    {\r\n        // 持续碰撞时的处理\r\n    }\r\n    \r\n    private void OnCollisionExit(Collision collision)\r\n    {\r\n        Debug.Log($\"碰撞退出: {collision.gameObject.name}\");\r\n    }\r\n    \r\n    /// <summary>\r\n    /// 触发器事件\r\n    /// </summary>\r\n    private void OnTriggerEnter(Collider other)\r\n    {\r\n        Debug.Log($\"触发器进入: {other.name}\");\r\n    }\r\n    \r\n    private void OnTriggerStay(Collider other)\r\n    {\r\n        // 持续触发时的处理\r\n    }\r\n    \r\n    private void OnTriggerExit(Collider other)\r\n    {\r\n        Debug.Log($\"触发器退出: {other.name}\");\r\n    }\r\n    \r\n    /// <summary>\r\n    /// 在OnGUI中显示刚体信息\r\n    /// </summary>\r\n    private void OnGUI()\r\n    {\r\n        if (!isInitialized) return;\r\n        \r\n        GUILayout.BeginArea(new Rect(10, 10, 350, 400));\r\n        \r\n        GUILayout.Label(\"Rigidbody信息\", EditorStyles.boldLabel);\r\n        GUILayout.Space(5);\r\n        \r\n        // 基础信息\r\n        GUILayout.Label($\"位置: {targetRigidbody.position}\");\r\n        GUILayout.Label($\"旋转: {targetRigidbody.rotation.eulerAngles}\");\r\n        GUILayout.Label($\"速度: {targetRigidbody.velocity}\");\r\n        GUILayout.Label($\"角速度: {targetRigidbody.angularVelocity}\");\r\n        GUILayout.Label($\"质量: {targetRigidbody.mass}\");\r\n        \r\n        GUILayout.Space(10);\r\n        \r\n        // 状态信息\r\n        GUILayout.Label(\"状态\", EditorStyles.boldLabel);\r\n        GUILayout.Label($\"使用重力: {targetRigidbody.useGravity}\");\r\n        GUILayout.Label($\"运动学: {targetRigidbody.isKinematic}\");\r\n        GUILayout.Label($\"约束: {targetRigidbody.constraints}\");\r\n        \r\n        GUILayout.Space(10);\r\n        \r\n        // 控制说明\r\n        GUILayout.Label(\"控制说明:\", EditorStyles.boldLabel);\r\n        GUILayout.Label(\"WASD - 移动\");\r\n        GUILayout.Label(\"QE - 旋转\");\r\n        GUILayout.Label(\"空格 - 重置\");\r\n        GUILayout.Label(\"F - 随机力\");\r\n        GUILayout.Label(\"T - 随机扭矩\");\r\n        GUILayout.Label(\"E - 爆炸力\");\r\n        GUILayout.Label(\"G - 切换重力\");\r\n        GUILayout.Label(\"K - 切换运动学\");\r\n        \r\n        GUILayout.EndArea();\r\n    }\r\n} "
        }
    ]
}