{
    "sourceFile": "Assets/UnityEditor/Chapter 8 UnityAPI/UnityEditor/SceneManagement/SceneManagementExample.cs",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1750939340334,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1750939340334,
            "name": "Commit-0",
            "content": "using UnityEngine;\r\nusing UnityEditor;\r\nusing UnityEditor.SceneManagement;\r\nusing System.Collections.Generic;\r\n\r\n/// <summary>\r\n/// UnityEditor.SceneManagement 命名空间案例演示\r\n/// 展示场景管理系统的使用，包括场景加载、保存、切换等\r\n/// </summary>\r\npublic class SceneManagementExample : MonoBehaviour\r\n{\r\n    [Header(\"场景管理系统配置\")]\r\n    [SerializeField] private bool enableSceneManagement = true;\r\n    [SerializeField] private bool enableSceneLogging = true;\r\n    [SerializeField] private bool enableSceneValidation = true;\r\n    [SerializeField] private bool enableScenePerformance = true;\r\n    [SerializeField] private bool enableSceneHistory = true;\r\n    \r\n    [Header(\"场景配置\")]\r\n    [SerializeField] private string currentScenePath = \"\";\r\n    [SerializeField] private string targetScenePath = \"\";\r\n    [SerializeField] private OpenSceneMode openSceneMode = OpenSceneMode.Single;\r\n    [SerializeField] private bool enableSceneAdditive = false;\r\n    [SerializeField] private bool enableSceneAsync = false;\r\n    [SerializeField] private bool enableSceneAutoSave = true;\r\n    [SerializeField] private float autoSaveInterval = 300f; // 5分钟\r\n    \r\n    [Header(\"场景状态\")]\r\n    [SerializeField] private SceneManagementStatus sceneStatus = SceneManagementStatus.Idle;\r\n    [SerializeField] private bool isSceneLoading = false;\r\n    [SerializeField] private bool isSceneSaving = false;\r\n    [SerializeField] private float sceneProgress = 0f;\r\n    [SerializeField] private string sceneMessage = \"\";\r\n    [SerializeField] private int totalScenes = 0;\r\n    [SerializeField] private int loadedScenes = 0;\r\n    [SerializeField] private int modifiedScenes = 0;\r\n    \r\n    [Header(\"场景信息\")]\r\n    [SerializeField] private SceneInfo[] sceneInfos = new SceneInfo[0];\r\n    [SerializeField] private SceneInfo currentSceneInfo;\r\n    [SerializeField] private SceneInfo[] loadedSceneInfos = new SceneInfo[0];\r\n    [SerializeField] private string[] scenePaths = new string[0];\r\n    [SerializeField] private string[] sceneNames = new string[0];\r\n    [SerializeField] private bool[] sceneEnabled = new bool[0];\r\n    \r\n    [Header(\"场景历史\")]\r\n    [SerializeField] private SceneHistoryEntry[] sceneHistory = new SceneHistoryEntry[10];\r\n    [SerializeField] private int sceneHistoryIndex = 0;\r\n    [SerializeField] private bool enableSceneHistory = true;\r\n    \r\n    [Header(\"性能监控\")]\r\n    [SerializeField] private bool enablePerformanceMonitoring = true;\r\n    [SerializeField] private float[] loadTimeHistory = new float[100];\r\n    [SerializeField] private int loadTimeIndex = 0;\r\n    [SerializeField] private float averageLoadTime = 0f;\r\n    [SerializeField] private float maxLoadTime = 0f;\r\n    [SerializeField] private float totalLoadTime = 0f;\r\n    [SerializeField] private int totalLoadCount = 0;\r\n    \r\n    [Header(\"场景统计\")]\r\n    [SerializeField] private Dictionary<string, int> sceneLoadCount = new Dictionary<string, int>();\r\n    [SerializeField] private Dictionary<string, float> sceneLoadTime = new Dictionary<string, float>();\r\n    [SerializeField] private int totalGameObjects = 0;\r\n    [SerializeField] private int totalComponents = 0;\r\n    [SerializeField] private long totalSceneSize = 0;\r\n    \r\n    [Header(\"场景操作\")]\r\n    [SerializeField] private bool enableSceneBackup = true;\r\n    [SerializeField] private bool enableSceneRestore = true;\r\n    [SerializeField] private bool enableSceneDuplicate = true;\r\n    [SerializeField] private bool enableSceneMerge = false;\r\n    [SerializeField] private string backupPath = \"SceneBackups/\";\r\n    \r\n    private bool isInitialized = false;\r\n    private float sceneStartTime = 0f;\r\n    private AsyncOperation sceneAsyncOperation;\r\n    private float lastAutoSaveTime = 0f;\r\n\r\n    private void Start()\r\n    {\r\n        InitializeSceneManagement();\r\n    }\r\n\r\n    private void InitializeSceneManagement()\r\n    {\r\n        if (!enableSceneManagement) return;\r\n        \r\n        InitializeSceneState();\r\n        InitializePerformanceMonitoring();\r\n        InitializeSceneStatistics();\r\n        RegisterSceneCallbacks();\r\n        \r\n        isInitialized = true;\r\n        sceneStatus = SceneManagementStatus.Idle;\r\n        Debug.Log(\"场景管理系统初始化完成\");\r\n    }\r\n\r\n    private void InitializeSceneState()\r\n    {\r\n        sceneStatus = SceneManagementStatus.Idle;\r\n        isSceneLoading = false;\r\n        isSceneSaving = false;\r\n        sceneProgress = 0f;\r\n        sceneMessage = \"就绪\";\r\n        totalScenes = 0;\r\n        loadedScenes = 0;\r\n        modifiedScenes = 0;\r\n        \r\n        Debug.Log(\"场景状态已初始化\");\r\n    }\r\n\r\n    private void InitializePerformanceMonitoring()\r\n    {\r\n        if (enablePerformanceMonitoring)\r\n        {\r\n            loadTimeHistory = new float[100];\r\n            loadTimeIndex = 0;\r\n            averageLoadTime = 0f;\r\n            maxLoadTime = 0f;\r\n            totalLoadTime = 0f;\r\n            totalLoadCount = 0;\r\n            \r\n            Debug.Log(\"性能监控初始化完成\");\r\n        }\r\n    }\r\n\r\n    private void InitializeSceneStatistics()\r\n    {\r\n        sceneLoadCount.Clear();\r\n        sceneLoadTime.Clear();\r\n        totalGameObjects = 0;\r\n        totalComponents = 0;\r\n        totalSceneSize = 0;\r\n        \r\n        Debug.Log(\"场景统计初始化完成\");\r\n    }\r\n\r\n    private void RegisterSceneCallbacks()\r\n    {\r\n        EditorSceneManager.sceneOpened += OnSceneOpened;\r\n        EditorSceneManager.sceneClosing += OnSceneClosing;\r\n        EditorSceneManager.sceneClosed += OnSceneClosed;\r\n        EditorSceneManager.sceneSaving += OnSceneSaving;\r\n        EditorSceneManager.sceneSaved += OnSceneSaved;\r\n        \r\n        Debug.Log(\"场景回调已注册\");\r\n    }\r\n\r\n    private void Update()\r\n    {\r\n        if (!isInitialized) return;\r\n        \r\n        UpdateSceneStatus();\r\n        UpdateSceneProgress();\r\n        UpdateSceneInfo();\r\n        \r\n        if (enableSceneAutoSave)\r\n        {\r\n            CheckAutoSave();\r\n        }\r\n        \r\n        if (enablePerformanceMonitoring)\r\n        {\r\n            UpdatePerformanceMonitoring();\r\n        }\r\n    }\r\n\r\n    private void UpdateSceneStatus()\r\n    {\r\n        if (isSceneLoading)\r\n        {\r\n            sceneStatus = SceneManagementStatus.Loading;\r\n        }\r\n        else if (isSceneSaving)\r\n        {\r\n            sceneStatus = SceneManagementStatus.Saving;\r\n        }\r\n        else\r\n        {\r\n            sceneStatus = SceneManagementStatus.Idle;\r\n        }\r\n    }\r\n\r\n    private void UpdateSceneProgress()\r\n    {\r\n        if (sceneAsyncOperation != null && !sceneAsyncOperation.isDone)\r\n        {\r\n            sceneProgress = sceneAsyncOperation.progress;\r\n        }\r\n        else\r\n        {\r\n            sceneProgress = 0f;\r\n        }\r\n    }\r\n\r\n    private void UpdateSceneInfo()\r\n    {\r\n        // 更新当前场景信息\r\n        var currentScene = EditorSceneManager.GetActiveScene();\r\n        currentScenePath = currentScene.path;\r\n        \r\n        // 更新场景信息\r\n        UpdateSceneInfos();\r\n        \r\n        // 更新统计信息\r\n        UpdateSceneStatistics();\r\n    }\r\n\r\n    private void UpdateSceneInfos()\r\n    {\r\n        var scenes = EditorBuildSettings.scenes;\r\n        sceneInfos = new SceneInfo[scenes.Length];\r\n        scenePaths = new string[scenes.Length];\r\n        sceneNames = new string[scenes.Length];\r\n        sceneEnabled = new bool[scenes.Length];\r\n        \r\n        for (int i = 0; i < scenes.Length; i++)\r\n        {\r\n            var scene = scenes[i];\r\n            sceneInfos[i] = new SceneInfo\r\n            {\r\n                path = scene.path,\r\n                name = System.IO.Path.GetFileNameWithoutExtension(scene.path),\r\n                enabled = scene.enabled,\r\n                buildIndex = i\r\n            };\r\n            \r\n            scenePaths[i] = scene.path;\r\n            sceneNames[i] = sceneInfos[i].name;\r\n            sceneEnabled[i] = scene.enabled;\r\n        }\r\n        \r\n        totalScenes = scenes.Length;\r\n        \r\n        // 更新已加载场景信息\r\n        var loadedScenes = new List<SceneInfo>();\r\n        for (int i = 0; i < UnityEngine.SceneManagement.SceneManager.sceneCount; i++)\r\n        {\r\n            var scene = UnityEngine.SceneManagement.SceneManager.GetSceneAt(i);\r\n            if (scene.isLoaded)\r\n            {\r\n                loadedScenes.Add(new SceneInfo\r\n                {\r\n                    path = scene.path,\r\n                    name = scene.name,\r\n                    enabled = true,\r\n                    buildIndex = scene.buildIndex\r\n                });\r\n            }\r\n        }\r\n        \r\n        this.loadedSceneInfos = loadedScenes.ToArray();\r\n        this.loadedScenes = loadedScenes.Count;\r\n    }\r\n\r\n    private void UpdateSceneStatistics()\r\n    {\r\n        totalGameObjects = 0;\r\n        totalComponents = 0;\r\n        \r\n        var allGameObjects = FindObjectsOfType<GameObject>();\r\n        totalGameObjects = allGameObjects.Length;\r\n        \r\n        foreach (var go in allGameObjects)\r\n        {\r\n            totalComponents += go.GetComponents<Component>().Length;\r\n        }\r\n        \r\n        // 计算场景大小（估算）\r\n        totalSceneSize = totalGameObjects * 1024; // 假设每个GameObject约1KB\r\n    }\r\n\r\n    private void CheckAutoSave()\r\n    {\r\n        if (Time.time - lastAutoSaveTime > autoSaveInterval)\r\n        {\r\n            if (EditorSceneManager.GetActiveScene().isDirty)\r\n            {\r\n                AutoSaveScene();\r\n                lastAutoSaveTime = Time.time;\r\n            }\r\n        }\r\n    }\r\n\r\n    private void UpdatePerformanceMonitoring()\r\n    {\r\n        if (totalLoadCount > 0)\r\n        {\r\n            averageLoadTime = totalLoadTime / totalLoadCount;\r\n        }\r\n    }\r\n\r\n    private void OnSceneOpened(UnityEngine.SceneManagement.Scene scene, OpenSceneMode mode)\r\n    {\r\n        sceneMessage = $\"场景已打开: {scene.name}\";\r\n        \r\n        if (enableSceneLogging)\r\n        {\r\n            Debug.Log($\"场景已打开: {scene.name}, 模式: {mode}\");\r\n        }\r\n    }\r\n\r\n    private void OnSceneClosing(UnityEngine.SceneManagement.Scene scene, bool removingScene)\r\n    {\r\n        sceneMessage = $\"场景正在关闭: {scene.name}\";\r\n        \r\n        if (enableSceneLogging)\r\n        {\r\n            Debug.Log($\"场景正在关闭: {scene.name}, 移除: {removingScene}\");\r\n        }\r\n    }\r\n\r\n    private void OnSceneClosed(UnityEngine.SceneManagement.Scene scene)\r\n    {\r\n        sceneMessage = $\"场景已关闭: {scene.name}\";\r\n        \r\n        if (enableSceneLogging)\r\n        {\r\n            Debug.Log($\"场景已关闭: {scene.name}\");\r\n        }\r\n    }\r\n\r\n    private void OnSceneSaving(UnityEngine.SceneManagement.Scene scene, string path)\r\n    {\r\n        isSceneSaving = true;\r\n        sceneMessage = $\"场景正在保存: {scene.name}\";\r\n        \r\n        if (enableSceneLogging)\r\n        {\r\n            Debug.Log($\"场景正在保存: {scene.name} 到 {path}\");\r\n        }\r\n    }\r\n\r\n    private void OnSceneSaved(UnityEngine.SceneManagement.Scene scene)\r\n    {\r\n        isSceneSaving = false;\r\n        sceneMessage = $\"场景已保存: {scene.name}\";\r\n        \r\n        if (enableSceneLogging)\r\n        {\r\n            Debug.Log($\"场景已保存: {scene.name}\");\r\n        }\r\n    }\r\n\r\n    public void LoadScene(string scenePath)\r\n    {\r\n        if (isSceneLoading)\r\n        {\r\n            Debug.LogWarning(\"场景正在加载中，请等待完成\");\r\n            return;\r\n        }\r\n        \r\n        if (string.IsNullOrEmpty(scenePath))\r\n        {\r\n            Debug.LogWarning(\"场景路径不能为空\");\r\n            return;\r\n        }\r\n        \r\n        if (!enableSceneValidation || ValidateScenePath(scenePath))\r\n        {\r\n            isSceneLoading = true;\r\n            sceneStartTime = Time.realtimeSinceStartup;\r\n            sceneProgress = 0f;\r\n            sceneMessage = $\"正在加载场景: {scenePath}\";\r\n            \r\n            if (enableSceneAsync)\r\n            {\r\n                LoadSceneAsync(scenePath);\r\n            }\r\n            else\r\n            {\r\n                LoadSceneSync(scenePath);\r\n            }\r\n        }\r\n    }\r\n\r\n    private bool ValidateScenePath(string scenePath)\r\n    {\r\n        bool isValid = true;\r\n        \r\n        if (string.IsNullOrEmpty(scenePath))\r\n        {\r\n            Debug.LogError(\"场景路径不能为空\");\r\n            isValid = false;\r\n        }\r\n        \r\n        if (!System.IO.File.Exists(scenePath))\r\n        {\r\n            Debug.LogError($\"场景文件不存在: {scenePath}\");\r\n            isValid = false;\r\n        }\r\n        \r\n        return isValid;\r\n    }\r\n\r\n    private void LoadSceneAsync(string scenePath)\r\n    {\r\n        try\r\n        {\r\n            sceneAsyncOperation = EditorSceneManager.OpenSceneAsync(scenePath, openSceneMode);\r\n            sceneAsyncOperation.completed += OnSceneLoadCompleted;\r\n            \r\n            Debug.Log($\"开始异步加载场景: {scenePath}\");\r\n        }\r\n        catch (System.Exception e)\r\n        {\r\n            Debug.LogError($\"异步加载场景失败: {e.Message}\");\r\n            OnSceneLoadError(e);\r\n        }\r\n    }\r\n\r\n    private void LoadSceneSync(string scenePath)\r\n    {\r\n        try\r\n        {\r\n            var scene = EditorSceneManager.OpenScene(scenePath, openSceneMode);\r\n            \r\n            float loadTime = Time.realtimeSinceStartup - sceneStartTime;\r\n            OnSceneLoadCompleted(loadTime);\r\n            \r\n            Debug.Log($\"同步加载场景完成: {scenePath}\");\r\n        }\r\n        catch (System.Exception e)\r\n        {\r\n            Debug.LogError($\"同步加载场景失败: {e.Message}\");\r\n            OnSceneLoadError(e);\r\n        }\r\n    }\r\n\r\n    private void OnSceneLoadCompleted(AsyncOperation operation)\r\n    {\r\n        float loadTime = Time.realtimeSinceStartup - sceneStartTime;\r\n        OnSceneLoadCompleted(loadTime);\r\n    }\r\n\r\n    private void OnSceneLoadCompleted(float loadTime)\r\n    {\r\n        isSceneLoading = false;\r\n        sceneProgress = 1f;\r\n        sceneMessage = \"场景加载完成\";\r\n        \r\n        UpdateSceneLoadPerformance(loadTime);\r\n        \r\n        if (enableSceneHistory)\r\n        {\r\n            AddSceneHistoryEntry(\"Load\", currentScenePath, loadTime);\r\n        }\r\n        \r\n        if (enableSceneLogging)\r\n        {\r\n            Debug.Log($\"场景加载完成，耗时: {loadTime:F3}秒\");\r\n        }\r\n    }\r\n\r\n    private void OnSceneLoadError(System.Exception exception)\r\n    {\r\n        isSceneLoading = false;\r\n        sceneProgress = 0f;\r\n        sceneMessage = $\"场景加载失败: {exception.Message}\";\r\n        \r\n        Debug.LogError($\"场景加载过程中发生错误: {exception}\");\r\n    }\r\n\r\n    private void UpdateSceneLoadPerformance(float loadTime)\r\n    {\r\n        if (enablePerformanceMonitoring)\r\n        {\r\n            loadTimeHistory[loadTimeIndex] = loadTime;\r\n            loadTimeIndex = (loadTimeIndex + 1) % 100;\r\n            \r\n            totalLoadTime += loadTime;\r\n            totalLoadCount++;\r\n            \r\n            if (loadTime > maxLoadTime)\r\n            {\r\n                maxLoadTime = loadTime;\r\n            }\r\n            \r\n            // 更新场景统计\r\n            if (!sceneLoadCount.ContainsKey(currentScenePath))\r\n            {\r\n                sceneLoadCount[currentScenePath] = 0;\r\n            }\r\n            sceneLoadCount[currentScenePath]++;\r\n            \r\n            sceneLoadTime[currentScenePath] = loadTime;\r\n        }\r\n    }\r\n\r\n    public void SaveScene()\r\n    {\r\n        if (isSceneSaving)\r\n        {\r\n            Debug.LogWarning(\"场景正在保存中，请等待完成\");\r\n            return;\r\n        }\r\n        \r\n        var activeScene = EditorSceneManager.GetActiveScene();\r\n        if (!activeScene.isDirty)\r\n        {\r\n            Debug.LogWarning(\"当前场景没有修改，无需保存\");\r\n            return;\r\n        }\r\n        \r\n        isSceneSaving = true;\r\n        sceneStartTime = Time.realtimeSinceStartup;\r\n        sceneMessage = \"正在保存场景...\";\r\n        \r\n        try\r\n        {\r\n            bool success = EditorSceneManager.SaveScene(activeScene);\r\n            \r\n            float saveTime = Time.realtimeSinceStartup - sceneStartTime;\r\n            isSceneSaving = false;\r\n            \r\n            if (success)\r\n            {\r\n                sceneMessage = \"场景保存成功\";\r\n                if (enableSceneHistory)\r\n                {\r\n                    AddSceneHistoryEntry(\"Save\", activeScene.path, saveTime);\r\n                }\r\n                Debug.Log($\"场景保存成功，耗时: {saveTime:F3}秒\");\r\n            }\r\n            else\r\n            {\r\n                sceneMessage = \"场景保存失败\";\r\n                Debug.LogError(\"场景保存失败\");\r\n            }\r\n        }\r\n        catch (System.Exception e)\r\n        {\r\n            isSceneSaving = false;\r\n            sceneMessage = $\"场景保存失败: {e.Message}\";\r\n            Debug.LogError($\"场景保存过程中发生错误: {e}\");\r\n        }\r\n    }\r\n\r\n    public void SaveSceneAs(string path)\r\n    {\r\n        if (isSceneSaving)\r\n        {\r\n            Debug.LogWarning(\"场景正在保存中，请等待完成\");\r\n            return;\r\n        }\r\n        \r\n        isSceneSaving = true;\r\n        sceneStartTime = Time.realtimeSinceStartup;\r\n        sceneMessage = \"正在另存为场景...\";\r\n        \r\n        try\r\n        {\r\n            var activeScene = EditorSceneManager.GetActiveScene();\r\n            bool success = EditorSceneManager.SaveScene(activeScene, path);\r\n            \r\n            float saveTime = Time.realtimeSinceStartup - sceneStartTime;\r\n            isSceneSaving = false;\r\n            \r\n            if (success)\r\n            {\r\n                sceneMessage = \"场景另存为成功\";\r\n                if (enableSceneHistory)\r\n                {\r\n                    AddSceneHistoryEntry(\"SaveAs\", path, saveTime);\r\n                }\r\n                Debug.Log($\"场景另存为成功: {path}, 耗时: {saveTime:F3}秒\");\r\n            }\r\n            else\r\n            {\r\n                sceneMessage = \"场景另存为失败\";\r\n                Debug.LogError(\"场景另存为失败\");\r\n            }\r\n        }\r\n        catch (System.Exception e)\r\n        {\r\n            isSceneSaving = false;\r\n            sceneMessage = $\"场景另存为失败: {e.Message}\";\r\n            Debug.LogError($\"场景另存为过程中发生错误: {e}\");\r\n        }\r\n    }\r\n\r\n    public void CloseScene()\r\n    {\r\n        var activeScene = EditorSceneManager.GetActiveScene();\r\n        if (activeScene.isDirty)\r\n        {\r\n            bool save = EditorUtility.DisplayDialog(\"保存场景\", \r\n                $\"场景 {activeScene.name} 已修改，是否保存？\", \"保存\", \"不保存\");\r\n            \r\n            if (save)\r\n            {\r\n                SaveScene();\r\n            }\r\n        }\r\n        \r\n        EditorSceneManager.CloseScene(activeScene, true);\r\n        Debug.Log($\"场景已关闭: {activeScene.name}\");\r\n    }\r\n\r\n    public void NewScene()\r\n    {\r\n        var activeScene = EditorSceneManager.GetActiveScene();\r\n        if (activeScene.isDirty)\r\n        {\r\n            bool save = EditorUtility.DisplayDialog(\"保存场景\", \r\n                $\"场景 {activeScene.name} 已修改，是否保存？\", \"保存\", \"不保存\");\r\n            \r\n            if (save)\r\n            {\r\n                SaveScene();\r\n            }\r\n        }\r\n        \r\n        EditorSceneManager.NewScene(NewSceneSetup.DefaultGameObjects, NewSceneMode.Single);\r\n        Debug.Log(\"新场景已创建\");\r\n    }\r\n\r\n    private void AutoSaveScene()\r\n    {\r\n        if (enableSceneAutoSave)\r\n        {\r\n            var activeScene = EditorSceneManager.GetActiveScene();\r\n            if (activeScene.isDirty)\r\n            {\r\n                string autoSavePath = System.IO.Path.Combine(backupPath, \r\n                    $\"{activeScene.name}_AutoSave_{System.DateTime.Now:yyyyMMdd_HHmmss}.unity\");\r\n                \r\n                try\r\n                {\r\n                    System.IO.Directory.CreateDirectory(backupPath);\r\n                    EditorSceneManager.SaveScene(activeScene, autoSavePath);\r\n                    Debug.Log($\"场景自动保存: {autoSavePath}\");\r\n                }\r\n                catch (System.Exception e)\r\n                {\r\n                    Debug.LogError($\"场景自动保存失败: {e.Message}\");\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    private void AddSceneHistoryEntry(string operation, string scenePath, float time)\r\n    {\r\n        var entry = new SceneHistoryEntry\r\n        {\r\n            timestamp = System.DateTime.Now.ToString(),\r\n            operation = operation,\r\n            scenePath = scenePath,\r\n            sceneName = System.IO.Path.GetFileNameWithoutExtension(scenePath),\r\n            time = time,\r\n            success = !string.IsNullOrEmpty(sceneMessage) && !sceneMessage.Contains(\"失败\")\r\n        };\r\n        \r\n        sceneHistory[sceneHistoryIndex] = entry;\r\n        sceneHistoryIndex = (sceneHistoryIndex + 1) % sceneHistory.Length;\r\n    }\r\n\r\n    public void GenerateSceneReport()\r\n    {\r\n        Debug.Log(\"=== 场景管理系统报告 ===\");\r\n        Debug.Log($\"场景管理系统状态: {sceneStatus}\");\r\n        Debug.Log($\"当前场景路径: {currentScenePath}\");\r\n        Debug.Log($\"总场景数: {totalScenes}\");\r\n        Debug.Log($\"已加载场景数: {loadedScenes}\");\r\n        Debug.Log($\"修改场景数: {modifiedScenes}\");\r\n        Debug.Log($\"总游戏对象数: {totalGameObjects}\");\r\n        Debug.Log($\"总组件数: {totalComponents}\");\r\n        Debug.Log($\"总场景大小: {FormatFileSize(totalSceneSize)}\");\r\n        Debug.Log($\"总加载次数: {totalLoadCount}\");\r\n        Debug.Log($\"平均加载时间: {averageLoadTime:F3}秒\");\r\n        Debug.Log($\"最大加载时间: {maxLoadTime:F3}秒\");\r\n        Debug.Log($\"总加载时间: {totalLoadTime:F3}秒\");\r\n        \r\n        Debug.Log(\"=== 场景加载统计 ===\");\r\n        foreach (var kvp in sceneLoadCount)\r\n        {\r\n            Debug.Log($\"{System.IO.Path.GetFileNameWithoutExtension(kvp.Key)}: {kvp.Value} 次\");\r\n        }\r\n        \r\n        Debug.Log(\"=== 已加载场景 ===\");\r\n        foreach (var sceneInfo in loadedSceneInfos)\r\n        {\r\n            Debug.Log($\"{sceneInfo.name} ({sceneInfo.path})\");\r\n        }\r\n    }\r\n\r\n    private string FormatFileSize(long bytes)\r\n    {\r\n        string[] sizes = { \"B\", \"KB\", \"MB\", \"GB\" };\r\n        double len = bytes;\r\n        int order = 0;\r\n        \r\n        while (len >= 1024 && order < sizes.Length - 1)\r\n        {\r\n            order++;\r\n            len = len / 1024;\r\n        }\r\n        \r\n        return $\"{len:0.##} {sizes[order]}\";\r\n    }\r\n\r\n    public void ClearSceneHistory()\r\n    {\r\n        sceneHistory = new SceneHistoryEntry[10];\r\n        sceneHistoryIndex = 0;\r\n        Debug.Log(\"场景历史已清除\");\r\n    }\r\n\r\n    public void ResetSceneStatistics()\r\n    {\r\n        sceneLoadCount.Clear();\r\n        sceneLoadTime.Clear();\r\n        totalLoadCount = 0;\r\n        totalLoadTime = 0f;\r\n        averageLoadTime = 0f;\r\n        maxLoadTime = 0f;\r\n        \r\n        Debug.Log(\"场景统计已重置\");\r\n    }\r\n\r\n    private void OnDestroy()\r\n    {\r\n        EditorSceneManager.sceneOpened -= OnSceneOpened;\r\n        EditorSceneManager.sceneClosing -= OnSceneClosing;\r\n        EditorSceneManager.sceneClosed -= OnSceneClosed;\r\n        EditorSceneManager.sceneSaving -= OnSceneSaving;\r\n        EditorSceneManager.sceneSaved -= OnSceneSaved;\r\n        \r\n        Debug.Log(\"场景回调已清理\");\r\n    }\r\n\r\n    private void OnGUI()\r\n    {\r\n        GUILayout.BeginArea(new Rect(10, 10, 400, 800));\r\n        GUILayout.Label(\"SceneManagement 场景管理系统演示\", UnityEditor.EditorStyles.boldLabel);\r\n        \r\n        GUILayout.Space(10);\r\n        GUILayout.Label(\"场景管理系统配置:\");\r\n        enableSceneManagement = GUILayout.Toggle(enableSceneManagement, \"启用场景管理系统\");\r\n        enableSceneLogging = GUILayout.Toggle(enableSceneLogging, \"启用场景日志\");\r\n        enableSceneValidation = GUILayout.Toggle(enableSceneValidation, \"启用场景验证\");\r\n        enableScenePerformance = GUILayout.Toggle(enableScenePerformance, \"启用场景性能监控\");\r\n        enableSceneHistory = GUILayout.Toggle(enableSceneHistory, \"启用场景历史记录\");\r\n        \r\n        GUILayout.Space(10);\r\n        GUILayout.Label(\"场景配置:\");\r\n        targetScenePath = GUILayout.TextField(\"目标场景路径\", targetScenePath);\r\n        openSceneMode = (OpenSceneMode)System.Enum.Parse(typeof(OpenSceneMode), GUILayout.TextField(\"打开场景模式\", openSceneMode.ToString()));\r\n        enableSceneAdditive = GUILayout.Toggle(enableSceneAdditive, \"启用场景叠加\");\r\n        enableSceneAsync = GUILayout.Toggle(enableSceneAsync, \"启用异步加载\");\r\n        enableSceneAutoSave = GUILayout.Toggle(enableSceneAutoSave, \"启用自动保存\");\r\n        autoSaveInterval = float.TryParse(GUILayout.TextField(\"自动保存间隔(秒)\", autoSaveInterval.ToString()), out var interval) ? interval : autoSaveInterval;\r\n        \r\n        GUILayout.Space(10);\r\n        GUILayout.Label(\"场景状态:\");\r\n        GUILayout.Label($\"场景状态: {sceneStatus}\");\r\n        GUILayout.Label($\"是否正在加载: {isSceneLoading}\");\r\n        GUILayout.Label($\"是否正在保存: {isSceneSaving}\");\r\n        GUILayout.Label($\"场景进度: {sceneProgress * 100:F1}%\");\r\n        GUILayout.Label($\"场景消息: {sceneMessage}\");\r\n        GUILayout.Label($\"当前场景路径: {currentScenePath}\");\r\n        GUILayout.Label($\"总场景数: {totalScenes}\");\r\n        GUILayout.Label($\"已加载场景数: {loadedScenes}\");\r\n        GUILayout.Label($\"总游戏对象数: {totalGameObjects}\");\r\n        GUILayout.Label($\"总组件数: {totalComponents}\");\r\n        GUILayout.Label($\"总加载次数: {totalLoadCount}\");\r\n        GUILayout.Label($\"平均加载时间: {averageLoadTime:F3}秒\");\r\n        GUILayout.Label($\"最大加载时间: {maxLoadTime:F3}秒\");\r\n        \r\n        GUILayout.Space(10);\r\n        \r\n        if (GUILayout.Button(\"加载场景\"))\r\n        {\r\n            LoadScene(targetScenePath);\r\n        }\r\n        \r\n        if (GUILayout.Button(\"保存场景\"))\r\n        {\r\n            SaveScene();\r\n        }\r\n        \r\n        if (GUILayout.Button(\"另存为场景\"))\r\n        {\r\n            SaveSceneAs(targetScenePath);\r\n        }\r\n        \r\n        if (GUILayout.Button(\"关闭场景\"))\r\n        {\r\n            CloseScene();\r\n        }\r\n        \r\n        if (GUILayout.Button(\"新建场景\"))\r\n        {\r\n            NewScene();\r\n        }\r\n        \r\n        if (GUILayout.Button(\"自动保存场景\"))\r\n        {\r\n            AutoSaveScene();\r\n        }\r\n        \r\n        if (GUILayout.Button(\"生成场景报告\"))\r\n        {\r\n            GenerateSceneReport();\r\n        }\r\n        \r\n        if (GUILayout.Button(\"清除场景历史\"))\r\n        {\r\n            ClearSceneHistory();\r\n        }\r\n        \r\n        if (GUILayout.Button(\"重置场景统计\"))\r\n        {\r\n            ResetSceneStatistics();\r\n        }\r\n        \r\n        GUILayout.Space(10);\r\n        GUILayout.Label(\"场景历史:\");\r\n        for (int i = 0; i < sceneHistory.Length; i++)\r\n        {\r\n            if (sceneHistory[i] != null && !string.IsNullOrEmpty(sceneHistory[i].timestamp))\r\n            {\r\n                var entry = sceneHistory[i];\r\n                string status = entry.success ? \"成功\" : \"失败\";\r\n                GUILayout.Label($\"{entry.timestamp} - {entry.operation} - {entry.sceneName} - {status} - {entry.time:F3}s\");\r\n            }\r\n        }\r\n        \r\n        GUILayout.EndArea();\r\n    }\r\n}\r\n\r\npublic enum SceneManagementStatus\r\n{\r\n    Idle,\r\n    Loading,\r\n    Saving,\r\n    Completed,\r\n    Failed\r\n}\r\n\r\n[System.Serializable]\r\npublic class SceneInfo\r\n{\r\n    public string path;\r\n    public string name;\r\n    public bool enabled;\r\n    public int buildIndex;\r\n}\r\n\r\n[System.Serializable]\r\npublic class SceneHistoryEntry\r\n{\r\n    public string timestamp;\r\n    public string operation;\r\n    public string scenePath;\r\n    public string sceneName;\r\n    public float time;\r\n    public bool success;\r\n} "
        }
    ]
}