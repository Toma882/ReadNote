{
    "sourceFile": "Assets/UnityEditor/Chapter 8 UnityAPI/UnityEngine/Serialization/SerializationExample.cs",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1750932619899,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1750932619899,
            "name": "Commit-0",
            "content": "using UnityEngine;\r\nusing System;\r\nusing System.Collections.Generic;\r\n\r\n/// <summary>\r\n/// UnityEngine.Serialization 命名空间案例演示\r\n/// 展示ISerializationCallbackReceiver、自定义序列化等核心功能\r\n/// </summary>\r\n[Serializable]\r\npublic class SerializationExample : MonoBehaviour, ISerializationCallbackReceiver\r\n{\r\n    [Header(\"序列化设置\")]\r\n    [SerializeField] private string dataString = \"Hello World\"; //数据字符串\r\n    [SerializeField] private int dataInt = 42; //数据整数\r\n    [SerializeField] private float dataFloat = 3.14f; //数据浮点数\r\n    [SerializeField] private Vector3 dataVector = Vector3.one; //数据向量\r\n    [SerializeField] private List<string> dataList = new List<string>(); //数据列表\r\n\r\n    [Header(\"序列化状态\")]\r\n    [SerializeField] private bool isSerialized = false; //是否已序列化\r\n    [SerializeField] private string serializationTime = \"\"; //序列化时间\r\n\r\n    private void Start()\r\n    {\r\n        // 初始化数据列表\r\n        if (dataList.Count == 0)\r\n        {\r\n            dataList.Add(\"Item 1\");\r\n            dataList.Add(\"Item 2\");\r\n            dataList.Add(\"Item 3\");\r\n        }\r\n    }\r\n\r\n    /// <summary>\r\n    /// 序列化前回调\r\n    /// </summary>\r\n    public void OnBeforeSerialize()\r\n    {\r\n        isSerialized = true;\r\n        serializationTime = DateTime.Now.ToString(\"HH:mm:ss\");\r\n        Debug.Log(\"序列化前回调执行\");\r\n    }\r\n\r\n    /// <summary>\r\n    /// 反序列化后回调\r\n    /// </summary>\r\n    public void OnAfterDeserialize()\r\n    {\r\n        Debug.Log(\"反序列化后回调执行\");\r\n        // 可以在这里进行数据验证和修复\r\n        ValidateData();\r\n    }\r\n\r\n    /// <summary>\r\n    /// 验证数据\r\n    /// </summary>\r\n    private void ValidateData()\r\n    {\r\n        if (string.IsNullOrEmpty(dataString))\r\n        {\r\n            dataString = \"Default String\";\r\n        }\r\n        if (dataInt < 0)\r\n        {\r\n            dataInt = 0;\r\n        }\r\n        if (dataFloat < 0)\r\n        {\r\n            dataFloat = 0f;\r\n        }\r\n        if (dataList == null)\r\n        {\r\n            dataList = new List<string>();\r\n        }\r\n    }\r\n\r\n    /// <summary>\r\n    /// 添加数据到列表\r\n    /// </summary>\r\n    public void AddDataToList(string item)\r\n    {\r\n        if (dataList == null)\r\n        {\r\n            dataList = new List<string>();\r\n        }\r\n        dataList.Add(item);\r\n        Debug.Log($\"添加数据: {item}\");\r\n    }\r\n\r\n    /// <summary>\r\n    /// 清空数据列表\r\n    /// </summary>\r\n    public void ClearDataList()\r\n    {\r\n        if (dataList != null)\r\n        {\r\n            dataList.Clear();\r\n            Debug.Log(\"数据列表已清空\");\r\n        }\r\n    }\r\n\r\n    /// <summary>\r\n    /// 获取序列化信息\r\n    /// </summary>\r\n    public void GetSerializationInfo()\r\n    {\r\n        Debug.Log(\"=== 序列化信息 ===\");\r\n        Debug.Log($\"数据字符串: {dataString}\");\r\n        Debug.Log($\"数据整数: {dataInt}\");\r\n        Debug.Log($\"数据浮点数: {dataFloat}\");\r\n        Debug.Log($\"数据向量: {dataVector}\");\r\n        Debug.Log($\"数据列表数量: {dataList?.Count ?? 0}\");\r\n        Debug.Log($\"是否已序列化: {isSerialized}\");\r\n        Debug.Log($\"序列化时间: {serializationTime}\");\r\n        \r\n        if (dataList != null && dataList.Count > 0)\r\n        {\r\n            Debug.Log(\"数据列表内容:\");\r\n            for (int i = 0; i < dataList.Count; i++)\r\n            {\r\n                Debug.Log($\"  [{i}]: {dataList[i]}\");\r\n            }\r\n        }\r\n    }\r\n\r\n    private void OnGUI()\r\n    {\r\n        GUILayout.BeginArea(new Rect(10, 10, 350, 400));\r\n        GUILayout.Label(\"Serialization 序列化演示\", UnityEditor.EditorStyles.boldLabel);\r\n        \r\n        dataString = GUILayout.TextField(\"数据字符串\", dataString);\r\n        dataInt = int.TryParse(GUILayout.TextField(\"数据整数\", dataInt.ToString()), out var i) ? i : dataInt;\r\n        dataFloat = float.TryParse(GUILayout.TextField(\"数据浮点数\", dataFloat.ToString()), out var f) ? f : dataFloat;\r\n        \r\n        GUILayout.Label($\"数据向量: {dataVector}\");\r\n        GUILayout.Label($\"数据列表数量: {dataList?.Count ?? 0}\");\r\n        GUILayout.Label($\"是否已序列化: {isSerialized}\");\r\n        GUILayout.Label($\"序列化时间: {serializationTime}\");\r\n        \r\n        if (GUILayout.Button(\"添加数据到列表\"))\r\n        {\r\n            AddDataToList($\"Item {dataList?.Count + 1 ?? 1}\");\r\n        }\r\n        \r\n        if (GUILayout.Button(\"清空数据列表\"))\r\n        {\r\n            ClearDataList();\r\n        }\r\n        \r\n        if (GUILayout.Button(\"获取序列化信息\"))\r\n        {\r\n            GetSerializationInfo();\r\n        }\r\n        \r\n        GUILayout.EndArea();\r\n    }\r\n} "
        }
    ]
}