{
    "sourceFile": "Assets/UnityEditor/Chapter 8 UnityAPI/UnityEditor/AssetImporters/AssetImporterExample.cs",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1750930652566,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1750930652566,
            "name": "Commit-0",
            "content": "using UnityEngine;\r\nusing UnityEditor;\r\nusing System.IO;\r\nusing System.Collections.Generic;\r\n\r\n/// <summary>\r\n/// UnityEditor.AssetImporters 命名空间案例演示\r\n/// 展示资源导入器的核心功能\r\n/// </summary>\r\npublic class AssetImporterExample : MonoBehaviour\r\n{\r\n    [Header(\"资源导入设置\")]\r\n    [SerializeField] private string importPath = \"Assets/\";\r\n    [SerializeField] private string[] supportedExtensions = { \".png\", \".jpg\", \".jpeg\", \".tga\", \".psd\", \".fbx\", \".obj\", \".wav\", \".mp3\", \".ogg\" };\r\n    [SerializeField] private bool autoImport = true;\r\n    [SerializeField] private bool recursiveImport = true;\r\n    \r\n    [Header(\"纹理导入设置\")]\r\n    [SerializeField] private TextureImporterType textureType = TextureImporterType.Default;\r\n    [SerializeField] private TextureImporterFormat textureFormat = TextureImporterFormat.Automatic;\r\n    [SerializeField] private int maxTextureSize = 2048;\r\n    [SerializeField] private bool generateMipMaps = true;\r\n    [SerializeField] private FilterMode filterMode = FilterMode.Bilinear;\r\n    [SerializeField] private TextureWrapMode wrapMode = TextureWrapMode.Clamp;\r\n    \r\n    [Header(\"模型导入设置\")]\r\n    [SerializeField] private ModelImporterAnimationType animationType = ModelImporterAnimationType.None;\r\n    [SerializeField] private bool importBlendShapes = false;\r\n    [SerializeField] private bool importVisibility = false;\r\n    [SerializeField] private bool importCameras = false;\r\n    [SerializeField] private bool importLights = false;\r\n    [SerializeField] private float scaleFactor = 1.0f;\r\n    \r\n    [Header(\"音频导入设置\")]\r\n    [SerializeField] private AudioImporterLoadType audioLoadType = AudioImporterLoadType.StreamFromDisc;\r\n    [SerializeField] private AudioCompressionFormat audioCompressionFormat = AudioCompressionFormat.Vorbis;\r\n    [SerializeField] private float audioQuality = 0.5f;\r\n    [SerializeField] private bool forceToMono = false;\r\n    [SerializeField] private bool normalize = false;\r\n    \r\n    [Header(\"导入状态\")]\r\n    [SerializeField] private bool isImporting = false;\r\n    [SerializeField] private int importedCount = 0;\r\n    [SerializeField] private int failedCount = 0;\r\n    [SerializeField] private List<string> importedAssets = new List<string>();\r\n    [SerializeField] private List<string> failedAssets = new List<string>();\r\n    \r\n    // 导入事件\r\n    private System.Action<string> onAssetImported;\r\n    private System.Action<string> onAssetFailed;\r\n    private System.Action onImportComplete;\r\n    \r\n    private void Start()\r\n    {\r\n        InitializeAssetImporter();\r\n    }\r\n    \r\n    /// <summary>\r\n    /// 初始化资源导入器\r\n    /// </summary>\r\n    private void InitializeAssetImporter()\r\n    {\r\n        // 设置默认导入路径\r\n        if (string.IsNullOrEmpty(importPath))\r\n        {\r\n            importPath = \"Assets/\";\r\n        }\r\n        \r\n        // 确保路径存在\r\n        if (!Directory.Exists(importPath))\r\n        {\r\n            Directory.CreateDirectory(importPath);\r\n        }\r\n        \r\n        // 设置资源导入回调\r\n        AssetPostprocessor.OnPostprocessAllAssets += OnPostprocessAllAssets;\r\n        \r\n        Debug.Log(\"资源导入器初始化完成\");\r\n    }\r\n    \r\n    /// <summary>\r\n    /// 资源后处理回调\r\n    /// </summary>\r\n    /// <param name=\"importedAssets\">导入的资源</param>\r\n    /// <param name=\"deletedAssets\">删除的资源</param>\r\n    /// <param name=\"movedAssets\">移动的资源</param>\r\n    /// <param name=\"movedFromAssetPaths\">移动前的路径</param>\r\n    private void OnPostprocessAllAssets(string[] importedAssets, string[] deletedAssets, string[] movedAssets, string[] movedFromAssetPaths)\r\n    {\r\n        foreach (string assetPath in importedAssets)\r\n        {\r\n            Debug.Log($\"资源已导入: {assetPath}\");\r\n            onAssetImported?.Invoke(assetPath);\r\n        }\r\n        \r\n        foreach (string assetPath in deletedAssets)\r\n        {\r\n            Debug.Log($\"资源已删除: {assetPath}\");\r\n        }\r\n        \r\n        foreach (string assetPath in movedAssets)\r\n        {\r\n            Debug.Log($\"资源已移动: {assetPath}\");\r\n        }\r\n    }\r\n    \r\n    /// <summary>\r\n    /// 导入指定路径的资源\r\n    /// </summary>\r\n    /// <param name=\"path\">资源路径</param>\r\n    public void ImportAssets(string path)\r\n    {\r\n        if (string.IsNullOrEmpty(path))\r\n        {\r\n            Debug.LogError(\"导入路径不能为空\");\r\n            return;\r\n        }\r\n        \r\n        if (!Directory.Exists(path))\r\n        {\r\n            Debug.LogError($\"路径不存在: {path}\");\r\n            return;\r\n        }\r\n        \r\n        isImporting = true;\r\n        importedCount = 0;\r\n        failedCount = 0;\r\n        importedAssets.Clear();\r\n        failedAssets.Clear();\r\n        \r\n        Debug.Log($\"开始导入资源: {path}\");\r\n        \r\n        // 获取所有支持的文件\r\n        List<string> filesToImport = GetFilesToImport(path);\r\n        \r\n        foreach (string filePath in filesToImport)\r\n        {\r\n            try\r\n            {\r\n                ImportSingleAsset(filePath);\r\n                importedCount++;\r\n                importedAssets.Add(filePath);\r\n            }\r\n            catch (System.Exception e)\r\n            {\r\n                Debug.LogError($\"导入失败 {filePath}: {e.Message}\");\r\n                failedCount++;\r\n                failedAssets.Add(filePath);\r\n            }\r\n        }\r\n        \r\n        isImporting = false;\r\n        \r\n        Debug.Log($\"导入完成: 成功 {importedCount} 个, 失败 {failedCount} 个\");\r\n        onImportComplete?.Invoke();\r\n    }\r\n    \r\n    /// <summary>\r\n    /// 获取需要导入的文件列表\r\n    /// </summary>\r\n    /// <param name=\"path\">路径</param>\r\n    /// <returns>文件列表</returns>\r\n    private List<string> GetFilesToImport(string path)\r\n    {\r\n        List<string> files = new List<string>();\r\n        \r\n        SearchOption searchOption = recursiveImport ? SearchOption.AllDirectories : SearchOption.TopDirectoryOnly;\r\n        \r\n        foreach (string extension in supportedExtensions)\r\n        {\r\n            string[] foundFiles = Directory.GetFiles(path, \"*\" + extension, searchOption);\r\n            files.AddRange(foundFiles);\r\n        }\r\n        \r\n        return files;\r\n    }\r\n    \r\n    /// <summary>\r\n    /// 导入单个资源\r\n    /// </summary>\r\n    /// <param name=\"filePath\">文件路径</param>\r\n    private void ImportSingleAsset(string filePath)\r\n    {\r\n        string extension = Path.GetExtension(filePath).ToLower();\r\n        \r\n        switch (extension)\r\n        {\r\n            case \".png\":\r\n            case \".jpg\":\r\n            case \".jpeg\":\r\n            case \".tga\":\r\n            case \".psd\":\r\n                ImportTexture(filePath);\r\n                break;\r\n                \r\n            case \".fbx\":\r\n            case \".obj\":\r\n                ImportModel(filePath);\r\n                break;\r\n                \r\n            case \".wav\":\r\n            case \".mp3\":\r\n            case \".ogg\":\r\n                ImportAudio(filePath);\r\n                break;\r\n                \r\n            default:\r\n                Debug.LogWarning($\"不支持的文件类型: {extension}\");\r\n                break;\r\n        }\r\n    }\r\n    \r\n    /// <summary>\r\n    /// 导入纹理\r\n    /// </summary>\r\n    /// <param name=\"filePath\">文件路径</param>\r\n    private void ImportTexture(string filePath)\r\n    {\r\n        string assetPath = ConvertToAssetPath(filePath);\r\n        \r\n        // 获取或创建纹理导入器\r\n        TextureImporter importer = AssetImporter.GetAtPath(assetPath) as TextureImporter;\r\n        if (importer == null)\r\n        {\r\n            Debug.LogError($\"无法获取纹理导入器: {assetPath}\");\r\n            return;\r\n        }\r\n        \r\n        // 设置纹理导入参数\r\n        importer.textureType = textureType;\r\n        importer.maxTextureSize = maxTextureSize;\r\n        importer.generateMipMaps = generateMipMaps;\r\n        importer.filterMode = filterMode;\r\n        importer.wrapMode = wrapMode;\r\n        \r\n        // 设置平台特定设置\r\n        TextureImporterPlatformSettings platformSettings = new TextureImporterPlatformSettings();\r\n        platformSettings.name = \"Default\";\r\n        platformSettings.overridden = true;\r\n        platformSettings.format = textureFormat;\r\n        platformSettings.maxTextureSize = maxTextureSize;\r\n        platformSettings.compressionQuality = 50;\r\n        \r\n        importer.SetPlatformTextureSettings(platformSettings);\r\n        \r\n        // 应用设置\r\n        importer.SaveAndReimport();\r\n        \r\n        Debug.Log($\"纹理导入完成: {assetPath}\");\r\n    }\r\n    \r\n    /// <summary>\r\n    /// 导入模型\r\n    /// </summary>\r\n    /// <param name=\"filePath\">文件路径</param>\r\n    private void ImportModel(string filePath)\r\n    {\r\n        string assetPath = ConvertToAssetPath(filePath);\r\n        \r\n        // 获取或创建模型导入器\r\n        ModelImporter importer = AssetImporter.GetAtPath(assetPath) as ModelImporter;\r\n        if (importer == null)\r\n        {\r\n            Debug.LogError($\"无法获取模型导入器: {assetPath}\");\r\n            return;\r\n        }\r\n        \r\n        // 设置模型导入参数\r\n        importer.animationType = animationType;\r\n        importer.importBlendShapes = importBlendShapes;\r\n        importer.importVisibility = importVisibility;\r\n        importer.importCameras = importCameras;\r\n        importer.importLights = importLights;\r\n        importer.globalScale = scaleFactor;\r\n        \r\n        // 设置动画导入参数\r\n        if (animationType != ModelImporterAnimationType.None)\r\n        {\r\n            importer.importAnimation = true;\r\n            importer.animationCompression = ModelImporterAnimationCompression.KeyframeReduction;\r\n        }\r\n        \r\n        // 应用设置\r\n        importer.SaveAndReimport();\r\n        \r\n        Debug.Log($\"模型导入完成: {assetPath}\");\r\n    }\r\n    \r\n    /// <summary>\r\n    /// 导入音频\r\n    /// </summary>\r\n    /// <param name=\"filePath\">文件路径</param>\r\n    private void ImportAudio(string filePath)\r\n    {\r\n        string assetPath = ConvertToAssetPath(filePath);\r\n        \r\n        // 获取或创建音频导入器\r\n        AudioImporter importer = AssetImporter.GetAtPath(assetPath) as AudioImporter;\r\n        if (importer == null)\r\n        {\r\n            Debug.LogError($\"无法获取音频导入器: {assetPath}\");\r\n            return;\r\n        }\r\n        \r\n        // 设置音频导入参数\r\n        AudioImporterSampleSettings sampleSettings = new AudioImporterSampleSettings();\r\n        sampleSettings.loadType = audioLoadType;\r\n        sampleSettings.compressionFormat = audioCompressionFormat;\r\n        sampleSettings.quality = audioQuality;\r\n        sampleSettings.forceToMono = forceToMono;\r\n        sampleSettings.normalize = normalize;\r\n        \r\n        importer.defaultSampleSettings = sampleSettings;\r\n        \r\n        // 应用设置\r\n        importer.SaveAndReimport();\r\n        \r\n        Debug.Log($\"音频导入完成: {assetPath}\");\r\n    }\r\n    \r\n    /// <summary>\r\n    /// 转换文件路径为资源路径\r\n    /// </summary>\r\n    /// <param name=\"filePath\">文件路径</param>\r\n    /// <returns>资源路径</returns>\r\n    private string ConvertToAssetPath(string filePath)\r\n    {\r\n        // 将绝对路径转换为相对于Assets的路径\r\n        string fullPath = Path.GetFullPath(filePath);\r\n        string assetsPath = Path.GetFullPath(\"Assets\");\r\n        \r\n        if (fullPath.StartsWith(assetsPath))\r\n        {\r\n            return fullPath.Substring(assetsPath.Length).Replace('\\\\', '/').TrimStart('/');\r\n        }\r\n        \r\n        return filePath;\r\n    }\r\n    \r\n    /// <summary>\r\n    /// 批量导入资源\r\n    /// </summary>\r\n    public void BatchImportAssets()\r\n    {\r\n        ImportAssets(importPath);\r\n    }\r\n    \r\n    /// <summary>\r\n    /// 重新导入指定资源\r\n    /// </summary>\r\n    /// <param name=\"assetPath\">资源路径</param>\r\n    public void ReimportAsset(string assetPath)\r\n    {\r\n        if (string.IsNullOrEmpty(assetPath))\r\n        {\r\n            Debug.LogError(\"资源路径不能为空\");\r\n            return;\r\n        }\r\n        \r\n        AssetImporter importer = AssetImporter.GetAtPath(assetPath);\r\n        if (importer != null)\r\n        {\r\n            importer.SaveAndReimport();\r\n            Debug.Log($\"资源重新导入完成: {assetPath}\");\r\n        }\r\n        else\r\n        {\r\n            Debug.LogError($\"无法找到资源导入器: {assetPath}\");\r\n        }\r\n    }\r\n    \r\n    /// <summary>\r\n    /// 重新导入所有资源\r\n    /// </summary>\r\n    public void ReimportAllAssets()\r\n    {\r\n        Debug.Log(\"开始重新导入所有资源\");\r\n        AssetDatabase.Refresh();\r\n        Debug.Log(\"所有资源重新导入完成\");\r\n    }\r\n    \r\n    /// <summary>\r\n    /// 设置纹理导入参数\r\n    /// </summary>\r\n    /// <param name=\"type\">纹理类型</param>\r\n    /// <param name=\"format\">纹理格式</param>\r\n    /// <param name=\"maxSize\">最大尺寸</param>\r\n    public void SetTextureImportSettings(TextureImporterType type, TextureImporterFormat format, int maxSize)\r\n    {\r\n        textureType = type;\r\n        textureFormat = format;\r\n        maxTextureSize = maxSize;\r\n        \r\n        Debug.Log($\"纹理导入设置已更新: 类型={type}, 格式={format}, 最大尺寸={maxSize}\");\r\n    }\r\n    \r\n    /// <summary>\r\n    /// 设置模型导入参数\r\n    /// </summary>\r\n    /// <param name=\"animType\">动画类型</param>\r\n    /// <param name=\"scale\">缩放因子</param>\r\n    public void SetModelImportSettings(ModelImporterAnimationType animType, float scale)\r\n    {\r\n        animationType = animType;\r\n        scaleFactor = scale;\r\n        \r\n        Debug.Log($\"模型导入设置已更新: 动画类型={animType}, 缩放因子={scale}\");\r\n    }\r\n    \r\n    /// <summary>\r\n    /// 设置音频导入参数\r\n    /// </summary>\r\n    /// <param name=\"loadType\">加载类型</param>\r\n    /// <param name=\"compressionFormat\">压缩格式</param>\r\n    /// <param name=\"quality\">质量</param>\r\n    public void SetAudioImportSettings(AudioImporterLoadType loadType, AudioCompressionFormat compressionFormat, float quality)\r\n    {\r\n        audioLoadType = loadType;\r\n        audioCompressionFormat = compressionFormat;\r\n        audioQuality = Mathf.Clamp01(quality);\r\n        \r\n        Debug.Log($\"音频导入设置已更新: 加载类型={loadType}, 压缩格式={compressionFormat}, 质量={audioQuality}\");\r\n    }\r\n    \r\n    /// <summary>\r\n    /// 获取导入信息\r\n    /// </summary>\r\n    public void GetImportInfo()\r\n    {\r\n        Debug.Log(\"=== 资源导入器信息 ===\");\r\n        Debug.Log($\"导入路径: {importPath}\");\r\n        Debug.Log($\"自动导入: {autoImport}\");\r\n        Debug.Log($\"递归导入: {recursiveImport}\");\r\n        Debug.Log($\"支持的文件类型: {string.Join(\", \", supportedExtensions)}\");\r\n        Debug.Log($\"导入状态: {(isImporting ? \"导入中\" : \"空闲\")}\");\r\n        Debug.Log($\"已导入数量: {importedCount}\");\r\n        Debug.Log($\"失败数量: {failedCount}\");\r\n        \r\n        Debug.Log(\"纹理导入设置:\");\r\n        Debug.Log($\"  纹理类型: {textureType}\");\r\n        Debug.Log($\"  纹理格式: {textureFormat}\");\r\n        Debug.Log($\"  最大尺寸: {maxTextureSize}\");\r\n        Debug.Log($\"  生成MipMap: {generateMipMaps}\");\r\n        Debug.Log($\"  过滤模式: {filterMode}\");\r\n        Debug.Log($\"  环绕模式: {wrapMode}\");\r\n        \r\n        Debug.Log(\"模型导入设置:\");\r\n        Debug.Log($\"  动画类型: {animationType}\");\r\n        Debug.Log($\"  导入混合形状: {importBlendShapes}\");\r\n        Debug.Log($\"  导入可见性: {importVisibility}\");\r\n        Debug.Log($\"  导入相机: {importCameras}\");\r\n        Debug.Log($\"  导入灯光: {importLights}\");\r\n        Debug.Log($\"  缩放因子: {scaleFactor}\");\r\n        \r\n        Debug.Log(\"音频导入设置:\");\r\n        Debug.Log($\"  加载类型: {audioLoadType}\");\r\n        Debug.Log($\"  压缩格式: {audioCompressionFormat}\");\r\n        Debug.Log($\"  质量: {audioQuality}\");\r\n        Debug.Log($\"  强制单声道: {forceToMono}\");\r\n        Debug.Log($\"  标准化: {normalize}\");\r\n        \r\n        if (importedAssets.Count > 0)\r\n        {\r\n            Debug.Log(\"已导入的资源:\");\r\n            foreach (string asset in importedAssets)\r\n            {\r\n                Debug.Log($\"  {asset}\");\r\n            }\r\n        }\r\n        \r\n        if (failedAssets.Count > 0)\r\n        {\r\n            Debug.Log(\"导入失败的资源:\");\r\n            foreach (string asset in failedAssets)\r\n            {\r\n                Debug.Log($\"  {asset}\");\r\n            }\r\n        }\r\n    }\r\n    \r\n    /// <summary>\r\n    /// 重置导入设置\r\n    /// </summary>\r\n    public void ResetImportSettings()\r\n    {\r\n        // 重置纹理设置\r\n        textureType = TextureImporterType.Default;\r\n        textureFormat = TextureImporterFormat.Automatic;\r\n        maxTextureSize = 2048;\r\n        generateMipMaps = true;\r\n        filterMode = FilterMode.Bilinear;\r\n        wrapMode = TextureWrapMode.Clamp;\r\n        \r\n        // 重置模型设置\r\n        animationType = ModelImporterAnimationType.None;\r\n        importBlendShapes = false;\r\n        importVisibility = false;\r\n        importCameras = false;\r\n        importLights = false;\r\n        scaleFactor = 1.0f;\r\n        \r\n        // 重置音频设置\r\n        audioLoadType = AudioImporterLoadType.StreamFromDisc;\r\n        audioCompressionFormat = AudioCompressionFormat.Vorbis;\r\n        audioQuality = 0.5f;\r\n        forceToMono = false;\r\n        normalize = false;\r\n        \r\n        Debug.Log(\"导入设置已重置\");\r\n    }\r\n    \r\n    private void OnGUI()\r\n    {\r\n        // 简单的GUI界面用于测试\r\n        GUILayout.BeginArea(new Rect(10, 10, 400, 800));\r\n        GUILayout.Label(\"资源导入器演示\", EditorStyles.boldLabel);\r\n        \r\n        GUILayout.Space(10);\r\n        \r\n        // 导入状态\r\n        GUILayout.Label($\"导入状态: {(isImporting ? \"导入中\" : \"空闲\")}\");\r\n        GUILayout.Label($\"已导入: {importedCount}\");\r\n        GUILayout.Label($\"失败: {failedCount}\");\r\n        \r\n        GUILayout.Space(10);\r\n        \r\n        // 导入路径\r\n        GUILayout.Label(\"导入路径:\");\r\n        importPath = GUILayout.TextField(importPath);\r\n        \r\n        GUILayout.Space(10);\r\n        \r\n        // 控制按钮\r\n        if (GUILayout.Button(\"批量导入\"))\r\n        {\r\n            BatchImportAssets();\r\n        }\r\n        \r\n        if (GUILayout.Button(\"重新导入所有\"))\r\n        {\r\n            ReimportAllAssets();\r\n        }\r\n        \r\n        GUILayout.Space(10);\r\n        \r\n        // 纹理设置\r\n        GUILayout.Label(\"纹理导入设置:\", EditorStyles.boldLabel);\r\n        \r\n        textureType = (TextureImporterType)EditorGUILayout.EnumPopup(\"纹理类型\", textureType);\r\n        textureFormat = (TextureImporterFormat)EditorGUILayout.EnumPopup(\"纹理格式\", textureFormat);\r\n        maxTextureSize = EditorGUILayout.IntField(\"最大尺寸\", maxTextureSize);\r\n        generateMipMaps = EditorGUILayout.Toggle(\"生成MipMap\", generateMipMaps);\r\n        filterMode = (FilterMode)EditorGUILayout.EnumPopup(\"过滤模式\", filterMode);\r\n        wrapMode = (TextureWrapMode)EditorGUILayout.EnumPopup(\"环绕模式\", wrapMode);\r\n        \r\n        GUILayout.Space(10);\r\n        \r\n        // 模型设置\r\n        GUILayout.Label(\"模型导入设置:\", EditorStyles.boldLabel);\r\n        \r\n        animationType = (ModelImporterAnimationType)EditorGUILayout.EnumPopup(\"动画类型\", animationType);\r\n        importBlendShapes = EditorGUILayout.Toggle(\"导入混合形状\", importBlendShapes);\r\n        importVisibility = EditorGUILayout.Toggle(\"导入可见性\", importVisibility);\r\n        importCameras = EditorGUILayout.Toggle(\"导入相机\", importCameras);\r\n        importLights = EditorGUILayout.Toggle(\"导入灯光\", importLights);\r\n        scaleFactor = EditorGUILayout.FloatField(\"缩放因子\", scaleFactor);\r\n        \r\n        GUILayout.Space(10);\r\n        \r\n        // 音频设置\r\n        GUILayout.Label(\"音频导入设置:\", EditorStyles.boldLabel);\r\n        \r\n        audioLoadType = (AudioImporterLoadType)EditorGUILayout.EnumPopup(\"加载类型\", audioLoadType);\r\n        audioCompressionFormat = (AudioCompressionFormat)EditorGUILayout.EnumPopup(\"压缩格式\", audioCompressionFormat);\r\n        audioQuality = EditorGUILayout.Slider(\"质量\", audioQuality, 0f, 1f);\r\n        forceToMono = EditorGUILayout.Toggle(\"强制单声道\", forceToMono);\r\n        normalize = EditorGUILayout.Toggle(\"标准化\", normalize);\r\n        \r\n        GUILayout.Space(10);\r\n        \r\n        if (GUILayout.Button(\"获取导入信息\"))\r\n        {\r\n            GetImportInfo();\r\n        }\r\n        \r\n        if (GUILayout.Button(\"重置设置\"))\r\n        {\r\n            ResetImportSettings();\r\n        }\r\n        \r\n        GUILayout.EndArea();\r\n    }\r\n    \r\n    private void OnDestroy()\r\n    {\r\n        // 移除回调\r\n        AssetPostprocessor.OnPostprocessAllAssets -= OnPostprocessAllAssets;\r\n    }\r\n} "
        }
    ]
}