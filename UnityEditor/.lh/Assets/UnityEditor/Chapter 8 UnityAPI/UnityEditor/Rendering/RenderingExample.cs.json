{
    "sourceFile": "Assets/UnityEditor/Chapter 8 UnityAPI/UnityEditor/Rendering/RenderingExample.cs",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1750939441723,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1750939441723,
            "name": "Commit-0",
            "content": "using UnityEngine;\r\nusing UnityEditor;\r\nusing UnityEditor.Rendering;\r\nusing System.Collections.Generic;\r\n\r\n/// <summary>\r\n/// UnityEditor.Rendering 命名空间案例演示\r\n/// 展示渲染系统的使用，包括渲染管线、着色器、材质等\r\n/// </summary>\r\npublic class RenderingExample : MonoBehaviour\r\n{\r\n    [Header(\"渲染系统配置\")]\r\n    [SerializeField] private bool enableRenderingSystem = true;\r\n    [SerializeField] private bool enableShaderManagement = true;\r\n    [SerializeField] private bool enableMaterialManagement = true;\r\n    [SerializeField] private bool enableRenderPipelineManagement = true;\r\n    [SerializeField] private bool enableLightingManagement = true;\r\n    [SerializeField] private bool enablePostProcessingManagement = true;\r\n    \r\n    [Header(\"渲染管线配置\")]\r\n    [SerializeField] private RenderPipelineAsset currentRenderPipeline;\r\n    [SerializeField] private RenderPipelineAsset targetRenderPipeline;\r\n    [SerializeField] private bool enablePipelineValidation = true;\r\n    [SerializeField] private bool enablePipelineOptimization = true;\r\n    [SerializeField] private bool enablePipelineProfiling = true;\r\n    [SerializeField] private bool enablePipelineDebugging = true;\r\n    \r\n    [Header(\"着色器配置\")]\r\n    [SerializeField] private Shader currentShader;\r\n    [SerializeField] private Shader targetShader;\r\n    [SerializeField] private bool enableShaderCompilation = true;\r\n    [SerializeField] private bool enableShaderValidation = true;\r\n    [SerializeField] private bool enableShaderOptimization = true;\r\n    [SerializeField] private bool enableShaderDebugging = true;\r\n    [SerializeField] private bool enableShaderProfiling = true;\r\n    \r\n    [Header(\"材质配置\")]\r\n    [SerializeField] private Material currentMaterial;\r\n    [SerializeField] private Material targetMaterial;\r\n    [SerializeField] private bool enableMaterialValidation = true;\r\n    [SerializeField] private bool enableMaterialOptimization = true;\r\n    [SerializeField] private bool enableMaterialProfiling = true;\r\n    [SerializeField] private bool enableMaterialDebugging = true;\r\n    \r\n    [Header(\"光照配置\")]\r\n    [SerializeField] private Light currentLight;\r\n    [SerializeField] private Light targetLight;\r\n    [SerializeField] private bool enableLightingValidation = true;\r\n    [SerializeField] private bool enableLightingOptimization = true;\r\n    [SerializeField] private bool enableLightingProfiling = true;\r\n    [SerializeField] private bool enableLightingDebugging = true;\r\n    \r\n    [Header(\"后处理配置\")]\r\n    [SerializeField] private bool enablePostProcessing = true;\r\n    [SerializeField] private bool enablePostProcessingValidation = true;\r\n    [SerializeField] private bool enablePostProcessingOptimization = true;\r\n    [SerializeField] private bool enablePostProcessingProfiling = true;\r\n    [SerializeField] private bool enablePostProcessingDebugging = true;\r\n    \r\n    [Header(\"渲染状态\")]\r\n    [SerializeField] private RenderingStatus renderingStatus = RenderingStatus.Idle;\r\n    [SerializeField] private bool isRendering = false;\r\n    [SerializeField] private bool isCompiling = false;\r\n    [SerializeField] private bool isOptimizing = false;\r\n    [SerializeField] private bool isProfiling = false;\r\n    [SerializeField] private bool isDebugging = false;\r\n    [SerializeField] private float renderingProgress = 0f;\r\n    [SerializeField] private string renderingMessage = \"\";\r\n    \r\n    [Header(\"渲染统计\")]\r\n    [SerializeField] private int totalShaders = 0;\r\n    [SerializeField] private int totalMaterials = 0;\r\n    [SerializeField] private int totalLights = 0;\r\n    [SerializeField] private int totalRenderers = 0;\r\n    [SerializeField] private int totalCameras = 0;\r\n    [SerializeField] private int totalPostProcessors = 0;\r\n    [SerializeField] private float averageFrameTime = 0f;\r\n    [SerializeField] private float maxFrameTime = 0f;\r\n    [SerializeField] private float minFrameTime = 0f;\r\n    [SerializeField] private int totalFrames = 0;\r\n    [SerializeField] private float totalFrameTime = 0f;\r\n    \r\n    [Header(\"渲染性能\")]\r\n    [SerializeField] private bool enablePerformanceMonitoring = true;\r\n    [SerializeField] private float[] frameTimeHistory = new float[100];\r\n    [SerializeField] private int frameTimeIndex = 0;\r\n    [SerializeField] private float targetFrameRate = 60f;\r\n    [SerializeField] private float currentFrameRate = 0f;\r\n    [SerializeField] private float frameRateVariance = 0f;\r\n    [SerializeField] private int droppedFrames = 0;\r\n    [SerializeField] private int totalDroppedFrames = 0;\r\n    \r\n    [Header(\"渲染质量\")]\r\n    [SerializeField] private bool enableQualityManagement = true;\r\n    [SerializeField] private QualityLevel currentQualityLevel = QualityLevel.Medium;\r\n    [SerializeField] private QualityLevel targetQualityLevel = QualityLevel.High;\r\n    [SerializeField] private bool enableQualityValidation = true;\r\n    [SerializeField] private bool enableQualityOptimization = true;\r\n    [SerializeField] private bool enableQualityProfiling = true;\r\n    \r\n    [Header(\"渲染调试\")]\r\n    [SerializeField] private bool enableRenderingDebugging = true;\r\n    [SerializeField] private bool enableWireframeMode = false;\r\n    [SerializeField] private bool enableBoundingBoxMode = false;\r\n    [SerializeField] private bool enableNormalsMode = false;\r\n    [SerializeField] private bool enableUVMode = false;\r\n    [SerializeField] private bool enableLightingMode = false;\r\n    [SerializeField] private bool enableShadowMode = false;\r\n    [SerializeField] private bool enableDepthMode = false;\r\n    [SerializeField] private bool enableStencilMode = false;\r\n    \r\n    [Header(\"渲染历史\")]\r\n    [SerializeField] private RenderingHistoryEntry[] renderingHistory = new RenderingHistoryEntry[20];\r\n    [SerializeField] private int renderingHistoryIndex = 0;\r\n    [SerializeField] private bool enableRenderingHistory = true;\r\n    \r\n    [Header(\"渲染报告\")]\r\n    [SerializeField] private RenderingReport currentRenderingReport;\r\n    [SerializeField] private bool enableRenderingReports = true;\r\n    [SerializeField] private bool enableAutoReports = true;\r\n    [SerializeField] private float reportInterval = 60f; // 1分钟\r\n    [SerializeField] private float lastReportTime = 0f;\r\n    \r\n    private bool isInitialized = false;\r\n    private float renderingStartTime = 0f;\r\n    private float lastFrameTime = 0f;\r\n    private float frameStartTime = 0f;\r\n    private int frameCount = 0;\r\n    private float frameTimeSum = 0f;\r\n    private float frameTimeMin = float.MaxValue;\r\n    private float frameTimeMax = 0f;\r\n\r\n    private void Start()\r\n    {\r\n        InitializeRenderingSystem();\r\n    }\r\n\r\n    private void InitializeRenderingSystem()\r\n    {\r\n        if (!enableRenderingSystem) return;\r\n        \r\n        InitializeRenderingState();\r\n        InitializePerformanceMonitoring();\r\n        InitializeRenderingStatistics();\r\n        InitializeRenderingDebugging();\r\n        RegisterRenderingCallbacks();\r\n        \r\n        isInitialized = true;\r\n        renderingStatus = RenderingStatus.Idle;\r\n        Debug.Log(\"渲染系统初始化完成\");\r\n    }\r\n\r\n    private void InitializeRenderingState()\r\n    {\r\n        renderingStatus = RenderingStatus.Idle;\r\n        isRendering = false;\r\n        isCompiling = false;\r\n        isOptimizing = false;\r\n        isProfiling = false;\r\n        isDebugging = false;\r\n        renderingProgress = 0f;\r\n        renderingMessage = \"就绪\";\r\n        \r\n        Debug.Log(\"渲染状态已初始化\");\r\n    }\r\n\r\n    private void InitializePerformanceMonitoring()\r\n    {\r\n        if (enablePerformanceMonitoring)\r\n        {\r\n            frameTimeHistory = new float[100];\r\n            frameTimeIndex = 0;\r\n            averageFrameTime = 0f;\r\n            maxFrameTime = 0f;\r\n            minFrameTime = float.MaxValue;\r\n            totalFrames = 0;\r\n            totalFrameTime = 0f;\r\n            currentFrameRate = 0f;\r\n            frameRateVariance = 0f;\r\n            droppedFrames = 0;\r\n            totalDroppedFrames = 0;\r\n            \r\n            Debug.Log(\"性能监控初始化完成\");\r\n        }\r\n    }\r\n\r\n    private void InitializeRenderingStatistics()\r\n    {\r\n        totalShaders = 0;\r\n        totalMaterials = 0;\r\n        totalLights = 0;\r\n        totalRenderers = 0;\r\n        totalCameras = 0;\r\n        totalPostProcessors = 0;\r\n        \r\n        Debug.Log(\"渲染统计初始化完成\");\r\n    }\r\n\r\n    private void InitializeRenderingDebugging()\r\n    {\r\n        if (enableRenderingDebugging)\r\n        {\r\n            enableWireframeMode = false;\r\n            enableBoundingBoxMode = false;\r\n            enableNormalsMode = false;\r\n            enableUVMode = false;\r\n            enableLightingMode = false;\r\n            enableShadowMode = false;\r\n            enableDepthMode = false;\r\n            enableStencilMode = false;\r\n            \r\n            Debug.Log(\"渲染调试初始化完成\");\r\n        }\r\n    }\r\n\r\n    private void RegisterRenderingCallbacks()\r\n    {\r\n        // 注册渲染回调\r\n        Camera.onPreRender += OnPreRender;\r\n        Camera.onPostRender += OnPostRender;\r\n        \r\n        Debug.Log(\"渲染回调已注册\");\r\n    }\r\n\r\n    private void Update()\r\n    {\r\n        if (!isInitialized) return;\r\n        \r\n        UpdateRenderingStatus();\r\n        UpdateRenderingProgress();\r\n        UpdateRenderingStatistics();\r\n        UpdatePerformanceMonitoring();\r\n        \r\n        if (enableAutoReports)\r\n        {\r\n            CheckAutoReport();\r\n        }\r\n        \r\n        if (enableQualityManagement)\r\n        {\r\n            UpdateQualityManagement();\r\n        }\r\n    }\r\n\r\n    private void UpdateRenderingStatus()\r\n    {\r\n        if (isRendering)\r\n        {\r\n            renderingStatus = RenderingStatus.Rendering;\r\n        }\r\n        else if (isCompiling)\r\n        {\r\n            renderingStatus = RenderingStatus.Compiling;\r\n        }\r\n        else if (isOptimizing)\r\n        {\r\n            renderingStatus = RenderingStatus.Optimizing;\r\n        }\r\n        else if (isProfiling)\r\n        {\r\n            renderingStatus = RenderingStatus.Profiling;\r\n        }\r\n        else if (isDebugging)\r\n        {\r\n            renderingStatus = RenderingStatus.Debugging;\r\n        }\r\n        else\r\n        {\r\n            renderingStatus = RenderingStatus.Idle;\r\n        }\r\n    }\r\n\r\n    private void UpdateRenderingProgress()\r\n    {\r\n        // 更新渲染进度\r\n        if (isRendering)\r\n        {\r\n            renderingProgress = (Time.time - renderingStartTime) / 1f; // 假设渲染需要1秒\r\n            if (renderingProgress > 1f) renderingProgress = 1f;\r\n        }\r\n        else\r\n        {\r\n            renderingProgress = 0f;\r\n        }\r\n    }\r\n\r\n    private void UpdateRenderingStatistics()\r\n    {\r\n        // 更新着色器统计\r\n        var shaders = Resources.FindObjectsOfTypeAll<Shader>();\r\n        totalShaders = shaders.Length;\r\n        \r\n        // 更新材质统计\r\n        var materials = Resources.FindObjectsOfTypeAll<Material>();\r\n        totalMaterials = materials.Length;\r\n        \r\n        // 更新光照统计\r\n        var lights = FindObjectsOfType<Light>();\r\n        totalLights = lights.Length;\r\n        \r\n        // 更新渲染器统计\r\n        var renderers = FindObjectsOfType<Renderer>();\r\n        totalRenderers = renderers.Length;\r\n        \r\n        // 更新相机统计\r\n        var cameras = FindObjectsOfType<Camera>();\r\n        totalCameras = cameras.Length;\r\n        \r\n        // 更新后处理器统计\r\n        var postProcessors = FindObjectsOfType<MonoBehaviour>();\r\n        totalPostProcessors = 0;\r\n        foreach (var processor in postProcessors)\r\n        {\r\n            if (processor.GetType().Name.Contains(\"PostProcess\"))\r\n            {\r\n                totalPostProcessors++;\r\n            }\r\n        }\r\n    }\r\n\r\n    private void UpdatePerformanceMonitoring()\r\n    {\r\n        if (enablePerformanceMonitoring)\r\n        {\r\n            float currentTime = Time.time;\r\n            float frameTime = currentTime - frameStartTime;\r\n            \r\n            if (frameCount > 0)\r\n            {\r\n                frameTimeHistory[frameTimeIndex] = frameTime;\r\n                frameTimeIndex = (frameTimeIndex + 1) % 100;\r\n                \r\n                frameTimeSum += frameTime;\r\n                totalFrames++;\r\n                \r\n                if (frameTime > frameTimeMax)\r\n                {\r\n                    frameTimeMax = frameTime;\r\n                }\r\n                \r\n                if (frameTime < frameTimeMin)\r\n                {\r\n                    frameTimeMin = frameTime;\r\n                }\r\n                \r\n                averageFrameTime = frameTimeSum / totalFrames;\r\n                currentFrameRate = 1f / averageFrameTime;\r\n                \r\n                // 检查丢帧\r\n                float targetFrameTime = 1f / targetFrameRate;\r\n                if (frameTime > targetFrameTime * 1.1f) // 超过目标帧时间的10%\r\n                {\r\n                    droppedFrames++;\r\n                    totalDroppedFrames++;\r\n                }\r\n                \r\n                // 计算帧率方差\r\n                float varianceSum = 0f;\r\n                for (int i = 0; i < 100; i++)\r\n                {\r\n                    varianceSum += Mathf.Pow(frameTimeHistory[i] - averageFrameTime, 2);\r\n                }\r\n                frameRateVariance = varianceSum / 100f;\r\n            }\r\n            \r\n            frameStartTime = currentTime;\r\n            frameCount++;\r\n        }\r\n    }\r\n\r\n    private void UpdateQualityManagement()\r\n    {\r\n        if (currentQualityLevel != targetQualityLevel)\r\n        {\r\n            SetQualityLevel(targetQualityLevel);\r\n        }\r\n    }\r\n\r\n    private void CheckAutoReport()\r\n    {\r\n        if (Time.time - lastReportTime > reportInterval)\r\n        {\r\n            GenerateRenderingReport();\r\n            lastReportTime = Time.time;\r\n        }\r\n    }\r\n\r\n    private void OnPreRender(Camera camera)\r\n    {\r\n        if (enableRenderingDebugging)\r\n        {\r\n            ApplyRenderingDebugModes();\r\n        }\r\n    }\r\n\r\n    private void OnPostRender(Camera camera)\r\n    {\r\n        if (enableRenderingDebugging)\r\n        {\r\n            DisableRenderingDebugModes();\r\n        }\r\n    }\r\n\r\n    private void ApplyRenderingDebugModes()\r\n    {\r\n        if (enableWireframeMode)\r\n        {\r\n            GL.wireframe = true;\r\n        }\r\n        \r\n        if (enableBoundingBoxMode)\r\n        {\r\n            // 绘制边界框\r\n            DrawBoundingBoxes();\r\n        }\r\n        \r\n        if (enableNormalsMode)\r\n        {\r\n            // 绘制法线\r\n            DrawNormals();\r\n        }\r\n        \r\n        if (enableUVMode)\r\n        {\r\n            // 显示UV坐标\r\n            ShowUVCoordinates();\r\n        }\r\n    }\r\n\r\n    private void DisableRenderingDebugModes()\r\n    {\r\n        GL.wireframe = false;\r\n    }\r\n\r\n    private void DrawBoundingBoxes()\r\n    {\r\n        var renderers = FindObjectsOfType<Renderer>();\r\n        foreach (var renderer in renderers)\r\n        {\r\n            Bounds bounds = renderer.bounds;\r\n            Vector3 center = bounds.center;\r\n            Vector3 size = bounds.size;\r\n            \r\n            // 绘制边界框\r\n            Debug.DrawLine(center + new Vector3(-size.x/2, -size.y/2, -size.z/2), \r\n                          center + new Vector3(size.x/2, -size.y/2, -size.z/2), Color.red);\r\n            Debug.DrawLine(center + new Vector3(-size.x/2, -size.y/2, -size.z/2), \r\n                          center + new Vector3(-size.x/2, size.y/2, -size.z/2), Color.green);\r\n            Debug.DrawLine(center + new Vector3(-size.x/2, -size.y/2, -size.z/2), \r\n                          center + new Vector3(-size.x/2, -size.y/2, size.z/2), Color.blue);\r\n        }\r\n    }\r\n\r\n    private void DrawNormals()\r\n    {\r\n        var meshFilters = FindObjectsOfType<MeshFilter>();\r\n        foreach (var meshFilter in meshFilters)\r\n        {\r\n            Mesh mesh = meshFilter.sharedMesh;\r\n            if (mesh != null)\r\n            {\r\n                Vector3[] vertices = mesh.vertices;\r\n                Vector3[] normals = mesh.normals;\r\n                \r\n                for (int i = 0; i < vertices.Length; i++)\r\n                {\r\n                    Vector3 worldPos = meshFilter.transform.TransformPoint(vertices[i]);\r\n                    Vector3 worldNormal = meshFilter.transform.TransformDirection(normals[i]);\r\n                    \r\n                    Debug.DrawRay(worldPos, worldNormal * 0.1f, Color.yellow);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    private void ShowUVCoordinates()\r\n    {\r\n        // 这里可以实现UV坐标的可视化\r\n        // 由于需要特殊的着色器，这里只是占位符\r\n        Debug.Log(\"UV坐标可视化功能需要特殊着色器支持\");\r\n    }\r\n\r\n    public void CompileShaders()\r\n    {\r\n        if (isCompiling)\r\n        {\r\n            Debug.LogWarning(\"着色器正在编译中，请等待完成\");\r\n            return;\r\n        }\r\n        \r\n        isCompiling = true;\r\n        renderingStartTime = Time.time;\r\n        renderingProgress = 0f;\r\n        renderingMessage = \"正在编译着色器...\";\r\n        \r\n        try\r\n        {\r\n            // 强制重新编译所有着色器\r\n            Shader.WarmupAllShaders();\r\n            \r\n            float compileTime = Time.time - renderingStartTime;\r\n            isCompiling = false;\r\n            renderingProgress = 1f;\r\n            renderingMessage = \"着色器编译完成\";\r\n            \r\n            if (enableRenderingHistory)\r\n            {\r\n                AddRenderingHistoryEntry(\"CompileShaders\", \"所有着色器\", compileTime);\r\n            }\r\n            \r\n            Debug.Log($\"着色器编译完成，耗时: {compileTime:F3}秒\");\r\n        }\r\n        catch (System.Exception e)\r\n        {\r\n            isCompiling = false;\r\n            renderingProgress = 0f;\r\n            renderingMessage = $\"着色器编译失败: {e.Message}\";\r\n            Debug.LogError($\"着色器编译过程中发生错误: {e}\");\r\n        }\r\n    }\r\n\r\n    public void OptimizeMaterials()\r\n    {\r\n        if (isOptimizing)\r\n        {\r\n            Debug.LogWarning(\"材质正在优化中，请等待完成\");\r\n            return;\r\n        }\r\n        \r\n        isOptimizing = true;\r\n        renderingStartTime = Time.time;\r\n        renderingProgress = 0f;\r\n        renderingMessage = \"正在优化材质...\";\r\n        \r\n        try\r\n        {\r\n            var materials = Resources.FindObjectsOfTypeAll<Material>();\r\n            int optimizedCount = 0;\r\n            \r\n            foreach (var material in materials)\r\n            {\r\n                if (material != null)\r\n                {\r\n                    // 优化材质设置\r\n                    OptimizeMaterial(material);\r\n                    optimizedCount++;\r\n                }\r\n            }\r\n            \r\n            float optimizeTime = Time.time - renderingStartTime;\r\n            isOptimizing = false;\r\n            renderingProgress = 1f;\r\n            renderingMessage = $\"材质优化完成，共优化 {optimizedCount} 个材质\";\r\n            \r\n            if (enableRenderingHistory)\r\n            {\r\n                AddRenderingHistoryEntry(\"OptimizeMaterials\", $\"{optimizedCount} 个材质\", optimizeTime);\r\n            }\r\n            \r\n            Debug.Log($\"材质优化完成，共优化 {optimizedCount} 个材质，耗时: {optimizeTime:F3}秒\");\r\n        }\r\n        catch (System.Exception e)\r\n        {\r\n            isOptimizing = false;\r\n            renderingProgress = 0f;\r\n            renderingMessage = $\"材质优化失败: {e.Message}\";\r\n            Debug.LogError($\"材质优化过程中发生错误: {e}\");\r\n        }\r\n    }\r\n\r\n    private void OptimizeMaterial(Material material)\r\n    {\r\n        // 优化材质设置\r\n        if (material.HasProperty(\"_MainTex\"))\r\n        {\r\n            Texture mainTex = material.GetTexture(\"_MainTex\");\r\n            if (mainTex != null)\r\n            {\r\n                // 设置纹理压缩\r\n                string texturePath = AssetDatabase.GetAssetPath(mainTex);\r\n                if (!string.IsNullOrEmpty(texturePath))\r\n                {\r\n                    TextureImporter importer = AssetImporter.GetAtPath(texturePath) as TextureImporter;\r\n                    if (importer != null)\r\n                    {\r\n                        importer.textureCompression = TextureImporterCompression.Compressed;\r\n                        importer.SaveAndReimport();\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        \r\n        // 优化着色器变体\r\n        if (material.shader != null)\r\n        {\r\n            // 这里可以添加更多优化逻辑\r\n        }\r\n    }\r\n\r\n    public void ProfileRendering()\r\n    {\r\n        if (isProfiling)\r\n        {\r\n            Debug.LogWarning(\"渲染正在分析中，请等待完成\");\r\n            return;\r\n        }\r\n        \r\n        isProfiling = true;\r\n        renderingStartTime = Time.time;\r\n        renderingProgress = 0f;\r\n        renderingMessage = \"正在分析渲染性能...\";\r\n        \r\n        try\r\n        {\r\n            // 开始性能分析\r\n            Profiler.BeginSample(\"Rendering Profile\");\r\n            \r\n            // 模拟分析过程\r\n            System.Threading.Thread.Sleep(1000);\r\n            \r\n            Profiler.EndSample();\r\n            \r\n            float profileTime = Time.time - renderingStartTime;\r\n            isProfiling = false;\r\n            renderingProgress = 1f;\r\n            renderingMessage = \"渲染性能分析完成\";\r\n            \r\n            if (enableRenderingHistory)\r\n            {\r\n                AddRenderingHistoryEntry(\"ProfileRendering\", \"渲染性能\", profileTime);\r\n            }\r\n            \r\n            Debug.Log($\"渲染性能分析完成，耗时: {profileTime:F3}秒\");\r\n        }\r\n        catch (System.Exception e)\r\n        {\r\n            isProfiling = false;\r\n            renderingProgress = 0f;\r\n            renderingMessage = $\"渲染性能分析失败: {e.Message}\";\r\n            Debug.LogError($\"渲染性能分析过程中发生错误: {e}\");\r\n        }\r\n    }\r\n\r\n    public void SetQualityLevel(QualityLevel level)\r\n    {\r\n        if (currentQualityLevel != level)\r\n        {\r\n            QualitySettings.SetQualityLevel((int)level, true);\r\n            currentQualityLevel = level;\r\n            \r\n            Debug.Log($\"质量等级已设置为: {level}\");\r\n        }\r\n    }\r\n\r\n    public void ToggleWireframeMode()\r\n    {\r\n        enableWireframeMode = !enableWireframeMode;\r\n        Debug.Log($\"线框模式: {(enableWireframeMode ? \"开启\" : \"关闭\")}\");\r\n    }\r\n\r\n    public void ToggleBoundingBoxMode()\r\n    {\r\n        enableBoundingBoxMode = !enableBoundingBoxMode;\r\n        Debug.Log($\"边界框模式: {(enableBoundingBoxMode ? \"开启\" : \"关闭\")}\");\r\n    }\r\n\r\n    public void ToggleNormalsMode()\r\n    {\r\n        enableNormalsMode = !enableNormalsMode;\r\n        Debug.Log($\"法线模式: {(enableNormalsMode ? \"开启\" : \"关闭\")}\");\r\n    }\r\n\r\n    public void GenerateRenderingReport()\r\n    {\r\n        currentRenderingReport = new RenderingReport\r\n        {\r\n            timestamp = System.DateTime.Now.ToString(),\r\n            totalShaders = totalShaders,\r\n            totalMaterials = totalMaterials,\r\n            totalLights = totalLights,\r\n            totalRenderers = totalRenderers,\r\n            totalCameras = totalCameras,\r\n            totalPostProcessors = totalPostProcessors,\r\n            averageFrameTime = averageFrameTime,\r\n            maxFrameTime = maxFrameTime,\r\n            minFrameTime = minFrameTime,\r\n            currentFrameRate = currentFrameRate,\r\n            frameRateVariance = frameRateVariance,\r\n            droppedFrames = droppedFrames,\r\n            totalDroppedFrames = totalDroppedFrames,\r\n            currentQualityLevel = currentQualityLevel.ToString(),\r\n            renderingStatus = renderingStatus.ToString()\r\n        };\r\n        \r\n        Debug.Log(\"=== 渲染系统报告 ===\");\r\n        Debug.Log($\"渲染系统状态: {renderingStatus}\");\r\n        Debug.Log($\"总着色器数: {totalShaders}\");\r\n        Debug.Log($\"总材质数: {totalMaterials}\");\r\n        Debug.Log($\"总光照数: {totalLights}\");\r\n        Debug.Log($\"总渲染器数: {totalRenderers}\");\r\n        Debug.Log($\"总相机数: {totalCameras}\");\r\n        Debug.Log($\"总后处理器数: {totalPostProcessors}\");\r\n        Debug.Log($\"平均帧时间: {averageFrameTime:F3}秒\");\r\n        Debug.Log($\"最大帧时间: {maxFrameTime:F3}秒\");\r\n        Debug.Log($\"最小帧时间: {minFrameTime:F3}秒\");\r\n        Debug.Log($\"当前帧率: {currentFrameRate:F1} FPS\");\r\n        Debug.Log($\"帧率方差: {frameRateVariance:F6}\");\r\n        Debug.Log($\"丢帧数: {droppedFrames}\");\r\n        Debug.Log($\"总丢帧数: {totalDroppedFrames}\");\r\n        Debug.Log($\"当前质量等级: {currentQualityLevel}\");\r\n    }\r\n\r\n    private void AddRenderingHistoryEntry(string operation, string target, float time)\r\n    {\r\n        var entry = new RenderingHistoryEntry\r\n        {\r\n            timestamp = System.DateTime.Now.ToString(),\r\n            operation = operation,\r\n            target = target,\r\n            time = time,\r\n            success = !string.IsNullOrEmpty(renderingMessage) && !renderingMessage.Contains(\"失败\")\r\n        };\r\n        \r\n        renderingHistory[renderingHistoryIndex] = entry;\r\n        renderingHistoryIndex = (renderingHistoryIndex + 1) % renderingHistory.Length;\r\n    }\r\n\r\n    public void ClearRenderingHistory()\r\n    {\r\n        renderingHistory = new RenderingHistoryEntry[20];\r\n        renderingHistoryIndex = 0;\r\n        Debug.Log(\"渲染历史已清除\");\r\n    }\r\n\r\n    public void ResetRenderingStatistics()\r\n    {\r\n        totalShaders = 0;\r\n        totalMaterials = 0;\r\n        totalLights = 0;\r\n        totalRenderers = 0;\r\n        totalCameras = 0;\r\n        totalPostProcessors = 0;\r\n        averageFrameTime = 0f;\r\n        maxFrameTime = 0f;\r\n        minFrameTime = float.MaxValue;\r\n        totalFrames = 0;\r\n        totalFrameTime = 0f;\r\n        currentFrameRate = 0f;\r\n        frameRateVariance = 0f;\r\n        droppedFrames = 0;\r\n        totalDroppedFrames = 0;\r\n        \r\n        Debug.Log(\"渲染统计已重置\");\r\n    }\r\n\r\n    private void OnDestroy()\r\n    {\r\n        Camera.onPreRender -= OnPreRender;\r\n        Camera.onPostRender -= OnPostRender;\r\n        \r\n        Debug.Log(\"渲染回调已清理\");\r\n    }\r\n\r\n    private void OnGUI()\r\n    {\r\n        GUILayout.BeginArea(new Rect(10, 10, 400, 800));\r\n        GUILayout.Label(\"Rendering 渲染系统演示\", UnityEditor.EditorStyles.boldLabel);\r\n        \r\n        GUILayout.Space(10);\r\n        GUILayout.Label(\"渲染系统配置:\");\r\n        enableRenderingSystem = GUILayout.Toggle(enableRenderingSystem, \"启用渲染系统\");\r\n        enableShaderManagement = GUILayout.Toggle(enableShaderManagement, \"启用着色器管理\");\r\n        enableMaterialManagement = GUILayout.Toggle(enableMaterialManagement, \"启用材质管理\");\r\n        enableRenderPipelineManagement = GUILayout.Toggle(enableRenderPipelineManagement, \"启用渲染管线管理\");\r\n        enableLightingManagement = GUILayout.Toggle(enableLightingManagement, \"启用光照管理\");\r\n        enablePostProcessingManagement = GUILayout.Toggle(enablePostProcessingManagement, \"启用后处理管理\");\r\n        \r\n        GUILayout.Space(10);\r\n        GUILayout.Label(\"渲染状态:\");\r\n        GUILayout.Label($\"渲染状态: {renderingStatus}\");\r\n        GUILayout.Label($\"是否正在渲染: {isRendering}\");\r\n        GUILayout.Label($\"是否正在编译: {isCompiling}\");\r\n        GUILayout.Label($\"是否正在优化: {isOptimizing}\");\r\n        GUILayout.Label($\"是否正在分析: {isProfiling}\");\r\n        GUILayout.Label($\"渲染进度: {renderingProgress * 100:F1}%\");\r\n        GUILayout.Label($\"渲染消息: {renderingMessage}\");\r\n        \r\n        GUILayout.Space(10);\r\n        GUILayout.Label(\"渲染统计:\");\r\n        GUILayout.Label($\"总着色器数: {totalShaders}\");\r\n        GUILayout.Label($\"总材质数: {totalMaterials}\");\r\n        GUILayout.Label($\"总光照数: {totalLights}\");\r\n        GUILayout.Label($\"总渲染器数: {totalRenderers}\");\r\n        GUILayout.Label($\"总相机数: {totalCameras}\");\r\n        GUILayout.Label($\"总后处理器数: {totalPostProcessors}\");\r\n        \r\n        GUILayout.Space(10);\r\n        GUILayout.Label(\"性能监控:\");\r\n        GUILayout.Label($\"平均帧时间: {averageFrameTime:F3}秒\");\r\n        GUILayout.Label($\"最大帧时间: {maxFrameTime:F3}秒\");\r\n        GUILayout.Label($\"最小帧时间: {minFrameTime:F3}秒\");\r\n        GUILayout.Label($\"当前帧率: {currentFrameRate:F1} FPS\");\r\n        GUILayout.Label($\"帧率方差: {frameRateVariance:F6}\");\r\n        GUILayout.Label($\"丢帧数: {droppedFrames}\");\r\n        GUILayout.Label($\"总丢帧数: {totalDroppedFrames}\");\r\n        \r\n        GUILayout.Space(10);\r\n        \r\n        if (GUILayout.Button(\"编译着色器\"))\r\n        {\r\n            CompileShaders();\r\n        }\r\n        \r\n        if (GUILayout.Button(\"优化材质\"))\r\n        {\r\n            OptimizeMaterials();\r\n        }\r\n        \r\n        if (GUILayout.Button(\"分析渲染性能\"))\r\n        {\r\n            ProfileRendering();\r\n        }\r\n        \r\n        if (GUILayout.Button(\"生成渲染报告\"))\r\n        {\r\n            GenerateRenderingReport();\r\n        }\r\n        \r\n        if (GUILayout.Button(\"切换线框模式\"))\r\n        {\r\n            ToggleWireframeMode();\r\n        }\r\n        \r\n        if (GUILayout.Button(\"切换边界框模式\"))\r\n        {\r\n            ToggleBoundingBoxMode();\r\n        }\r\n        \r\n        if (GUILayout.Button(\"切换法线模式\"))\r\n        {\r\n            ToggleNormalsMode();\r\n        }\r\n        \r\n        if (GUILayout.Button(\"清除渲染历史\"))\r\n        {\r\n            ClearRenderingHistory();\r\n        }\r\n        \r\n        if (GUILayout.Button(\"重置渲染统计\"))\r\n        {\r\n            ResetRenderingStatistics();\r\n        }\r\n        \r\n        GUILayout.Space(10);\r\n        GUILayout.Label(\"渲染历史:\");\r\n        for (int i = 0; i < renderingHistory.Length; i++)\r\n        {\r\n            if (renderingHistory[i] != null && !string.IsNullOrEmpty(renderingHistory[i].timestamp))\r\n            {\r\n                var entry = renderingHistory[i];\r\n                string status = entry.success ? \"成功\" : \"失败\";\r\n                GUILayout.Label($\"{entry.timestamp} - {entry.operation} - {entry.target} - {status} - {entry.time:F3}s\");\r\n            }\r\n        }\r\n        \r\n        GUILayout.EndArea();\r\n    }\r\n}\r\n\r\npublic enum RenderingStatus\r\n{\r\n    Idle,\r\n    Rendering,\r\n    Compiling,\r\n    Optimizing,\r\n    Profiling,\r\n    Debugging,\r\n    Completed,\r\n    Failed\r\n}\r\n\r\npublic enum QualityLevel\r\n{\r\n    Low,\r\n    Medium,\r\n    High,\r\n    VeryHigh,\r\n    Ultra\r\n}\r\n\r\n[System.Serializable]\r\npublic class RenderingHistoryEntry\r\n{\r\n    public string timestamp;\r\n    public string operation;\r\n    public string target;\r\n    public float time;\r\n    public bool success;\r\n}\r\n\r\n[System.Serializable]\r\npublic class RenderingReport\r\n{\r\n    public string timestamp;\r\n    public int totalShaders;\r\n    public int totalMaterials;\r\n    public int totalLights;\r\n    public int totalRenderers;\r\n    public int totalCameras;\r\n    public int totalPostProcessors;\r\n    public float averageFrameTime;\r\n    public float maxFrameTime;\r\n    public float minFrameTime;\r\n    public float currentFrameRate;\r\n    public float frameRateVariance;\r\n    public int droppedFrames;\r\n    public int totalDroppedFrames;\r\n    public string currentQualityLevel;\r\n    public string renderingStatus;\r\n} "
        }
    ]
}