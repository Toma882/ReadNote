{
    "sourceFile": "Assets/UnityEditor/Chapter 5 GUISkin/README.md",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 8,
            "patches": [
                {
                    "date": 1746882817428,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1746882833507,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -371,66 +371,10 @@\n │           ├── 皮肤缓存机制\r\n │           ├── 纹理内存优化\r\n │           └── 减少绘制批次\r\n │   \r\n-└── 最佳实践\r\n-    ├── 样式组织和管理\r\n-    │   ├── 命名约定\r\n-    │   │   ├── 清晰描述性的样式名称\r\n-    │   │   ├── 样式分类前缀\r\n-    │   │   └── 状态命名规则\r\n-    │   ├── 样式层次结构\r\n-    │   │   ├── 基础样式和派生样式\r\n-    │   │   ├── 组件样式组织\r\n-    │   │   └── 主题变体管理\r\n-    │   └── 版本控制策略\r\n-    │       ├── 样式资源的版本管理\r\n-    │       ├── 样式更新记录\r\n-    │       └── 向后兼容性维护\r\n-    │\r\n-    ├── 性能和资源管理\r\n-    │   ├── 纹理优化\r\n-    │   │   ├── 纹理分辨率控制\r\n-    │   │   ├── 纹理图集使用\r\n-    │   │   └── 纹理压缩设置\r\n-    │   ├── 样式实例化\r\n-    │   │   ├── 减少重复样式创建\r\n-    │   │   ├── 样式对象池\r\n-    │   │   └── 延迟加载策略\r\n-    │   └── 内存管理\r\n-    │       ├── 及时释放不需要的资源\r\n-    │       ├── 避免样式泄漏\r\n-    │       └── 运行时内存占用分析\r\n-    │\r\n-    ├── 用户体验设计\r\n-    │   ├── 视觉一致性\r\n-    │   │   ├── 控件外观统一\r\n-    │   │   ├── 色彩和字体协调\r\n-    │   │   └── 适应编辑器主题\r\n-    │   ├── 响应式设计\r\n-    │   │   ├── 适应不同窗口大小\r\n-    │   │   ├── 高DPI支持\r\n-    │   │   └── 缩放行为控制\r\n-    │   └── 可访问性\r\n-    │       ├── 适当的对比度\r\n-    │       ├── 清晰的视觉反馈\r\n-    │       └── 可调整的文本大小\r\n-    │\r\n-    └── 调试和测试\r\n-        ├── 样式问题排查\r\n-        │   ├── 常见问题及解决方案\r\n-        │   ├── 样式渲染调试\r\n-        │   └── 属性值验证\r\n-        ├── 跨平台测试\r\n-        │   ├── 在不同操作系统上的表现\r\n-        │   ├── 不同Unity版本兼容性\r\n-        │   └── 编辑器和运行时差异\r\n-        └── 性能分析\r\n-            ├── GUI绘制性能分析\r\n-            ├── 内存使用监控\r\n-            └── 资源使用优化\r\n-```\r\n \r\n+\r\n ## 重要的类和接口\r\n \r\n ### GUISkin相关类和接口\r\n \r\n"
                },
                {
                    "date": 1746882883437,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -329,36 +329,8 @@\n │   │       ├── 编辑器扩展\r\n │   │       ├── 游戏内GUI\r\n │   │       └── 运行时界面\r\n │   │\r\n-│   ├── 样式调试和可视化\r\n-│   │   ├── 查看样式信息\r\n-│   │   │   ├── 查看样式属性\r\n-│   │   │   ├── 查看样式状态\r\n-│   │   │   └── 查看样式效果\r\n-│   │   ├── 样式比较\r\n-│   │   │   ├── 比较不同样式差异\r\n-│   │   │   ├── 查看状态之间的差异\r\n-│   │   │   └── 样式继承关系\r\n-│   │   └── 工作流改进\r\n-│   │       ├── 快速复制样式代码\r\n-│   │       ├── 样式调试工具\r\n-│   │       └── 实时预览和调整\r\n-│   │\r\n-│   ├── 编辑器样式扩展\r\n-│   │   ├── 自定义控件样式\r\n-│   │   │   ├── 创建全新控件样式\r\n-│   │   │   ├── 扩展现有控件样式\r\n-│   │   │   └── 适配不同编辑器主题\r\n-│   │   ├── 一致性设计\r\n-│   │   │   ├── 与Unity编辑器风格一致\r\n-│   │   │   ├── 符合UI/UX设计原则\r\n-│   │   │   └── 适应不同分辨率\r\n-│   │   └── 样式共享和复用\r\n-│   │       ├── 在项目间共享样式\r\n-│   │       ├── 创建样式库\r\n-│   │       └── 版本控制集成\r\n-│   │\r\n │   └── 运行时皮肤切换\r\n │       ├── 皮肤加载机制\r\n │       │   ├── 资源加载和卸载\r\n │       │   ├── 内存管理\r\n"
                },
                {
                    "date": 1746884030240,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,425 +0,0 @@\n-# Unity编辑器扩展 - Chapter 5: GUISkin\r\n-\r\n-## 概述\r\n-\r\n-本章专注于Unity的皮肤系统(GUISkin)的开发和应用，展示了如何创建和自定义编辑器界面的视觉样式。通过GUISkin，可以统一管理GUI元素的外观，提供一致的用户体验，并使界面更加美观和专业。\r\n-\r\n-## 核心特征\r\n-\r\n-### GUISkin的基本特征\r\n-\r\n-| 特征 | 描述 |\r\n-|------|------|\r\n-| **样式统一** | GUISkin允许统一定义和管理所有GUI元素的视觉样式 |\r\n-| **自定义外观** | 可以自定义按钮、标签、文本框等控件的外观 |\r\n-| **资源管理** | 作为资源存储在项目中，可以在不同场景和项目间共享 |\r\n-| **运行时切换** | 可以在运行时动态切换不同的皮肤 |\r\n-| **可扩展** | 支持自定义样式添加到皮肤中 |\r\n-| **编辑器集成** | 可以在编辑器中使用，提供一致的开发体验 |\r\n-\r\n-### GUISkin的重要组件\r\n-\r\n-| 组件 | 描述 | 用途 |\r\n-|------|---------|------|\r\n-| **GUIStyle** | 定义单个控件的样式 | 控制字体、颜色、背景等属性 |\r\n-| **CustomStyles** | 自定义样式集合 | 存储额外的自定义样式 |\r\n-| **Font** | 字体资源 | 定义文本显示的字体 |\r\n-| **Settings** | 全局设置 | 控制全局参数如间距、双击行为等 |\r\n-| **Box/Button/Label等** | 预定义控件样式 | 为特定类型的控件提供默认样式 |\r\n-\r\n-### EditorGUIUtility\r\n-\r\n-EditorGUIUtility是Unity编辑器中用于处理GUI相关功能的实用工具类。它提供了许多在编辑器扩展中常用的方法和属性。\r\n-\r\n-#### 核心特性\r\n-\r\n-- **图标访问**：提供对Unity内置图标的访问。\r\n-- **缩放控制**：处理界面元素的缩放和像素对齐。\r\n-- **状态管理**：管理编辑器GUI的各种状态。\r\n-- **全局GUI设置**：提供对全局GUI设置的访问。\r\n-\r\n-#### 常用方法和属性\r\n-\r\n-| 方法/属性 | 描述 |\r\n-|-----------|------|\r\n-| **IconContent** | 获取带有图标的GUIContent |\r\n-| **GetControlID** | 获取GUI控件的唯一ID |\r\n-| **FindTexture** | 通过名称查找纹理 |\r\n-| **singleLineHeight** | 获取标准的单行高度 |\r\n-| **standardVerticalSpacing** | 获取标准的垂直间距 |\r\n-| **hierarchyMode** | 获取或设置当前是否处于层次结构模式 |\r\n-| **GetBuiltinSkin** | 获取内置的皮肤 |\r\n-\r\n-### EditorStyles\r\n-\r\n-EditorStyles提供了对Unity编辑器中预定义样式的访问，让开发者可以在自定义编辑器窗口中使用与Unity内置编辑器相同的样式。\r\n-\r\n-#### 核心特性\r\n-\r\n-- **预定义样式**：提供对Unity编辑器中所有预定义样式的访问。\r\n-- **一致性**：确保自定义编辑器与Unity内置编辑器有一致的外观。\r\n-- **样式复用**：可以基于预定义样式创建自定义样式。\r\n-\r\n-#### 常用样式\r\n-\r\n-| 样式 | 描述 |\r\n-|------|------|\r\n-| **boldLabel** | 粗体标签样式 |\r\n-| **foldout** | 折叠控件样式 |\r\n-| **helpBox** | 帮助框样式 |\r\n-| **miniButton** | 迷你按钮样式 |\r\n-| **textField** | 文本输入框样式 |\r\n-| **toolbarButton** | 工具栏按钮样式 |\r\n-| **whiteLabel** | 白色标签样式 |\r\n-\r\n-## UML类图\r\n-\r\n-```\r\n-+----------------------------+        +--------------------------------+\r\n-|          UnityEngine       |        |          UnityEditor           |\r\n-+----------------------------+        +--------------------------------+\r\n-| + GUI                      |        | + EditorGUI                    |\r\n-| + GUILayout                |        | + EditorGUILayout              |\r\n-| + GUIContent               |        | + EditorGUIUtility             |\r\n-| + GUIStyle                 |        | + EditorStyles                 |\r\n-| + GUISkin                  |        | + EditorWindow                 |\r\n-+----------------------------+        +--------------------------------+\r\n-\r\n-+----------------------------+        +--------------------------------+\r\n-|         GUISkin            |        |            GUIStyle            |\r\n-+----------------------------+        +--------------------------------+\r\n-| + box: GUIStyle            |        | + name                         |\r\n-| + button: GUIStyle         |        | + normal/hover/active/focused  |\r\n-| + label: GUIStyle          |        | + alignment                    |\r\n-| + textField: GUIStyle      |        | + fontSize/fontStyle           |\r\n-| + window: GUIStyle         |        | + padding/margin/border        |\r\n-| + customStyles: GUIStyle[] |        | + fixedWidth/fixedHeight       |\r\n-+----------------------------+        | + stretchWidth/stretchHeight   |\r\n-| + FindStyle()              |        | + wordWrap                     |\r\n-+----------------------------+        +--------------------------------+\r\n-\r\n-+----------------------------+\r\n-|     GUIPreviewWindow       |\r\n-+----------------------------+\r\n-| - skin: GUISkin            |\r\n-| - scrollPosition           |\r\n-| - selectedStyle            |\r\n-+----------------------------+\r\n-| + OnGUI()                  |\r\n-| - DrawStyleList()          |\r\n-| - DrawPreview()            |\r\n-| - DrawStyleProperties()    |\r\n-+----------------------------+\r\n-\r\n-+----------------------------+        +--------------------------------+\r\n-|   EditorStylesPreviewWindow|        |  GUIStyleStatePreviewWindow    |\r\n-+----------------------------+        +--------------------------------+\r\n-| - scrollPosition           |        | - state: GUIStyleState         |\r\n-| - selectedStyle            |        | - previewContent               |\r\n-+----------------------------+        +--------------------------------+\r\n-| + OnGUI()                  |        | + OnGUI()                      |\r\n-| - DrawStyleList()          |        | - DrawPreview()                |\r\n-| - DrawPreview()            |        | - DrawStateProperties()        |\r\n-+----------------------------+        +--------------------------------+\r\n-```\r\n-\r\n-## 思维导图\r\n-\r\n-```\r\n-Unity GUISkin系统\r\n-├── 基础概念\r\n-│   ├── GUISkin\r\n-│   │   ├── 定义\r\n-│   │   │   ├── GUI元素外观的集合\r\n-│   │   │   ├── ScriptableObject资源\r\n-│   │   │   └── 包含多种控件样式定义\r\n-│   │   ├── 组成部分\r\n-│   │   │   ├── 预定义控件样式\r\n-│   │   │   │   ├── box - 盒子样式\r\n-│   │   │   │   ├── button - 按钮样式\r\n-│   │   │   │   ├── label - 标签样式\r\n-│   │   │   │   ├── textField - 文本框样式\r\n-│   │   │   │   ├── textArea - 文本区域样式\r\n-│   │   │   │   ├── window - 窗口样式\r\n-│   │   │   │   ├── horizontalSlider - 水平滑块样式\r\n-│   │   │   │   ├── horizontalSliderThumb - 水平滑块拇指样式\r\n-│   │   │   │   ├── verticalSlider - 垂直滑块样式\r\n-│   │   │   │   └── verticalSliderThumb - 垂直滑块拇指样式\r\n-│   │   │   ├── 设置\r\n-│   │   │   │   ├── font - 全局字体\r\n-│   │   │   │   ├── settings - 全局设置\r\n-│   │   │   │   └── customStyles - 自定义样式数组\r\n-│   │   │   └── 方法\r\n-│   │   │       ├── FindStyle() - 查找指定名称的样式\r\n-│   │   │       └── GetStyle() - 获取指定名称的样式\r\n-│   │   └── 使用方式\r\n-│   │       ├── 创建GUISkin资源\r\n-│   │       ├── 在GUI.skin中设置激活的皮肤\r\n-│   │       └── 应用于GUI/GUILayout控件\r\n-│   │\r\n-│   ├── GUIStyle\r\n-│   │   ├── 定义\r\n-│   │   │   ├── 单个控件样式的定义\r\n-│   │   │   └── 包含控件所有视觉属性\r\n-│   │   ├── 状态\r\n-│   │   │   ├── normal - 正常状态\r\n-│   │   │   ├── hover - 悬停状态\r\n-│   │   │   ├── active - 激活状态\r\n-│   │   │   ├── focused - 焦点状态\r\n-│   │   │   ├── onNormal - 开启状态下的正常状态\r\n-│   │   │   ├── onHover - 开启状态下的悬停状态\r\n-│   │   │   ├── onActive - 开启状态下的激活状态\r\n-│   │   │   └── onFocused - 开启状态下的焦点状态\r\n-│   │   ├── 外观属性\r\n-│   │   │   ├── fontSize - 字体大小\r\n-│   │   │   ├── fontStyle - 字体样式\r\n-│   │   │   ├── alignment - 对齐方式\r\n-│   │   │   ├── wordWrap - 文字换行\r\n-│   │   │   ├── clipping - 裁剪方式\r\n-│   │   │   ├── imagePosition - 图片位置\r\n-│   │   │   └── contentOffset - 内容偏移\r\n-│   │   ├── 布局属性\r\n-│   │   │   ├── fixedWidth - 固定宽度\r\n-│   │   │   ├── fixedHeight - 固定高度\r\n-│   │   │   ├── stretchWidth - 拉伸宽度\r\n-│   │   │   ├── stretchHeight - 拉伸高度\r\n-│   │   │   ├── margin - 外边距\r\n-│   │   │   ├── padding - 内边距\r\n-│   │   │   ├── overflow - 溢出\r\n-│   │   │   └── border - 边框\r\n-│   │   └── 方法\r\n-│   │       ├── CalcSize() - 计算内容尺寸\r\n-│   │       ├── Draw() - 绘制控件\r\n-│   │       └── GetStyleStateForCurrentEvent() - 获取当前事件的状态\r\n-│   │\r\n-│   ├── GUIStyleState\r\n-│   │   ├── 定义\r\n-│   │   │   ├── 控件在特定状态下的外观\r\n-│   │   │   └── 包含背景和文本颜色\r\n-│   │   ├── 属性\r\n-│   │   │   ├── background - 背景纹理\r\n-│   │   │   ├── textColor - 文本颜色\r\n-│   │   │   ├── scaledBackgrounds - 缩放背景纹理数组\r\n-│   │   │   └── 其他属性\r\n-│   │   └── 应用\r\n-│   │       ├── 设置不同状态下的背景\r\n-│   │       └── 设置不同状态下的文本颜色\r\n-│   │\r\n-│   └── EditorStyles\r\n-│       ├── 定义\r\n-│       │   ├── Unity编辑器内置样式的集合\r\n-│       │   └── 提供对编辑器常用样式的访问\r\n-│       ├── 常用样式\r\n-│       │   ├── boldLabel - 粗体标签\r\n-│       │   ├── foldout - 折叠控件\r\n-│       │   ├── helpBox - 帮助框\r\n-│       │   ├── label - 标准标签\r\n-│       │   ├── miniButton - 迷你按钮\r\n-│       │   ├── popup - 弹出菜单\r\n-│       │   ├── textField - 文本框\r\n-│       │   ├── toolbarButton - 工具栏按钮\r\n-│       │   └── whiteLabel - 白色标签\r\n-│       └── 使用方式\r\n-│           ├── 直接访问静态属性\r\n-│           ├── 复制样式进行自定义\r\n-│           └── 在自定义编辑器中应用\r\n-│   \r\n-├── 工具和实用类\r\n-│   ├── EditorGUIUtility\r\n-│   │   ├── 图标和纹理\r\n-│   │   │   ├── IconContent() - 获取带图标的GUIContent\r\n-│   │   │   ├── FindTexture() - 查找纹理\r\n-│   │   │   └── LoadRequired() - 加载必需资源\r\n-│   │   ├── 度量和布局\r\n-│   │   │   ├── singleLineHeight - 单行高度\r\n-│   │   │   ├── standardVerticalSpacing - 标准垂直间距\r\n-│   │   │   └── fieldWidth - 字段宽度\r\n-│   │   ├── 状态和ID\r\n-│   │   │   ├── GetControlID() - 获取控件ID\r\n-│   │   │   ├── hotControl - 热点控件ID\r\n-│   │   │   └── keyboardControl - 键盘焦点控件ID\r\n-│   │   └── 杂项\r\n-│   │       ├── systemCopyBuffer - 系统剪贴板\r\n-│   │       ├── isProSkin - 是否使用专业皮肤\r\n-│   │       └── GetBuiltinSkin() - 获取内置皮肤\r\n-│   │\r\n-│   ├── GUIUtility\r\n-│   │   ├── 坐标转换\r\n-│   │   │   ├── ScreenToGUIPoint() - 屏幕坐标转GUI坐标\r\n-│   │   │   └── GUIToScreenPoint() - GUI坐标转屏幕坐标\r\n-│   │   ├── 状态管理\r\n-│   │   │   ├── hotControl - 热点控件ID\r\n-│   │   │   ├── keyboardControl - 键盘焦点控件ID\r\n-│   │   │   └── ExitGUI() - 退出当前GUI处理\r\n-│   │   └── 其他实用方法\r\n-│   │       ├── GetStateObject() - 获取状态对象\r\n-│   │       ├── GetControlID() - 获取控件ID\r\n-│   │       └── systemCopyBuffer - 系统剪贴板\r\n-│   │\r\n-│   └── GUIContent\r\n-│       ├── 定义\r\n-│       │   ├── 包含文本、图像和提示的内容容器\r\n-│       │   └── 用于向控件提供内容\r\n-│       ├── 属性\r\n-│       │   ├── text - 显示文本\r\n-│       │   ├── image - 显示图像\r\n-│       │   └── tooltip - 提示文本\r\n-│       └── 用法\r\n-│           ├── 创建带文本的内容\r\n-│           ├── 创建带图像的内容\r\n-│           └── 创建完整内容(文本+图像+提示)\r\n-│   \r\n-├── 示例应用\r\n-│   ├── GUIPreviewer\r\n-│   │   ├── 功能\r\n-│   │   │   ├── 浏览和编辑GUISkin\r\n-│   │   │   ├── 预览各种控件外观\r\n-│   │   │   ├── 修改样式属性\r\n-│   │   │   └── 实时查看效果\r\n-│   │   ├── 界面组成\r\n-│   │   │   ├── 样式列表区域\r\n-│   │   │   ├── 预览区域\r\n-│   │   │   └── 属性编辑区域\r\n-│   │   └── 实现技术\r\n-│   │       ├── EditorWindow基类\r\n-│   │       ├── SerializedObject操作\r\n-│   │       └── 拖放功能\r\n-│   │\r\n-│   ├── EditorStylesPreviewer\r\n-│   │   ├── 功能\r\n-│   │   │   ├── 浏览Unity内置编辑器样式\r\n-│   │   │   ├── 预览各种内置控件外观\r\n-│   │   │   ├── 查看样式属性\r\n-│   │   │   └── 复制样式到自定义皮肤\r\n-│   │   ├── 界面组成\r\n-│   │   │   ├── 样式列表区域\r\n-│   │   │   ├── 预览区域\r\n-│   │   │   └── 属性查看区域\r\n-│   │   └── 实现技术\r\n-│   │       ├── 反射获取EditorStyles属性\r\n-│   │       ├── 样式复制功能\r\n-│   │       └── 样式搜索过滤\r\n-│   │\r\n-│   └── GUIStyleStatePreview\r\n-│       ├── 功能\r\n-│       │   ├── 查看和编辑GUIStyleState\r\n-│       │   ├── 预览不同状态下的外观\r\n-│       │   ├── 修改背景和文本颜色\r\n-│       │   └── 应用于目标样式\r\n-│       ├── 界面组成\r\n-│       │   ├── 状态选择区域\r\n-│       │   ├── 预览区域\r\n-│       │   └── 属性编辑区域\r\n-│       └── 实现技术\r\n-│           ├── 背景纹理编辑\r\n-│           ├── 颜色选择器集成\r\n-│           └── 实时预览更新\r\n-│   \r\n-├── 实现技术\r\n-│   ├── GUISkin编辑和创建\r\n-│   │   ├── 皮肤资源管理\r\n-│   │   │   ├── 创建新GUISkin资源\r\n-│   │   │   ├── 保存和加载皮肤\r\n-│   │   │   └── 复制和合并皮肤\r\n-│   │   ├── 样式编辑\r\n-│   │   │   ├── 编辑预定义样式\r\n-│   │   │   ├── 添加自定义样式\r\n-│   │   │   └── 从EditorStyles复制样式\r\n-│   │   └── 适用范围\r\n-│   │       ├── 编辑器扩展\r\n-│   │       ├── 游戏内GUI\r\n-│   │       └── 运行时界面\r\n-│   │\r\n-│   └── 运行时皮肤切换\r\n-│       ├── 皮肤加载机制\r\n-│       │   ├── 资源加载和卸载\r\n-│       │   ├── 内存管理\r\n-│       │   └── 异步加载支持\r\n-│       ├── 动态皮肤切换\r\n-│       │   ├── 基于条件切换皮肤\r\n-│       │   ├── 平滑过渡效果\r\n-│       │   └── 用户自定义皮肤\r\n-│       └── 性能优化\r\n-│           ├── 皮肤缓存机制\r\n-│           ├── 纹理内存优化\r\n-│           └── 减少绘制批次\r\n-│   \r\n-\r\n-\r\n-## 重要的类和接口\r\n-\r\n-### GUISkin相关类和接口\r\n-\r\n-| 类/接口名称 | 类型 | 描述 | 重要方法/属性 |\r\n-|------------|-----|------|--------------|\r\n-| `GUISkin` | 类 | GUI皮肤定义 | `box`, `button`, `label`, `customStyles`, `FindStyle()` |\r\n-| `GUIStyle` | 类 | 单个控件的样式定义 | `normal`, `hover`, `fontSize`, `alignment`, `padding`, `margin` |\r\n-| `GUIStyleState` | 类 | 控件在特定状态下的外观 | `background`, `textColor`, `scaledBackgrounds` |\r\n-\r\n-### 预览工具类\r\n-\r\n-| 类/接口名称 | 类型 | 描述 | 重要方法/属性 |\r\n-|------------|-----|------|--------------|\r\n-| `GUIPreviewWindow` | 类 | GUISkin预览窗口 | `OnGUI()`, `DrawStyleList()`, `DrawPreview()` |\r\n-| `EditorStylesPreviewWindow` | 类 | EditorStyles预览窗口 | `OnGUI()`, `DrawStyleList()`, `DrawPreview()` |\r\n-| `GUIStyleStatePreviewWindow` | 类 | GUIStyleState预览窗口 | `OnGUI()`, `DrawPreview()`, `DrawStateProperties()` |\r\n-\r\n-### 编辑器工具类\r\n-\r\n-| 类/接口名称 | 类型 | 描述 | 重要方法/属性 |\r\n-|------------|-----|------|--------------|\r\n-| `EditorGUIUtility` | 类 | 编辑器GUI实用工具 | `IconContent()`, `singleLineHeight`, `FindTexture()` |\r\n-| `EditorStyles` | 类 | 编辑器预定义样式 | `boldLabel`, `foldout`, `helpBox`, `miniButton` |\r\n-\r\n-## 实现细节与设计模式\r\n-\r\n-1. **单例模式**\r\n-   - 预览窗口类通常使用单例模式，确保只有一个窗口实例\r\n-   - 通过`GetWindow<T>()`方法获取或创建窗口实例\r\n-\r\n-2. **观察者模式**\r\n-   - 样式更改时通知预览区域更新\r\n-   - 使用事件系统监听样式属性变化\r\n-\r\n-3. **工厂模式**\r\n-   - 用于创建不同类型的样式和预览控件\r\n-   - 根据样式类型生成相应的编辑界面\r\n-\r\n-4. **命令模式**\r\n-   - 用于实现样式编辑的撤销和重做功能\r\n-   - 每次样式修改封装为命令对象\r\n-\r\n-5. **MVC架构**\r\n-   - 将样式数据(Model)、预览(View)和编辑逻辑(Controller)分离\r\n-   - 提高代码组织性和可维护性\r\n-\r\n-## 案例应用\r\n-\r\n-### 1. GUIPreviewer\r\n-GUIPreviewer是一个用于预览和编辑GUISkin的工具窗口，允许开发者查看和修改皮肤的各种样式。\r\n-\r\n-主要功能：\r\n-- 预览GUISkin中的所有样式\r\n-- 实时编辑样式属性\r\n-- 查看不同状态下的样式外观\r\n-- 在编辑器中应用修改后的样式\r\n-\r\n-### 2. EditorStylesPreviewer\r\n-EditorStylesPreviewer展示Unity编辑器内置的样式，帮助开发者了解和使用这些样式。\r\n-\r\n-主要功能：\r\n-- 浏览所有EditorStyles中的预定义样式\r\n-- 预览样式在不同状态下的外观\r\n-- 查看样式属性详情\r\n-- 复制样式到自定义皮肤\r\n-\r\n-### 3. 自定义编辑器主题\r\n-基于GUISkin系统创建完整的编辑器主题，统一编辑器扩展的外观。\r\n-\r\n-主要功能：\r\n-- 定义一套统一的控件样式\r\n-- 根据Unity编辑器主题自动适应明暗模式\r\n-- 提供多个预设主题供选择\r\n-- 允许用户自定义主题\r\n-\r\n-\r\n\\ No newline at end of file\n"
                },
                {
                    "date": 1746884690840,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,1 +1,1 @@\n-\n+ \n\\ No newline at end of file\n"
                },
                {
                    "date": 1746884908805,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,1 +1,192 @@\n- \n\\ No newline at end of file\n+# Chapter 5 GUISkin\r\n+\r\n+## 目录\r\n+- [简介](#简介)\r\n+- [GUISkin 特征](#guiskin-特征)\r\n+- [UML 图](#uml-图)\r\n+- [核心类和接口](#核心类和接口)\r\n+- [示例说明](#示例说明)\r\n+- [官方文档](#官方文档)\r\n+\r\n+## 简介\r\n+GUISkin 是 Unity 中用于自定义 GUI 元素外观的系统。它允许开发者创建统一风格的界面，管理各种 GUI 控件的视觉样式。本章介绍 GUISkin 系统的使用方法，并提供了三个实用工具：GUI 样式预览器、GUI 图标预览器和 Editor 样式预览器。\r\n+\r\n+## GUISkin 特征\r\n+\r\n+### GUISkin 系统特征\r\n+\r\n+```mermaid\r\n+mindmap\r\n+  root((GUISkin 系统))\r\n+    (视觉定制)\r\n+      [预定义样式]\r\n+      [自定义样式]\r\n+      [皮肤切换]\r\n+    (GUIStyle 管理)\r\n+      [Button]\r\n+      [Label]\r\n+      [TextField]\r\n+      [Box]\r\n+      [其他控件样式]\r\n+    (状态管理)\r\n+      [Normal]\r\n+      [Hover]\r\n+      [Active]\r\n+      [Focused]\r\n+      [Disabled]\r\n+    (资源管理)\r\n+      [字体设置]\r\n+      [纹理引用]\r\n+      [颜色配置]\r\n+    (编辑器集成)\r\n+      [运行时使用]\r\n+      [编辑器扩展]\r\n+```\r\n+\r\n+| 特征 | 描述 |\r\n+|------|------|\r\n+| 样式统一性 | 通过 GUISkin 可以为整个应用定义统一的视觉风格 |\r\n+| 动态切换 | 支持在运行时切换不同的皮肤 |\r\n+| 细粒度控制 | 可为每种控件类型单独设置样式属性 |\r\n+| 状态响应 | 每个控件可以对不同交互状态显示不同外观 |\r\n+| 资源引用 | 可引用外部字体、纹理等资源定制外观 |\r\n+| 编辑器支持 | 提供编辑器工具便于预览和调整样式 |\r\n+\r\n+## UML 图\r\n+\r\n+```mermaid\r\n+classDiagram\r\n+    class GUISkin {\r\n+        +font: Font\r\n+        +box: GUIStyle\r\n+        +label: GUIStyle\r\n+        +textField: GUIStyle\r\n+        +button: GUIStyle\r\n+        +toggle: GUIStyle\r\n+        +window: GUIStyle\r\n+        +scrollView: GUIStyle\r\n+        +horizontalSlider: GUIStyle\r\n+        +horizontalSliderThumb: GUIStyle\r\n+        +verticalSlider: GUIStyle\r\n+        +verticalSliderThumb: GUIStyle\r\n+        +customStyles: GUIStyle[]\r\n+        +FindStyle(string) GUIStyle\r\n+    }\r\n+    \r\n+    class GUIStyle {\r\n+        +name: string\r\n+        +normal: GUIStyleState\r\n+        +hover: GUIStyleState\r\n+        +active: GUIStyleState\r\n+        +focused: GUIStyleState\r\n+        +onNormal: GUIStyleState\r\n+        +onHover: GUIStyleState\r\n+        +onActive: GUIStyleState\r\n+        +onFocused: GUIStyleState\r\n+        +border: RectOffset\r\n+        +margin: RectOffset\r\n+        +padding: RectOffset\r\n+        +overflow: RectOffset\r\n+        +font: Font\r\n+        +fontSize: int\r\n+        +fontStyle: FontStyle\r\n+        +alignment: TextAnchor\r\n+        +wordWrap: bool\r\n+        +Draw(Rect, GUIContent, bool) void\r\n+        +Draw(Rect, GUIContent, int) void\r\n+    }\r\n+    \r\n+    class GUIStyleState {\r\n+        +textColor: Color\r\n+        +background: Texture2D\r\n+    }\r\n+    \r\n+    class EditorStyles {\r\n+        +label: GUIStyle\r\n+        +boldLabel: GUIStyle\r\n+        +miniLabel: GUIStyle\r\n+        +largeLabel: GUIStyle\r\n+        +button: GUIStyle\r\n+        +miniButton: GUIStyle\r\n+        +toolbar: GUIStyle\r\n+        +foldout: GUIStyle\r\n+        +popup: GUIStyle\r\n+        +helpBox: GUIStyle\r\n+        +GetStyle(string) GUIStyle\r\n+    }\r\n+    \r\n+    class EditorGUIUtility {\r\n+        +IconContent(string) GUIContent\r\n+        +GetBuiltinSkin(EditorSkin) GUISkin\r\n+    }\r\n+    \r\n+    GUISkin *-- GUIStyle : 包含多个\r\n+    GUIStyle *-- GUIStyleState : 包含多个状态\r\n+    EditorStyles *-- GUIStyle : 提供编辑器样式\r\n+    EditorGUIUtility -- GUISkin : 提供内置皮肤\r\n+```\r\n+\r\n+## 核心类和接口\r\n+\r\n+### 主要类\r\n+\r\n+| 类名 | 功能描述 | 主要属性/方法 |\r\n+|------|---------|-------------|\r\n+| **GUISkin** | GUI皮肤容器 | `font`, `customStyles`, `FindStyle()` |\r\n+| **GUIStyle** | 单个控件样式 | `normal`, `hover`, `active`, `Draw()` |\r\n+| **GUIStyleState** | 控件状态样式 | `textColor`, `background` |\r\n+| **EditorStyles** | 编辑器内置样式 | `label`, `boldLabel`, `GetStyle()` |\r\n+| **EditorGUIUtility** | 编辑器GUI工具 | `IconContent()`, `GetBuiltinSkin()` |\r\n+\r\n+### 主要接口\r\n+\r\n+| 接口/方法 | 功能描述 | 用法 |\r\n+|----------|---------|------|\r\n+| `GUI.skin` | 当前使用的皮肤 | `GUI.skin = mySkin;` |\r\n+| `GUISkin.FindStyle()` | 查找自定义样式 | `GUIStyle style = skin.FindStyle(\"MyCustomStyle\");` |\r\n+| `EditorGUIUtility.IconContent()` | 获取内置图标 | `GUIContent icon = EditorGUIUtility.IconContent(\"console.infoicon\");` |\r\n+| `EditorStyles.GetStyle()` | 获取编辑器样式 | `GUIStyle style = EditorStyles.GetStyle(\"IN TextField\");` |\r\n+\r\n+## 示例说明\r\n+\r\n+本章提供了三个主要工具示例：\r\n+\r\n+1. **GUI 样式预览器 (GUIStylePreviewer)**\r\n+   - 功能：显示当前 GUISkin 中所有可用的 GUIStyle，并允许实时预览效果\r\n+   - 位置：`GUIPreviewer/Editor/GUIStylePreviewer.cs`\r\n+   - 主要特点：可视化展示样式属性，支持样式搜索\r\n+\r\n+2. **GUI 图标预览器 (GUIIconPreviewer)**\r\n+   - 功能：展示 Unity 内置的所有图标\r\n+   - 位置：`GUIPreviewer/Editor/GUIIconPreviewer.cs`\r\n+   - 主要特点：按类别分组显示图标，提供搜索功能\r\n+\r\n+3. **编辑器样式预览器 (EditorStylesPreviewer)**\r\n+   - 功能：展示 EditorStyles 中的所有样式\r\n+   - 位置：`EditorStylesPreviewer/Editor/EditorStylesPreviewer.cs`\r\n+   - 主要特点：展示编辑器特有样式，便于创建与编辑器匹配的扩展\r\n+\r\n+## 官方文档\r\n+\r\n+- [GUISkin 官方文档](https://docs.unity3d.com/ScriptReference/GUISkin.html)\r\n+- [GUIStyle 官方文档](https://docs.unity3d.com/ScriptReference/GUIStyle.html)\r\n+- [EditorStyles 官方文档](https://docs.unity3d.com/ScriptReference/EditorStyles.html)\r\n+- [EditorGUIUtility 官方文档](https://docs.unity3d.com/ScriptReference/EditorGUIUtility.html)\r\n+- [IMGUI 控件详解](https://docs.unity3d.com/Manual/gui-Controls.html)\r\n+- [自定义编辑器控件](https://docs.unity3d.com/Manual/editor-CustomEditors.html)\r\n+\r\n+## 使用建议\r\n+\r\n+1. **样式预览工具的使用方法**\r\n+   - 在 Unity 编辑器中选择 Window > GUI Style Previewer\r\n+   - 在预览器中可以查看、搜索和测试各种样式\r\n+\r\n+2. **创建自定义 GUISkin**\r\n+   - 在 Project 窗口中右键 > Create > GUI Skin\r\n+   - 编辑 GUISkin 资源添加自定义样式\r\n+   - 在代码中设置 `GUI.skin = yourCustomSkin;`\r\n+\r\n+3. **最佳实践**\r\n+   - 使用 GUIStyle.margin 和 GUIStyle.padding 控制元素间距\r\n+   - 重用样式以保持界面一致性\r\n+   - 使用预览工具辅助样式开发\n\\ No newline at end of file\n"
                },
                {
                    "date": 1746885033711,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,58 +1,196 @@\n-# Chapter 5 GUISkin\r\n+# Unity编辑器扩展 - Chapter 5: GUISkin\r\n \r\n-## 目录\r\n-- [简介](#简介)\r\n-- [GUISkin 特征](#guiskin-特征)\r\n-- [UML 图](#uml-图)\r\n-- [核心类和接口](#核心类和接口)\r\n-- [示例说明](#示例说明)\r\n-- [官方文档](#官方文档)\r\n+## 概述\r\n \r\n-## 简介\r\n-GUISkin 是 Unity 中用于自定义 GUI 元素外观的系统。它允许开发者创建统一风格的界面，管理各种 GUI 控件的视觉样式。本章介绍 GUISkin 系统的使用方法，并提供了三个实用工具：GUI 样式预览器、GUI 图标预览器和 Editor 样式预览器。\r\n+本章专注于Unity中GUISkin系统的使用，GUISkin是Unity中用于自定义GUI元素外观的系统。它允许开发者创建统一风格的界面，管理各种GUI控件的视觉样式。本章介绍了GUISkin系统的核心概念、使用方法，并提供了多个实用工具示例。\r\n \r\n-## GUISkin 特征\r\n+## 核心知识点\r\n \r\n-### GUISkin 系统特征\r\n+### GUISkin与GUIStyle\r\n \r\n-```mermaid\r\n-mindmap\r\n-  root((GUISkin 系统))\r\n-    (视觉定制)\r\n-      [预定义样式]\r\n-      [自定义样式]\r\n-      [皮肤切换]\r\n-    (GUIStyle 管理)\r\n-      [Button]\r\n-      [Label]\r\n-      [TextField]\r\n-      [Box]\r\n-      [其他控件样式]\r\n-    (状态管理)\r\n-      [Normal]\r\n-      [Hover]\r\n-      [Active]\r\n-      [Focused]\r\n-      [Disabled]\r\n-    (资源管理)\r\n-      [字体设置]\r\n-      [纹理引用]\r\n-      [颜色配置]\r\n-    (编辑器集成)\r\n-      [运行时使用]\r\n-      [编辑器扩展]\r\n+- **GUISkin**: GUI皮肤容器，包含多个GUIStyle，用于管理整套界面风格\r\n+- **GUIStyle**: 单个控件样式定义，包含不同状态下的外观设置\r\n+- **关系**: GUISkin包含多个预定义和自定义的GUIStyle，通过FindStyle方法获取\r\n+\r\n+### GUIStyle状态\r\n+\r\n+- **normal**: 正常状态下的样式\r\n+- **hover**: 鼠标悬停状态下的样式\r\n+- **active**: 激活状态(如按下时)的样式\r\n+- **focused**: 获得焦点状态下的样式\r\n+- **disabled**: 禁用状态下的样式\r\n+- **onNormal/onHover/onActive/onFocused**: 开关控件ON状态下的对应样式\r\n+\r\n+### GUIStyleState\r\n+\r\n+- **textColor**: 文本颜色\r\n+- **background**: 背景纹理\r\n+- **应用**: 可以为每个状态分别设置文本颜色和背景纹理\r\n+\r\n+### GUIStyle属性\r\n+\r\n+- **边框和间距**:\r\n+  - border: 边框尺寸\r\n+  - margin: 外边距\r\n+  - padding: 内边距\r\n+  - overflow: 溢出处理\r\n+- **文本设置**:\r\n+  - font: 字体\r\n+  - fontSize: 字体大小\r\n+  - fontStyle: 字体样式(粗体、斜体等)\r\n+  - alignment: 对齐方式\r\n+  - wordWrap: 自动换行\r\n+\r\n+### 编辑器扩展\r\n+\r\n+- **EditorStyles**: 提供Unity编辑器内置样式\r\n+- **EditorGUIUtility**: 提供编辑器GUI工具方法\r\n+  - IconContent: 获取内置图标\r\n+  - GetBuiltinSkin: 获取内置皮肤\r\n+\r\n+### 代码结构\r\n+\r\n+本章包含三个主要示例工具:\r\n+\r\n+1. **GUI 样式预览器 (GUIStylePreviewer)**: 显示当前GUISkin中所有可用的GUIStyle并实时预览\r\n+2. **GUI 图标预览器 (GUIIconPreviewer)**: 展示Unity内置的所有图标，按类别分组\r\n+3. **编辑器样式预览器 (EditorStylesPreviewer)**: 展示EditorStyles中的编辑器专用样式\r\n+\r\n+## GUISkin系统组件\r\n+\r\n+### GUISkin常用属性\r\n+\r\n+1. **基本属性**\r\n+   - font: 默认字体\r\n+   - settings: 设置信息\r\n+   - customStyles: 自定义样式数组\r\n+\r\n+2. **内置样式**\r\n+   - box: 盒子样式\r\n+   - label: 标签样式\r\n+   - textField: 文本输入框样式\r\n+   - button: 按钮样式\r\n+   - toggle: 开关样式\r\n+   - window: 窗口样式\r\n+   - scrollView: 滚动视图样式\r\n+   - horizontalSlider/verticalSlider: 水平/垂直滑动条样式\r\n+   - horizontalSliderThumb/verticalSliderThumb: 水平/垂直滑动条滑块样式\r\n+\r\n+### GUIStyle配置选项\r\n+\r\n+1. **外观属性**\r\n+   - name: 样式名称\r\n+   - normal/hover/active/focused: 各状态样式\r\n+   - fixedWidth/Height: 固定宽度/高度\r\n+   - stretchWidth/Height: 是否拉伸宽度/高度\r\n+\r\n+2. **文本属性**\r\n+   - font: 字体\r\n+   - fontSize: 字体大小\r\n+   - fontStyle: 字体样式\r\n+   - alignment: 对齐方式\r\n+   - wordWrap: 自动换行\r\n+   - richText: 是否支持富文本\r\n+\r\n+3. **边框和间距**\r\n+   - border: 边框设置\r\n+   - margin: 外边距\r\n+   - padding: 内边距\r\n+   - overflow: 溢出区域\r\n+\r\n+## 思维导图\r\n+\r\n ```\r\n+Unity GUISkin系统\r\n+├── 基础概念\r\n+│   ├── GUISkin\r\n+│   │   ├── GUI皮肤容器\r\n+│   │   │   ├── box\r\n+│   │   │   ├── label\r\n+│   │   │   ├── button\r\n+│   │   │   ├── toggle\r\n+│   │   │   ├── textField/textArea\r\n+│   │   │   ├── window\r\n+│   │   │   ├── scrollView\r\n+│   │   │   ├── horizontalSlider/verticalSlider\r\n+│   │   │   └── horizontalSliderThumb/verticalSliderThumb\r\n+│   │   └── 自定义样式(customStyles)\r\n+│   │\r\n+│   ├── GUIStyle\r\n+│   │   ├── 单个控件样式定义\r\n+│   │   ├── 状态样式\r\n+│   │   │   ├── normal - 正常状态\r\n+│   │   │   ├── hover - 悬停状态\r\n+│   │   │   ├── active - 激活状态\r\n+│   │   │   ├── focused - 焦点状态\r\n+│   │   │   ├── onNormal - ON状态下的正常样式\r\n+│   │   │   ├── onHover - ON状态下的悬停样式\r\n+│   │   │   ├── onActive - ON状态下的激活样式\r\n+│   │   │   └── onFocused - ON状态下的焦点样式\r\n+│   │   └── 布局属性\r\n+│   │       ├── border - 边框\r\n+│   │       ├── margin - 外边距\r\n+│   │       ├── padding - 内边距\r\n+│   │       └── overflow - 溢出区域\r\n+│   │\r\n+│   └── GUIStyleState\r\n+│       ├── textColor - 文本颜色\r\n+│       └── background - 背景纹理\r\n+│\r\n+├── 编辑器集成\r\n+│   ├── EditorStyles\r\n+│   │   ├── 提供编辑器内置样式\r\n+│   │   ├── 常用样式\r\n+│   │   │   ├── label/boldLabel\r\n+│   │   │   ├── miniLabel/largeLabel\r\n+│   │   │   ├── button/miniButton\r\n+│   │   │   ├── toolbar/toolbarButton\r\n+│   │   │   ├── foldout\r\n+│   │   │   └── helpBox\r\n+│   │   └── GetStyle方法 - 获取特定编辑器样式\r\n+│   │\r\n+│   └── EditorGUIUtility\r\n+│       ├── IconContent - 获取内置图标\r\n+│       └── GetBuiltinSkin - 获取内置皮肤\r\n+│\r\n+├── 应用技术\r\n+│   ├── 皮肤创建与应用\r\n+│   │   ├── Create > GUI Skin 创建皮肤资源\r\n+│   │   ├── GUI.skin = mySkin 设置当前皮肤\r\n+│   │   └── Resources.Load<GUISkin> 加载皮肤资源\r\n+│   │\r\n+│   ├── 样式定制\r\n+│   │   ├── 背景纹理设置\r\n+│   │   ├── 文本样式调整\r\n+│   │   ├── 尺寸与边距配置\r\n+│   │   └── 状态变化定义\r\n+│   │\r\n+│   └── 运行时皮肤切换\r\n+│       ├── 主题切换功能\r\n+│       ├── 根据条件选择皮肤\r\n+│       └── 动态调整样式\r\n+│\r\n+└── 工具实现\r\n+    ├── GUIStylePreviewer\r\n+    │   ├── 显示所有可用GUIStyle\r\n+    │   ├── 实时预览各状态效果\r\n+    │   ├── 搜索筛选功能\r\n+    │   └── 样式属性查看\r\n+    │\r\n+    ├── GUIIconPreviewer\r\n+    │   ├── 展示Unity内置图标\r\n+    │   ├── 按类别分组显示\r\n+    │   ├── 图标搜索功能\r\n+    │   └── 图标名称复制\r\n+    │\r\n+    └── EditorStylesPreviewer\r\n+        ├── 显示EditorStyles中样式\r\n+        ├── 编辑器专用样式预览\r\n+        ├── 状态切换预览\r\n+        └── 样式使用代码生成\r\n+```\r\n \r\n-| 特征 | 描述 |\r\n-|------|------|\r\n-| 样式统一性 | 通过 GUISkin 可以为整个应用定义统一的视觉风格 |\r\n-| 动态切换 | 支持在运行时切换不同的皮肤 |\r\n-| 细粒度控制 | 可为每种控件类型单独设置样式属性 |\r\n-| 状态响应 | 每个控件可以对不同交互状态显示不同外观 |\r\n-| 资源引用 | 可引用外部字体、纹理等资源定制外观 |\r\n-| 编辑器支持 | 提供编辑器工具便于预览和调整样式 |\r\n-\r\n ## UML 图\r\n \r\n ```mermaid\r\n classDiagram\r\n@@ -119,74 +257,81 @@\n         +IconContent(string) GUIContent\r\n         +GetBuiltinSkin(EditorSkin) GUISkin\r\n     }\r\n     \r\n+    class GUIStylePreviewer {\r\n+        -searchField: string\r\n+        -scrollPos: Vector2\r\n+        -currentSkin: GUISkin\r\n+        -currentStyle: GUIStyle\r\n+        -previewContent: GUIContent\r\n+        +OnGUI() void\r\n+        -DrawStyleList() void\r\n+        -DrawStylePreview() void\r\n+        -DrawStyleProperties() void\r\n+    }\r\n+    \r\n+    class GUIIconPreviewer {\r\n+        -searchField: string\r\n+        -scrollPos: Vector2\r\n+        -iconCategories: Dictionary<string, List<string>>\r\n+        -selectedCategory: string\r\n+        +OnGUI() void\r\n+        -DrawCategorySelector() void\r\n+        -DrawIconGrid() void\r\n+        -CollectIcons() void\r\n+    }\r\n+    \r\n+    class EditorStylesPreviewer {\r\n+        -searchField: string\r\n+        -scrollPos: Vector2\r\n+        -editorStyles: List<GUIStyle>\r\n+        -currentStyle: GUIStyle\r\n+        -previewContent: GUIContent\r\n+        +OnGUI() void\r\n+        -CollectEditorStyles() void\r\n+        -DrawStyleList() void\r\n+        -DrawStylePreview() void\r\n+    }\r\n+    \r\n     GUISkin *-- GUIStyle : 包含多个\r\n     GUIStyle *-- GUIStyleState : 包含多个状态\r\n     EditorStyles *-- GUIStyle : 提供编辑器样式\r\n     EditorGUIUtility -- GUISkin : 提供内置皮肤\r\n+    GUIStylePreviewer -- GUISkin : 预览\r\n+    GUIStylePreviewer -- GUIStyle : 显示属性\r\n+    GUIIconPreviewer -- EditorGUIUtility : 获取图标\r\n+    EditorStylesPreviewer -- EditorStyles : 获取样式\r\n ```\r\n \r\n-## 核心类和接口\r\n+## 应用场景\r\n \r\n-### 主要类\r\n+1. **自定义编辑器界面**: 创建统一风格的编辑器工具，保持视觉一致性\r\n+2. **游戏内GUI定制**: 为游戏内IMGUI界面设计自定义皮肤\r\n+3. **主题切换系统**: 实现运行时可切换的界面主题\r\n+4. **编辑器扩展开发**: 创建与Unity编辑器风格匹配的扩展工具\r\n+5. **调试工具开发**: 开发具有专业外观的调试和分析工具\r\n \r\n-| 类名 | 功能描述 | 主要属性/方法 |\r\n-|------|---------|-------------|\r\n-| **GUISkin** | GUI皮肤容器 | `font`, `customStyles`, `FindStyle()` |\r\n-| **GUIStyle** | 单个控件样式 | `normal`, `hover`, `active`, `Draw()` |\r\n-| **GUIStyleState** | 控件状态样式 | `textColor`, `background` |\r\n-| **EditorStyles** | 编辑器内置样式 | `label`, `boldLabel`, `GetStyle()` |\r\n-| **EditorGUIUtility** | 编辑器GUI工具 | `IconContent()`, `GetBuiltinSkin()` |\r\n+## 代码关系\r\n \r\n-### 主要接口\r\n+1. **GUIStylePreviewer.cs** 展示了如何获取、预览和分析GUISkin中的所有样式及其属性\r\n+2. **GUIIconPreviewer.cs** 展示了如何收集、分类和显示Unity编辑器中的内置图标\r\n+3. **EditorStylesPreviewer.cs** 展示了如何访问和预览EditorStyles中的编辑器专用样式\r\n \r\n-| 接口/方法 | 功能描述 | 用法 |\r\n\\ No newline at end of file\n-|----------|---------|------|\r\n-| `GUI.skin` | 当前使用的皮肤 | `GUI.skin = mySkin;` |\r\n-| `GUISkin.FindStyle()` | 查找自定义样式 | `GUIStyle style = skin.FindStyle(\"MyCustomStyle\");` |\r\n-| `EditorGUIUtility.IconContent()` | 获取内置图标 | `GUIContent icon = EditorGUIUtility.IconContent(\"console.infoicon\");` |\r\n-| `EditorStyles.GetStyle()` | 获取编辑器样式 | `GUIStyle style = EditorStyles.GetStyle(\"IN TextField\");` |\r\n+## 最佳实践\r\n \r\n-## 示例说明\r\n+1. **样式复用**: 尽量复用已定义的样式，避免重复创建相似样式\r\n+2. **合理设置边距**: 使用margin和padding正确控制元素间距和内容边距\r\n+3. **状态一致性**: 为不同控件状态(normal/hover/active)提供视觉一致性体验\r\n+4. **使用预览工具**: 在开发过程中使用预览工具快速测试和调整样式\r\n+5. **皮肤分离管理**: 将GUISkin资源与代码分离，便于不同场合重用皮肤\r\n+6. **命名规范**: 为自定义样式使用有意义的名称，便于查找和维护\r\n+7. **样式继承**: 基于已有样式创建新样式，减少重复工作\r\n \r\n-本章提供了三个主要工具示例：\r\n+## 相关资源\r\n \r\n-1. **GUI 样式预览器 (GUIStylePreviewer)**\r\n-   - 功能：显示当前 GUISkin 中所有可用的 GUIStyle，并允许实时预览效果\r\n-   - 位置：`GUIPreviewer/Editor/GUIStylePreviewer.cs`\r\n-   - 主要特点：可视化展示样式属性，支持样式搜索\r\n-\r\n-2. **GUI 图标预览器 (GUIIconPreviewer)**\r\n-   - 功能：展示 Unity 内置的所有图标\r\n-   - 位置：`GUIPreviewer/Editor/GUIIconPreviewer.cs`\r\n-   - 主要特点：按类别分组显示图标，提供搜索功能\r\n-\r\n-3. **编辑器样式预览器 (EditorStylesPreviewer)**\r\n-   - 功能：展示 EditorStyles 中的所有样式\r\n-   - 位置：`EditorStylesPreviewer/Editor/EditorStylesPreviewer.cs`\r\n-   - 主要特点：展示编辑器特有样式，便于创建与编辑器匹配的扩展\r\n-\r\n-## 官方文档\r\n-\r\n-- [GUISkin 官方文档](https://docs.unity3d.com/ScriptReference/GUISkin.html)\r\n-- [GUIStyle 官方文档](https://docs.unity3d.com/ScriptReference/GUIStyle.html)\r\n-- [EditorStyles 官方文档](https://docs.unity3d.com/ScriptReference/EditorStyles.html)\r\n-- [EditorGUIUtility 官方文档](https://docs.unity3d.com/ScriptReference/EditorGUIUtility.html)\r\n-- [IMGUI 控件详解](https://docs.unity3d.com/Manual/gui-Controls.html)\r\n-- [自定义编辑器控件](https://docs.unity3d.com/Manual/editor-CustomEditors.html)\r\n-\r\n-## 使用建议\r\n-\r\n-1. **样式预览工具的使用方法**\r\n-   - 在 Unity 编辑器中选择 Window > GUI Style Previewer\r\n-   - 在预览器中可以查看、搜索和测试各种样式\r\n-\r\n-2. **创建自定义 GUISkin**\r\n-   - 在 Project 窗口中右键 > Create > GUI Skin\r\n-   - 编辑 GUISkin 资源添加自定义样式\r\n-   - 在代码中设置 `GUI.skin = yourCustomSkin;`\r\n-\r\n-3. **最佳实践**\r\n-   - 使用 GUIStyle.margin 和 GUIStyle.padding 控制元素间距\r\n-   - 重用样式以保持界面一致性\r\n-   - 使用预览工具辅助样式开发\n+- [Unity官方文档 - GUISkin](https://docs.unity3d.com/ScriptReference/GUISkin.html)\r\n+- [Unity官方文档 - GUIStyle](https://docs.unity3d.com/ScriptReference/GUIStyle.html)\r\n+- [Unity官方文档 - EditorStyles](https://docs.unity3d.com/ScriptReference/EditorStyles.html)\r\n+- [Unity官方文档 - EditorGUIUtility](https://docs.unity3d.com/ScriptReference/EditorGUIUtility.html)\r\n+- [Unity官方文档 - IMGUI控件](https://docs.unity3d.com/Manual/gui-Controls.html)\r\n+- [Unity官方文档 - 自定义编辑器控件](https://docs.unity3d.com/Manual/editor-CustomEditors.html)\n\\ No newline at end of file\n"
                },
                {
                    "date": 1746885119048,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,337 +1,192 @@\n-# Unity编辑器扩展 - Chapter 5: GUISkin\r\n-\r\n-## 概述\r\n-\r\n-本章专注于Unity中GUISkin系统的使用，GUISkin是Unity中用于自定义GUI元素外观的系统。它允许开发者创建统一风格的界面，管理各种GUI控件的视觉样式。本章介绍了GUISkin系统的核心概念、使用方法，并提供了多个实用工具示例。\r\n-\r\n-## 核心知识点\r\n-\r\n-### GUISkin与GUIStyle\r\n-\r\n-- **GUISkin**: GUI皮肤容器，包含多个GUIStyle，用于管理整套界面风格\r\n-- **GUIStyle**: 单个控件样式定义，包含不同状态下的外观设置\r\n-- **关系**: GUISkin包含多个预定义和自定义的GUIStyle，通过FindStyle方法获取\r\n-\r\n-### GUIStyle状态\r\n-\r\n-- **normal**: 正常状态下的样式\r\n-- **hover**: 鼠标悬停状态下的样式\r\n-- **active**: 激活状态(如按下时)的样式\r\n-- **focused**: 获得焦点状态下的样式\r\n-- **disabled**: 禁用状态下的样式\r\n-- **onNormal/onHover/onActive/onFocused**: 开关控件ON状态下的对应样式\r\n-\r\n-### GUIStyleState\r\n-\r\n-- **textColor**: 文本颜色\r\n-- **background**: 背景纹理\r\n-- **应用**: 可以为每个状态分别设置文本颜色和背景纹理\r\n-\r\n-### GUIStyle属性\r\n-\r\n-- **边框和间距**:\r\n-  - border: 边框尺寸\r\n-  - margin: 外边距\r\n-  - padding: 内边距\r\n-  - overflow: 溢出处理\r\n-- **文本设置**:\r\n-  - font: 字体\r\n-  - fontSize: 字体大小\r\n-  - fontStyle: 字体样式(粗体、斜体等)\r\n-  - alignment: 对齐方式\r\n-  - wordWrap: 自动换行\r\n-\r\n-### 编辑器扩展\r\n-\r\n-- **EditorStyles**: 提供Unity编辑器内置样式\r\n-- **EditorGUIUtility**: 提供编辑器GUI工具方法\r\n-  - IconContent: 获取内置图标\r\n-  - GetBuiltinSkin: 获取内置皮肤\r\n-\r\n-### 代码结构\r\n-\r\n-本章包含三个主要示例工具:\r\n-\r\n-1. **GUI 样式预览器 (GUIStylePreviewer)**: 显示当前GUISkin中所有可用的GUIStyle并实时预览\r\n-2. **GUI 图标预览器 (GUIIconPreviewer)**: 展示Unity内置的所有图标，按类别分组\r\n-3. **编辑器样式预览器 (EditorStylesPreviewer)**: 展示EditorStyles中的编辑器专用样式\r\n-\r\n-## GUISkin系统组件\r\n-\r\n-### GUISkin常用属性\r\n-\r\n-1. **基本属性**\r\n-   - font: 默认字体\r\n-   - settings: 设置信息\r\n-   - customStyles: 自定义样式数组\r\n-\r\n-2. **内置样式**\r\n-   - box: 盒子样式\r\n-   - label: 标签样式\r\n-   - textField: 文本输入框样式\r\n-   - button: 按钮样式\r\n-   - toggle: 开关样式\r\n-   - window: 窗口样式\r\n-   - scrollView: 滚动视图样式\r\n-   - horizontalSlider/verticalSlider: 水平/垂直滑动条样式\r\n-   - horizontalSliderThumb/verticalSliderThumb: 水平/垂直滑动条滑块样式\r\n-\r\n-### GUIStyle配置选项\r\n-\r\n-1. **外观属性**\r\n-   - name: 样式名称\r\n-   - normal/hover/active/focused: 各状态样式\r\n-   - fixedWidth/Height: 固定宽度/高度\r\n-   - stretchWidth/Height: 是否拉伸宽度/高度\r\n-\r\n-2. **文本属性**\r\n-   - font: 字体\r\n-   - fontSize: 字体大小\r\n-   - fontStyle: 字体样式\r\n-   - alignment: 对齐方式\r\n-   - wordWrap: 自动换行\r\n-   - richText: 是否支持富文本\r\n-\r\n-3. **边框和间距**\r\n-   - border: 边框设置\r\n-   - margin: 外边距\r\n-   - padding: 内边距\r\n-   - overflow: 溢出区域\r\n-\r\n-## 思维导图\r\n-\r\n-```\r\n-Unity GUISkin系统\r\n-├── 基础概念\r\n-│   ├── GUISkin\r\n-│   │   ├── GUI皮肤容器\r\n-│   │   │   ├── box\r\n-│   │   │   ├── label\r\n-│   │   │   ├── button\r\n-│   │   │   ├── toggle\r\n-│   │   │   ├── textField/textArea\r\n-│   │   │   ├── window\r\n-│   │   │   ├── scrollView\r\n-│   │   │   ├── horizontalSlider/verticalSlider\r\n-│   │   │   └── horizontalSliderThumb/verticalSliderThumb\r\n-│   │   └── 自定义样式(customStyles)\r\n-│   │\r\n-│   ├── GUIStyle\r\n-│   │   ├── 单个控件样式定义\r\n-│   │   ├── 状态样式\r\n-│   │   │   ├── normal - 正常状态\r\n-│   │   │   ├── hover - 悬停状态\r\n-│   │   │   ├── active - 激活状态\r\n-│   │   │   ├── focused - 焦点状态\r\n-│   │   │   ├── onNormal - ON状态下的正常样式\r\n-│   │   │   ├── onHover - ON状态下的悬停样式\r\n-│   │   │   ├── onActive - ON状态下的激活样式\r\n-│   │   │   └── onFocused - ON状态下的焦点样式\r\n-│   │   └── 布局属性\r\n-│   │       ├── border - 边框\r\n-│   │       ├── margin - 外边距\r\n-│   │       ├── padding - 内边距\r\n-│   │       └── overflow - 溢出区域\r\n-│   │\r\n-│   └── GUIStyleState\r\n-│       ├── textColor - 文本颜色\r\n-│       └── background - 背景纹理\r\n-│\r\n-├── 编辑器集成\r\n-│   ├── EditorStyles\r\n-│   │   ├── 提供编辑器内置样式\r\n-│   │   ├── 常用样式\r\n-│   │   │   ├── label/boldLabel\r\n-│   │   │   ├── miniLabel/largeLabel\r\n-│   │   │   ├── button/miniButton\r\n-│   │   │   ├── toolbar/toolbarButton\r\n-│   │   │   ├── foldout\r\n-│   │   │   └── helpBox\r\n-│   │   └── GetStyle方法 - 获取特定编辑器样式\r\n-│   │\r\n-│   └── EditorGUIUtility\r\n-│       ├── IconContent - 获取内置图标\r\n-│       └── GetBuiltinSkin - 获取内置皮肤\r\n-│\r\n-├── 应用技术\r\n-│   ├── 皮肤创建与应用\r\n-│   │   ├── Create > GUI Skin 创建皮肤资源\r\n-│   │   ├── GUI.skin = mySkin 设置当前皮肤\r\n-│   │   └── Resources.Load<GUISkin> 加载皮肤资源\r\n-│   │\r\n-│   ├── 样式定制\r\n-│   │   ├── 背景纹理设置\r\n-│   │   ├── 文本样式调整\r\n-│   │   ├── 尺寸与边距配置\r\n-│   │   └── 状态变化定义\r\n-│   │\r\n-│   └── 运行时皮肤切换\r\n-│       ├── 主题切换功能\r\n-│       ├── 根据条件选择皮肤\r\n-│       └── 动态调整样式\r\n-│\r\n-└── 工具实现\r\n-    ├── GUIStylePreviewer\r\n-    │   ├── 显示所有可用GUIStyle\r\n-    │   ├── 实时预览各状态效果\r\n-    │   ├── 搜索筛选功能\r\n-    │   └── 样式属性查看\r\n-    │\r\n-    ├── GUIIconPreviewer\r\n-    │   ├── 展示Unity内置图标\r\n-    │   ├── 按类别分组显示\r\n-    │   ├── 图标搜索功能\r\n-    │   └── 图标名称复制\r\n-    │\r\n-    └── EditorStylesPreviewer\r\n-        ├── 显示EditorStyles中样式\r\n-        ├── 编辑器专用样式预览\r\n-        ├── 状态切换预览\r\n-        └── 样式使用代码生成\r\n-```\r\n-\r\n-## UML 图\r\n-\r\n-```mermaid\r\n-classDiagram\r\n-    class GUISkin {\r\n-        +font: Font\r\n-        +box: GUIStyle\r\n-        +label: GUIStyle\r\n-        +textField: GUIStyle\r\n-        +button: GUIStyle\r\n-        +toggle: GUIStyle\r\n-        +window: GUIStyle\r\n-        +scrollView: GUIStyle\r\n-        +horizontalSlider: GUIStyle\r\n-        +horizontalSliderThumb: GUIStyle\r\n-        +verticalSlider: GUIStyle\r\n-        +verticalSliderThumb: GUIStyle\r\n-        +customStyles: GUIStyle[]\r\n-        +FindStyle(string) GUIStyle\r\n-    }\r\n-    \r\n-    class GUIStyle {\r\n-        +name: string\r\n-        +normal: GUIStyleState\r\n-        +hover: GUIStyleState\r\n-        +active: GUIStyleState\r\n-        +focused: GUIStyleState\r\n-        +onNormal: GUIStyleState\r\n-        +onHover: GUIStyleState\r\n-        +onActive: GUIStyleState\r\n-        +onFocused: GUIStyleState\r\n-        +border: RectOffset\r\n-        +margin: RectOffset\r\n-        +padding: RectOffset\r\n-        +overflow: RectOffset\r\n-        +font: Font\r\n-        +fontSize: int\r\n-        +fontStyle: FontStyle\r\n-        +alignment: TextAnchor\r\n-        +wordWrap: bool\r\n-        +Draw(Rect, GUIContent, bool) void\r\n-        +Draw(Rect, GUIContent, int) void\r\n-    }\r\n-    \r\n-    class GUIStyleState {\r\n-        +textColor: Color\r\n-        +background: Texture2D\r\n-    }\r\n-    \r\n-    class EditorStyles {\r\n-        +label: GUIStyle\r\n-        +boldLabel: GUIStyle\r\n-        +miniLabel: GUIStyle\r\n-        +largeLabel: GUIStyle\r\n-        +button: GUIStyle\r\n-        +miniButton: GUIStyle\r\n-        +toolbar: GUIStyle\r\n-        +foldout: GUIStyle\r\n-        +popup: GUIStyle\r\n-        +helpBox: GUIStyle\r\n-        +GetStyle(string) GUIStyle\r\n-    }\r\n-    \r\n-    class EditorGUIUtility {\r\n-        +IconContent(string) GUIContent\r\n-        +GetBuiltinSkin(EditorSkin) GUISkin\r\n-    }\r\n-    \r\n-    class GUIStylePreviewer {\r\n-        -searchField: string\r\n-        -scrollPos: Vector2\r\n-        -currentSkin: GUISkin\r\n-        -currentStyle: GUIStyle\r\n-        -previewContent: GUIContent\r\n-        +OnGUI() void\r\n-        -DrawStyleList() void\r\n-        -DrawStylePreview() void\r\n-        -DrawStyleProperties() void\r\n-    }\r\n-    \r\n-    class GUIIconPreviewer {\r\n-        -searchField: string\r\n-        -scrollPos: Vector2\r\n-        -iconCategories: Dictionary<string, List<string>>\r\n-        -selectedCategory: string\r\n-        +OnGUI() void\r\n-        -DrawCategorySelector() void\r\n-        -DrawIconGrid() void\r\n-        -CollectIcons() void\r\n-    }\r\n-    \r\n-    class EditorStylesPreviewer {\r\n-        -searchField: string\r\n-        -scrollPos: Vector2\r\n-        -editorStyles: List<GUIStyle>\r\n-        -currentStyle: GUIStyle\r\n-        -previewContent: GUIContent\r\n-        +OnGUI() void\r\n-        -CollectEditorStyles() void\r\n-        -DrawStyleList() void\r\n-        -DrawStylePreview() void\r\n-    }\r\n-    \r\n-    GUISkin *-- GUIStyle : 包含多个\r\n-    GUIStyle *-- GUIStyleState : 包含多个状态\r\n-    EditorStyles *-- GUIStyle : 提供编辑器样式\r\n-    EditorGUIUtility -- GUISkin : 提供内置皮肤\r\n-    GUIStylePreviewer -- GUISkin : 预览\r\n-    GUIStylePreviewer -- GUIStyle : 显示属性\r\n-    GUIIconPreviewer -- EditorGUIUtility : 获取图标\r\n-    EditorStylesPreviewer -- EditorStyles : 获取样式\r\n-```\r\n-\r\n-## 应用场景\r\n-\r\n-1. **自定义编辑器界面**: 创建统一风格的编辑器工具，保持视觉一致性\r\n-2. **游戏内GUI定制**: 为游戏内IMGUI界面设计自定义皮肤\r\n-3. **主题切换系统**: 实现运行时可切换的界面主题\r\n-4. **编辑器扩展开发**: 创建与Unity编辑器风格匹配的扩展工具\r\n-5. **调试工具开发**: 开发具有专业外观的调试和分析工具\r\n-\r\n-## 代码关系\r\n-\r\n-1. **GUIStylePreviewer.cs** 展示了如何获取、预览和分析GUISkin中的所有样式及其属性\r\n-2. **GUIIconPreviewer.cs** 展示了如何收集、分类和显示Unity编辑器中的内置图标\r\n-3. **EditorStylesPreviewer.cs** 展示了如何访问和预览EditorStyles中的编辑器专用样式\r\n-\r\n-## 最佳实践\r\n-\r\n-1. **样式复用**: 尽量复用已定义的样式，避免重复创建相似样式\r\n-2. **合理设置边距**: 使用margin和padding正确控制元素间距和内容边距\r\n-3. **状态一致性**: 为不同控件状态(normal/hover/active)提供视觉一致性体验\r\n-4. **使用预览工具**: 在开发过程中使用预览工具快速测试和调整样式\r\n-5. **皮肤分离管理**: 将GUISkin资源与代码分离，便于不同场合重用皮肤\r\n-6. **命名规范**: 为自定义样式使用有意义的名称，便于查找和维护\r\n-7. **样式继承**: 基于已有样式创建新样式，减少重复工作\r\n-\r\n-## 相关资源\r\n-\r\n-- [Unity官方文档 - GUISkin](https://docs.unity3d.com/ScriptReference/GUISkin.html)\r\n-- [Unity官方文档 - GUIStyle](https://docs.unity3d.com/ScriptReference/GUIStyle.html)\r\n-- [Unity官方文档 - EditorStyles](https://docs.unity3d.com/ScriptReference/EditorStyles.html)\r\n-- [Unity官方文档 - EditorGUIUtility](https://docs.unity3d.com/ScriptReference/EditorGUIUtility.html)\r\n-- [Unity官方文档 - IMGUI控件](https://docs.unity3d.com/Manual/gui-Controls.html)\r\n-- [Unity官方文档 - 自定义编辑器控件](https://docs.unity3d.com/Manual/editor-CustomEditors.html)\n\\ No newline at end of file\n+# Chapter 5 GUISkin\n+\n+## 目录\n+- [简介](#简介)\n+- [GUISkin 特征](#guiskin-特征)\n+- [UML 图](#uml-图)\n+- [核心类和接口](#核心类和接口)\n+- [示例说明](#示例说明)\n+- [官方文档](#官方文档)\n+\n+## 简介\n+GUISkin 是 Unity 中用于自定义 GUI 元素外观的系统。它允许开发者创建统一风格的界面，管理各种 GUI 控件的视觉样式。本章介绍 GUISkin 系统的使用方法，并提供了三个实用工具：GUI 样式预览器、GUI 图标预览器和 Editor 样式预览器。\n+\n+## GUISkin 特征\n+\n+### GUISkin 系统特征\n+\n+```mermaid\n+mindmap\n+  root((GUISkin 系统))\n+    (视觉定制)\n+      [预定义样式]\n+      [自定义样式]\n+      [皮肤切换]\n+    (GUIStyle 管理)\n+      [Button]\n+      [Label]\n+      [TextField]\n+      [Box]\n+      [其他控件样式]\n+    (状态管理)\n+      [Normal]\n+      [Hover]\n+      [Active]\n+      [Focused]\n+      [Disabled]\n+    (资源管理)\n+      [字体设置]\n+      [纹理引用]\n+      [颜色配置]\n+    (编辑器集成)\n+      [运行时使用]\n+      [编辑器扩展]\n+```\n+\n+| 特征 | 描述 |\n+|------|------|\n+| 样式统一性 | 通过 GUISkin 可以为整个应用定义统一的视觉风格 |\n+| 动态切换 | 支持在运行时切换不同的皮肤 |\n+| 细粒度控制 | 可为每种控件类型单独设置样式属性 |\n+| 状态响应 | 每个控件可以对不同交互状态显示不同外观 |\n+| 资源引用 | 可引用外部字体、纹理等资源定制外观 |\n+| 编辑器支持 | 提供编辑器工具便于预览和调整样式 |\n+\n+## UML 图\n+\n+```mermaid\n+classDiagram\n+    class GUISkin {\n+        +font: Font\n+        +box: GUIStyle\n+        +label: GUIStyle\n+        +textField: GUIStyle\n+        +button: GUIStyle\n+        +toggle: GUIStyle\n+        +window: GUIStyle\n+        +scrollView: GUIStyle\n+        +horizontalSlider: GUIStyle\n+        +horizontalSliderThumb: GUIStyle\n+        +verticalSlider: GUIStyle\n+        +verticalSliderThumb: GUIStyle\n+        +customStyles: GUIStyle[]\n+        +FindStyle(string) GUIStyle\n+    }\n+    \n+    class GUIStyle {\n+        +name: string\n+        +normal: GUIStyleState\n+        +hover: GUIStyleState\n+        +active: GUIStyleState\n+        +focused: GUIStyleState\n+        +onNormal: GUIStyleState\n+        +onHover: GUIStyleState\n+        +onActive: GUIStyleState\n+        +onFocused: GUIStyleState\n+        +border: RectOffset\n+        +margin: RectOffset\n+        +padding: RectOffset\n+        +overflow: RectOffset\n+        +font: Font\n+        +fontSize: int\n+        +fontStyle: FontStyle\n+        +alignment: TextAnchor\n+        +wordWrap: bool\n+        +Draw(Rect, GUIContent, bool) void\n+        +Draw(Rect, GUIContent, int) void\n+    }\n+    \n+    class GUIStyleState {\n+        +textColor: Color\n+        +background: Texture2D\n+    }\n+    \n+    class EditorStyles {\n+        +label: GUIStyle\n+        +boldLabel: GUIStyle\n+        +miniLabel: GUIStyle\n+        +largeLabel: GUIStyle\n+        +button: GUIStyle\n+        +miniButton: GUIStyle\n+        +toolbar: GUIStyle\n+        +foldout: GUIStyle\n+        +popup: GUIStyle\n+        +helpBox: GUIStyle\n+        +GetStyle(string) GUIStyle\n+    }\n+    \n+    class EditorGUIUtility {\n+        +IconContent(string) GUIContent\n+        +GetBuiltinSkin(EditorSkin) GUISkin\n+    }\n+    \n+    GUISkin *-- GUIStyle : 包含多个\n+    GUIStyle *-- GUIStyleState : 包含多个状态\n+    EditorStyles *-- GUIStyle : 提供编辑器样式\n+    EditorGUIUtility -- GUISkin : 提供内置皮肤\n+```\n+\n+## 核心类和接口\n+\n+### 主要类\n+\n+| 类名 | 功能描述 | 主要属性/方法 |\n+|------|---------|-------------|\n+| **GUISkin** | GUI皮肤容器 | `font`, `customStyles`, `FindStyle()` |\n+| **GUIStyle** | 单个控件样式 | `normal`, `hover`, `active`, `Draw()` |\n+| **GUIStyleState** | 控件状态样式 | `textColor`, `background` |\n+| **EditorStyles** | 编辑器内置样式 | `label`, `boldLabel`, `GetStyle()` |\n+| **EditorGUIUtility** | 编辑器GUI工具 | `IconContent()`, `GetBuiltinSkin()` |\n+\n+### 主要接口\n+\n+| 接口/方法 | 功能描述 | 用法 |\n+|----------|---------|------|\n+| `GUI.skin` | 当前使用的皮肤 | `GUI.skin = mySkin;` |\n+| `GUISkin.FindStyle()` | 查找自定义样式 | `GUIStyle style = skin.FindStyle(\"MyCustomStyle\");` |\n+| `EditorGUIUtility.IconContent()` | 获取内置图标 | `GUIContent icon = EditorGUIUtility.IconContent(\"console.infoicon\");` |\n+| `EditorStyles.GetStyle()` | 获取编辑器样式 | `GUIStyle style = EditorStyles.GetStyle(\"IN TextField\");` |\n+\n+## 示例说明\n+\n+本章提供了三个主要工具示例：\n+\n+1. **GUI 样式预览器 (GUIStylePreviewer)**\n+   - 功能：显示当前 GUISkin 中所有可用的 GUIStyle，并允许实时预览效果\n+   - 位置：`GUIPreviewer/Editor/GUIStylePreviewer.cs`\n+   - 主要特点：可视化展示样式属性，支持样式搜索\n+\n+2. **GUI 图标预览器 (GUIIconPreviewer)**\n+   - 功能：展示 Unity 内置的所有图标\n+   - 位置：`GUIPreviewer/Editor/GUIIconPreviewer.cs`\n+   - 主要特点：按类别分组显示图标，提供搜索功能\n+\n+3. **编辑器样式预览器 (EditorStylesPreviewer)**\n+   - 功能：展示 EditorStyles 中的所有样式\n+   - 位置：`EditorStylesPreviewer/Editor/EditorStylesPreviewer.cs`\n+   - 主要特点：展示编辑器特有样式，便于创建与编辑器匹配的扩展\n+\n+## 官方文档\n+\n+- [GUISkin 官方文档](https://docs.unity3d.com/ScriptReference/GUISkin.html)\n+- [GUIStyle 官方文档](https://docs.unity3d.com/ScriptReference/GUIStyle.html)\n+- [EditorStyles 官方文档](https://docs.unity3d.com/ScriptReference/EditorStyles.html)\n+- [EditorGUIUtility 官方文档](https://docs.unity3d.com/ScriptReference/EditorGUIUtility.html)\n+- [IMGUI 控件详解](https://docs.unity3d.com/Manual/gui-Controls.html)\n+- [自定义编辑器控件](https://docs.unity3d.com/Manual/editor-CustomEditors.html)\n+\n+## 使用建议\n+\n+1. **样式预览工具的使用方法**\n+   - 在 Unity 编辑器中选择 Window > GUI Style Previewer\n+   - 在预览器中可以查看、搜索和测试各种样式\n+\n+2. **创建自定义 GUISkin**\n+   - 在 Project 窗口中右键 > Create > GUI Skin\n+   - 编辑 GUISkin 资源添加自定义样式\n+   - 在代码中设置 `GUI.skin = yourCustomSkin;`\n+\n+3. **最佳实践**\n+   - 使用 GUIStyle.margin 和 GUIStyle.padding 控制元素间距\n+   - 重用样式以保持界面一致性\n+   - 使用预览工具辅助样式开发\n\\ No newline at end of file\n"
                },
                {
                    "date": 1746885191150,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,192 +1,288 @@\n-# Chapter 5 GUISkin\n+# Unity编辑器扩展 - Chapter 5: GUISkin\n \n-## 目录\n-- [简介](#简介)\n-- [GUISkin 特征](#guiskin-特征)\n-- [UML 图](#uml-图)\n-- [核心类和接口](#核心类和接口)\n-- [示例说明](#示例说明)\n-- [官方文档](#官方文档)\n+## 概述\n \n-## 简介\n-GUISkin 是 Unity 中用于自定义 GUI 元素外观的系统。它允许开发者创建统一风格的界面，管理各种 GUI 控件的视觉样式。本章介绍 GUISkin 系统的使用方法，并提供了三个实用工具：GUI 样式预览器、GUI 图标预览器和 Editor 样式预览器。\n+本章专注于Unity编辑器中的GUISkin系统。GUISkin是Unity中用于自定义GUI元素外观的系统，它允许开发者创建统一风格的界面，管理各种GUI控件的视觉样式。通过GUISkin，可以为应用定义一致的视觉标识，并在运行时动态切换不同的皮肤。本章介绍GUISkin系统的使用方法，并提供了多个实用工具帮助预览和管理GUI样式。\n \n-## GUISkin 特征\n+## 核心知识点\n \n-### GUISkin 系统特征\n+### GUISkin系统概览\n \n-```mermaid\n-mindmap\n-  root((GUISkin 系统))\n-    (视觉定制)\n-      [预定义样式]\n-      [自定义样式]\n-      [皮肤切换]\n-    (GUIStyle 管理)\n-      [Button]\n-      [Label]\n-      [TextField]\n-      [Box]\n-      [其他控件样式]\n-    (状态管理)\n-      [Normal]\n-      [Hover]\n-      [Active]\n-      [Focused]\n-      [Disabled]\n-    (资源管理)\n-      [字体设置]\n-      [纹理引用]\n-      [颜色配置]\n-    (编辑器集成)\n-      [运行时使用]\n-      [编辑器扩展]\n-```\n+Unity中的GUISkin系统主要包含以下几个部分：\n \n+- **GUISkin** - 样式的集合容器，包含多种控件的默认样式和自定义样式\n+- **GUIStyle** - 单个控件的样式定义，包含各种状态下的外观设置\n+- **GUIStyleState** - 控件在特定状态(normal、hover等)下的外观\n+- **EditorStyles** - 编辑器专用样式集合\n+- **EditorGUIUtility** - 提供编辑器GUI相关工具方法\n+\n+### GUISkin特征\n+\n | 特征 | 描述 |\n |------|------|\n-| 样式统一性 | 通过 GUISkin 可以为整个应用定义统一的视觉风格 |\n-| 动态切换 | 支持在运行时切换不同的皮肤 |\n-| 细粒度控制 | 可为每种控件类型单独设置样式属性 |\n-| 状态响应 | 每个控件可以对不同交互状态显示不同外观 |\n-| 资源引用 | 可引用外部字体、纹理等资源定制外观 |\n-| 编辑器支持 | 提供编辑器工具便于预览和调整样式 |\n+| **样式统一性** | 通过GUISkin可以为整个应用定义统一的视觉风格 |\n+| **动态切换** | 支持在运行时切换不同的皮肤 |\n+| **细粒度控制** | 可为每种控件类型单独设置样式属性 |\n+| **状态响应** | 每个控件可以对不同交互状态显示不同外观 |\n+| **资源引用** | 可引用外部字体、纹理等资源定制外观 |\n+| **编辑器支持** | 提供编辑器工具便于预览和调整样式 |\n \n-## UML 图\n+### GUIStyle状态\n \n-```mermaid\n-classDiagram\n-    class GUISkin {\n-        +font: Font\n-        +box: GUIStyle\n-        +label: GUIStyle\n-        +textField: GUIStyle\n-        +button: GUIStyle\n-        +toggle: GUIStyle\n-        +window: GUIStyle\n-        +scrollView: GUIStyle\n-        +horizontalSlider: GUIStyle\n-        +horizontalSliderThumb: GUIStyle\n-        +verticalSlider: GUIStyle\n-        +verticalSliderThumb: GUIStyle\n-        +customStyles: GUIStyle[]\n-        +FindStyle(string) GUIStyle\n-    }\n-    \n-    class GUIStyle {\n-        +name: string\n-        +normal: GUIStyleState\n-        +hover: GUIStyleState\n-        +active: GUIStyleState\n-        +focused: GUIStyleState\n-        +onNormal: GUIStyleState\n-        +onHover: GUIStyleState\n-        +onActive: GUIStyleState\n-        +onFocused: GUIStyleState\n-        +border: RectOffset\n-        +margin: RectOffset\n-        +padding: RectOffset\n-        +overflow: RectOffset\n-        +font: Font\n-        +fontSize: int\n-        +fontStyle: FontStyle\n-        +alignment: TextAnchor\n-        +wordWrap: bool\n-        +Draw(Rect, GUIContent, bool) void\n-        +Draw(Rect, GUIContent, int) void\n-    }\n-    \n-    class GUIStyleState {\n-        +textColor: Color\n-        +background: Texture2D\n-    }\n-    \n-    class EditorStyles {\n-        +label: GUIStyle\n-        +boldLabel: GUIStyle\n-        +miniLabel: GUIStyle\n-        +largeLabel: GUIStyle\n-        +button: GUIStyle\n-        +miniButton: GUIStyle\n-        +toolbar: GUIStyle\n-        +foldout: GUIStyle\n-        +popup: GUIStyle\n-        +helpBox: GUIStyle\n-        +GetStyle(string) GUIStyle\n-    }\n-    \n-    class EditorGUIUtility {\n-        +IconContent(string) GUIContent\n-        +GetBuiltinSkin(EditorSkin) GUISkin\n-    }\n-    \n-    GUISkin *-- GUIStyle : 包含多个\n-    GUIStyle *-- GUIStyleState : 包含多个状态\n-    EditorStyles *-- GUIStyle : 提供编辑器样式\n-    EditorGUIUtility -- GUISkin : 提供内置皮肤\n+GUIStyle为每个控件提供多种状态的样式定义：\n+\n+| 状态 | 描述 | 应用场景 |\n+|------|------|----------|\n+| **normal** | 默认状态 | 控件的基本外观 |\n+| **hover** | 悬停状态 | 鼠标悬停在控件上时 |\n+| **active** | 激活状态 | 控件被点击时 |\n+| **focused** | 焦点状态 | 控件获得键盘焦点时 |\n+| **onNormal** | 开启状态的默认外观 | 如toggle控件被选中时 |\n+| **onHover** | 开启状态的悬停外观 | 选中状态下鼠标悬停时 |\n+| **onActive** | 开启状态的激活外观 | 选中状态下被点击时 |\n+| **onFocused** | 开启状态的焦点外观 | 选中状态下获得焦点时 |\n+\n+## 代码结构\n+\n+本章包含的主要代码文件：\n+\n+1. **GUIStylePreviewer.cs**: GUI样式预览工具，展示并测试GUIStyle\n+2. **GUIIconPreviewer.cs**: GUI图标预览工具，浏览Unity内置图标\n+3. **EditorStylesPreviewer.cs**: Editor样式预览工具，展示编辑器特有样式\n+4. **GUISkinExampleEditor.cs**: 演示GUISkin在编辑器扩展中的应用\n+\n+## 思维导图\n+\n ```\n+Unity GUISkin系统\n+├── 核心组件\n+│   ├── GUISkin\n+│   │   ├── 内置样式属性\n+│   │   │   ├── box - 盒子样式\n+│   │   │   ├── button - 按钮样式\n+│   │   │   ├── label - 标签样式\n+│   │   │   ├── textField - 文本框样式\n+│   │   │   ├── textArea - 文本区域样式\n+│   │   │   ├── toggle - 开关样式\n+│   │   │   ├── window - 窗口样式\n+│   │   │   ├── scrollView - 滚动视图样式\n+│   │   │   ├── horizontalSlider/Thumb - 水平滑动条样式\n+│   │   │   └── verticalSlider/Thumb - 垂直滑动条样式\n+│   │   ├── 自定义样式\n+│   │   │   ├── customStyles数组\n+│   │   │   └── FindStyle方法\n+│   │   └── 全局设置\n+│   │       ├── font - 默认字体\n+│   │       └── settings - 其他设置\n\\ No newline at end of file\n+│   │\n+│   ├── GUIStyle\n+│   │   ├── 状态样式\n+│   │   │   ├── normal - 正常状态\n+│   │   │   ├── hover - 悬停状态\n+│   │   │   ├── active - 激活状态\n+│   │   │   ├── focused - 聚焦状态\n+│   │   │   ├── onNormal - 选中正常状态\n+│   │   │   ├── onHover - 选中悬停状态\n+│   │   │   ├── onActive - 选中激活状态\n+│   │   │   └── onFocused - 选中聚焦状态\n+│   │   ├── 布局属性\n+│   │   │   ├── margin - 外边距\n+│   │   │   ├── padding - 内边距\n+│   │   │   ├── border - 边框\n+│   │   │   ├── overflow - 溢出区域\n+│   │   │   ├── contentOffset - 内容偏移\n+│   │   │   └── fixedWidth/Height - 固定宽高\n+│   │   ├── 文本属性\n+│   │   │   ├── font - 字体\n+│   │   │   ├── fontSize - 字体大小\n+│   │   │   ├── fontStyle - 字体样式\n+│   │   │   ├── alignment - 对齐方式\n+│   │   │   ├── wordWrap - 自动换行\n+│   │   │   └── richText - 富文本支持\n+│   │   └── 绘制方法\n+│   │       ├── Draw(Rect, GUIContent, bool) - 基本绘制\n+│   │       ├── Draw(Rect, GUIContent, int) - 控制ID绘制\n+│   │       └── DrawCursor(Rect, GUIContent, int, bool) - 绘制光标\n+│   │\n+│   ├── GUIStyleState\n+│   │   ├── textColor - 文本颜色\n+│   │   └── background - 背景纹理\n+│   │\n+│   └── 编辑器相关类\n+│       ├── EditorStyles\n+│       │   ├── 内置样式\n+│       │   │   ├── label/boldLabel - 标签样式\n+│       │   │   ├── miniButton - 迷你按钮\n+│       │   │   ├── foldout - 折叠控件\n+│       │   │   ├── toolbar - 工具栏\n+│       │   │   └── helpBox - 帮助框\n+│       │   └── GetStyle方法 - 获取命名样式\n+│       └── EditorGUIUtility\n+│           ├── IconContent - 获取内置图标\n+│           └── GetBuiltinSkin - 获取内置皮肤\n+│\n+├── 应用场景\n+│   ├── 运行时界面\n+│   │   ├── 自定义游戏UI\n+│   │   ├── 调试工具\n+│   │   └── 动态切换主题\n+│   └── 编辑器扩展\n+│       ├── 自定义编辑器窗口\n+│       ├── 检视器定制\n+│       └── 属性绘制器\n+│\n+└── 实用工具示例\n+    ├── GUIStylePreviewer\n+    │   ├── 功能\n+    │   │   ├── 预览所有GUIStyle\n+    │   │   ├── 显示样式属性\n+    │   │   ├── 测试样式效果\n+    │   │   └── 搜索过滤样式\n+    │   └── 实现\n+    │       ├── 样式列表展示\n+    │       ├── 动态属性查看\n+    │       └── 交互式测试区域\n+    │\n+    ├── GUIIconPreviewer\n+    │   ├── 功能\n+    │   │   ├── 浏览所有内置图标\n+    │   │   ├── 按类别过滤\n+    │   │   └── 搜索特定图标\n+    │   └── 实现\n+    │       ├── 图标收集方法\n+    │       ├── 分类展示\n+    │       └── 复制图标名称\n+    │\n+    └── EditorStylesPreviewer\n+        ├── 功能\n+        │   ├── 预览编辑器样式\n+        │   ├── 检视样式属性\n+        │   └── 复制样式代码\n+        └── 实现\n+            ├── 获取编辑器样式\n+            ├── 属性分析\n+            └── 代码生成\n+```\n \n-## 核心类和接口\n+## UML类图\n \n-### 主要类\n+```\n++------------------------+          +------------------------+          +------------------------+\n+|        GUISkin         |          |        GUIStyle        |          |     GUIStyleState      |\n++------------------------+          +------------------------+          +------------------------+\n+| + font: Font           |          | + name: string         |          | + textColor: Color     |\n+| + box: GUIStyle        |<>--------| + normal: GUIStyleState|<>--------| + background: Texture2D|\n+| + label: GUIStyle      |          | + hover: GUIStyleState |          +------------------------+\n+| + button: GUIStyle     |          | + active: GUIStyleState|\n+| + textField: GUIStyle  |          | + focused: GUIStyleState\n+| + toggle: GUIStyle     |          | + onNormal: GUIStyleState\n+| + window: GUIStyle     |          | + onHover: GUIStyleState\n+| + scrollView: GUIStyle |          | + onActive: GUIStyleState\n+| + customStyles: GUIStyle[]        | + onFocused: GUIStyleState\n++------------------------+          | + border: RectOffset   |\n+| + FindStyle(string): GUIStyle     | + margin: RectOffset   |\n++------------------------+          | + padding: RectOffset  |\n+                                    | + overflow: RectOffset |\n+                                    | + font: Font           |\n+                                    | + fontSize: int        |\n+                                    | + fontStyle: FontStyle |\n+                                    | + alignment: TextAnchor|\n+                                    | + wordWrap: bool       |\n+                                    +------------------------+\n+                                    | + Draw(Rect, GUIContent, bool)\n+                                    | + Draw(Rect, GUIContent, int)\n+                                    +------------------------+\n \n++------------------------+          +------------------------+\n+|      EditorStyles      |          |   EditorGUIUtility     |\n++------------------------+          +------------------------+\n+| + label: GUIStyle      |          | + (static methods)     |\n+| + boldLabel: GUIStyle  |          +------------------------+\n+| + miniLabel: GUIStyle  |          | + IconContent(string): GUIContent\n+| + button: GUIStyle     |          | + GetBuiltinSkin(EditorSkin): GUISkin\n+| + toggle: GUIStyle     |          +------------------------+\n+| + foldout: GUIStyle    |\n+| + ...                  |\n++------------------------+\n+| + GetStyle(string): GUIStyle\n++------------------------+\n+\n++------------------------+          +------------------------+          +------------------------+\n+|   GUIStylePreviewer    |          |   GUIIconPreviewer     |          | EditorStylesPreviewer |\n++------------------------+          +------------------------+          +------------------------+\n+| - styles: List<GUIStyle>          | - icons: Dictionary<string, GUIContent>  | - styles: Dictionary<string, GUIStyle>\n+| - search: string       |          | - search: string       |          | - search: string       |\n+| - scroll: Vector2      |          | - scroll: Vector2      |          | - scroll: Vector2      |\n+| - selectedStyle: GUIStyle         | - selectedIcon: GUIContent        | - selectedStyle: GUIStyle\n++------------------------+          +------------------------+          +------------------------+\n+| + OnGUI()              |          | + OnGUI()              |          | + OnGUI()              |\n+| - DrawStyleList()      |          | - CollectIcons()       |          | - CollectEditorStyles()|\n+| - DrawStyleDetails()   |          | - DrawIconGrid()       |          | - DrawStyleList()      |\n+| - DrawStylePreview()   |          | - DrawIconDetails()    |          | - DrawStyleDetails()   |\n++------------------------+          +------------------------+          +------------------------+\n+```\n+\n+## 重要的类和接口\n+\n+### 核心类\n+\n | 类名 | 功能描述 | 主要属性/方法 |\n |------|---------|-------------|\n-| **GUISkin** | GUI皮肤容器 | `font`, `customStyles`, `FindStyle()` |\n-| **GUIStyle** | 单个控件样式 | `normal`, `hover`, `active`, `Draw()` |\n+| **GUISkin** | GUI皮肤容器，保存一组样式 | `font`, `button`, `label`, `customStyles`, `FindStyle()` |\n+| **GUIStyle** | 单个控件样式定义 | `normal`, `hover`, `active`, `focused`, `Draw()` |\n | **GUIStyleState** | 控件状态样式 | `textColor`, `background` |\n-| **EditorStyles** | 编辑器内置样式 | `label`, `boldLabel`, `GetStyle()` |\n-| **EditorGUIUtility** | 编辑器GUI工具 | `IconContent()`, `GetBuiltinSkin()` |\n+| **EditorStyles** | 编辑器内置样式集合 | `label`, `boldLabel`, `miniButton`, `GetStyle()` |\n+| **EditorGUIUtility** | 编辑器GUI工具类 | `IconContent()`, `GetBuiltinSkin()` |\n \n-### 主要接口\n+### 实用工具类\n \n+| 类名 | 功能描述 | 主要方法 |\n+|------|---------|----------|\n+| **GUIStylePreviewer** | GUI样式预览工具 | `OnGUI()`, `DrawStyleList()`, `DrawStyleDetails()` |\n+| **GUIIconPreviewer** | GUI图标预览工具 | `OnGUI()`, `CollectIcons()`, `DrawIconGrid()` |\n+| **EditorStylesPreviewer** | 编辑器样式预览工具 | `OnGUI()`, `CollectEditorStyles()`, `DrawStyleList()` |\n+| **GUISkinExampleEditor** | GUISkin应用示例 | `OnInspectorGUI()`, `DrawCustomInspector()` |\n+\n+### 主要接口和API\n+\n | 接口/方法 | 功能描述 | 用法 |\n |----------|---------|------|\n | `GUI.skin` | 当前使用的皮肤 | `GUI.skin = mySkin;` |\n | `GUISkin.FindStyle()` | 查找自定义样式 | `GUIStyle style = skin.FindStyle(\"MyCustomStyle\");` |\n | `EditorGUIUtility.IconContent()` | 获取内置图标 | `GUIContent icon = EditorGUIUtility.IconContent(\"console.infoicon\");` |\n | `EditorStyles.GetStyle()` | 获取编辑器样式 | `GUIStyle style = EditorStyles.GetStyle(\"IN TextField\");` |\n \n-## 示例说明\n+## 应用场景\n \n-本章提供了三个主要工具示例：\n+1. **自定义编辑器窗口**: 创建与Unity编辑器风格一致的自定义窗口\n+2. **游戏内界面**: 在游戏运行时使用自定义皮肤统一界面风格\n+3. **主题切换**: 实现运行时动态切换不同的界面主题\n+4. **编辑器扩展**: 为自定义检视器和属性绘制器提供一致的视觉样式\n+5. **调试工具**: 创建具有统一风格的调试和开发辅助工具\n \n-1. **GUI 样式预览器 (GUIStylePreviewer)**\n-   - 功能：显示当前 GUISkin 中所有可用的 GUIStyle，并允许实时预览效果\n-   - 位置：`GUIPreviewer/Editor/GUIStylePreviewer.cs`\n-   - 主要特点：可视化展示样式属性，支持样式搜索\n+## 最佳实践\n \n-2. **GUI 图标预览器 (GUIIconPreviewer)**\n-   - 功能：展示 Unity 内置的所有图标\n-   - 位置：`GUIPreviewer/Editor/GUIIconPreviewer.cs`\n-   - 主要特点：按类别分组显示图标，提供搜索功能\n+1. **样式复用**: 尽量重用已有样式，而不是为每个控件创建新样式\n+2. **合理分组**: 在GUISkin的customStyles中按功能分组管理样式\n+3. **使用预览工具**: 使用提供的预览工具测试和选择合适的样式\n+4. **状态一致性**: 确保所有状态(normal、hover等)都有适当的设置\n+5. **布局控制**: 正确设置margin、padding和border以获得良好的控件间距\n+6. **性能考虑**: 避免频繁创建新的GUIStyle实例，缓存常用样式\n \n-3. **编辑器样式预览器 (EditorStylesPreviewer)**\n-   - 功能：展示 EditorStyles 中的所有样式\n-   - 位置：`EditorStylesPreviewer/Editor/EditorStylesPreviewer.cs`\n-   - 主要特点：展示编辑器特有样式，便于创建与编辑器匹配的扩展\n+## 相关资源\n \n-## 官方文档\n+### 官方文档\n \n - [GUISkin 官方文档](https://docs.unity3d.com/ScriptReference/GUISkin.html)\n - [GUIStyle 官方文档](https://docs.unity3d.com/ScriptReference/GUIStyle.html)\n - [EditorStyles 官方文档](https://docs.unity3d.com/ScriptReference/EditorStyles.html)\n - [EditorGUIUtility 官方文档](https://docs.unity3d.com/ScriptReference/EditorGUIUtility.html)\n - [IMGUI 控件详解](https://docs.unity3d.com/Manual/gui-Controls.html)\n - [自定义编辑器控件](https://docs.unity3d.com/Manual/editor-CustomEditors.html)\n \n-## 使用建议\n+### 教程与参考\n \n-1. **样式预览工具的使用方法**\n-   - 在 Unity 编辑器中选择 Window > GUI Style Previewer\n-   - 在预览器中可以查看、搜索和测试各种样式\n-\n-2. **创建自定义 GUISkin**\n-   - 在 Project 窗口中右键 > Create > GUI Skin\n-   - 编辑 GUISkin 资源添加自定义样式\n-   - 在代码中设置 `GUI.skin = yourCustomSkin;`\n-\n-3. **最佳实践**\n-   - 使用 GUIStyle.margin 和 GUIStyle.padding 控制元素间距\n-   - 重用样式以保持界面一致性\n-   - 使用预览工具辅助样式开发\n+- [Unity IMGUI系统概览](https://docs.unity3d.com/Manual/GUIScriptingGuide.html)\n+- [Unity编辑器扩展基础](https://docs.unity3d.com/Manual/ExtendingTheEditor.html)\n+- [自定义编辑器样式最佳实践](https://blog.unity.com/technology/custom-editor-styles-best-practices)\n+- [Unity内置图标参考](https://unitylist.com/p/5c3/Unity-editor-icons)\n\\ No newline at end of file\n"
                }
            ],
            "date": 1746882817428,
            "name": "Commit-0",
            "content": "# Unity编辑器扩展 - Chapter 5: GUISkin\r\n\r\n## 概述\r\n\r\n本章专注于Unity的皮肤系统(GUISkin)的开发和应用，展示了如何创建和自定义编辑器界面的视觉样式。通过GUISkin，可以统一管理GUI元素的外观，提供一致的用户体验，并使界面更加美观和专业。\r\n\r\n## 核心特征\r\n\r\n### GUISkin的基本特征\r\n\r\n| 特征 | 描述 |\r\n|------|------|\r\n| **样式统一** | GUISkin允许统一定义和管理所有GUI元素的视觉样式 |\r\n| **自定义外观** | 可以自定义按钮、标签、文本框等控件的外观 |\r\n| **资源管理** | 作为资源存储在项目中，可以在不同场景和项目间共享 |\r\n| **运行时切换** | 可以在运行时动态切换不同的皮肤 |\r\n| **可扩展** | 支持自定义样式添加到皮肤中 |\r\n| **编辑器集成** | 可以在编辑器中使用，提供一致的开发体验 |\r\n\r\n### GUISkin的重要组件\r\n\r\n| 组件 | 描述 | 用途 |\r\n|------|---------|------|\r\n| **GUIStyle** | 定义单个控件的样式 | 控制字体、颜色、背景等属性 |\r\n| **CustomStyles** | 自定义样式集合 | 存储额外的自定义样式 |\r\n| **Font** | 字体资源 | 定义文本显示的字体 |\r\n| **Settings** | 全局设置 | 控制全局参数如间距、双击行为等 |\r\n| **Box/Button/Label等** | 预定义控件样式 | 为特定类型的控件提供默认样式 |\r\n\r\n### EditorGUIUtility\r\n\r\nEditorGUIUtility是Unity编辑器中用于处理GUI相关功能的实用工具类。它提供了许多在编辑器扩展中常用的方法和属性。\r\n\r\n#### 核心特性\r\n\r\n- **图标访问**：提供对Unity内置图标的访问。\r\n- **缩放控制**：处理界面元素的缩放和像素对齐。\r\n- **状态管理**：管理编辑器GUI的各种状态。\r\n- **全局GUI设置**：提供对全局GUI设置的访问。\r\n\r\n#### 常用方法和属性\r\n\r\n| 方法/属性 | 描述 |\r\n|-----------|------|\r\n| **IconContent** | 获取带有图标的GUIContent |\r\n| **GetControlID** | 获取GUI控件的唯一ID |\r\n| **FindTexture** | 通过名称查找纹理 |\r\n| **singleLineHeight** | 获取标准的单行高度 |\r\n| **standardVerticalSpacing** | 获取标准的垂直间距 |\r\n| **hierarchyMode** | 获取或设置当前是否处于层次结构模式 |\r\n| **GetBuiltinSkin** | 获取内置的皮肤 |\r\n\r\n### EditorStyles\r\n\r\nEditorStyles提供了对Unity编辑器中预定义样式的访问，让开发者可以在自定义编辑器窗口中使用与Unity内置编辑器相同的样式。\r\n\r\n#### 核心特性\r\n\r\n- **预定义样式**：提供对Unity编辑器中所有预定义样式的访问。\r\n- **一致性**：确保自定义编辑器与Unity内置编辑器有一致的外观。\r\n- **样式复用**：可以基于预定义样式创建自定义样式。\r\n\r\n#### 常用样式\r\n\r\n| 样式 | 描述 |\r\n|------|------|\r\n| **boldLabel** | 粗体标签样式 |\r\n| **foldout** | 折叠控件样式 |\r\n| **helpBox** | 帮助框样式 |\r\n| **miniButton** | 迷你按钮样式 |\r\n| **textField** | 文本输入框样式 |\r\n| **toolbarButton** | 工具栏按钮样式 |\r\n| **whiteLabel** | 白色标签样式 |\r\n\r\n## UML类图\r\n\r\n```\r\n+----------------------------+        +--------------------------------+\r\n|          UnityEngine       |        |          UnityEditor           |\r\n+----------------------------+        +--------------------------------+\r\n| + GUI                      |        | + EditorGUI                    |\r\n| + GUILayout                |        | + EditorGUILayout              |\r\n| + GUIContent               |        | + EditorGUIUtility             |\r\n| + GUIStyle                 |        | + EditorStyles                 |\r\n| + GUISkin                  |        | + EditorWindow                 |\r\n+----------------------------+        +--------------------------------+\r\n\r\n+----------------------------+        +--------------------------------+\r\n|         GUISkin            |        |            GUIStyle            |\r\n+----------------------------+        +--------------------------------+\r\n| + box: GUIStyle            |        | + name                         |\r\n| + button: GUIStyle         |        | + normal/hover/active/focused  |\r\n| + label: GUIStyle          |        | + alignment                    |\r\n| + textField: GUIStyle      |        | + fontSize/fontStyle           |\r\n| + window: GUIStyle         |        | + padding/margin/border        |\r\n| + customStyles: GUIStyle[] |        | + fixedWidth/fixedHeight       |\r\n+----------------------------+        | + stretchWidth/stretchHeight   |\r\n| + FindStyle()              |        | + wordWrap                     |\r\n+----------------------------+        +--------------------------------+\r\n\r\n+----------------------------+\r\n|     GUIPreviewWindow       |\r\n+----------------------------+\r\n| - skin: GUISkin            |\r\n| - scrollPosition           |\r\n| - selectedStyle            |\r\n+----------------------------+\r\n| + OnGUI()                  |\r\n| - DrawStyleList()          |\r\n| - DrawPreview()            |\r\n| - DrawStyleProperties()    |\r\n+----------------------------+\r\n\r\n+----------------------------+        +--------------------------------+\r\n|   EditorStylesPreviewWindow|        |  GUIStyleStatePreviewWindow    |\r\n+----------------------------+        +--------------------------------+\r\n| - scrollPosition           |        | - state: GUIStyleState         |\r\n| - selectedStyle            |        | - previewContent               |\r\n+----------------------------+        +--------------------------------+\r\n| + OnGUI()                  |        | + OnGUI()                      |\r\n| - DrawStyleList()          |        | - DrawPreview()                |\r\n| - DrawPreview()            |        | - DrawStateProperties()        |\r\n+----------------------------+        +--------------------------------+\r\n```\r\n\r\n## 思维导图\r\n\r\n```\r\nUnity GUISkin系统\r\n├── 基础概念\r\n│   ├── GUISkin\r\n│   │   ├── 定义\r\n│   │   │   ├── GUI元素外观的集合\r\n│   │   │   ├── ScriptableObject资源\r\n│   │   │   └── 包含多种控件样式定义\r\n│   │   ├── 组成部分\r\n│   │   │   ├── 预定义控件样式\r\n│   │   │   │   ├── box - 盒子样式\r\n│   │   │   │   ├── button - 按钮样式\r\n│   │   │   │   ├── label - 标签样式\r\n│   │   │   │   ├── textField - 文本框样式\r\n│   │   │   │   ├── textArea - 文本区域样式\r\n│   │   │   │   ├── window - 窗口样式\r\n│   │   │   │   ├── horizontalSlider - 水平滑块样式\r\n│   │   │   │   ├── horizontalSliderThumb - 水平滑块拇指样式\r\n│   │   │   │   ├── verticalSlider - 垂直滑块样式\r\n│   │   │   │   └── verticalSliderThumb - 垂直滑块拇指样式\r\n│   │   │   ├── 设置\r\n│   │   │   │   ├── font - 全局字体\r\n│   │   │   │   ├── settings - 全局设置\r\n│   │   │   │   └── customStyles - 自定义样式数组\r\n│   │   │   └── 方法\r\n│   │   │       ├── FindStyle() - 查找指定名称的样式\r\n│   │   │       └── GetStyle() - 获取指定名称的样式\r\n│   │   └── 使用方式\r\n│   │       ├── 创建GUISkin资源\r\n│   │       ├── 在GUI.skin中设置激活的皮肤\r\n│   │       └── 应用于GUI/GUILayout控件\r\n│   │\r\n│   ├── GUIStyle\r\n│   │   ├── 定义\r\n│   │   │   ├── 单个控件样式的定义\r\n│   │   │   └── 包含控件所有视觉属性\r\n│   │   ├── 状态\r\n│   │   │   ├── normal - 正常状态\r\n│   │   │   ├── hover - 悬停状态\r\n│   │   │   ├── active - 激活状态\r\n│   │   │   ├── focused - 焦点状态\r\n│   │   │   ├── onNormal - 开启状态下的正常状态\r\n│   │   │   ├── onHover - 开启状态下的悬停状态\r\n│   │   │   ├── onActive - 开启状态下的激活状态\r\n│   │   │   └── onFocused - 开启状态下的焦点状态\r\n│   │   ├── 外观属性\r\n│   │   │   ├── fontSize - 字体大小\r\n│   │   │   ├── fontStyle - 字体样式\r\n│   │   │   ├── alignment - 对齐方式\r\n│   │   │   ├── wordWrap - 文字换行\r\n│   │   │   ├── clipping - 裁剪方式\r\n│   │   │   ├── imagePosition - 图片位置\r\n│   │   │   └── contentOffset - 内容偏移\r\n│   │   ├── 布局属性\r\n│   │   │   ├── fixedWidth - 固定宽度\r\n│   │   │   ├── fixedHeight - 固定高度\r\n│   │   │   ├── stretchWidth - 拉伸宽度\r\n│   │   │   ├── stretchHeight - 拉伸高度\r\n│   │   │   ├── margin - 外边距\r\n│   │   │   ├── padding - 内边距\r\n│   │   │   ├── overflow - 溢出\r\n│   │   │   └── border - 边框\r\n│   │   └── 方法\r\n│   │       ├── CalcSize() - 计算内容尺寸\r\n│   │       ├── Draw() - 绘制控件\r\n│   │       └── GetStyleStateForCurrentEvent() - 获取当前事件的状态\r\n│   │\r\n│   ├── GUIStyleState\r\n│   │   ├── 定义\r\n│   │   │   ├── 控件在特定状态下的外观\r\n│   │   │   └── 包含背景和文本颜色\r\n│   │   ├── 属性\r\n│   │   │   ├── background - 背景纹理\r\n│   │   │   ├── textColor - 文本颜色\r\n│   │   │   ├── scaledBackgrounds - 缩放背景纹理数组\r\n│   │   │   └── 其他属性\r\n│   │   └── 应用\r\n│   │       ├── 设置不同状态下的背景\r\n│   │       └── 设置不同状态下的文本颜色\r\n│   │\r\n│   └── EditorStyles\r\n│       ├── 定义\r\n│       │   ├── Unity编辑器内置样式的集合\r\n│       │   └── 提供对编辑器常用样式的访问\r\n│       ├── 常用样式\r\n│       │   ├── boldLabel - 粗体标签\r\n│       │   ├── foldout - 折叠控件\r\n│       │   ├── helpBox - 帮助框\r\n│       │   ├── label - 标准标签\r\n│       │   ├── miniButton - 迷你按钮\r\n│       │   ├── popup - 弹出菜单\r\n│       │   ├── textField - 文本框\r\n│       │   ├── toolbarButton - 工具栏按钮\r\n│       │   └── whiteLabel - 白色标签\r\n│       └── 使用方式\r\n│           ├── 直接访问静态属性\r\n│           ├── 复制样式进行自定义\r\n│           └── 在自定义编辑器中应用\r\n│   \r\n├── 工具和实用类\r\n│   ├── EditorGUIUtility\r\n│   │   ├── 图标和纹理\r\n│   │   │   ├── IconContent() - 获取带图标的GUIContent\r\n│   │   │   ├── FindTexture() - 查找纹理\r\n│   │   │   └── LoadRequired() - 加载必需资源\r\n│   │   ├── 度量和布局\r\n│   │   │   ├── singleLineHeight - 单行高度\r\n│   │   │   ├── standardVerticalSpacing - 标准垂直间距\r\n│   │   │   └── fieldWidth - 字段宽度\r\n│   │   ├── 状态和ID\r\n│   │   │   ├── GetControlID() - 获取控件ID\r\n│   │   │   ├── hotControl - 热点控件ID\r\n│   │   │   └── keyboardControl - 键盘焦点控件ID\r\n│   │   └── 杂项\r\n│   │       ├── systemCopyBuffer - 系统剪贴板\r\n│   │       ├── isProSkin - 是否使用专业皮肤\r\n│   │       └── GetBuiltinSkin() - 获取内置皮肤\r\n│   │\r\n│   ├── GUIUtility\r\n│   │   ├── 坐标转换\r\n│   │   │   ├── ScreenToGUIPoint() - 屏幕坐标转GUI坐标\r\n│   │   │   └── GUIToScreenPoint() - GUI坐标转屏幕坐标\r\n│   │   ├── 状态管理\r\n│   │   │   ├── hotControl - 热点控件ID\r\n│   │   │   ├── keyboardControl - 键盘焦点控件ID\r\n│   │   │   └── ExitGUI() - 退出当前GUI处理\r\n│   │   └── 其他实用方法\r\n│   │       ├── GetStateObject() - 获取状态对象\r\n│   │       ├── GetControlID() - 获取控件ID\r\n│   │       └── systemCopyBuffer - 系统剪贴板\r\n│   │\r\n│   └── GUIContent\r\n│       ├── 定义\r\n│       │   ├── 包含文本、图像和提示的内容容器\r\n│       │   └── 用于向控件提供内容\r\n│       ├── 属性\r\n│       │   ├── text - 显示文本\r\n│       │   ├── image - 显示图像\r\n│       │   └── tooltip - 提示文本\r\n│       └── 用法\r\n│           ├── 创建带文本的内容\r\n│           ├── 创建带图像的内容\r\n│           └── 创建完整内容(文本+图像+提示)\r\n│   \r\n├── 示例应用\r\n│   ├── GUIPreviewer\r\n│   │   ├── 功能\r\n│   │   │   ├── 浏览和编辑GUISkin\r\n│   │   │   ├── 预览各种控件外观\r\n│   │   │   ├── 修改样式属性\r\n│   │   │   └── 实时查看效果\r\n│   │   ├── 界面组成\r\n│   │   │   ├── 样式列表区域\r\n│   │   │   ├── 预览区域\r\n│   │   │   └── 属性编辑区域\r\n│   │   └── 实现技术\r\n│   │       ├── EditorWindow基类\r\n│   │       ├── SerializedObject操作\r\n│   │       └── 拖放功能\r\n│   │\r\n│   ├── EditorStylesPreviewer\r\n│   │   ├── 功能\r\n│   │   │   ├── 浏览Unity内置编辑器样式\r\n│   │   │   ├── 预览各种内置控件外观\r\n│   │   │   ├── 查看样式属性\r\n│   │   │   └── 复制样式到自定义皮肤\r\n│   │   ├── 界面组成\r\n│   │   │   ├── 样式列表区域\r\n│   │   │   ├── 预览区域\r\n│   │   │   └── 属性查看区域\r\n│   │   └── 实现技术\r\n│   │       ├── 反射获取EditorStyles属性\r\n│   │       ├── 样式复制功能\r\n│   │       └── 样式搜索过滤\r\n│   │\r\n│   └── GUIStyleStatePreview\r\n│       ├── 功能\r\n│       │   ├── 查看和编辑GUIStyleState\r\n│       │   ├── 预览不同状态下的外观\r\n│       │   ├── 修改背景和文本颜色\r\n│       │   └── 应用于目标样式\r\n│       ├── 界面组成\r\n│       │   ├── 状态选择区域\r\n│       │   ├── 预览区域\r\n│       │   └── 属性编辑区域\r\n│       └── 实现技术\r\n│           ├── 背景纹理编辑\r\n│           ├── 颜色选择器集成\r\n│           └── 实时预览更新\r\n│   \r\n├── 实现技术\r\n│   ├── GUISkin编辑和创建\r\n│   │   ├── 皮肤资源管理\r\n│   │   │   ├── 创建新GUISkin资源\r\n│   │   │   ├── 保存和加载皮肤\r\n│   │   │   └── 复制和合并皮肤\r\n│   │   ├── 样式编辑\r\n│   │   │   ├── 编辑预定义样式\r\n│   │   │   ├── 添加自定义样式\r\n│   │   │   └── 从EditorStyles复制样式\r\n│   │   └── 适用范围\r\n│   │       ├── 编辑器扩展\r\n│   │       ├── 游戏内GUI\r\n│   │       └── 运行时界面\r\n│   │\r\n│   ├── 样式调试和可视化\r\n│   │   ├── 查看样式信息\r\n│   │   │   ├── 查看样式属性\r\n│   │   │   ├── 查看样式状态\r\n│   │   │   └── 查看样式效果\r\n│   │   ├── 样式比较\r\n│   │   │   ├── 比较不同样式差异\r\n│   │   │   ├── 查看状态之间的差异\r\n│   │   │   └── 样式继承关系\r\n│   │   └── 工作流改进\r\n│   │       ├── 快速复制样式代码\r\n│   │       ├── 样式调试工具\r\n│   │       └── 实时预览和调整\r\n│   │\r\n│   ├── 编辑器样式扩展\r\n│   │   ├── 自定义控件样式\r\n│   │   │   ├── 创建全新控件样式\r\n│   │   │   ├── 扩展现有控件样式\r\n│   │   │   └── 适配不同编辑器主题\r\n│   │   ├── 一致性设计\r\n│   │   │   ├── 与Unity编辑器风格一致\r\n│   │   │   ├── 符合UI/UX设计原则\r\n│   │   │   └── 适应不同分辨率\r\n│   │   └── 样式共享和复用\r\n│   │       ├── 在项目间共享样式\r\n│   │       ├── 创建样式库\r\n│   │       └── 版本控制集成\r\n│   │\r\n│   └── 运行时皮肤切换\r\n│       ├── 皮肤加载机制\r\n│       │   ├── 资源加载和卸载\r\n│       │   ├── 内存管理\r\n│       │   └── 异步加载支持\r\n│       ├── 动态皮肤切换\r\n│       │   ├── 基于条件切换皮肤\r\n│       │   ├── 平滑过渡效果\r\n│       │   └── 用户自定义皮肤\r\n│       └── 性能优化\r\n│           ├── 皮肤缓存机制\r\n│           ├── 纹理内存优化\r\n│           └── 减少绘制批次\r\n│   \r\n└── 最佳实践\r\n    ├── 样式组织和管理\r\n    │   ├── 命名约定\r\n    │   │   ├── 清晰描述性的样式名称\r\n    │   │   ├── 样式分类前缀\r\n    │   │   └── 状态命名规则\r\n    │   ├── 样式层次结构\r\n    │   │   ├── 基础样式和派生样式\r\n    │   │   ├── 组件样式组织\r\n    │   │   └── 主题变体管理\r\n    │   └── 版本控制策略\r\n    │       ├── 样式资源的版本管理\r\n    │       ├── 样式更新记录\r\n    │       └── 向后兼容性维护\r\n    │\r\n    ├── 性能和资源管理\r\n    │   ├── 纹理优化\r\n    │   │   ├── 纹理分辨率控制\r\n    │   │   ├── 纹理图集使用\r\n    │   │   └── 纹理压缩设置\r\n    │   ├── 样式实例化\r\n    │   │   ├── 减少重复样式创建\r\n    │   │   ├── 样式对象池\r\n    │   │   └── 延迟加载策略\r\n    │   └── 内存管理\r\n    │       ├── 及时释放不需要的资源\r\n    │       ├── 避免样式泄漏\r\n    │       └── 运行时内存占用分析\r\n    │\r\n    ├── 用户体验设计\r\n    │   ├── 视觉一致性\r\n    │   │   ├── 控件外观统一\r\n    │   │   ├── 色彩和字体协调\r\n    │   │   └── 适应编辑器主题\r\n    │   ├── 响应式设计\r\n    │   │   ├── 适应不同窗口大小\r\n    │   │   ├── 高DPI支持\r\n    │   │   └── 缩放行为控制\r\n    │   └── 可访问性\r\n    │       ├── 适当的对比度\r\n    │       ├── 清晰的视觉反馈\r\n    │       └── 可调整的文本大小\r\n    │\r\n    └── 调试和测试\r\n        ├── 样式问题排查\r\n        │   ├── 常见问题及解决方案\r\n        │   ├── 样式渲染调试\r\n        │   └── 属性值验证\r\n        ├── 跨平台测试\r\n        │   ├── 在不同操作系统上的表现\r\n        │   ├── 不同Unity版本兼容性\r\n        │   └── 编辑器和运行时差异\r\n        └── 性能分析\r\n            ├── GUI绘制性能分析\r\n            ├── 内存使用监控\r\n            └── 资源使用优化\r\n```\r\n\r\n## 重要的类和接口\r\n\r\n### GUISkin相关类和接口\r\n\r\n| 类/接口名称 | 类型 | 描述 | 重要方法/属性 |\r\n|------------|-----|------|--------------|\r\n| `GUISkin` | 类 | GUI皮肤定义 | `box`, `button`, `label`, `customStyles`, `FindStyle()` |\r\n| `GUIStyle` | 类 | 单个控件的样式定义 | `normal`, `hover`, `fontSize`, `alignment`, `padding`, `margin` |\r\n| `GUIStyleState` | 类 | 控件在特定状态下的外观 | `background`, `textColor`, `scaledBackgrounds` |\r\n\r\n### 预览工具类\r\n\r\n| 类/接口名称 | 类型 | 描述 | 重要方法/属性 |\r\n|------------|-----|------|--------------|\r\n| `GUIPreviewWindow` | 类 | GUISkin预览窗口 | `OnGUI()`, `DrawStyleList()`, `DrawPreview()` |\r\n| `EditorStylesPreviewWindow` | 类 | EditorStyles预览窗口 | `OnGUI()`, `DrawStyleList()`, `DrawPreview()` |\r\n| `GUIStyleStatePreviewWindow` | 类 | GUIStyleState预览窗口 | `OnGUI()`, `DrawPreview()`, `DrawStateProperties()` |\r\n\r\n### 编辑器工具类\r\n\r\n| 类/接口名称 | 类型 | 描述 | 重要方法/属性 |\r\n|------------|-----|------|--------------|\r\n| `EditorGUIUtility` | 类 | 编辑器GUI实用工具 | `IconContent()`, `singleLineHeight`, `FindTexture()` |\r\n| `EditorStyles` | 类 | 编辑器预定义样式 | `boldLabel`, `foldout`, `helpBox`, `miniButton` |\r\n\r\n## 实现细节与设计模式\r\n\r\n1. **单例模式**\r\n   - 预览窗口类通常使用单例模式，确保只有一个窗口实例\r\n   - 通过`GetWindow<T>()`方法获取或创建窗口实例\r\n\r\n2. **观察者模式**\r\n   - 样式更改时通知预览区域更新\r\n   - 使用事件系统监听样式属性变化\r\n\r\n3. **工厂模式**\r\n   - 用于创建不同类型的样式和预览控件\r\n   - 根据样式类型生成相应的编辑界面\r\n\r\n4. **命令模式**\r\n   - 用于实现样式编辑的撤销和重做功能\r\n   - 每次样式修改封装为命令对象\r\n\r\n5. **MVC架构**\r\n   - 将样式数据(Model)、预览(View)和编辑逻辑(Controller)分离\r\n   - 提高代码组织性和可维护性\r\n\r\n## 案例应用\r\n\r\n### 1. GUIPreviewer\r\nGUIPreviewer是一个用于预览和编辑GUISkin的工具窗口，允许开发者查看和修改皮肤的各种样式。\r\n\r\n主要功能：\r\n- 预览GUISkin中的所有样式\r\n- 实时编辑样式属性\r\n- 查看不同状态下的样式外观\r\n- 在编辑器中应用修改后的样式\r\n\r\n### 2. EditorStylesPreviewer\r\nEditorStylesPreviewer展示Unity编辑器内置的样式，帮助开发者了解和使用这些样式。\r\n\r\n主要功能：\r\n- 浏览所有EditorStyles中的预定义样式\r\n- 预览样式在不同状态下的外观\r\n- 查看样式属性详情\r\n- 复制样式到自定义皮肤\r\n\r\n### 3. 自定义编辑器主题\r\n基于GUISkin系统创建完整的编辑器主题，统一编辑器扩展的外观。\r\n\r\n主要功能：\r\n- 定义一套统一的控件样式\r\n- 根据Unity编辑器主题自动适应明暗模式\r\n- 提供多个预设主题供选择\r\n- 允许用户自定义主题\r\n\r\n\r\n"
        }
    ]
}