{
    "sourceFile": "Assets/UnityEditor/Chapter 7 EditorPrefs/EditorPrefsUtility/README.md",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 1,
            "patches": [
                {
                    "date": 1746899993114,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1746900170146,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -203,5 +203,5 @@\n \r\n ## 相关资源\r\n - [Unity文档: EditorPrefs](https://docs.unity3d.com/ScriptReference/EditorPrefs.html)\r\n - [Unity文档: JsonUtility](https://docs.unity3d.com/ScriptReference/JsonUtility.html)\r\n-- [Unity文档: 序列化](https://docs.unity3d.com/Manual/script-Serialization.html)\n\\ No newline at end of file\n+- [Unity文档: 序列化](https://docs.unity3d.com/Manual/script-Serialization.html)\r\n"
                }
            ],
            "date": 1746899993114,
            "name": "Commit-0",
            "content": "# EditorPrefsUtility 模块\r\n\r\n## 概述\r\nEditorPrefsUtility 模块提供了对Unity内置 EditorPrefs 功能的扩展，使其能够存储和读取复杂的对象数据类型，而不仅限于基本数据类型（int、float、string、bool）。该工具利用 Unity 的 JsonUtility 实现对象的序列化和反序列化，将复杂对象转换为 JSON 字符串后存储，并在需要时从 JSON 字符串重新构建对象。这使得开发者可以更方便地在编辑器会话之间持久化复杂的数据结构，大大增强了编辑器工具开发的灵活性。\r\n\r\n## 核心功能\r\n- **对象序列化存储**：将对象序列化为JSON并通过EditorPrefs存储\r\n- **对象反序列化读取**：从EditorPrefs读取JSON并反序列化为对象\r\n- **类型安全的API**：提供泛型接口，确保类型安全的数据存取\r\n\r\n## 重要接口和类\r\n\r\n### `EditorPrefsUtility` 类\r\n提供扩展EditorPrefs功能的静态方法集合。\r\n\r\n| 方法 | 说明 |\r\n|------|------|\r\n| `SetObject<T>(string key, T t)` | 将对象序列化为JSON并存储在EditorPrefs中 |\r\n| `GetObject<T>(string key)` | 从EditorPrefs读取JSON并反序列化为指定类型的对象 |\r\n\r\n## UML类图\r\n\r\n```\r\n+----------------------+     使用     +----------------+     使用     +----------------+\r\n|  EditorPrefsUtility  |------------>|  EditorPrefs   |------------>|  JsonUtility   |\r\n+----------------------+             +----------------+             +----------------+\r\n| +SetObject<T>()      |             | +SetString()   |             | +ToJson()      |\r\n| +GetObject<T>()      |             | +GetString()   |             | +FromJson<T>() |\r\n+----------------------+             | +HasKey()      |             +----------------+\r\n                                     +----------------+\r\n```\r\n\r\n## 数据流程图\r\n\r\n```\r\n+--------+     ToJson     +---------+    SetString    +------------+\r\n| 对象实例 | -------------> | JSON字符串 | -------------> | EditorPrefs |\r\n+--------+                +---------+                 +------------+\r\n    ^                                                       |\r\n    |                                                       |\r\n    |                +---------+    GetString     |\r\n    +--------------- | JSON字符串 | <-------------- +\r\n      FromJson<T>    +---------+\r\n```\r\n\r\n## 思维导图\r\n\r\n```\r\nEditorPrefsUtility\r\n├── 功能扩展\r\n│   ├── 对象序列化\r\n│   │   ├── JsonUtility.ToJson转换\r\n│   │   └── EditorPrefs.SetString存储\r\n│   └── 对象反序列化\r\n│       ├── EditorPrefs.GetString读取\r\n│       └── JsonUtility.FromJson<T>转换\r\n├── 应用场景\r\n│   ├── 编辑器工具设置存储\r\n│   ├── 复杂数据结构持久化\r\n│   ├── 用户偏好设置保存\r\n│   └── 工作流程状态记忆\r\n└── 相关API集成\r\n    ├── EditorPrefs系统整合\r\n    ├── JsonUtility序列化支持\r\n    └── 泛型类型支持\r\n```\r\n\r\n## 应用场景\r\n1. **复杂编辑器设置存储**：保存包含多个参数的编辑器工具设置\r\n2. **用户界面状态记忆**：记住自定义编辑器窗口的各种状态和配置\r\n3. **工作流程进度保存**：在多步骤工作流程中保存中间状态和进度\r\n4. **自定义项目设置**：为项目创建自定义设置面板，并持久化设置\r\n5. **团队配置共享**：在团队成员之间共享统一的编辑器配置\r\n\r\n## 最佳实践\r\n1. **键命名规范**：使用有意义且唯一的键名，避免冲突\r\n2. **类型安全使用**：确保存取操作使用相同的类型参数\r\n3. **可序列化对象**：确保待序列化的对象类型满足Unity JSON序列化要求\r\n4. **数据版本控制**：考虑数据格式变化的兼容性问题\r\n5. **默认值处理**：合理处理数据不存在时的默认值返回\r\n\r\n## 扩展示例\r\n以下是对EditorPrefsUtility的扩展示例，增加了更多类型和功能支持：\r\n\r\n```csharp\r\npublic static class EditorPrefsUtilityExtended\r\n{\r\n    // 存储Vector3类型\r\n    public static void SetVector3(string key, Vector3 vector)\r\n    {\r\n        EditorPrefs.SetFloat(key + \"_x\", vector.x);\r\n        EditorPrefs.SetFloat(key + \"_y\", vector.y);\r\n        EditorPrefs.SetFloat(key + \"_z\", vector.z);\r\n    }\r\n    \r\n    // 读取Vector3类型\r\n    public static Vector3 GetVector3(string key, Vector3 defaultValue = default)\r\n    {\r\n        if (!EditorPrefs.HasKey(key + \"_x\"))\r\n            return defaultValue;\r\n            \r\n        return new Vector3(\r\n            EditorPrefs.GetFloat(key + \"_x\"),\r\n            EditorPrefs.GetFloat(key + \"_y\"),\r\n            EditorPrefs.GetFloat(key + \"_z\")\r\n        );\r\n    }\r\n    \r\n    // 存储Color类型\r\n    public static void SetColor(string key, Color color)\r\n    {\r\n        EditorPrefs.SetFloat(key + \"_r\", color.r);\r\n        EditorPrefs.SetFloat(key + \"_g\", color.g);\r\n        EditorPrefs.SetFloat(key + \"_b\", color.b);\r\n        EditorPrefs.SetFloat(key + \"_a\", color.a);\r\n    }\r\n    \r\n    // 读取Color类型\r\n    public static Color GetColor(string key, Color defaultValue = default)\r\n    {\r\n        if (!EditorPrefs.HasKey(key + \"_r\"))\r\n            return defaultValue;\r\n            \r\n        return new Color(\r\n            EditorPrefs.GetFloat(key + \"_r\"),\r\n            EditorPrefs.GetFloat(key + \"_g\"),\r\n            EditorPrefs.GetFloat(key + \"_b\"),\r\n            EditorPrefs.GetFloat(key + \"_a\")\r\n        );\r\n    }\r\n    \r\n    // 存储字符串数组\r\n    public static void SetStringArray(string key, string[] array)\r\n    {\r\n        EditorPrefs.SetInt(key + \"_count\", array.Length);\r\n        for (int i = 0; i < array.Length; i++)\r\n        {\r\n            EditorPrefs.SetString(key + \"_\" + i, array[i]);\r\n        }\r\n    }\r\n    \r\n    // 读取字符串数组\r\n    public static string[] GetStringArray(string key)\r\n    {\r\n        if (!EditorPrefs.HasKey(key + \"_count\"))\r\n            return new string[0];\r\n            \r\n        int count = EditorPrefs.GetInt(key + \"_count\");\r\n        string[] array = new string[count];\r\n        \r\n        for (int i = 0; i < count; i++)\r\n        {\r\n            array[i] = EditorPrefs.GetString(key + \"_\" + i);\r\n        }\r\n        \r\n        return array;\r\n    }\r\n}\r\n```\r\n\r\n## 代码示例\r\n```csharp\r\n// 自定义数据类\r\n[System.Serializable]\r\npublic class EditorToolSettings\r\n{\r\n    public string projectName;\r\n    public bool autoSave;\r\n    public int buildNumber;\r\n    public List<string> recentFiles;\r\n}\r\n\r\n// 使用示例\r\npublic class SettingsManager\r\n{\r\n    private const string SettingsKey = \"MyTool_Settings\";\r\n    \r\n    public static void SaveSettings(EditorToolSettings settings)\r\n    {\r\n        EditorPrefsUtility.SetObject(SettingsKey, settings);\r\n    }\r\n    \r\n    public static EditorToolSettings LoadSettings()\r\n    {\r\n        EditorToolSettings settings = EditorPrefsUtility.GetObject<EditorToolSettings>(SettingsKey);\r\n        \r\n        // 如果设置不存在，创建默认设置\r\n        if (settings == null)\r\n        {\r\n            settings = new EditorToolSettings\r\n            {\r\n                projectName = \"New Project\",\r\n                autoSave = true,\r\n                buildNumber = 1,\r\n                recentFiles = new List<string>()\r\n            };\r\n        }\r\n        \r\n        return settings;\r\n    }\r\n}\r\n```\r\n\r\n## 相关资源\r\n- [Unity文档: EditorPrefs](https://docs.unity3d.com/ScriptReference/EditorPrefs.html)\r\n- [Unity文档: JsonUtility](https://docs.unity3d.com/ScriptReference/JsonUtility.html)\r\n- [Unity文档: 序列化](https://docs.unity3d.com/Manual/script-Serialization.html)"
        }
    ]
}