{
    "sourceFile": "Assets/UnityAPI/Chapter 3 Input/InputManager/InputExamples.cs",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1750928156595,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1750928156595,
            "name": "Commit-0",
            "content": "using UnityEngine;\r\nusing System.Collections.Generic;\r\n\r\n/// <summary>\r\n/// Input API使用案例\r\n/// 演示Unity输入系统的各种功能\r\n/// </summary>\r\npublic class InputExamples : MonoBehaviour\r\n{\r\n    [Header(\"键盘输入\")]\r\n    [SerializeField] private KeyCode[] monitoredKeys = { KeyCode.W, KeyCode.A, KeyCode.S, KeyCode.D, KeyCode.Space, KeyCode.Escape };\r\n    \r\n    [Header(\"鼠标输入\")]\r\n    [SerializeField] private float mouseSensitivity = 2f;\r\n    [SerializeField] private bool invertMouseY = false;\r\n    \r\n    [Header(\"轴输入\")]\r\n    [SerializeField] private string horizontalAxis = \"Horizontal\";\r\n    [SerializeField] private string verticalAxis = \"Vertical\";\r\n    [SerializeField] private string mouseXAxis = \"Mouse X\";\r\n    [SerializeField] private string mouseYAxis = \"Mouse Y\";\r\n    \r\n    [Header(\"触摸输入\")]\r\n    [SerializeField] private bool enableTouchInput = true;\r\n    [SerializeField] private float touchSensitivity = 1f;\r\n    \r\n    [Header(\"输入状态\")]\r\n    [SerializeField] private bool showInputDebug = true;\r\n    \r\n    private Vector3 originalPosition;\r\n    private Quaternion originalRotation;\r\n    private Dictionary<KeyCode, bool> keyStates = new Dictionary<KeyCode, bool>();\r\n    private List<Touch> currentTouches = new List<Touch>();\r\n    private Vector2 lastMousePosition;\r\n    private bool isInputEnabled = true;\r\n    \r\n    private void Start()\r\n    {\r\n        // 保存原始变换\r\n        originalPosition = transform.position;\r\n        originalRotation = transform.rotation;\r\n        \r\n        // 初始化按键状态\r\n        InitializeKeyStates();\r\n        \r\n        // 演示各种输入功能\r\n        DemonstrateInputBasics();\r\n        DemonstrateInputAxes();\r\n        DemonstrateInputEvents();\r\n        DemonstrateTouchInput();\r\n    }\r\n    \r\n    /// <summary>\r\n    /// 初始化按键状态\r\n    /// </summary>\r\n    private void InitializeKeyStates()\r\n    {\r\n        foreach (KeyCode key in monitoredKeys)\r\n        {\r\n            keyStates[key] = false;\r\n        }\r\n    }\r\n    \r\n    /// <summary>\r\n    /// 演示输入基础功能\r\n    /// </summary>\r\n    private void DemonstrateInputBasics()\r\n    {\r\n        Debug.Log(\"=== Input基础功能示例 ===\");\r\n        \r\n        // 1. 检查输入是否可用\r\n        Debug.Log($\"输入系统可用: {Input.isSupported}\");\r\n        Debug.Log($\"输入设备数量: {Input.deviceCount}\");\r\n        \r\n        // 2. 获取输入设备信息\r\n        for (int i = 0; i < Input.deviceCount; i++)\r\n        {\r\n            InputDevice device = Input.GetDevice(i);\r\n            Debug.Log($\"设备 {i}: {device.name} - {device.type}\");\r\n        }\r\n        \r\n        // 3. 检查特定按键\r\n        Debug.Log($\"空格键是否按下: {Input.GetKey(KeyCode.Space)}\");\r\n        Debug.Log($\"W键是否按下: {Input.GetKey(KeyCode.W)}\");\r\n        Debug.Log($\"鼠标左键是否按下: {Input.GetMouseButton(0)}\");\r\n        \r\n        // 4. 获取鼠标位置\r\n        Debug.Log($\"鼠标位置: {Input.mousePosition}\");\r\n        Debug.Log($\"鼠标滚轮: {Input.mouseScrollDelta}\");\r\n    }\r\n    \r\n    /// <summary>\r\n    /// 演示轴输入\r\n    /// </summary>\r\n    private void DemonstrateInputAxes()\r\n    {\r\n        Debug.Log(\"=== Input轴输入示例 ===\");\r\n        \r\n        // 1. 获取水平轴输入\r\n        float horizontal = Input.GetAxis(horizontalAxis);\r\n        Debug.Log($\"水平轴输入: {horizontal}\");\r\n        \r\n        // 2. 获取垂直轴输入\r\n        float vertical = Input.GetAxis(verticalAxis);\r\n        Debug.Log($\"垂直轴输入: {vertical}\");\r\n        \r\n        // 3. 获取鼠标轴输入\r\n        float mouseX = Input.GetAxis(mouseXAxis);\r\n        float mouseY = Input.GetAxis(mouseYAxis);\r\n        Debug.Log($\"鼠标X轴: {mouseX}, 鼠标Y轴: {mouseY}\");\r\n        \r\n        // 4. 获取原始轴输入（无平滑）\r\n        float rawHorizontal = Input.GetAxisRaw(horizontalAxis);\r\n        float rawVertical = Input.GetAxisRaw(verticalAxis);\r\n        Debug.Log($\"原始水平轴: {rawHorizontal}, 原始垂直轴: {rawVertical}\");\r\n        \r\n        // 5. 检查轴是否存在\r\n        bool hasHorizontal = Input.GetAxis(horizontalAxis) != 0f;\r\n        bool hasVertical = Input.GetAxis(verticalAxis) != 0f;\r\n        Debug.Log($\"有水平输入: {hasHorizontal}, 有垂直输入: {hasVertical}\");\r\n    }\r\n    \r\n    /// <summary>\r\n    /// 演示输入事件\r\n    /// </summary>\r\n    private void DemonstrateInputEvents()\r\n    {\r\n        Debug.Log(\"=== Input事件示例 ===\");\r\n        \r\n        // 1. 按键事件\r\n        if (Input.GetKeyDown(KeyCode.Space))\r\n        {\r\n            Debug.Log(\"空格键按下事件\");\r\n        }\r\n        \r\n        if (Input.GetKeyUp(KeyCode.Space))\r\n        {\r\n            Debug.Log(\"空格键释放事件\");\r\n        }\r\n        \r\n        // 2. 鼠标事件\r\n        if (Input.GetMouseButtonDown(0))\r\n        {\r\n            Debug.Log(\"鼠标左键按下事件\");\r\n        }\r\n        \r\n        if (Input.GetMouseButtonUp(0))\r\n        {\r\n            Debug.Log(\"鼠标左键释放事件\");\r\n        }\r\n        \r\n        if (Input.GetMouseButtonDown(1))\r\n        {\r\n            Debug.Log(\"鼠标右键按下事件\");\r\n        }\r\n        \r\n        if (Input.GetMouseButtonDown(2))\r\n        {\r\n            Debug.Log(\"鼠标中键按下事件\");\r\n        }\r\n        \r\n        // 3. 组合键检测\r\n        if (Input.GetKey(KeyCode.LeftControl) && Input.GetKeyDown(KeyCode.S))\r\n        {\r\n            Debug.Log(\"Ctrl+S 组合键\");\r\n        }\r\n        \r\n        if (Input.GetKey(KeyCode.LeftShift) && Input.GetKeyDown(KeyCode.A))\r\n        {\r\n            Debug.Log(\"Shift+A 组合键\");\r\n        }\r\n    }\r\n    \r\n    /// <summary>\r\n    /// 演示触摸输入\r\n    /// </summary>\r\n    private void DemonstrateTouchInput()\r\n    {\r\n        Debug.Log(\"=== 触摸输入示例 ===\");\r\n        \r\n        // 1. 检查触摸支持\r\n        Debug.Log($\"触摸支持: {Input.touchSupported}\");\r\n        Debug.Log($\"多点触摸支持: {Input.multiTouchEnabled}\");\r\n        \r\n        // 2. 获取触摸数量\r\n        int touchCount = Input.touchCount;\r\n        Debug.Log($\"当前触摸数量: {touchCount}\");\r\n        \r\n        // 3. 处理触摸输入\r\n        if (touchCount > 0)\r\n        {\r\n            currentTouches.Clear();\r\n            \r\n            for (int i = 0; i < touchCount; i++)\r\n            {\r\n                Touch touch = Input.GetTouch(i);\r\n                currentTouches.Add(touch);\r\n                \r\n                Debug.Log($\"触摸 {i}: 位置={touch.position}, 阶段={touch.phase}, 手指ID={touch.fingerId}\");\r\n                \r\n                // 处理不同触摸阶段\r\n                switch (touch.phase)\r\n                {\r\n                    case TouchPhase.Began:\r\n                        Debug.Log($\"触摸 {i} 开始\");\r\n                        break;\r\n                    case TouchPhase.Moved:\r\n                        Debug.Log($\"触摸 {i} 移动\");\r\n                        break;\r\n                    case TouchPhase.Stationary:\r\n                        Debug.Log($\"触摸 {i} 静止\");\r\n                        break;\r\n                    case TouchPhase.Ended:\r\n                        Debug.Log($\"触摸 {i} 结束\");\r\n                        break;\r\n                    case TouchPhase.Canceled:\r\n                        Debug.Log($\"触摸 {i} 取消\");\r\n                        break;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    \r\n    /// <summary>\r\n    /// 在Update中处理输入\r\n    /// </summary>\r\n    private void Update()\r\n    {\r\n        if (!isInputEnabled) return;\r\n        \r\n        HandleKeyboardInput();\r\n        HandleMouseInput();\r\n        HandleAxisInput();\r\n        HandleTouchInput();\r\n        UpdateKeyStates();\r\n    }\r\n    \r\n    /// <summary>\r\n    /// 处理键盘输入\r\n    /// </summary>\r\n    private void HandleKeyboardInput()\r\n    {\r\n        // 基础移动\r\n        Vector3 movement = Vector3.zero;\r\n        \r\n        if (Input.GetKey(KeyCode.W)) movement += Vector3.forward;\r\n        if (Input.GetKey(KeyCode.S)) movement += Vector3.back;\r\n        if (Input.GetKey(KeyCode.A)) movement += Vector3.left;\r\n        if (Input.GetKey(KeyCode.D)) movement += Vector3.right;\r\n        if (Input.GetKey(KeyCode.Q)) movement += Vector3.up;\r\n        if (Input.GetKey(KeyCode.E)) movement += Vector3.down;\r\n        \r\n        if (movement != Vector3.zero)\r\n        {\r\n            transform.Translate(movement * 5f * Time.deltaTime, Space.World);\r\n        }\r\n        \r\n        // 特殊按键处理\r\n        if (Input.GetKeyDown(KeyCode.R))\r\n        {\r\n            ResetTransform();\r\n        }\r\n        \r\n        if (Input.GetKeyDown(KeyCode.T))\r\n        {\r\n            ToggleInput();\r\n        }\r\n        \r\n        if (Input.GetKeyDown(KeyCode.Escape))\r\n        {\r\n            Application.Quit();\r\n        }\r\n    }\r\n    \r\n    /// <summary>\r\n    /// 处理鼠标输入\r\n    /// </summary>\r\n    private void HandleMouseInput()\r\n    {\r\n        // 鼠标移动旋转\r\n        if (Input.GetMouseButton(1)) // 右键按住旋转\r\n        {\r\n            float mouseX = Input.GetAxis(mouseXAxis) * mouseSensitivity;\r\n            float mouseY = Input.GetAxis(mouseYAxis) * mouseSensitivity * (invertMouseY ? 1 : -1);\r\n            \r\n            transform.Rotate(Vector3.up * mouseX, Space.World);\r\n            transform.Rotate(Vector3.right * mouseY, Space.Self);\r\n        }\r\n        \r\n        // 鼠标滚轮缩放\r\n        float scroll = Input.GetAxis(\"Mouse ScrollWheel\");\r\n        if (scroll != 0)\r\n        {\r\n            Vector3 scale = transform.localScale;\r\n            scale += Vector3.one * scroll * 2f;\r\n            scale = Vector3.Max(scale, Vector3.one * 0.1f); // 最小缩放\r\n            transform.localScale = scale;\r\n        }\r\n        \r\n        // 鼠标点击创建对象\r\n        if (Input.GetMouseButtonDown(0))\r\n        {\r\n            CreateObjectAtMousePosition();\r\n        }\r\n    }\r\n    \r\n    /// <summary>\r\n    /// 处理轴输入\r\n    /// </summary>\r\n    private void HandleAxisInput()\r\n    {\r\n        // 使用轴输入进行移动\r\n        float horizontal = Input.GetAxis(horizontalAxis);\r\n        float vertical = Input.GetAxis(verticalAxis);\r\n        \r\n        Vector3 axisMovement = new Vector3(horizontal, 0f, vertical);\r\n        if (axisMovement.magnitude > 0.1f)\r\n        {\r\n            transform.Translate(axisMovement * 3f * Time.deltaTime, Space.World);\r\n        }\r\n        \r\n        // 使用轴输入进行旋转\r\n        float mouseX = Input.GetAxis(mouseXAxis);\r\n        if (Mathf.Abs(mouseX) > 0.1f)\r\n        {\r\n            transform.Rotate(Vector3.up * mouseX * 2f, Space.World);\r\n        }\r\n    }\r\n    \r\n    /// <summary>\r\n    /// 处理触摸输入\r\n    /// </summary>\r\n    private void HandleTouchInput()\r\n    {\r\n        if (!enableTouchInput || Input.touchCount == 0) return;\r\n        \r\n        for (int i = 0; i < Input.touchCount; i++)\r\n        {\r\n            Touch touch = Input.GetTouch(i);\r\n            \r\n            switch (touch.phase)\r\n            {\r\n                case TouchPhase.Began:\r\n                    // 触摸开始\r\n                    Debug.Log($\"触摸 {touch.fingerId} 开始于位置 {touch.position}\");\r\n                    break;\r\n                    \r\n                case TouchPhase.Moved:\r\n                    // 触摸移动\r\n                    Vector2 delta = touch.deltaPosition * touchSensitivity * Time.deltaTime;\r\n                    transform.Translate(new Vector3(delta.x, 0f, delta.y) * 0.01f, Space.World);\r\n                    break;\r\n                    \r\n                case TouchPhase.Ended:\r\n                    // 触摸结束\r\n                    Debug.Log($\"触摸 {touch.fingerId} 结束于位置 {touch.position}\");\r\n                    break;\r\n            }\r\n        }\r\n    }\r\n    \r\n    /// <summary>\r\n    /// 更新按键状态\r\n    /// </summary>\r\n    private void UpdateKeyStates()\r\n    {\r\n        foreach (KeyCode key in monitoredKeys)\r\n        {\r\n            bool currentState = Input.GetKey(key);\r\n            \r\n            if (currentState != keyStates[key])\r\n            {\r\n                if (currentState)\r\n                {\r\n                    Debug.Log($\"按键 {key} 按下\");\r\n                }\r\n                else\r\n                {\r\n                    Debug.Log($\"按键 {key} 释放\");\r\n                }\r\n                \r\n                keyStates[key] = currentState;\r\n            }\r\n        }\r\n    }\r\n    \r\n    /// <summary>\r\n    /// 重置变换\r\n    /// </summary>\r\n    private void ResetTransform()\r\n    {\r\n        transform.position = originalPosition;\r\n        transform.rotation = originalRotation;\r\n        transform.localScale = Vector3.one;\r\n        Debug.Log(\"重置变换\");\r\n    }\r\n    \r\n    /// <summary>\r\n    /// 切换输入状态\r\n    /// </summary>\r\n    private void ToggleInput()\r\n    {\r\n        isInputEnabled = !isInputEnabled;\r\n        Debug.Log($\"输入状态: {(isInputEnabled ? \"启用\" : \"禁用\")}\");\r\n    }\r\n    \r\n    /// <summary>\r\n    /// 在鼠标位置创建对象\r\n    /// </summary>\r\n    private void CreateObjectAtMousePosition()\r\n    {\r\n        Ray ray = Camera.main.ScreenPointToRay(Input.mousePosition);\r\n        RaycastHit hit;\r\n        \r\n        if (Physics.Raycast(ray, out hit))\r\n        {\r\n            GameObject cube = GameObject.CreatePrimitive(PrimitiveType.Cube);\r\n            cube.transform.position = hit.point;\r\n            cube.name = $\"ClickCube_{Time.time:F2}\";\r\n            \r\n            // 添加随机颜色\r\n            Renderer renderer = cube.GetComponent<Renderer>();\r\n            if (renderer != null)\r\n            {\r\n                renderer.material.color = new Color(\r\n                    Random.Range(0f, 1f),\r\n                    Random.Range(0f, 1f),\r\n                    Random.Range(0f, 1f)\r\n                );\r\n            }\r\n            \r\n            Debug.Log($\"在位置 {hit.point} 创建了对象 {cube.name}\");\r\n        }\r\n    }\r\n    \r\n    /// <summary>\r\n    /// 演示输入映射\r\n    /// </summary>\r\n    private void DemonstrateInputMapping()\r\n    {\r\n        Debug.Log(\"=== 输入映射示例 ===\");\r\n        \r\n        // 1. 检查输入按钮\r\n        bool jumpPressed = Input.GetButton(\"Jump\");\r\n        bool firePressed = Input.GetButton(\"Fire1\");\r\n        \r\n        Debug.Log($\"跳跃按钮: {jumpPressed}\");\r\n        Debug.Log($\"开火按钮: {firePressed}\");\r\n        \r\n        // 2. 获取按钮轴值\r\n        float jumpAxis = Input.GetAxis(\"Jump\");\r\n        float fireAxis = Input.GetAxis(\"Fire1\");\r\n        \r\n        Debug.Log($\"跳跃轴值: {jumpAxis}\");\r\n        Debug.Log($\"开火轴值: {fireAxis}\");\r\n        \r\n        // 3. 检查按钮事件\r\n        if (Input.GetButtonDown(\"Jump\"))\r\n        {\r\n            Debug.Log(\"跳跃按钮按下\");\r\n        }\r\n        \r\n        if (Input.GetButtonUp(\"Fire1\"))\r\n        {\r\n            Debug.Log(\"开火按钮释放\");\r\n        }\r\n    }\r\n    \r\n    /// <summary>\r\n    /// 在OnGUI中显示输入信息\r\n    /// </summary>\r\n    private void OnGUI()\r\n    {\r\n        if (!showInputDebug) return;\r\n        \r\n        GUILayout.BeginArea(new Rect(10, 10, 400, 500));\r\n        \r\n        GUILayout.Label(\"Input API信息\", EditorStyles.boldLabel);\r\n        GUILayout.Space(5);\r\n        \r\n        // 基础信息\r\n        GUILayout.Label($\"输入系统可用: {Input.isSupported}\");\r\n        GUILayout.Label($\"输入设备数量: {Input.deviceCount}\");\r\n        GUILayout.Label($\"触摸支持: {Input.touchSupported}\");\r\n        GUILayout.Label($\"多点触摸: {Input.multiTouchEnabled}\");\r\n        \r\n        GUILayout.Space(10);\r\n        \r\n        // 鼠标信息\r\n        GUILayout.Label(\"鼠标信息\", EditorStyles.boldLabel);\r\n        GUILayout.Label($\"位置: {Input.mousePosition}\");\r\n        GUILayout.Label($\"滚轮: {Input.mouseScrollDelta}\");\r\n        GUILayout.Label($\"左键: {Input.GetMouseButton(0)}\");\r\n        GUILayout.Label($\"右键: {Input.GetMouseButton(1)}\");\r\n        GUILayout.Label($\"中键: {Input.GetMouseButton(2)}\");\r\n        \r\n        GUILayout.Space(10);\r\n        \r\n        // 轴信息\r\n        GUILayout.Label(\"轴信息\", EditorStyles.boldLabel);\r\n        GUILayout.Label($\"水平: {Input.GetAxis(horizontalAxis):F3}\");\r\n        GUILayout.Label($\"垂直: {Input.GetAxis(verticalAxis):F3}\");\r\n        GUILayout.Label($\"鼠标X: {Input.GetAxis(mouseXAxis):F3}\");\r\n        GUILayout.Label($\"鼠标Y: {Input.GetAxis(mouseYAxis):F3}\");\r\n        \r\n        GUILayout.Space(10);\r\n        \r\n        // 触摸信息\r\n        if (enableTouchInput)\r\n        {\r\n            GUILayout.Label(\"触摸信息\", EditorStyles.boldLabel);\r\n            GUILayout.Label($\"触摸数量: {Input.touchCount}\");\r\n            \r\n            for (int i = 0; i < Mathf.Min(Input.touchCount, 3); i++)\r\n            {\r\n                Touch touch = Input.GetTouch(i);\r\n                GUILayout.Label($\"触摸 {i}: {touch.phase} at {touch.position}\");\r\n            }\r\n        }\r\n        \r\n        GUILayout.Space(10);\r\n        \r\n        // 控制说明\r\n        GUILayout.Label(\"控制说明:\", EditorStyles.boldLabel);\r\n        GUILayout.Label(\"WASD - 移动\");\r\n        GUILayout.Label(\"QE - 上下移动\");\r\n        GUILayout.Label(\"右键拖拽 - 旋转\");\r\n        GUILayout.Label(\"滚轮 - 缩放\");\r\n        GUILayout.Label(\"左键点击 - 创建对象\");\r\n        GUILayout.Label(\"R - 重置\");\r\n        GUILayout.Label(\"T - 切换输入\");\r\n        GUILayout.Label(\"ESC - 退出\");\r\n        \r\n        GUILayout.EndArea();\r\n    }\r\n} "
        }
    ]
}