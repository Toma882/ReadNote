{
    "sourceFile": "Assets/UnityEditor/Chapter 7 EditorPrefs/Example/README.md",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 1,
            "patches": [
                {
                    "date": 1746899974672,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1746900174052,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -172,5 +172,5 @@\n - [Unity文档: 编辑器扩展](https://docs.unity3d.com/Manual/ExtendingTheEditor.html)\r\n - [Unity文档: SettingsProvider](https://docs.unity3d.com/ScriptReference/SettingsProvider.html)\r\n - [Unity文档: ScriptableWizard](https://docs.unity3d.com/ScriptReference/ScriptableWizard.html)\r\n - [Unity文档: EditorWindow](https://docs.unity3d.com/ScriptReference/EditorWindow.html)\r\n-- [Unity文档: Handles](https://docs.unity3d.com/ScriptReference/Handles.html)\n\\ No newline at end of file\n+- [Unity文档: Handles](https://docs.unity3d.com/ScriptReference/Handles.html)\r\n"
                }
            ],
            "date": 1746899974672,
            "name": "Commit-0",
            "content": "# Example 模块\r\n\r\n## 概述\r\nExample 模块提供了Unity编辑器扩展的多种示例实现，展示了不同类型的编辑器扩展功能，包括设置提供器、脚本化向导和场景GUI绘制等功能。这些示例代码展示了如何通过编辑器扩展来增强Unity开发工作流程、自定义编辑器界面和交互方式，为开发者提供了编辑器扩展开发的参考模板。\r\n\r\n## 核心功能\r\n- **设置提供器示例**：展示如何在Unity设置窗口中添加自定义设置页面\r\n- **脚本化向导示例**：演示如何创建自定义向导窗口进行操作引导\r\n- **场景GUI示例**：展示如何在场景视图中绘制自定义GUI元素\r\n- **其他编辑器扩展示例**：包含各种编辑器扩展的基础实现\r\n\r\n## 重要接口和类\r\n\r\n### `ExampleSettingsProvider` 类\r\n展示如何创建自定义设置提供器，在Unity设置窗口中添加自定义页面。\r\n\r\n| 方法 | 说明 |\r\n|------|------|\r\n| `CreateProvider()` | 静态方法，创建设置提供器实例，使用SettingsProvider特性注册 |\r\n| `OnGUI()` | 重写方法，定义设置页面的GUI绘制内容 |\r\n\r\n### `ExampleScriptableWizard` 类\r\n展示如何创建自定义向导窗口，引导用户完成特定操作流程。\r\n\r\n| 方法 | 说明 |\r\n|------|------|\r\n| `Open()` | 静态方法，打开向导窗口，通过MenuItem特性在菜单中注册 |\r\n| `OnWizardCreate()` | 在用户点击确认按钮时调用的回调方法 |\r\n| `OnWizardOtherButton()` | 在用户点击取消(其他)按钮时调用的回调方法 |\r\n\r\n### `SceneGUIExample` 类\r\n展示如何在场景视图中绘制自定义GUI元素。\r\n\r\n| 方法 | 说明 |\r\n|------|------|\r\n| `Open()` | 静态方法，打开窗口，通过MenuItem特性在菜单中注册 |\r\n| `OnEnable()` | 注册场景GUI事件回调 |\r\n| `OnDisable()` | 取消注册场景GUI事件回调 |\r\n| `OnSceneGUI()` | 场景GUI绘制回调方法，用于在场景视图中绘制自定义内容 |\r\n\r\n## UML类图\r\n\r\n```\r\n+----------------------+       +------------------------+\r\n| SettingsProvider     |<------| ExampleSettingsProvider|\r\n+----------------------+       +------------------------+\r\n| +OnGUI()             |       | +CreateProvider()      |\r\n| +OnDeactivate()      |       | +OnGUI()               |\r\n| +HasSearchInterest() |       +------------------------+\r\n+----------------------+\r\n\r\n+--------------------+       +------------------------+\r\n| ScriptableWizard   |<------| ExampleScriptableWizard|\r\n+--------------------+       +------------------------+\r\n| +OnWizardCreate()  |       | -s: string             |\r\n| +OnWizardUpdate()  |       | +a: string             |\r\n| +OnWizardOtherButton()|     | +Open()                |\r\n+--------------------+       | +OnWizardCreate()      |\r\n                            | +OnWizardOtherButton()  |\r\n                            +------------------------+\r\n\r\n+-------------------+       +----------------------+\r\n| EditorWindow      |<------| SceneGUIExample     |\r\n+-------------------+       +----------------------+\r\n| +Show()           |       | +Open()              |\r\n| +OnGUI()          |       | +OnEnable()          |\r\n| +OnEnable()       |       | +OnDisable()         |\r\n| +OnDisable()      |       | +OnSceneGUI()        |\r\n+-------------------+       +----------------------+\r\n```\r\n\r\n## 编辑器扩展功能流程图\r\n\r\n```\r\nSettingsProvider:\r\n用户打开设置窗口 --> 注册的SettingsProvider被初始化 --> OnGUI()绘制界面 --> 用户交互\r\n\r\nScriptableWizard:\r\n调用Open()方法 --> DisplayWizard<>创建向导实例 --> 显示向导窗口 --> 用户点击按钮 --> 触发OnWizardCreate()或OnWizardOtherButton()\r\n\r\nSceneGUI:\r\n打开窗口实例 --> OnEnable()注册SceneView.duringSceneGui事件 --> 激活场景窗口 --> OnSceneGUI()绘制场景GUI --> 关闭窗口 --> OnDisable()取消注册事件\r\n```\r\n\r\n## 思维导图\r\n\r\n```\r\nUnity编辑器扩展示例\r\n├── 设置提供器 (ExampleSettingsProvider)\r\n│   ├── 设置范围\r\n│   │   ├── 项目级设置\r\n│   │   └── 用户级设置\r\n│   ├── 设置页面位置\r\n│   │   ├── 主设置窗口\r\n│   │   └── 自定义项目分组\r\n│   └── 功能特性\r\n│       ├── 设置页面绘制\r\n│       ├── 搜索关键字支持\r\n│       └── 设置持久化\r\n├── 脚本化向导 (ExampleScriptableWizard)\r\n│   ├── 向导窗口创建\r\n│   ├── 字段自动暴露\r\n│   ├── 按钮事件\r\n│   │   ├── 确认按钮 (OnWizardCreate)\r\n│   │   └── 其他按钮 (OnWizardOtherButton)\r\n│   └── 向导状态更新 (OnWizardUpdate)\r\n└── 场景GUI (SceneGUIExample)\r\n    ├── 事件注册与取消\r\n    ├── 绘制方式\r\n    │   ├── Handles类绘制\r\n    │   ├── GUI类绘制\r\n    │   └── Gizmos绘制\r\n    └── 交互处理\r\n        ├── 拾取与选择\r\n        ├── 拖拽操作\r\n        └── 自定义控件\r\n```\r\n\r\n## 应用场景\r\n1. **工作流程自动化**：通过自定义编辑器扩展，自动化重复性工作\r\n2. **可视化工具开发**：创建专用的可视化编辑工具，简化复杂操作\r\n3. **设置界面定制**：为项目添加自定义设置页面，集中管理项目配置\r\n4. **操作引导与向导**：为复杂操作提供向导式界面，引导用户完成步骤\r\n5. **场景编辑增强**：在场景视图中添加自定义控件和辅助信息\r\n\r\n## 最佳实践\r\n1. **模块化设计**：保持编辑器扩展功能的模块化，便于维护和扩展\r\n2. **一致的用户体验**：遵循Unity编辑器的设计语言和交互模式\r\n3. **性能优化**：避免在频繁调用的方法中执行耗时操作\r\n4. **错误处理与提示**：添加适当的错误处理和用户反馈\r\n5. **撤销支持**：为编辑操作添加撤销支持，提高用户体验\r\n6. **资源释放**：正确管理事件注册和资源释放，避免内存泄漏\r\n\r\n## 代码示例\r\n```csharp\r\n// 创建自定义编辑器窗口示例\r\npublic class CustomEditorWindowExample : EditorWindow\r\n{\r\n    private string inputText = \"\";\r\n    private bool toggleValue = false;\r\n    \r\n    [MenuItem(\"Examples/Custom Editor Window\")]\r\n    public static void ShowWindow()\r\n    {\r\n        GetWindow<CustomEditorWindowExample>(\"Custom Window\").Show();\r\n    }\r\n    \r\n    private void OnGUI()\r\n    {\r\n        GUILayout.Label(\"Custom Editor Window Example\", EditorStyles.boldLabel);\r\n        \r\n        EditorGUI.BeginChangeCheck();\r\n        inputText = EditorGUILayout.TextField(\"Input:\", inputText);\r\n        toggleValue = EditorGUILayout.Toggle(\"Option:\", toggleValue);\r\n        \r\n        if (EditorGUI.EndChangeCheck())\r\n        {\r\n            // 处理数据变化\r\n            Debug.Log(\"Values changed\");\r\n        }\r\n        \r\n        if (GUILayout.Button(\"Apply\"))\r\n        {\r\n            // 执行操作\r\n            Debug.Log(\"Applied: \" + inputText + \", \" + toggleValue);\r\n        }\r\n    }\r\n}\r\n```\r\n\r\n## 相关资源\r\n- [Unity文档: 编辑器扩展](https://docs.unity3d.com/Manual/ExtendingTheEditor.html)\r\n- [Unity文档: SettingsProvider](https://docs.unity3d.com/ScriptReference/SettingsProvider.html)\r\n- [Unity文档: ScriptableWizard](https://docs.unity3d.com/ScriptReference/ScriptableWizard.html)\r\n- [Unity文档: EditorWindow](https://docs.unity3d.com/ScriptReference/EditorWindow.html)\r\n- [Unity文档: Handles](https://docs.unity3d.com/ScriptReference/Handles.html)"
        }
    ]
}