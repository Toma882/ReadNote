{
    "sourceFile": "Assets/UnityEditor/Chapter 8 UnityAPI/UnityEngine/VFX/VFXExample.cs",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1750937756441,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1750937756441,
            "name": "Commit-0",
            "content": "using UnityEngine;\r\nusing UnityEngine.VFX;\r\nusing System.Collections.Generic;\r\n\r\nnamespace UnityEditor.Chapter8.VFX\r\n{\r\n    /// <summary>\r\n    /// UnityEngine.VFX 视觉效果系统案例\r\n    /// 演示VisualEffect、VFXGraph、粒子系统、视觉效果控制等功能\r\n    /// </summary>\r\n    public class VFXExample : MonoBehaviour\r\n    {\r\n        [Header(\"Visual Effect 设置\")]\r\n        [SerializeField] private VisualEffect visualEffect;\r\n        [SerializeField] private VisualEffectAsset vfxAsset;\r\n        [SerializeField] private bool autoPlay = true;\r\n        \r\n        [Header(\"粒子系统设置\")]\r\n        [SerializeField] private ParticleSystem particleSystem;\r\n        [SerializeField] private bool enableParticles = true;\r\n        [SerializeField] private int maxParticles = 1000;\r\n        \r\n        [Header(\"视觉效果参数\")]\r\n        [SerializeField] private float emissionRate = 10f;\r\n        [SerializeField] private float particleLifetime = 2f;\r\n        [SerializeField] private float particleSpeed = 5f;\r\n        [SerializeField] private Vector3 particleScale = Vector3.one;\r\n        [SerializeField] private Color particleColor = Color.white;\r\n        \r\n        [Header(\"动画设置\")]\r\n        [SerializeField] private bool enableAnimation = true;\r\n        [SerializeField] private float animationSpeed = 1f;\r\n        [SerializeField] private bool loopAnimation = true;\r\n        \r\n        [Header(\"空间设置\")]\r\n        [SerializeField] private Vector3 effectPosition = Vector3.zero;\r\n        [SerializeField] private Vector3 effectRotation = Vector3.zero;\r\n        [SerializeField] private Vector3 effectScale = Vector3.one;\r\n        \r\n        [Header(\"UI控制\")]\r\n        [SerializeField] private bool showControls = true;\r\n        \r\n        private bool isPlaying = false;\r\n        private bool isPaused = false;\r\n        private float currentTime = 0f;\r\n        private Vector3 originalPosition;\r\n        private Vector3 originalRotation;\r\n        private Vector3 originalScale;\r\n        \r\n        private void Start()\r\n        {\r\n            InitializeVFXComponents();\r\n        }\r\n        \r\n        /// <summary>\r\n        /// 初始化VFX组件\r\n        /// </summary>\r\n        private void InitializeVFXComponents()\r\n        {\r\n            // 获取或添加VisualEffect\r\n            if (visualEffect == null)\r\n            {\r\n                visualEffect = GetComponent<VisualEffect>();\r\n                if (visualEffect == null)\r\n                {\r\n                    visualEffect = gameObject.AddComponent<VisualEffect>();\r\n                }\r\n            }\r\n            \r\n            // 获取或添加ParticleSystem\r\n            if (particleSystem == null)\r\n            {\r\n                particleSystem = GetComponent<ParticleSystem>();\r\n                if (particleSystem == null && enableParticles)\r\n                {\r\n                    particleSystem = gameObject.AddComponent<ParticleSystem>();\r\n                }\r\n            }\r\n            \r\n            // 保存原始变换\r\n            originalPosition = transform.position;\r\n            originalRotation = transform.rotation.eulerAngles;\r\n            originalScale = transform.localScale;\r\n            \r\n            // 设置初始属性\r\n            SetupVisualEffect();\r\n            SetupParticleSystem();\r\n            SetupTransform();\r\n        }\r\n        \r\n        /// <summary>\r\n        /// 设置VisualEffect属性\r\n        /// </summary>\r\n        private void SetupVisualEffect()\r\n        {\r\n            if (visualEffect != null && vfxAsset != null)\r\n            {\r\n                visualEffect.visualEffectAsset = vfxAsset;\r\n                visualEffect.playRate = animationSpeed;\r\n                \r\n                // 设置参数\r\n                SetVFXParameter(\"EmissionRate\", emissionRate);\r\n                SetVFXParameter(\"ParticleLifetime\", particleLifetime);\r\n                SetVFXParameter(\"ParticleSpeed\", particleSpeed);\r\n                SetVFXParameter(\"ParticleScale\", particleScale);\r\n                SetVFXParameter(\"ParticleColor\", particleColor);\r\n                \r\n                if (autoPlay)\r\n                {\r\n                    PlayVFX();\r\n                }\r\n            }\r\n        }\r\n        \r\n        /// <summary>\r\n        /// 设置ParticleSystem属性\r\n        /// </summary>\r\n        private void SetupParticleSystem()\r\n        {\r\n            if (particleSystem != null)\r\n            {\r\n                var main = particleSystem.main;\r\n                main.maxParticles = maxParticles;\r\n                main.startLifetime = particleLifetime;\r\n                main.startSpeed = particleSpeed;\r\n                main.startSize = particleScale.x;\r\n                main.startColor = particleColor;\r\n                main.loop = loopAnimation;\r\n                main.playOnAwake = autoPlay;\r\n                \r\n                var emission = particleSystem.emission;\r\n                emission.rateOverTime = emissionRate;\r\n                \r\n                if (autoPlay)\r\n                {\r\n                    PlayParticles();\r\n                }\r\n            }\r\n        }\r\n        \r\n        /// <summary>\r\n        /// 设置变换属性\r\n        /// </summary>\r\n        private void SetupTransform()\r\n        {\r\n            transform.position = effectPosition;\r\n            transform.rotation = Quaternion.Euler(effectRotation);\r\n            transform.localScale = effectScale;\r\n        }\r\n        \r\n        /// <summary>\r\n        /// 设置VFX参数\r\n        /// </summary>\r\n        public void SetVFXParameter(string parameterName, object value)\r\n        {\r\n            if (visualEffect != null)\r\n            {\r\n                if (value is float floatValue)\r\n                {\r\n                    visualEffect.SetFloat(parameterName, floatValue);\r\n                }\r\n                else if (value is int intValue)\r\n                {\r\n                    visualEffect.SetInt(parameterName, intValue);\r\n                }\r\n                else if (value is Vector3 vector3Value)\r\n                {\r\n                    visualEffect.SetVector3(parameterName, vector3Value);\r\n                }\r\n                else if (value is Color colorValue)\r\n                {\r\n                    visualEffect.SetVector4(parameterName, colorValue);\r\n                }\r\n                else if (value is bool boolValue)\r\n                {\r\n                    visualEffect.SetBool(parameterName, boolValue);\r\n                }\r\n                \r\n                Debug.Log($\"设置VFX参数 {parameterName}: {value}\");\r\n            }\r\n        }\r\n        \r\n        /// <summary>\r\n        /// 播放VFX\r\n        /// </summary>\r\n        public void PlayVFX()\r\n        {\r\n            if (visualEffect != null)\r\n            {\r\n                visualEffect.Play();\r\n                isPlaying = true;\r\n                isPaused = false;\r\n                Debug.Log(\"开始播放VFX\");\r\n            }\r\n        }\r\n        \r\n        /// <summary>\r\n        /// 暂停VFX\r\n        /// </summary>\r\n        public void PauseVFX()\r\n        {\r\n            if (visualEffect != null && isPlaying)\r\n            {\r\n                visualEffect.pause = true;\r\n                isPaused = true;\r\n                Debug.Log(\"VFX已暂停\");\r\n            }\r\n        }\r\n        \r\n        /// <summary>\r\n        /// 恢复VFX\r\n        /// </summary>\r\n        public void ResumeVFX()\r\n        {\r\n            if (visualEffect != null && isPaused)\r\n            {\r\n                visualEffect.pause = false;\r\n                isPaused = false;\r\n                Debug.Log(\"VFX已恢复\");\r\n            }\r\n        }\r\n        \r\n        /// <summary>\r\n        /// 停止VFX\r\n        /// </summary>\r\n        public void StopVFX()\r\n        {\r\n            if (visualEffect != null)\r\n            {\r\n                visualEffect.Stop();\r\n                isPlaying = false;\r\n                isPaused = false;\r\n                Debug.Log(\"VFX已停止\");\r\n            }\r\n        }\r\n        \r\n        /// <summary>\r\n        /// 播放粒子系统\r\n        /// </summary>\r\n        public void PlayParticles()\r\n        {\r\n            if (particleSystem != null)\r\n            {\r\n                particleSystem.Play();\r\n                Debug.Log(\"开始播放粒子系统\");\r\n            }\r\n        }\r\n        \r\n        /// <summary>\r\n        /// 暂停粒子系统\r\n        /// </summary>\r\n        public void PauseParticles()\r\n        {\r\n            if (particleSystem != null)\r\n            {\r\n                particleSystem.Pause();\r\n                Debug.Log(\"粒子系统已暂停\");\r\n            }\r\n        }\r\n        \r\n        /// <summary>\r\n        /// 停止粒子系统\r\n        /// </summary>\r\n        public void StopParticles()\r\n        {\r\n            if (particleSystem != null)\r\n            {\r\n                particleSystem.Stop();\r\n                Debug.Log(\"粒子系统已停止\");\r\n            }\r\n        }\r\n        \r\n        /// <summary>\r\n        /// 清除粒子\r\n        /// </summary>\r\n        public void ClearParticles()\r\n        {\r\n            if (particleSystem != null)\r\n            {\r\n                particleSystem.Clear();\r\n                Debug.Log(\"粒子已清除\");\r\n            }\r\n        }\r\n        \r\n        /// <summary>\r\n        /// 设置发射率\r\n        /// </summary>\r\n        public void SetEmissionRate(float rate)\r\n        {\r\n            emissionRate = Mathf.Max(0, rate);\r\n            \r\n            if (visualEffect != null)\r\n            {\r\n                SetVFXParameter(\"EmissionRate\", emissionRate);\r\n            }\r\n            \r\n            if (particleSystem != null)\r\n            {\r\n                var emission = particleSystem.emission;\r\n                emission.rateOverTime = emissionRate;\r\n            }\r\n            \r\n            Debug.Log($\"发射率设置为: {emissionRate}\");\r\n        }\r\n        \r\n        /// <summary>\r\n        /// 设置粒子生命周期\r\n        /// </summary>\r\n        public void SetParticleLifetime(float lifetime)\r\n        {\r\n            particleLifetime = Mathf.Max(0.1f, lifetime);\r\n            \r\n            if (visualEffect != null)\r\n            {\r\n                SetVFXParameter(\"ParticleLifetime\", particleLifetime);\r\n            }\r\n            \r\n            if (particleSystem != null)\r\n            {\r\n                var main = particleSystem.main;\r\n                main.startLifetime = particleLifetime;\r\n            }\r\n            \r\n            Debug.Log($\"粒子生命周期设置为: {particleLifetime}秒\");\r\n        }\r\n        \r\n        /// <summary>\r\n        /// 设置粒子速度\r\n        /// </summary>\r\n        public void SetParticleSpeed(float speed)\r\n        {\r\n            particleSpeed = speed;\r\n            \r\n            if (visualEffect != null)\r\n            {\r\n                SetVFXParameter(\"ParticleSpeed\", particleSpeed);\r\n            }\r\n            \r\n            if (particleSystem != null)\r\n            {\r\n                var main = particleSystem.main;\r\n                main.startSpeed = particleSpeed;\r\n            }\r\n            \r\n            Debug.Log($\"粒子速度设置为: {particleSpeed}\");\r\n        }\r\n        \r\n        /// <summary>\r\n        /// 设置粒子颜色\r\n        /// </summary>\r\n        public void SetParticleColor(Color color)\r\n        {\r\n            particleColor = color;\r\n            \r\n            if (visualEffect != null)\r\n            {\r\n                SetVFXParameter(\"ParticleColor\", particleColor);\r\n            }\r\n            \r\n            if (particleSystem != null)\r\n            {\r\n                var main = particleSystem.main;\r\n                main.startColor = particleColor;\r\n            }\r\n            \r\n            Debug.Log($\"粒子颜色设置为: {particleColor}\");\r\n        }\r\n        \r\n        /// <summary>\r\n        /// 设置粒子缩放\r\n        /// </summary>\r\n        public void SetParticleScale(Vector3 scale)\r\n        {\r\n            particleScale = scale;\r\n            \r\n            if (visualEffect != null)\r\n            {\r\n                SetVFXParameter(\"ParticleScale\", particleScale);\r\n            }\r\n            \r\n            if (particleSystem != null)\r\n            {\r\n                var main = particleSystem.main;\r\n                main.startSize = particleScale.x;\r\n            }\r\n            \r\n            Debug.Log($\"粒子缩放设置为: {particleScale}\");\r\n        }\r\n        \r\n        /// <summary>\r\n        /// 设置动画速度\r\n        /// </summary>\r\n        public void SetAnimationSpeed(float speed)\r\n        {\r\n            animationSpeed = Mathf.Max(0.1f, speed);\r\n            \r\n            if (visualEffect != null)\r\n            {\r\n                visualEffect.playRate = animationSpeed;\r\n            }\r\n            \r\n            if (particleSystem != null)\r\n            {\r\n                var main = particleSystem.main;\r\n                main.simulationSpeed = animationSpeed;\r\n            }\r\n            \r\n            Debug.Log($\"动画速度设置为: {animationSpeed}x\");\r\n        }\r\n        \r\n        /// <summary>\r\n        /// 重置变换\r\n        /// </summary>\r\n        public void ResetTransform()\r\n        {\r\n            transform.position = originalPosition;\r\n            transform.rotation = Quaternion.Euler(originalRotation);\r\n            transform.localScale = originalScale;\r\n            \r\n            effectPosition = originalPosition;\r\n            effectRotation = originalRotation;\r\n            effectScale = originalScale;\r\n            \r\n            Debug.Log(\"变换已重置\");\r\n        }\r\n        \r\n        /// <summary>\r\n        /// 创建爆炸效果\r\n        /// </summary>\r\n        public void CreateExplosionEffect()\r\n        {\r\n            if (particleSystem != null)\r\n            {\r\n                var main = particleSystem.main;\r\n                main.startLifetime = 1f;\r\n                main.startSpeed = 10f;\r\n                main.startSize = 0.5f;\r\n                main.startColor = Color.red;\r\n                \r\n                var emission = particleSystem.emission;\r\n                emission.rateOverTime = 0;\r\n                emission.SetBursts(new ParticleSystem.Burst[]\r\n                {\r\n                    new ParticleSystem.Burst(0.0f, 100)\r\n                });\r\n                \r\n                var shape = particleSystem.shape;\r\n                shape.shapeType = ParticleSystemShapeType.Sphere;\r\n                shape.radius = 0.1f;\r\n                \r\n                PlayParticles();\r\n                Debug.Log(\"创建爆炸效果\");\r\n            }\r\n        }\r\n        \r\n        /// <summary>\r\n        /// 创建火焰效果\r\n        /// </summary>\r\n        public void CreateFireEffect()\r\n        {\r\n            if (particleSystem != null)\r\n            {\r\n                var main = particleSystem.main;\r\n                main.startLifetime = 2f;\r\n                main.startSpeed = 2f;\r\n                main.startSize = 0.3f;\r\n                main.startColor = new ParticleSystem.MinMaxGradient(Color.yellow, Color.red);\r\n                \r\n                var emission = particleSystem.emission;\r\n                emission.rateOverTime = 50f;\r\n                \r\n                var shape = particleSystem.shape;\r\n                shape.shapeType = ParticleSystemShapeType.Circle;\r\n                shape.radius = 0.5f;\r\n                \r\n                PlayParticles();\r\n                Debug.Log(\"创建火焰效果\");\r\n            }\r\n        }\r\n        \r\n        /// <summary>\r\n        /// 创建烟雾效果\r\n        /// </summary>\r\n        public void CreateSmokeEffect()\r\n        {\r\n            if (particleSystem != null)\r\n            {\r\n                var main = particleSystem.main;\r\n                main.startLifetime = 3f;\r\n                main.startSpeed = 1f;\r\n                main.startSize = 1f;\r\n                main.startColor = new ParticleSystem.MinMaxGradient(Color.gray, Color.black);\r\n                \r\n                var emission = particleSystem.emission;\r\n                emission.rateOverTime = 20f;\r\n                \r\n                var shape = particleSystem.shape;\r\n                shape.shapeType = ParticleSystemShapeType.Sphere;\r\n                shape.radius = 0.2f;\r\n                \r\n                PlayParticles();\r\n                Debug.Log(\"创建烟雾效果\");\r\n            }\r\n        }\r\n        \r\n        /// <summary>\r\n        /// 获取VFX信息\r\n        /// </summary>\r\n        public void GetVFXInfo()\r\n        {\r\n            Debug.Log(\"=== VFX信息 ===\");\r\n            \r\n            if (visualEffect != null)\r\n            {\r\n                Debug.Log($\"VFX资源: {(visualEffect.visualEffectAsset != null ? visualEffect.visualEffectAsset.name : \"无\")}\");\r\n                Debug.Log($\"播放状态: {(visualEffect.isActive ? \"活跃\" : \"非活跃\")}\");\r\n                Debug.Log($\"播放速率: {visualEffect.playRate}\");\r\n                Debug.Log($\"暂停状态: {visualEffect.pause}\");\r\n            }\r\n            \r\n            if (particleSystem != null)\r\n            {\r\n                var main = particleSystem.main;\r\n                Debug.Log($\"粒子系统: {particleSystem.name}\");\r\n                Debug.Log($\"最大粒子数: {main.maxParticles}\");\r\n                Debug.Log($\"当前粒子数: {particleSystem.particleCount}\");\r\n                Debug.Log($\"是否播放中: {particleSystem.isPlaying}\");\r\n                Debug.Log($\"是否暂停: {particleSystem.isPaused}\");\r\n            }\r\n        }\r\n        \r\n        private void Update()\r\n        {\r\n            if (isPlaying)\r\n            {\r\n                currentTime += Time.deltaTime;\r\n            }\r\n        }\r\n        \r\n        private void OnGUI()\r\n        {\r\n            if (!showControls) return;\r\n            \r\n            GUILayout.BeginArea(new Rect(10, 10, 400, 700));\r\n            GUILayout.Label(\"UnityEngine.VFX 视觉效果系统案例\", EditorStyles.boldLabel);\r\n            \r\n            GUILayout.Space(10);\r\n            \r\n            // VFX控制\r\n            GUILayout.Label(\"VFX控制\", EditorStyles.boldLabel);\r\n            GUILayout.BeginHorizontal();\r\n            if (GUILayout.Button(\"播放VFX\")) PlayVFX();\r\n            if (GUILayout.Button(\"暂停VFX\")) PauseVFX();\r\n            if (GUILayout.Button(\"停止VFX\")) StopVFX();\r\n            GUILayout.EndHorizontal();\r\n            \r\n            GUILayout.Space(10);\r\n            \r\n            // 粒子系统控制\r\n            GUILayout.Label(\"粒子系统控制\", EditorStyles.boldLabel);\r\n            GUILayout.BeginHorizontal();\r\n            if (GUILayout.Button(\"播放粒子\")) PlayParticles();\r\n            if (GUILayout.Button(\"暂停粒子\")) PauseParticles();\r\n            if (GUILayout.Button(\"停止粒子\")) StopParticles();\r\n            GUILayout.EndHorizontal();\r\n            \r\n            if (GUILayout.Button(\"清除粒子\"))\r\n            {\r\n                ClearParticles();\r\n            }\r\n            \r\n            GUILayout.Space(10);\r\n            \r\n            // 参数控制\r\n            GUILayout.Label(\"参数控制\", EditorStyles.boldLabel);\r\n            \r\n            float newEmissionRate = GUILayout.HorizontalSlider(emissionRate, 0f, 100f);\r\n            if (Mathf.Abs(newEmissionRate - emissionRate) > 0.1f)\r\n            {\r\n                SetEmissionRate(newEmissionRate);\r\n            }\r\n            GUILayout.Label($\"发射率: {emissionRate:F1}\");\r\n            \r\n            float newLifetime = GUILayout.HorizontalSlider(particleLifetime, 0.1f, 10f);\r\n            if (Mathf.Abs(newLifetime - particleLifetime) > 0.1f)\r\n            {\r\n                SetParticleLifetime(newLifetime);\r\n            }\r\n            GUILayout.Label($\"生命周期: {particleLifetime:F1}秒\");\r\n            \r\n            float newSpeed = GUILayout.HorizontalSlider(particleSpeed, 0f, 20f);\r\n            if (Mathf.Abs(newSpeed - particleSpeed) > 0.1f)\r\n            {\r\n                SetParticleSpeed(newSpeed);\r\n            }\r\n            GUILayout.Label($\"粒子速度: {particleSpeed:F1}\");\r\n            \r\n            float newAnimationSpeed = GUILayout.HorizontalSlider(animationSpeed, 0.1f, 5f);\r\n            if (Mathf.Abs(newAnimationSpeed - animationSpeed) > 0.1f)\r\n            {\r\n                SetAnimationSpeed(newAnimationSpeed);\r\n            }\r\n            GUILayout.Label($\"动画速度: {animationSpeed:F1}x\");\r\n            \r\n            GUILayout.Space(10);\r\n            \r\n            // 颜色控制\r\n            GUILayout.Label(\"颜色控制\", EditorStyles.boldLabel);\r\n            Color newColor = particleColor;\r\n            newColor.r = GUILayout.HorizontalSlider(newColor.r, 0f, 1f);\r\n            newColor.g = GUILayout.HorizontalSlider(newColor.g, 0f, 1f);\r\n            newColor.b = GUILayout.HorizontalSlider(newColor.b, 0f, 1f);\r\n            newColor.a = GUILayout.HorizontalSlider(newColor.a, 0f, 1f);\r\n            \r\n            if (newColor != particleColor)\r\n            {\r\n                SetParticleColor(newColor);\r\n            }\r\n            \r\n            GUILayout.Space(10);\r\n            \r\n            // 预设效果\r\n            GUILayout.Label(\"预设效果\", EditorStyles.boldLabel);\r\n            GUILayout.BeginHorizontal();\r\n            if (GUILayout.Button(\"爆炸效果\")) CreateExplosionEffect();\r\n            if (GUILayout.Button(\"火焰效果\")) CreateFireEffect();\r\n            GUILayout.EndHorizontal();\r\n            \r\n            if (GUILayout.Button(\"烟雾效果\"))\r\n            {\r\n                CreateSmokeEffect();\r\n            }\r\n            \r\n            GUILayout.Space(10);\r\n            \r\n            // 变换控制\r\n            GUILayout.Label(\"变换控制\", EditorStyles.boldLabel);\r\n            if (GUILayout.Button(\"重置变换\"))\r\n            {\r\n                ResetTransform();\r\n            }\r\n            \r\n            GUILayout.Space(10);\r\n            \r\n            // 信息显示\r\n            GUILayout.Label(\"信息\", EditorStyles.boldLabel);\r\n            if (GUILayout.Button(\"获取VFX信息\"))\r\n            {\r\n                GetVFXInfo();\r\n            }\r\n            \r\n            GUILayout.Label($\"播放时间: {currentTime:F1}秒\");\r\n            GUILayout.Label($\"播放状态: {(isPlaying ? (isPaused ? \"暂停\" : \"播放中\") : \"停止\")}\");\r\n            \r\n            if (particleSystem != null)\r\n            {\r\n                GUILayout.Label($\"当前粒子数: {particleSystem.particleCount}\");\r\n            }\r\n            \r\n            GUILayout.EndArea();\r\n        }\r\n    }\r\n} "
        }
    ]
}