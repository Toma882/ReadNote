{
    "sourceFile": "Assets/UnityEditor/Chapter 8 UnityAPI/UnityEngine/DedicatedServer/DedicatedServerExample.cs",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1750934542639,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1750934542639,
            "name": "Commit-0",
            "content": "using UnityEngine;\r\nusing UnityEngine.Networking;\r\n\r\n/// <summary>\r\n/// UnityEngine.DedicatedServer 命名空间案例演示\r\n/// 展示专用服务器配置、网络管理、服务器状态监控等核心功能\r\n/// </summary>\r\npublic class DedicatedServerExample : MonoBehaviour\r\n{\r\n    [Header(\"服务器配置\")]\r\n    [SerializeField] private string serverIP = \"127.0.0.1\"; //服务器IP\r\n    [SerializeField] private int serverPort = 7777; //服务器端口\r\n    [SerializeField] private int maxConnections = 32; //最大连接数\r\n    [SerializeField] private bool useWebSockets = false; //使用WebSocket\r\n    [SerializeField] private bool useSecureConnection = false; //使用安全连接\r\n    \r\n    [Header(\"服务器状态\")]\r\n    [SerializeField] private bool isServerRunning = false; //服务器是否运行\r\n    [SerializeField] private int currentConnections = 0; //当前连接数\r\n    [SerializeField] private float serverUptime = 0f; //服务器运行时间\r\n    [SerializeField] private float serverLoad = 0f; //服务器负载\r\n    [SerializeField] private string serverStatus = \"未启动\"; //服务器状态\r\n    \r\n    [Header(\"网络配置\")]\r\n    [SerializeField] private int networkUpdateRate = 30; //网络更新频率\r\n    [SerializeField] private int networkBufferSize = 1024; //网络缓冲区大小\r\n    [SerializeField] private bool enableNetworkLogging = false; //启用网络日志\r\n    [SerializeField] private float networkTimeout = 30f; //网络超时时间\r\n    \r\n    [Header(\"性能监控\")]\r\n    [SerializeField] private bool enablePerformanceMonitoring = true; //启用性能监控\r\n    [SerializeField] private float monitoringInterval = 1f; //监控间隔\r\n    [SerializeField] private float cpuUsage = 0f; //CPU使用率\r\n    [SerializeField] private float memoryUsage = 0f; //内存使用率\r\n    [SerializeField] private float networkLatency = 0f; //网络延迟\r\n    \r\n    private NetworkManager networkManager;\r\n    private float lastMonitoringTime = 0f;\r\n    private float serverStartTime = 0f;\r\n    private bool isInitialized = false;\r\n\r\n    private void Start()\r\n    {\r\n        InitializeDedicatedServer();\r\n    }\r\n\r\n    /// <summary>\r\n    /// 初始化专用服务器\r\n    /// </summary>\r\n    private void InitializeDedicatedServer()\r\n    {\r\n        // 获取NetworkManager组件\r\n        networkManager = FindObjectOfType<NetworkManager>();\r\n        if (networkManager == null)\r\n        {\r\n            networkManager = gameObject.AddComponent<NetworkManager>();\r\n        }\r\n        \r\n        // 配置网络管理器\r\n        ConfigureNetworkManager();\r\n        \r\n        // 初始化网络设置\r\n        InitializeNetworkSettings();\r\n        \r\n        isInitialized = true;\r\n        Debug.Log(\"专用服务器初始化完成\");\r\n    }\r\n\r\n    /// <summary>\r\n    /// 配置网络管理器\r\n    /// </summary>\r\n    private void ConfigureNetworkManager()\r\n    {\r\n        if (networkManager != null)\r\n        {\r\n            networkManager.networkAddress = serverIP;\r\n            networkManager.networkPort = serverPort;\r\n            networkManager.maxConnections = maxConnections;\r\n            \r\n            Debug.Log($\"网络管理器配置: {serverIP}:{serverPort}, 最大连接: {maxConnections}\");\r\n        }\r\n    }\r\n\r\n    /// <summary>\r\n    /// 初始化网络设置\r\n    /// </summary>\r\n    private void InitializeNetworkSettings()\r\n    {\r\n        // 设置网络更新频率\r\n        Network.sendRate = networkUpdateRate;\r\n        Network.updateRate = networkUpdateRate;\r\n        \r\n        // 设置网络缓冲区\r\n        Network.bufferSize = networkBufferSize;\r\n        \r\n        // 设置网络超时\r\n        Network.timeout = networkTimeout;\r\n        \r\n        Debug.Log($\"网络设置: 更新频率={networkUpdateRate}Hz, 缓冲区={networkBufferSize}字节\");\r\n    }\r\n\r\n    private void Update()\r\n    {\r\n        if (!isInitialized) return;\r\n        \r\n        // 更新服务器运行时间\r\n        if (isServerRunning)\r\n        {\r\n            serverUptime = Time.time - serverStartTime;\r\n        }\r\n        \r\n        // 性能监控\r\n        if (enablePerformanceMonitoring && Time.time - lastMonitoringTime > monitoringInterval)\r\n        {\r\n            MonitorServerPerformance();\r\n            lastMonitoringTime = Time.time;\r\n        }\r\n        \r\n        // 更新服务器状态\r\n        UpdateServerStatus();\r\n    }\r\n\r\n    /// <summary>\r\n    /// 启动专用服务器\r\n    /// </summary>\r\n    public void StartDedicatedServer()\r\n    {\r\n        if (isServerRunning)\r\n        {\r\n            Debug.LogWarning(\"服务器已在运行中\");\r\n            return;\r\n        }\r\n        \r\n        try\r\n        {\r\n            // 启动服务器\r\n            bool success = NetworkServer.Listen(serverPort);\r\n            \r\n            if (success)\r\n            {\r\n                isServerRunning = true;\r\n                serverStartTime = Time.time;\r\n                serverStatus = \"运行中\";\r\n                \r\n                // 注册网络消息处理\r\n                RegisterNetworkMessageHandlers();\r\n                \r\n                Debug.Log($\"专用服务器启动成功: {serverIP}:{serverPort}\");\r\n            }\r\n            else\r\n            {\r\n                Debug.LogError(\"服务器启动失败\");\r\n                serverStatus = \"启动失败\";\r\n            }\r\n        }\r\n        catch (System.Exception e)\r\n        {\r\n            Debug.LogError($\"启动服务器时发生错误: {e.Message}\");\r\n            serverStatus = \"启动错误\";\r\n        }\r\n    }\r\n\r\n    /// <summary>\r\n    /// 停止专用服务器\r\n    /// </summary>\r\n    public void StopDedicatedServer()\r\n    {\r\n        if (!isServerRunning)\r\n        {\r\n            Debug.LogWarning(\"服务器未运行\");\r\n            return;\r\n        }\r\n        \r\n        try\r\n        {\r\n            // 断开所有连接\r\n            NetworkServer.DisconnectAll();\r\n            \r\n            // 停止服务器\r\n            NetworkServer.Shutdown();\r\n            \r\n            isServerRunning = false;\r\n            serverStatus = \"已停止\";\r\n            currentConnections = 0;\r\n            \r\n            Debug.Log(\"专用服务器已停止\");\r\n        }\r\n        catch (System.Exception e)\r\n        {\r\n            Debug.LogError($\"停止服务器时发生错误: {e.Message}\");\r\n        }\r\n    }\r\n\r\n    /// <summary>\r\n    /// 注册网络消息处理器\r\n    /// </summary>\r\n    private void RegisterNetworkMessageHandlers()\r\n    {\r\n        // 注册连接事件\r\n        NetworkServer.RegisterHandler(MsgType.Connect, OnClientConnected);\r\n        NetworkServer.RegisterHandler(MsgType.Disconnect, OnClientDisconnected);\r\n        \r\n        // 注册自定义消息\r\n        NetworkServer.RegisterHandler(1001, OnCustomMessage);\r\n        \r\n        Debug.Log(\"网络消息处理器注册完成\");\r\n    }\r\n\r\n    /// <summary>\r\n    /// 客户端连接事件\r\n    /// </summary>\r\n    private void OnClientConnected(NetworkMessage netMsg)\r\n    {\r\n        currentConnections++;\r\n        Debug.Log($\"客户端连接: {netMsg.conn.address}, 当前连接数: {currentConnections}\");\r\n        \r\n        // 发送欢迎消息\r\n        SendWelcomeMessage(netMsg.conn);\r\n    }\r\n\r\n    /// <summary>\r\n    /// 客户端断开连接事件\r\n    /// </summary>\r\n    private void OnClientDisconnected(NetworkMessage netMsg)\r\n    {\r\n        currentConnections = Mathf.Max(0, currentConnections - 1);\r\n        Debug.Log($\"客户端断开: {netMsg.conn.address}, 当前连接数: {currentConnections}\");\r\n    }\r\n\r\n    /// <summary>\r\n    /// 自定义消息处理\r\n    /// </summary>\r\n    private void OnCustomMessage(NetworkMessage netMsg)\r\n    {\r\n        var reader = netMsg.reader;\r\n        string message = reader.ReadString();\r\n        \r\n        Debug.Log($\"收到自定义消息: {message}\");\r\n        \r\n        // 处理消息并回复\r\n        ProcessCustomMessage(netMsg.conn, message);\r\n    }\r\n\r\n    /// <summary>\r\n    /// 发送欢迎消息\r\n    /// </summary>\r\n    private void SendWelcomeMessage(NetworkConnection conn)\r\n    {\r\n        var writer = new NetworkWriter();\r\n        writer.StartMessage(1002); // 欢迎消息ID\r\n        writer.Write(\"欢迎连接到专用服务器!\");\r\n        writer.Write(serverUptime);\r\n        writer.Write(currentConnections);\r\n        writer.FinishMessage();\r\n        \r\n        conn.SendWriter(writer, 0);\r\n    }\r\n\r\n    /// <summary>\r\n    /// 处理自定义消息\r\n    /// </summary>\r\n    private void ProcessCustomMessage(NetworkConnection conn, string message)\r\n    {\r\n        var response = $\"服务器收到消息: {message}\";\r\n        \r\n        var writer = new NetworkWriter();\r\n        writer.StartMessage(1003); // 响应消息ID\r\n        writer.Write(response);\r\n        writer.Write(Time.time);\r\n        writer.FinishMessage();\r\n        \r\n        conn.SendWriter(writer, 0);\r\n    }\r\n\r\n    /// <summary>\r\n    /// 监控服务器性能\r\n    /// </summary>\r\n    private void MonitorServerPerformance()\r\n    {\r\n        // 模拟性能数据\r\n        cpuUsage = Random.Range(10f, 80f);\r\n        memoryUsage = Random.Range(20f, 90f);\r\n        networkLatency = Random.Range(5f, 100f);\r\n        \r\n        // 计算服务器负载\r\n        serverLoad = (cpuUsage + memoryUsage) / 2f;\r\n        \r\n        if (enableNetworkLogging)\r\n        {\r\n            Debug.Log($\"性能监控: CPU={cpuUsage:F1}%, 内存={memoryUsage:F1}%, 延迟={networkLatency:F1}ms\");\r\n        }\r\n    }\r\n\r\n    /// <summary>\r\n    /// 更新服务器状态\r\n    /// </summary>\r\n    private void UpdateServerStatus()\r\n    {\r\n        if (isServerRunning)\r\n        {\r\n            if (NetworkServer.active)\r\n            {\r\n                serverStatus = \"运行中\";\r\n            }\r\n            else\r\n            {\r\n                serverStatus = \"异常\";\r\n            }\r\n        }\r\n        else\r\n        {\r\n            serverStatus = \"已停止\";\r\n        }\r\n    }\r\n\r\n    /// <summary>\r\n    /// 获取服务器信息\r\n    /// </summary>\r\n    public void GetServerInfo()\r\n    {\r\n        Debug.Log(\"=== 服务器信息 ===\");\r\n        Debug.Log($\"服务器状态: {serverStatus}\");\r\n        Debug.Log($\"服务器地址: {serverIP}:{serverPort}\");\r\n        Debug.Log($\"当前连接数: {currentConnections}/{maxConnections}\");\r\n        Debug.Log($\"运行时间: {serverUptime:F1}秒\");\r\n        Debug.Log($\"服务器负载: {serverLoad:F1}%\");\r\n        Debug.Log($\"CPU使用率: {cpuUsage:F1}%\");\r\n        Debug.Log($\"内存使用率: {memoryUsage:F1}%\");\r\n        Debug.Log($\"网络延迟: {networkLatency:F1}ms\");\r\n    }\r\n\r\n    /// <summary>\r\n    /// 获取网络统计信息\r\n    /// </summary>\r\n    public void GetNetworkStats()\r\n    {\r\n        Debug.Log(\"=== 网络统计信息 ===\");\r\n        Debug.Log($\"网络更新频率: {Network.sendRate}Hz\");\r\n        Debug.Log($\"网络缓冲区大小: {Network.bufferSize}字节\");\r\n        Debug.Log($\"网络超时时间: {Network.timeout}秒\");\r\n        Debug.Log($\"使用WebSocket: {useWebSockets}\");\r\n        Debug.Log($\"使用安全连接: {useSecureConnection}\");\r\n        Debug.Log($\"网络日志: {(enableNetworkLogging ? \"启用\" : \"禁用\")}\");\r\n    }\r\n\r\n    /// <summary>\r\n    /// 广播消息到所有客户端\r\n    /// </summary>\r\n    /// <param name=\"message\">消息内容</param>\r\n    public void BroadcastMessage(string message)\r\n    {\r\n        if (!isServerRunning)\r\n        {\r\n            Debug.LogWarning(\"服务器未运行，无法广播消息\");\r\n            return;\r\n        }\r\n        \r\n        var writer = new NetworkWriter();\r\n        writer.StartMessage(1004); // 广播消息ID\r\n        writer.Write(message);\r\n        writer.Write(Time.time);\r\n        writer.FinishMessage();\r\n        \r\n        NetworkServer.SendToAll(1004, writer);\r\n        Debug.Log($\"广播消息: {message}\");\r\n    }\r\n\r\n    /// <summary>\r\n    /// 踢出客户端\r\n    /// </summary>\r\n    /// <param name=\"connectionId\">连接ID</param>\r\n    public void KickClient(int connectionId)\r\n    {\r\n        if (!isServerRunning)\r\n        {\r\n            Debug.LogWarning(\"服务器未运行\");\r\n            return;\r\n        }\r\n        \r\n        var conn = NetworkServer.connections[connectionId];\r\n        if (conn != null)\r\n        {\r\n            conn.Disconnect();\r\n            Debug.Log($\"踢出客户端: {connectionId}\");\r\n        }\r\n        else\r\n        {\r\n            Debug.LogWarning($\"未找到连接ID: {connectionId}\");\r\n        }\r\n    }\r\n\r\n    /// <summary>\r\n    /// 设置服务器配置\r\n    /// </summary>\r\n    /// <param name=\"ip\">服务器IP</param>\r\n    /// <param name=\"port\">服务器端口</param>\r\n    /// <param name=\"maxConn\">最大连接数</param>\r\n    public void SetServerConfig(string ip, int port, int maxConn)\r\n    {\r\n        serverIP = ip;\r\n        serverPort = port;\r\n        maxConnections = maxConn;\r\n        \r\n        if (networkManager != null)\r\n        {\r\n            ConfigureNetworkManager();\r\n        }\r\n        \r\n        Debug.Log($\"服务器配置已更新: {ip}:{port}, 最大连接: {maxConn}\");\r\n    }\r\n\r\n    /// <summary>\r\n    /// 设置网络配置\r\n    /// </summary>\r\n    /// <param name=\"updateRate\">更新频率</param>\r\n    /// <param name=\"bufferSize\">缓冲区大小</param>\r\n    /// <param name=\"timeout\">超时时间</param>\r\n    public void SetNetworkConfig(int updateRate, int bufferSize, float timeout)\r\n    {\r\n        networkUpdateRate = updateRate;\r\n        networkBufferSize = bufferSize;\r\n        networkTimeout = timeout;\r\n        \r\n        InitializeNetworkSettings();\r\n        Debug.Log($\"网络配置已更新: 频率={updateRate}Hz, 缓冲区={bufferSize}字节, 超时={timeout}秒\");\r\n    }\r\n\r\n    /// <summary>\r\n    /// 重启服务器\r\n    /// </summary>\r\n    public void RestartServer()\r\n    {\r\n        Debug.Log(\"重启服务器...\");\r\n        StopDedicatedServer();\r\n        \r\n        // 等待一秒后重启\r\n        Invoke(nameof(StartDedicatedServer), 1f);\r\n    }\r\n\r\n    /// <summary>\r\n    /// 保存服务器配置\r\n    /// </summary>\r\n    public void SaveServerConfig()\r\n    {\r\n        var config = new ServerConfig\r\n        {\r\n            serverIP = serverIP,\r\n            serverPort = serverPort,\r\n            maxConnections = maxConnections,\r\n            networkUpdateRate = networkUpdateRate,\r\n            networkBufferSize = networkBufferSize,\r\n            networkTimeout = networkTimeout,\r\n            enableNetworkLogging = enableNetworkLogging\r\n        };\r\n        \r\n        string json = JsonUtility.ToJson(config, true);\r\n        System.IO.File.WriteAllText(\"server_config.json\", json);\r\n        Debug.Log(\"服务器配置已保存\");\r\n    }\r\n\r\n    /// <summary>\r\n    /// 加载服务器配置\r\n    /// </summary>\r\n    public void LoadServerConfig()\r\n    {\r\n        if (System.IO.File.Exists(\"server_config.json\"))\r\n        {\r\n            string json = System.IO.File.ReadAllText(\"server_config.json\");\r\n            var config = JsonUtility.FromJson<ServerConfig>(json);\r\n            \r\n            SetServerConfig(config.serverIP, config.serverPort, config.maxConnections);\r\n            SetNetworkConfig(config.networkUpdateRate, config.networkBufferSize, config.networkTimeout);\r\n            enableNetworkLogging = config.enableNetworkLogging;\r\n            \r\n            Debug.Log(\"服务器配置已加载\");\r\n        }\r\n        else\r\n        {\r\n            Debug.LogWarning(\"配置文件不存在\");\r\n        }\r\n    }\r\n\r\n    private void OnGUI()\r\n    {\r\n        GUILayout.BeginArea(new Rect(10, 10, 400, 800));\r\n        GUILayout.Label(\"DedicatedServer 专用服务器演示\", UnityEditor.EditorStyles.boldLabel);\r\n        \r\n        GUILayout.Space(10);\r\n        GUILayout.Label(\"服务器配置:\");\r\n        serverIP = GUILayout.TextField(\"服务器IP\", serverIP);\r\n        serverPort = int.TryParse(GUILayout.TextField(\"服务器端口\", serverPort.ToString()), out var port) ? port : serverPort;\r\n        maxConnections = int.TryParse(GUILayout.TextField(\"最大连接数\", maxConnections.ToString()), out var maxConn) ? maxConn : maxConnections;\r\n        useWebSockets = GUILayout.Toggle(useWebSockets, \"使用WebSocket\");\r\n        useSecureConnection = GUILayout.Toggle(useSecureConnection, \"使用安全连接\");\r\n        \r\n        GUILayout.Space(10);\r\n        GUILayout.Label(\"网络配置:\");\r\n        networkUpdateRate = int.TryParse(GUILayout.TextField(\"网络更新频率\", networkUpdateRate.ToString()), out var updateRate) ? updateRate : networkUpdateRate;\r\n        networkBufferSize = int.TryParse(GUILayout.TextField(\"网络缓冲区大小\", networkBufferSize.ToString()), out var bufferSize) ? bufferSize : networkBufferSize;\r\n        networkTimeout = float.TryParse(GUILayout.TextField(\"网络超时时间\", networkTimeout.ToString()), out var timeout) ? timeout : networkTimeout;\r\n        enableNetworkLogging = GUILayout.Toggle(enableNetworkLogging, \"启用网络日志\");\r\n        \r\n        GUILayout.Space(10);\r\n        GUILayout.Label(\"服务器状态:\");\r\n        GUILayout.Label($\"状态: {serverStatus}\");\r\n        GUILayout.Label($\"连接数: {currentConnections}/{maxConnections}\");\r\n        GUILayout.Label($\"运行时间: {serverUptime:F1}秒\");\r\n        GUILayout.Label($\"服务器负载: {serverLoad:F1}%\");\r\n        GUILayout.Label($\"CPU使用率: {cpuUsage:F1}%\");\r\n        GUILayout.Label($\"内存使用率: {memoryUsage:F1}%\");\r\n        GUILayout.Label($\"网络延迟: {networkLatency:F1}ms\");\r\n        \r\n        GUILayout.Space(10);\r\n        GUILayout.Label(\"性能监控:\");\r\n        enablePerformanceMonitoring = GUILayout.Toggle(enablePerformanceMonitoring, \"启用性能监控\");\r\n        monitoringInterval = float.TryParse(GUILayout.TextField(\"监控间隔\", monitoringInterval.ToString()), out var interval) ? interval : monitoringInterval;\r\n        \r\n        GUILayout.Space(10);\r\n        \r\n        if (!isServerRunning)\r\n        {\r\n            if (GUILayout.Button(\"启动服务器\"))\r\n            {\r\n                StartDedicatedServer();\r\n            }\r\n        }\r\n        else\r\n        {\r\n            if (GUILayout.Button(\"停止服务器\"))\r\n            {\r\n                StopDedicatedServer();\r\n            }\r\n            \r\n            if (GUILayout.Button(\"重启服务器\"))\r\n            {\r\n                RestartServer();\r\n            }\r\n        }\r\n        \r\n        if (GUILayout.Button(\"获取服务器信息\"))\r\n        {\r\n            GetServerInfo();\r\n        }\r\n        \r\n        if (GUILayout.Button(\"获取网络统计\"))\r\n        {\r\n            GetNetworkStats();\r\n        }\r\n        \r\n        if (GUILayout.Button(\"广播消息\"))\r\n        {\r\n            BroadcastMessage(\"服务器广播消息: \" + Time.time);\r\n        }\r\n        \r\n        if (GUILayout.Button(\"保存配置\"))\r\n        {\r\n            SaveServerConfig();\r\n        }\r\n        \r\n        if (GUILayout.Button(\"加载配置\"))\r\n        {\r\n            LoadServerConfig();\r\n        }\r\n        \r\n        GUILayout.EndArea();\r\n    }\r\n\r\n    private void OnDestroy()\r\n    {\r\n        if (isServerRunning)\r\n        {\r\n            StopDedicatedServer();\r\n        }\r\n    }\r\n}\r\n\r\n/// <summary>\r\n/// 服务器配置类\r\n/// </summary>\r\n[System.Serializable]\r\npublic class ServerConfig\r\n{\r\n    public string serverIP;\r\n    public int serverPort;\r\n    public int maxConnections;\r\n    public int networkUpdateRate;\r\n    public int networkBufferSize;\r\n    public float networkTimeout;\r\n    public bool enableNetworkLogging;\r\n} "
        }
    ]
}