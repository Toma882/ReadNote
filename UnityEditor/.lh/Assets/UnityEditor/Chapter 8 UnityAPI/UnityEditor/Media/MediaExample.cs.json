{
    "sourceFile": "Assets/UnityEditor/Chapter 8 UnityAPI/UnityEditor/Media/MediaExample.cs",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1750940481551,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1750940481551,
            "name": "Commit-0",
            "content": "using UnityEngine;\r\nusing UnityEditor;\r\nusing UnityEditor.Media;\r\nusing System.Collections.Generic;\r\n\r\nnamespace UnityEditor.Media.Examples\r\n{\r\n    /// <summary>\r\n    /// UnityEditor.Media 命名空间使用示例\r\n    /// 演示媒体录制、编码和播放功能\r\n    /// </summary>\r\n    public class MediaExample : MonoBehaviour\r\n    {\r\n        [Header(\"媒体录制配置\")]\r\n        [SerializeField] private string outputPath = \"Assets/Recordings/\";\r\n        [SerializeField] private string fileName = \"recording.mp4\";\r\n        [SerializeField] private int width = 1920;\r\n        [SerializeField] private int height = 1080;\r\n        [SerializeField] private int frameRate = 30;\r\n        [SerializeField] private int bitRate = 5000000; // 5Mbps\r\n        \r\n        [Header(\"录制状态\")]\r\n        [SerializeField] private bool isRecording = false;\r\n        [SerializeField] private float recordingTime = 0f;\r\n        [SerializeField] private string currentStatus = \"就绪\";\r\n        \r\n        [Header(\"媒体播放配置\")]\r\n        [SerializeField] private string mediaFilePath = \"\";\r\n        [SerializeField] private bool isPlaying = false;\r\n        [SerializeField] private float playbackTime = 0f;\r\n        [SerializeField] private float totalDuration = 0f;\r\n        \r\n        private MediaEncoder encoder;\r\n        private MediaPlayer player;\r\n        private List<Texture2D> frameBuffer = new List<Texture2D>();\r\n        private float lastFrameTime;\r\n        \r\n        /// <summary>\r\n        /// 初始化媒体系统\r\n        /// </summary>\r\n        private void Start()\r\n        {\r\n            InitializeMediaSystem();\r\n        }\r\n        \r\n        /// <summary>\r\n        /// 初始化媒体录制和播放系统\r\n        /// </summary>\r\n        private void InitializeMediaSystem()\r\n        {\r\n            // 确保输出目录存在\r\n            if (!System.IO.Directory.Exists(outputPath))\r\n            {\r\n                System.IO.Directory.CreateDirectory(outputPath);\r\n            }\r\n            \r\n            // 初始化媒体播放器\r\n            player = new MediaPlayer();\r\n            \r\n            currentStatus = \"媒体系统已初始化\";\r\n            Debug.Log(\"媒体系统初始化完成\");\r\n        }\r\n        \r\n        /// <summary>\r\n        /// 开始录制\r\n        /// </summary>\r\n        public void StartRecording()\r\n        {\r\n            if (isRecording)\r\n            {\r\n                Debug.LogWarning(\"已经在录制中\");\r\n                return;\r\n            }\r\n            \r\n            string fullPath = System.IO.Path.Combine(outputPath, fileName);\r\n            \r\n            // 配置编码器参数\r\n            var encoderParams = new MediaEncoder.EncoderParams\r\n            {\r\n                width = width,\r\n                height = height,\r\n                frameRate = frameRate,\r\n                bitRate = bitRate,\r\n                outputPath = fullPath\r\n            };\r\n            \r\n            try\r\n            {\r\n                encoder = new MediaEncoder(encoderParams);\r\n                isRecording = true;\r\n                recordingTime = 0f;\r\n                lastFrameTime = Time.time;\r\n                currentStatus = \"录制中...\";\r\n                \r\n                Debug.Log($\"开始录制到: {fullPath}\");\r\n            }\r\n            catch (System.Exception e)\r\n            {\r\n                Debug.LogError($\"录制失败: {e.Message}\");\r\n                currentStatus = \"录制失败\";\r\n            }\r\n        }\r\n        \r\n        /// <summary>\r\n        /// 停止录制\r\n        /// </summary>\r\n        public void StopRecording()\r\n        {\r\n            if (!isRecording || encoder == null)\r\n            {\r\n                Debug.LogWarning(\"没有在录制\");\r\n                return;\r\n            }\r\n            \r\n            try\r\n            {\r\n                encoder.Dispose();\r\n                encoder = null;\r\n                isRecording = false;\r\n                currentStatus = \"录制完成\";\r\n                \r\n                Debug.Log(\"录制已停止\");\r\n            }\r\n            catch (System.Exception e)\r\n            {\r\n                Debug.LogError($\"停止录制失败: {e.Message}\");\r\n                currentStatus = \"停止录制失败\";\r\n            }\r\n        }\r\n        \r\n        /// <summary>\r\n        /// 添加帧到录制\r\n        /// </summary>\r\n        public void AddFrame(Texture2D frame)\r\n        {\r\n            if (!isRecording || encoder == null)\r\n                return;\r\n                \r\n            try\r\n            {\r\n                encoder.AddFrame(frame);\r\n                frameBuffer.Add(frame);\r\n                \r\n                // 限制缓冲区大小\r\n                if (frameBuffer.Count > 300) // 10秒@30fps\r\n                {\r\n                    var oldFrame = frameBuffer[0];\r\n                    frameBuffer.RemoveAt(0);\r\n                    DestroyImmediate(oldFrame);\r\n                }\r\n            }\r\n            catch (System.Exception e)\r\n            {\r\n                Debug.LogError($\"添加帧失败: {e.Message}\");\r\n            }\r\n        }\r\n        \r\n        /// <summary>\r\n        /// 播放媒体文件\r\n        /// </summary>\r\n        public void PlayMedia(string filePath)\r\n        {\r\n            if (string.IsNullOrEmpty(filePath))\r\n            {\r\n                Debug.LogWarning(\"文件路径为空\");\r\n                return;\r\n            }\r\n            \r\n            try\r\n            {\r\n                if (player != null)\r\n                {\r\n                    player.Dispose();\r\n                }\r\n                \r\n                player = new MediaPlayer();\r\n                player.Open(filePath);\r\n                player.Play();\r\n                \r\n                mediaFilePath = filePath;\r\n                isPlaying = true;\r\n                currentStatus = \"播放中\";\r\n                \r\n                Debug.Log($\"开始播放: {filePath}\");\r\n            }\r\n            catch (System.Exception e)\r\n            {\r\n                Debug.LogError($\"播放失败: {e.Message}\");\r\n                currentStatus = \"播放失败\";\r\n            }\r\n        }\r\n        \r\n        /// <summary>\r\n        /// 停止播放\r\n        /// </summary>\r\n        public void StopPlayback()\r\n        {\r\n            if (player != null)\r\n            {\r\n                player.Stop();\r\n                isPlaying = false;\r\n                currentStatus = \"播放已停止\";\r\n            }\r\n        }\r\n        \r\n        /// <summary>\r\n        /// 暂停/恢复播放\r\n        /// </summary>\r\n        public void TogglePlayback()\r\n        {\r\n            if (player == null) return;\r\n            \r\n            if (isPlaying)\r\n            {\r\n                player.Pause();\r\n                isPlaying = false;\r\n                currentStatus = \"已暂停\";\r\n            }\r\n            else\r\n            {\r\n                player.Play();\r\n                isPlaying = true;\r\n                currentStatus = \"播放中\";\r\n            }\r\n        }\r\n        \r\n        /// <summary>\r\n        /// 设置播放位置\r\n        /// </summary>\r\n        public void SetPlaybackTime(float time)\r\n        {\r\n            if (player != null)\r\n            {\r\n                player.SetTime(time);\r\n                playbackTime = time;\r\n            }\r\n        }\r\n        \r\n        /// <summary>\r\n        /// 获取媒体信息\r\n        /// </summary>\r\n        public MediaInfo GetMediaInfo(string filePath)\r\n        {\r\n            try\r\n            {\r\n                return MediaInfo.Get(filePath);\r\n            }\r\n            catch (System.Exception e)\r\n            {\r\n                Debug.LogError($\"获取媒体信息失败: {e.Message}\");\r\n                return null;\r\n            }\r\n        }\r\n        \r\n        /// <summary>\r\n        /// 更新录制时间\r\n        /// </summary>\r\n        private void Update()\r\n        {\r\n            if (isRecording)\r\n            {\r\n                recordingTime += Time.deltaTime;\r\n                \r\n                // 每秒添加一帧（示例）\r\n                if (Time.time - lastFrameTime >= 1f / frameRate)\r\n                {\r\n                    // 创建示例帧（实际应用中应该从相机或其他源获取）\r\n                    Texture2D frame = CreateSampleFrame();\r\n                    AddFrame(frame);\r\n                    lastFrameTime = Time.time;\r\n                }\r\n            }\r\n            \r\n            if (isPlaying && player != null)\r\n            {\r\n                playbackTime = player.GetTime();\r\n                totalDuration = player.GetDuration();\r\n            }\r\n        }\r\n        \r\n        /// <summary>\r\n        /// 创建示例帧\r\n        /// </summary>\r\n        private Texture2D CreateSampleFrame()\r\n        {\r\n            Texture2D frame = new Texture2D(width, height);\r\n            Color[] pixels = new Color[width * height];\r\n            \r\n            // 创建简单的渐变效果\r\n            for (int y = 0; y < height; y++)\r\n            {\r\n                for (int x = 0; x < width; x++)\r\n                {\r\n                    float r = (float)x / width;\r\n                    float g = (float)y / height;\r\n                    float b = Mathf.Sin(Time.time + x * 0.01f) * 0.5f + 0.5f;\r\n                    pixels[y * width + x] = new Color(r, g, b, 1f);\r\n                }\r\n            }\r\n            \r\n            frame.SetPixels(pixels);\r\n            frame.Apply();\r\n            return frame;\r\n        }\r\n        \r\n        /// <summary>\r\n        /// 清理资源\r\n        /// </summary>\r\n        private void OnDestroy()\r\n        {\r\n            if (encoder != null)\r\n            {\r\n                encoder.Dispose();\r\n            }\r\n            \r\n            if (player != null)\r\n            {\r\n                player.Dispose();\r\n            }\r\n            \r\n            // 清理帧缓冲区\r\n            foreach (var frame in frameBuffer)\r\n            {\r\n                if (frame != null)\r\n                {\r\n                    DestroyImmediate(frame);\r\n                }\r\n            }\r\n            frameBuffer.Clear();\r\n        }\r\n        \r\n        /// <summary>\r\n        /// 在编辑器中显示GUI\r\n        /// </summary>\r\n        private void OnGUI()\r\n        {\r\n            if (!Application.isPlaying) return;\r\n            \r\n            GUILayout.BeginArea(new Rect(10, 10, 400, 600));\r\n            GUILayout.Label(\"UnityEditor.Media 示例\", EditorStyles.boldLabel);\r\n            \r\n            GUILayout.Space(10);\r\n            GUILayout.Label($\"状态: {currentStatus}\");\r\n            \r\n            GUILayout.Space(10);\r\n            GUILayout.Label(\"录制控制\", EditorStyles.boldLabel);\r\n            \r\n            if (!isRecording)\r\n            {\r\n                if (GUILayout.Button(\"开始录制\"))\r\n                {\r\n                    StartRecording();\r\n                }\r\n            }\r\n            else\r\n            {\r\n                GUILayout.Label($\"录制时间: {recordingTime:F2}秒\");\r\n                if (GUILayout.Button(\"停止录制\"))\r\n                {\r\n                    StopRecording();\r\n                }\r\n            }\r\n            \r\n            GUILayout.Space(10);\r\n            GUILayout.Label(\"播放控制\", EditorStyles.boldLabel);\r\n            \r\n            mediaFilePath = GUILayout.TextField(\"媒体文件路径\", mediaFilePath);\r\n            \r\n            if (GUILayout.Button(\"选择文件\"))\r\n            {\r\n                string path = EditorUtility.OpenFilePanel(\"选择媒体文件\", \"\", \"mp4,avi,mov\");\r\n                if (!string.IsNullOrEmpty(path))\r\n                {\r\n                    mediaFilePath = path;\r\n                }\r\n            }\r\n            \r\n            if (GUILayout.Button(\"播放\"))\r\n            {\r\n                PlayMedia(mediaFilePath);\r\n            }\r\n            \r\n            if (isPlaying)\r\n            {\r\n                if (GUILayout.Button(\"暂停/恢复\"))\r\n                {\r\n                    TogglePlayback();\r\n                }\r\n                \r\n                if (GUILayout.Button(\"停止\"))\r\n                {\r\n                    StopPlayback();\r\n                }\r\n                \r\n                GUILayout.Label($\"播放时间: {playbackTime:F2} / {totalDuration:F2}\");\r\n                \r\n                // 播放进度条\r\n                float progress = totalDuration > 0 ? playbackTime / totalDuration : 0;\r\n                float newProgress = GUILayout.HorizontalSlider(progress, 0, 1);\r\n                if (Mathf.Abs(newProgress - progress) > 0.01f)\r\n                {\r\n                    SetPlaybackTime(newProgress * totalDuration);\r\n                }\r\n            }\r\n            \r\n            GUILayout.Space(10);\r\n            GUILayout.Label(\"配置\", EditorStyles.boldLabel);\r\n            \r\n            width = EditorGUILayout.IntField(\"宽度\", width);\r\n            height = EditorGUILayout.IntField(\"高度\", height);\r\n            frameRate = EditorGUILayout.IntField(\"帧率\", frameRate);\r\n            bitRate = EditorGUILayout.IntField(\"比特率\", bitRate);\r\n            \r\n            GUILayout.EndArea();\r\n        }\r\n    }\r\n} "
        }
    ]
}