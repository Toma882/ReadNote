{
    "sourceFile": "Assets/UnityAPI/Chapter 1 Core/GameObject/GameObjectExamples.cs",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1750927789482,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1750927789482,
            "name": "Commit-0",
            "content": "using UnityEngine;\r\n\r\n/// <summary>\r\n/// GameObject API使用案例\r\n/// 演示GameObject的创建、销毁、查找等核心功能\r\n/// </summary>\r\npublic class GameObjectExamples : MonoBehaviour\r\n{\r\n    [Header(\"GameObject创建示例\")]\r\n    [SerializeField] private GameObject prefabToInstantiate;\r\n    [SerializeField] private Transform spawnPoint;\r\n    \r\n    [Header(\"查找示例\")]\r\n    [SerializeField] private string objectNameToFind = \"Player\";\r\n    [SerializeField] private string tagToFind = \"Enemy\";\r\n    \r\n    [Header(\"组件操作示例\")]\r\n    [SerializeField] private GameObject targetObject;\r\n    \r\n    private void Start()\r\n    {\r\n        // 演示各种GameObject操作\r\n        DemonstrateGameObjectCreation();\r\n        DemonstrateGameObjectFinding();\r\n        DemonstrateComponentOperations();\r\n        DemonstrateGameObjectHierarchy();\r\n    }\r\n    \r\n    /// <summary>\r\n    /// 演示GameObject的创建方法\r\n    /// </summary>\r\n    private void DemonstrateGameObjectCreation()\r\n    {\r\n        Debug.Log(\"=== GameObject创建示例 ===\");\r\n        \r\n        // 1. 创建空的GameObject\r\n        GameObject emptyObject = new GameObject(\"EmptyObject\");\r\n        Debug.Log($\"创建了空对象: {emptyObject.name}\");\r\n        \r\n        // 2. 使用Instantiate克隆对象\r\n        if (prefabToInstantiate != null)\r\n        {\r\n            Vector3 spawnPosition = spawnPoint != null ? spawnPoint.position : Vector3.zero;\r\n            GameObject instantiatedObject = Instantiate(prefabToInstantiate, spawnPosition, Quaternion.identity);\r\n            instantiatedObject.name = \"InstantiatedObject\";\r\n            Debug.Log($\"实例化了预制体: {instantiatedObject.name}\");\r\n        }\r\n        \r\n        // 3. 创建带组件的GameObject\r\n        GameObject objectWithComponent = new GameObject(\"ObjectWithComponent\");\r\n        objectWithComponent.AddComponent<MeshRenderer>();\r\n        objectWithComponent.AddComponent<MeshFilter>();\r\n        Debug.Log($\"创建了带组件的对象: {objectWithComponent.name}\");\r\n        \r\n        // 4. 使用CreatePrimitive创建基础几何体\r\n        GameObject cube = GameObject.CreatePrimitive(PrimitiveType.Cube);\r\n        cube.name = \"GeneratedCube\";\r\n        cube.transform.position = new Vector3(2, 0, 0);\r\n        Debug.Log($\"创建了基础几何体: {cube.name}\");\r\n    }\r\n    \r\n    /// <summary>\r\n    /// 演示GameObject的查找方法\r\n    /// </summary>\r\n    private void DemonstrateGameObjectFinding()\r\n    {\r\n        Debug.Log(\"=== GameObject查找示例 ===\");\r\n        \r\n        // 1. 通过名称查找\r\n        GameObject foundByName = GameObject.Find(objectNameToFind);\r\n        if (foundByName != null)\r\n        {\r\n            Debug.Log($\"通过名称找到对象: {foundByName.name}\");\r\n        }\r\n        else\r\n        {\r\n            Debug.Log($\"未找到名称为 {objectNameToFind} 的对象\");\r\n        }\r\n        \r\n        // 2. 通过标签查找\r\n        GameObject foundByTag = GameObject.FindWithTag(tagToFind);\r\n        if (foundByTag != null)\r\n        {\r\n            Debug.Log($\"通过标签找到对象: {foundByTag.name} (标签: {foundByTag.tag})\");\r\n        }\r\n        else\r\n        {\r\n            Debug.Log($\"未找到标签为 {tagToFind} 的对象\");\r\n        }\r\n        \r\n        // 3. 查找所有指定标签的对象\r\n        GameObject[] allWithTag = GameObject.FindGameObjectsWithTag(tagToFind);\r\n        Debug.Log($\"找到 {allWithTag.Length} 个标签为 {tagToFind} 的对象\");\r\n        \r\n        // 4. 通过类型查找\r\n        GameObject[] allCameras = GameObject.FindObjectsOfType<Camera>();\r\n        Debug.Log($\"场景中有 {allCameras.Length} 个Camera组件\");\r\n        \r\n        // 5. 在子对象中查找\r\n        Transform childTransform = transform.Find(\"ChildObject\");\r\n        if (childTransform != null)\r\n        {\r\n            Debug.Log($\"找到子对象: {childTransform.name}\");\r\n        }\r\n    }\r\n    \r\n    /// <summary>\r\n    /// 演示组件操作\r\n    /// </summary>\r\n    private void DemonstrateComponentOperations()\r\n    {\r\n        Debug.Log(\"=== 组件操作示例 ===\");\r\n        \r\n        if (targetObject == null)\r\n        {\r\n            targetObject = gameObject;\r\n        }\r\n        \r\n        // 1. 添加组件\r\n        Rigidbody rb = targetObject.AddComponent<Rigidbody>();\r\n        Debug.Log($\"为 {targetObject.name} 添加了Rigidbody组件\");\r\n        \r\n        // 2. 获取组件\r\n        Transform targetTransform = targetObject.GetComponent<Transform>();\r\n        if (targetTransform != null)\r\n        {\r\n            Debug.Log($\"获取到Transform组件，位置: {targetTransform.position}\");\r\n        }\r\n        \r\n        // 3. 获取所有指定类型的组件\r\n        Collider[] colliders = targetObject.GetComponents<Collider>();\r\n        Debug.Log($\"对象 {targetObject.name} 有 {colliders.Length} 个Collider组件\");\r\n        \r\n        // 4. 检查是否有指定组件\r\n        bool hasRenderer = targetObject.GetComponent<Renderer>() != null;\r\n        Debug.Log($\"对象 {targetObject.name} 是否有Renderer组件: {hasRenderer}\");\r\n        \r\n        // 5. 移除组件\r\n        if (rb != null)\r\n        {\r\n            DestroyImmediate(rb);\r\n            Debug.Log($\"移除了Rigidbody组件\");\r\n        }\r\n    }\r\n    \r\n    /// <summary>\r\n    /// 演示GameObject层级操作\r\n    /// </summary>\r\n    private void DemonstrateGameObjectHierarchy()\r\n    {\r\n        Debug.Log(\"=== GameObject层级操作示例 ===\");\r\n        \r\n        // 1. 创建父子关系\r\n        GameObject parent = new GameObject(\"ParentObject\");\r\n        GameObject child1 = new GameObject(\"Child1\");\r\n        GameObject child2 = new GameObject(\"Child2\");\r\n        \r\n        child1.transform.SetParent(parent.transform);\r\n        child2.transform.SetParent(parent.transform);\r\n        \r\n        Debug.Log($\"创建了父子关系: {parent.name} -> {child1.name}, {child2.name}\");\r\n        \r\n        // 2. 获取父对象\r\n        Transform parentTransform = child1.transform.parent;\r\n        if (parentTransform != null)\r\n        {\r\n            Debug.Log($\"{child1.name} 的父对象是: {parentTransform.name}\");\r\n        }\r\n        \r\n        // 3. 获取子对象数量\r\n        int childCount = parent.transform.childCount;\r\n        Debug.Log($\"{parent.name} 有 {childCount} 个子对象\");\r\n        \r\n        // 4. 遍历所有子对象\r\n        for (int i = 0; i < childCount; i++)\r\n        {\r\n            Transform child = parent.transform.GetChild(i);\r\n            Debug.Log($\"子对象 {i}: {child.name}\");\r\n        }\r\n        \r\n        // 5. 设置层级位置\r\n        child1.transform.SetAsFirstSibling();\r\n        child2.transform.SetAsLastSibling();\r\n        Debug.Log(\"调整了子对象的层级顺序\");\r\n    }\r\n    \r\n    /// <summary>\r\n    /// 演示GameObject的销毁\r\n    /// </summary>\r\n    private void DemonstrateGameObjectDestruction()\r\n    {\r\n        Debug.Log(\"=== GameObject销毁示例 ===\");\r\n        \r\n        // 1. 立即销毁\r\n        GameObject objectToDestroy = new GameObject(\"ObjectToDestroy\");\r\n        DestroyImmediate(objectToDestroy);\r\n        Debug.Log(\"立即销毁了对象\");\r\n        \r\n        // 2. 延迟销毁\r\n        GameObject delayedDestroy = new GameObject(\"DelayedDestroy\");\r\n        Destroy(delayedDestroy, 2f);\r\n        Debug.Log(\"将在2秒后销毁对象\");\r\n        \r\n        // 3. 销毁组件\r\n        GameObject objectWithComponent = new GameObject(\"ObjectWithComponent\");\r\n        Rigidbody rb = objectWithComponent.AddComponent<Rigidbody>();\r\n        Destroy(rb);\r\n        Debug.Log(\"销毁了Rigidbody组件\");\r\n    }\r\n    \r\n    /// <summary>\r\n    /// 演示GameObject的激活状态控制\r\n    /// </summary>\r\n    private void DemonstrateGameObjectActivation()\r\n    {\r\n        Debug.Log(\"=== GameObject激活状态控制 ===\");\r\n        \r\n        GameObject testObject = new GameObject(\"TestObject\");\r\n        \r\n        // 1. 设置激活状态\r\n        testObject.SetActive(false);\r\n        Debug.Log($\"设置 {testObject.name} 为非激活状态\");\r\n        \r\n        // 2. 检查激活状态\r\n        bool isActive = testObject.activeInHierarchy;\r\n        bool isSelfActive = testObject.activeSelf;\r\n        Debug.Log($\"activeInHierarchy: {isActive}, activeSelf: {isSelfActive}\");\r\n        \r\n        // 3. 重新激活\r\n        testObject.SetActive(true);\r\n        Debug.Log($\"重新激活了 {testObject.name}\");\r\n    }\r\n    \r\n    /// <summary>\r\n    /// 演示GameObject的标签和层级操作\r\n    /// </summary>\r\n    private void DemonstrateGameObjectTagsAndLayers()\r\n    {\r\n        Debug.Log(\"=== GameObject标签和层级操作 ===\");\r\n        \r\n        GameObject testObject = new GameObject(\"TestObject\");\r\n        \r\n        // 1. 设置标签\r\n        testObject.tag = \"Player\";\r\n        Debug.Log($\"设置 {testObject.name} 的标签为: {testObject.tag}\");\r\n        \r\n        // 2. 设置层级\r\n        testObject.layer = 8; // 假设第8层是自定义层\r\n        Debug.Log($\"设置 {testObject.name} 的层级为: {testObject.layer}\");\r\n        \r\n        // 3. 检查标签\r\n        bool isPlayer = testObject.CompareTag(\"Player\");\r\n        Debug.Log($\"对象是否为Player标签: {isPlayer}\");\r\n        \r\n        // 4. 获取层级名称\r\n        string layerName = LayerMask.LayerToName(testObject.layer);\r\n        Debug.Log($\"层级名称: {layerName}\");\r\n    }\r\n    \r\n    /// <summary>\r\n    /// 在Update中演示实时操作\r\n    /// </summary>\r\n    private void Update()\r\n    {\r\n        // 演示键盘输入创建对象\r\n        if (Input.GetKeyDown(KeyCode.Space))\r\n        {\r\n            CreateRandomCube();\r\n        }\r\n        \r\n        // 演示鼠标点击查找对象\r\n        if (Input.GetMouseButtonDown(0))\r\n        {\r\n            FindObjectAtMousePosition();\r\n        }\r\n    }\r\n    \r\n    /// <summary>\r\n    /// 创建随机位置的立方体\r\n    /// </summary>\r\n    private void CreateRandomCube()\r\n    {\r\n        Vector3 randomPosition = new Vector3(\r\n            Random.Range(-5f, 5f),\r\n            Random.Range(0f, 5f),\r\n            Random.Range(-5f, 5f)\r\n        );\r\n        \r\n        GameObject cube = GameObject.CreatePrimitive(PrimitiveType.Cube);\r\n        cube.transform.position = randomPosition;\r\n        cube.name = $\"RandomCube_{Time.time:F2}\";\r\n        \r\n        // 添加随机颜色\r\n        Renderer renderer = cube.GetComponent<Renderer>();\r\n        if (renderer != null)\r\n        {\r\n            renderer.material.color = new Color(\r\n                Random.Range(0f, 1f),\r\n                Random.Range(0f, 1f),\r\n                Random.Range(0f, 1f)\r\n            );\r\n        }\r\n        \r\n        Debug.Log($\"创建了随机立方体: {cube.name} 在位置 {randomPosition}\");\r\n    }\r\n    \r\n    /// <summary>\r\n    /// 在鼠标位置查找对象\r\n    /// </summary>\r\n    private void FindObjectAtMousePosition()\r\n    {\r\n        Ray ray = Camera.main.ScreenPointToRay(Input.mousePosition);\r\n        RaycastHit hit;\r\n        \r\n        if (Physics.Raycast(ray, out hit))\r\n        {\r\n            GameObject hitObject = hit.collider.gameObject;\r\n            Debug.Log($\"鼠标点击了对象: {hitObject.name} 在位置 {hit.point}\");\r\n        }\r\n    }\r\n} "
        }
    ]
}