{
    "sourceFile": "Assets/UnityEditor/Chapter 8 UnityAPI/UnityEditor/Animations/AnimationsExample.cs",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1750940136511,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1750940136511,
            "name": "Commit-0",
            "content": "using UnityEngine;\r\nusing UnityEditor;\r\nusing UnityEditor.Animations;\r\nusing System.Collections.Generic;\r\nusing System.Text;\r\n\r\n/// <summary>\r\n/// UnityEditor.Animations 命名空间案例演示\r\n/// 展示动画编辑器的使用，包括动画控制器、状态机、混合树等\r\n/// </summary>\r\npublic class AnimationsExample : MonoBehaviour\r\n{\r\n    [Header(\"动画系统配置\")]\r\n    [SerializeField] private bool enableAnimations = true; // 是否启用动画系统\r\n    [SerializeField] private bool enableAnimationController = true; // 是否启用动画控制器\r\n    [SerializeField] private bool enableStateMachine = true; // 是否启用状态机\r\n    [SerializeField] private bool enableBlendTree = true; // 是否启用混合树\r\n    [SerializeField] private bool enableAnimationEvents = true; // 是否启用动画事件\r\n    [SerializeField] private bool enableAnimationCurves = true; // 是否启用动画曲线\r\n    [SerializeField] private bool enableAnimationLayers = true; // 是否启用动画层\r\n    [SerializeField] private bool enableAnimationMasks = true; // 是否启用动画遮罩\r\n    [SerializeField] private bool enableAnimationOptimization = true; // 是否启用动画优化\r\n    [SerializeField] private bool enableAnimationProfiling = true; // 是否启用动画分析\r\n    \r\n    [Header(\"动画控制器配置\")]\r\n    [SerializeField] private RuntimeAnimatorController animatorController; // 动画控制器\r\n    [SerializeField] private AnimatorController controller; // 编辑器动画控制器\r\n    [SerializeField] private string controllerPath = \"Assets/Animations/\"; // 控制器路径\r\n    [SerializeField] private bool enableControllerAutoSave = true; // 是否启用控制器自动保存\r\n    [SerializeField] private bool enableControllerValidation = true; // 是否启用控制器验证\r\n    [SerializeField] private bool enableControllerOptimization = true; // 是否启用控制器优化\r\n    [SerializeField] private bool enableControllerBackup = true; // 是否启用控制器备份\r\n    [SerializeField] private string backupPath = \"AnimationBackups/\"; // 备份路径\r\n    \r\n    [Header(\"动画状态\")]\r\n    [SerializeField] private AnimationStatus animationStatus = AnimationStatus.Idle; // 动画状态\r\n    [SerializeField] private bool isPlaying = false; // 是否正在播放\r\n    [SerializeField] private bool isPaused = false; // 是否暂停\r\n    [SerializeField] private bool isStopped = true; // 是否停止\r\n    [SerializeField] private float playbackTime = 0f; // 播放时间\r\n    [SerializeField] private float playbackSpeed = 1f; // 播放速度\r\n    [SerializeField] private float normalizedTime = 0f; // 标准化时间\r\n    [SerializeField] private int currentFrame = 0; // 当前帧\r\n    [SerializeField] private int totalFrames = 0; // 总帧数\r\n    [SerializeField] private float duration = 0f; // 持续时间\r\n    [SerializeField] private bool isLooping = false; // 是否循环\r\n    \r\n    [Header(\"动画状态机\")]\r\n    [SerializeField] private StateMachineInfo stateMachineInfo = new StateMachineInfo(); // 状态机信息\r\n    [SerializeField] private string currentState = \"\"; // 当前状态\r\n    [SerializeField] private string previousState = \"\"; // 前一状态\r\n    [SerializeField] private string[] availableStates = new string[0]; // 可用状态\r\n    [SerializeField] private string[] stateNames = new string[0]; // 状态名称\r\n    [SerializeField] private bool[] stateEnabled = new bool[0]; // 状态是否启用\r\n    [SerializeField] private float[] stateWeights = new float[0]; // 状态权重\r\n    [SerializeField] private float[] stateSpeeds = new float[0]; // 状态速度\r\n    [SerializeField] private bool[] stateLooping = new bool[0]; // 状态是否循环\r\n    [SerializeField] private int totalStates = 0; // 总状态数\r\n    [SerializeField] private int activeStates = 0; // 活跃状态数\r\n    \r\n    [Header(\"动画参数\")]\r\n    [SerializeField] private AnimationParameterInfo[] parameters = new AnimationParameterInfo[0]; // 动画参数\r\n    [SerializeField] private string[] parameterNames = new string[0]; // 参数名称\r\n    [SerializeField] private AnimatorControllerParameterType[] parameterTypes = new AnimatorControllerParameterType[0]; // 参数类型\r\n    [SerializeField] private object[] parameterValues = new object[0]; // 参数值\r\n    [SerializeField] private bool[] parameterEnabled = new bool[0]; // 参数是否启用\r\n    [SerializeField] private int totalParameters = 0; // 总参数数\r\n    [SerializeField] private int activeParameters = 0; // 活跃参数数\r\n    \r\n    [Header(\"动画层\")]\r\n    [SerializeField] private AnimationLayerInfo[] layers = new AnimationLayerInfo[0]; // 动画层\r\n    [SerializeField] private string[] layerNames = new string[0]; // 层名称\r\n    [SerializeField] private float[] layerWeights = new float[0]; // 层权重\r\n    [SerializeField] private bool[] layerEnabled = new bool[0]; // 层是否启用\r\n    [SerializeField] private AvatarMask[] layerMasks = new AvatarMask[0]; // 层遮罩\r\n    [SerializeField] private int totalLayers = 0; // 总层数\r\n    [SerializeField] private int activeLayers = 0; // 活跃层数\r\n    \r\n    [Header(\"混合树\")]\r\n    [SerializeField] private BlendTreeInfo[] blendTrees = new BlendTreeInfo[0]; // 混合树\r\n    [SerializeField] private string[] blendTreeNames = new string[0]; // 混合树名称\r\n    [SerializeField] private BlendTreeType[] blendTreeTypes = new BlendTreeType[0]; // 混合树类型\r\n    [SerializeField] private float[] blendTreeWeights = new float[0]; // 混合树权重\r\n    [SerializeField] private bool[] blendTreeEnabled = new bool[0]; // 混合树是否启用\r\n    [SerializeField] private int totalBlendTrees = 0; // 总混合树数\r\n    [SerializeField] private int activeBlendTrees = 0; // 活跃混合树数\r\n    \r\n    [Header(\"动画事件\")]\r\n    [SerializeField] private AnimationEventInfo[] events = new AnimationEventInfo[0]; // 动画事件\r\n    [SerializeField] private string[] eventNames = new string[0]; // 事件名称\r\n    [SerializeField] private float[] eventTimes = new float[0]; // 事件时间\r\n    [SerializeField] private string[] eventFunctions = new string[0]; // 事件函数\r\n    [SerializeField] private object[] eventParameters = new object[0]; // 事件参数\r\n    [SerializeField] private bool[] eventEnabled = new bool[0]; // 事件是否启用\r\n    [SerializeField] private int totalEvents = 0; // 总事件数\r\n    [SerializeField] private int activeEvents = 0; // 活跃事件数\r\n    \r\n    [Header(\"动画曲线\")]\r\n    [SerializeField] private AnimationCurveInfo[] curves = new AnimationCurveInfo[0]; // 动画曲线\r\n    [SerializeField] private string[] curveNames = new string[0]; // 曲线名称\r\n    [SerializeField] private AnimationCurve[] curveData = new AnimationCurve[0]; // 曲线数据\r\n    [SerializeField] private string[] curveProperties = new string[0]; // 曲线属性\r\n    [SerializeField] private bool[] curveEnabled = new bool[0]; // 曲线是否启用\r\n    [SerializeField] private int totalCurves = 0; // 总曲线数\r\n    [SerializeField] private int activeCurves = 0; // 活跃曲线数\r\n    \r\n    [Header(\"动画性能\")]\r\n    [SerializeField] private AnimationPerformanceInfo performanceInfo = new AnimationPerformanceInfo(); // 动画性能信息\r\n    [SerializeField] private float animationFPS = 60f; // 动画帧率\r\n    [SerializeField] private float animationMemory = 0f; // 动画内存使用\r\n    [SerializeField] private float animationCPU = 0f; // 动画CPU使用\r\n    [SerializeField] private int animationCalls = 0; // 动画调用次数\r\n    [SerializeField] private int animationUpdates = 0; // 动画更新次数\r\n    [SerializeField] private float averageUpdateTime = 0f; // 平均更新时间\r\n    [SerializeField] private float maxUpdateTime = 0f; // 最大更新时间\r\n    [SerializeField] private float minUpdateTime = float.MaxValue; // 最小更新时间\r\n    \r\n    [Header(\"动画统计\")]\r\n    [SerializeField] private AnimationStatistics statistics = new AnimationStatistics(); // 动画统计\r\n    [SerializeField] private Dictionary<string, int> stateTransitionCounts = new Dictionary<string, int>(); // 状态转换计数\r\n    [SerializeField] private Dictionary<string, float> statePlayTime = new Dictionary<string, float>(); // 状态播放时间\r\n    [SerializeField] private Dictionary<string, int> parameterChangeCounts = new Dictionary<string, int>(); // 参数变更计数\r\n    [SerializeField] private List<AnimationEvent> animationEvents = new List<AnimationEvent>(); // 动画事件列表\r\n    [SerializeField] private List<AnimationWarning> animationWarnings = new List<AnimationWarning>(); // 动画警告列表\r\n    [SerializeField] private List<AnimationError> animationErrors = new List<AnimationError>(); // 动画错误列表\r\n    \r\n    [Header(\"动画优化\")]\r\n    [SerializeField] private bool enableAnimationCulling = true; // 是否启用动画剔除\r\n    [SerializeField] private bool enableAnimationLOD = true; // 是否启用动画LOD\r\n    [SerializeField] private bool enableAnimationCompression = true; // 是否启用动画压缩\r\n    [SerializeField] private bool enableAnimationStreaming = true; // 是否启用动画流式传输\r\n    [SerializeField] private float cullingDistance = 100f; // 剔除距离\r\n    [SerializeField] private int maxAnimationInstances = 100; // 最大动画实例数\r\n    [SerializeField] private float compressionQuality = 0.8f; // 压缩质量\r\n    [SerializeField] private bool enableOptimization = true; // 是否启用优化\r\n    \r\n    private bool isInitialized = false;\r\n    private float lastUpdateTime = 0f;\r\n    private float updateInterval = 0.016f; // 60 FPS\r\n    private StringBuilder reportBuilder = new StringBuilder();\r\n    private Animator animator;\r\n    private List<AnimationClip> animationClips = new List<AnimationClip>();\r\n    private List<AnimatorState> animatorStates = new List<AnimatorState>();\r\n    private List<AnimatorTransition> animatorTransitions = new List<AnimatorTransition>();\r\n\r\n    private void Start()\r\n    {\r\n        InitializeAnimations();\r\n    }\r\n\r\n    private void InitializeAnimations()\r\n    {\r\n        if (!enableAnimations) return;\r\n        \r\n        InitializeAnimationState();\r\n        InitializeAnimationController();\r\n        InitializeStateMachine();\r\n        InitializeAnimationParameters();\r\n        InitializeAnimationLayers();\r\n        InitializeAnimationEvents();\r\n        InitializeAnimationCurves();\r\n        \r\n        isInitialized = true;\r\n        animationStatus = AnimationStatus.Idle;\r\n        Debug.Log(\"动画系统初始化完成\");\r\n    }\r\n\r\n    private void InitializeAnimationState()\r\n    {\r\n        animationStatus = AnimationStatus.Idle;\r\n        isPlaying = false;\r\n        isPaused = false;\r\n        isStopped = true;\r\n        playbackTime = 0f;\r\n        playbackSpeed = 1f;\r\n        normalizedTime = 0f;\r\n        currentFrame = 0;\r\n        totalFrames = 0;\r\n        duration = 0f;\r\n        isLooping = false;\r\n        \r\n        Debug.Log(\"动画状态已初始化\");\r\n    }\r\n\r\n    private void InitializeAnimationController()\r\n    {\r\n        // 获取或创建Animator组件\r\n        animator = GetComponent<Animator>();\r\n        if (animator == null)\r\n        {\r\n            animator = gameObject.AddComponent<Animator>();\r\n        }\r\n        \r\n        // 创建动画控制器\r\n        if (controller == null)\r\n        {\r\n            controller = AnimatorController.CreateAnimatorControllerAtPath($\"{controllerPath}ExampleController.controller\");\r\n            animator.runtimeAnimatorController = controller;\r\n        }\r\n        \r\n        Debug.Log(\"动画控制器已初始化\");\r\n    }\r\n\r\n    private void InitializeStateMachine()\r\n    {\r\n        stateMachineInfo = new StateMachineInfo();\r\n        currentState = \"\";\r\n        previousState = \"\";\r\n        availableStates = new string[0];\r\n        stateNames = new string[0];\r\n        stateEnabled = new bool[0];\r\n        stateWeights = new float[0];\r\n        stateSpeeds = new float[0];\r\n        stateLooping = new bool[0];\r\n        totalStates = 0;\r\n        activeStates = 0;\r\n        \r\n        Debug.Log(\"状态机已初始化\");\r\n    }\r\n\r\n    private void InitializeAnimationParameters()\r\n    {\r\n        parameters = new AnimationParameterInfo[0];\r\n        parameterNames = new string[0];\r\n        parameterTypes = new AnimatorControllerParameterType[0];\r\n        parameterValues = new object[0];\r\n        parameterEnabled = new bool[0];\r\n        totalParameters = 0;\r\n        activeParameters = 0;\r\n        \r\n        Debug.Log(\"动画参数已初始化\");\r\n    }\r\n\r\n    private void InitializeAnimationLayers()\r\n    {\r\n        layers = new AnimationLayerInfo[0];\r\n        layerNames = new string[0];\r\n        layerWeights = new float[0];\r\n        layerEnabled = new bool[0];\r\n        layerMasks = new AvatarMask[0];\r\n        totalLayers = 0;\r\n        activeLayers = 0;\r\n        \r\n        Debug.Log(\"动画层已初始化\");\r\n    }\r\n\r\n    private void InitializeAnimationEvents()\r\n    {\r\n        events = new AnimationEventInfo[0];\r\n        eventNames = new string[0];\r\n        eventTimes = new float[0];\r\n        eventFunctions = new string[0];\r\n        eventParameters = new object[0];\r\n        eventEnabled = new bool[0];\r\n        totalEvents = 0;\r\n        activeEvents = 0;\r\n        \r\n        Debug.Log(\"动画事件已初始化\");\r\n    }\r\n\r\n    private void InitializeAnimationCurves()\r\n    {\r\n        curves = new AnimationCurveInfo[0];\r\n        curveNames = new string[0];\r\n        curveData = new AnimationCurve[0];\r\n        curveProperties = new string[0];\r\n        curveEnabled = new bool[0];\r\n        totalCurves = 0;\r\n        activeCurves = 0;\r\n        \r\n        Debug.Log(\"动画曲线已初始化\");\r\n    }\r\n\r\n    private void Update()\r\n    {\r\n        if (!isInitialized) return;\r\n        \r\n        UpdateAnimationStatus();\r\n        UpdateAnimationState();\r\n        UpdateAnimationPerformance();\r\n        \r\n        if (Time.time - lastUpdateTime > updateInterval)\r\n        {\r\n            UpdateAnimationData();\r\n            lastUpdateTime = Time.time;\r\n        }\r\n        \r\n        if (enableAnimationProfiling)\r\n        {\r\n            UpdateAnimationProfiling();\r\n        }\r\n    }\r\n\r\n    private void UpdateAnimationStatus()\r\n    {\r\n        if (animator != null)\r\n        {\r\n            if (animator.isActiveAndEnabled)\r\n            {\r\n                if (animator.GetCurrentAnimatorStateInfo(0).normalizedTime >= 1f && !isLooping)\r\n                {\r\n                    animationStatus = AnimationStatus.Completed;\r\n                    isPlaying = false;\r\n                    isStopped = true;\r\n                }\r\n                else if (isPlaying)\r\n                {\r\n                    animationStatus = AnimationStatus.Playing;\r\n                }\r\n                else if (isPaused)\r\n                {\r\n                    animationStatus = AnimationStatus.Paused;\r\n                }\r\n                else\r\n                {\r\n                    animationStatus = AnimationStatus.Idle;\r\n                }\r\n            }\r\n            else\r\n            {\r\n                animationStatus = AnimationStatus.Disabled;\r\n            }\r\n        }\r\n    }\r\n\r\n    private void UpdateAnimationState()\r\n    {\r\n        if (animator != null && animator.isActiveAndEnabled)\r\n        {\r\n            var currentStateInfo = animator.GetCurrentAnimatorStateInfo(0);\r\n            currentState = currentStateInfo.IsName(\"\") ? \"Default\" : currentStateInfo.fullPathHash.ToString();\r\n            normalizedTime = currentStateInfo.normalizedTime;\r\n            \r\n            if (currentState != previousState)\r\n            {\r\n                // 状态转换\r\n                if (!string.IsNullOrEmpty(previousState))\r\n                {\r\n                    if (!stateTransitionCounts.ContainsKey(previousState))\r\n                    {\r\n                        stateTransitionCounts[previousState] = 0;\r\n                    }\r\n                    stateTransitionCounts[previousState]++;\r\n                }\r\n                \r\n                previousState = currentState;\r\n            }\r\n            \r\n            // 更新状态播放时间\r\n            if (!statePlayTime.ContainsKey(currentState))\r\n            {\r\n                statePlayTime[currentState] = 0f;\r\n            }\r\n            statePlayTime[currentState] += Time.deltaTime;\r\n        }\r\n    }\r\n\r\n    private void UpdateAnimationPerformance()\r\n    {\r\n        if (enableAnimationProfiling)\r\n        {\r\n            var startTime = Time.realtimeSinceStartup;\r\n            \r\n            // 模拟动画更新\r\n            animationUpdates++;\r\n            animationCalls++;\r\n            \r\n            var updateTime = Time.realtimeSinceStartup - startTime;\r\n            averageUpdateTime = (averageUpdateTime * (animationUpdates - 1) + updateTime) / animationUpdates;\r\n            \r\n            if (updateTime > maxUpdateTime)\r\n            {\r\n                maxUpdateTime = updateTime;\r\n            }\r\n            \r\n            if (updateTime < minUpdateTime)\r\n            {\r\n                minUpdateTime = updateTime;\r\n            }\r\n            \r\n            // 更新性能信息\r\n            performanceInfo.fps = animationFPS;\r\n            performanceInfo.memoryUsage = animationMemory;\r\n            performanceInfo.cpuUsage = animationCPU;\r\n            performanceInfo.updateCalls = animationCalls;\r\n            performanceInfo.updateCount = animationUpdates;\r\n            performanceInfo.averageUpdateTime = averageUpdateTime;\r\n            performanceInfo.maxUpdateTime = maxUpdateTime;\r\n            performanceInfo.minUpdateTime = minUpdateTime;\r\n        }\r\n    }\r\n\r\n    private void UpdateAnimationData()\r\n    {\r\n        // 更新动画数据\r\n        UpdateStateMachineData();\r\n        UpdateParameterData();\r\n        UpdateLayerData();\r\n        UpdateBlendTreeData();\r\n        UpdateEventData();\r\n        UpdateCurveData();\r\n    }\r\n\r\n    private void UpdateStateMachineData()\r\n    {\r\n        if (controller != null)\r\n        {\r\n            var stateMachine = controller.layers[0].stateMachine;\r\n            var states = stateMachine.states;\r\n            \r\n            stateNames = new string[states.Length];\r\n            stateEnabled = new bool[states.Length];\r\n            stateWeights = new float[states.Length];\r\n            stateSpeeds = new float[states.Length];\r\n            stateLooping = new bool[states.Length];\r\n            \r\n            for (int i = 0; i < states.Length; i++)\r\n            {\r\n                var state = states[i].state;\r\n                stateNames[i] = state.name;\r\n                stateEnabled[i] = state.enabled;\r\n                stateWeights[i] = 1f;\r\n                stateSpeeds[i] = state.speed;\r\n                stateLooping[i] = state.motion != null && state.motion.isLooping;\r\n            }\r\n            \r\n            totalStates = states.Length;\r\n            activeStates = states.Length;\r\n            \r\n            // 更新状态机信息\r\n            stateMachineInfo.totalStates = totalStates;\r\n            stateMachineInfo.activeStates = activeStates;\r\n            stateMachineInfo.currentState = currentState;\r\n            stateMachineInfo.previousState = previousState;\r\n        }\r\n    }\r\n\r\n    private void UpdateParameterData()\r\n    {\r\n        if (controller != null)\r\n        {\r\n            var controllerParameters = controller.parameters;\r\n            \r\n            parameterNames = new string[controllerParameters.Length];\r\n            parameterTypes = new AnimatorControllerParameterType[controllerParameters.Length];\r\n            parameterValues = new object[controllerParameters.Length];\r\n            parameterEnabled = new bool[controllerParameters.Length];\r\n            \r\n            for (int i = 0; i < controllerParameters.Length; i++)\r\n            {\r\n                var param = controllerParameters[i];\r\n                parameterNames[i] = param.name;\r\n                parameterTypes[i] = param.type;\r\n                parameterEnabled[i] = true;\r\n                \r\n                // 获取参数值\r\n                switch (param.type)\r\n                {\r\n                    case AnimatorControllerParameterType.Float:\r\n                        parameterValues[i] = animator.GetFloat(param.name);\r\n                        break;\r\n                    case AnimatorControllerParameterType.Int:\r\n                        parameterValues[i] = animator.GetInteger(param.name);\r\n                        break;\r\n                    case AnimatorControllerParameterType.Bool:\r\n                        parameterValues[i] = animator.GetBool(param.name);\r\n                        break;\r\n                    case AnimatorControllerParameterType.Trigger:\r\n                        parameterValues[i] = false;\r\n                        break;\r\n                }\r\n            }\r\n            \r\n            totalParameters = controllerParameters.Length;\r\n            activeParameters = controllerParameters.Length;\r\n        }\r\n    }\r\n\r\n    private void UpdateLayerData()\r\n    {\r\n        if (controller != null)\r\n        {\r\n            var controllerLayers = controller.layers;\r\n            \r\n            layerNames = new string[controllerLayers.Length];\r\n            layerWeights = new float[controllerLayers.Length];\r\n            layerEnabled = new bool[controllerLayers.Length];\r\n            layerMasks = new AvatarMask[controllerLayers.Length];\r\n            \r\n            for (int i = 0; i < controllerLayers.Length; i++)\r\n            {\r\n                var layer = controllerLayers[i];\r\n                layerNames[i] = layer.name;\r\n                layerWeights[i] = layer.defaultWeight;\r\n                layerEnabled[i] = layer.enabled;\r\n                layerMasks[i] = layer.avatarMask;\r\n            }\r\n            \r\n            totalLayers = controllerLayers.Length;\r\n            activeLayers = controllerLayers.Length;\r\n        }\r\n    }\r\n\r\n    private void UpdateBlendTreeData()\r\n    {\r\n        // 模拟混合树数据更新\r\n        blendTrees = new BlendTreeInfo[0];\r\n        blendTreeNames = new string[0];\r\n        blendTreeTypes = new BlendTreeType[0];\r\n        blendTreeWeights = new float[0];\r\n        blendTreeEnabled = new bool[0];\r\n        totalBlendTrees = 0;\r\n        activeBlendTrees = 0;\r\n    }\r\n\r\n    private void UpdateEventData()\r\n    {\r\n        // 模拟事件数据更新\r\n        events = new AnimationEventInfo[0];\r\n        eventNames = new string[0];\r\n        eventTimes = new float[0];\r\n        eventFunctions = new string[0];\r\n        eventParameters = new object[0];\r\n        eventEnabled = new bool[0];\r\n        totalEvents = 0;\r\n        activeEvents = 0;\r\n    }\r\n\r\n    private void UpdateCurveData()\r\n    {\r\n        // 模拟曲线数据更新\r\n        curves = new AnimationCurveInfo[0];\r\n        curveNames = new string[0];\r\n        curveData = new AnimationCurve[0];\r\n        curveProperties = new string[0];\r\n        curveEnabled = new bool[0];\r\n        totalCurves = 0;\r\n        activeCurves = 0;\r\n    }\r\n\r\n    private void UpdateAnimationProfiling()\r\n    {\r\n        // 更新动画分析数据\r\n        animationFPS = 1f / averageUpdateTime;\r\n        animationMemory = UnityEngine.Profiling.Profiler.GetTotalAllocatedMemoryLong() / (1024f * 1024f);\r\n        animationCPU = UnityEngine.Profiling.Profiler.GetTotalReservedMemoryLong() / (1024f * 1024f);\r\n    }\r\n\r\n    public void PlayAnimation()\r\n    {\r\n        if (animator == null)\r\n        {\r\n            Debug.LogWarning(\"Animator组件不存在\");\r\n            return;\r\n        }\r\n        \r\n        isPlaying = true;\r\n        isPaused = false;\r\n        isStopped = false;\r\n        animationStatus = AnimationStatus.Playing;\r\n        \r\n        Debug.Log(\"动画开始播放\");\r\n    }\r\n\r\n    public void PauseAnimation()\r\n    {\r\n        if (!isPlaying)\r\n        {\r\n            Debug.LogWarning(\"动画未在播放\");\r\n            return;\r\n        }\r\n        \r\n        isPlaying = false;\r\n        isPaused = true;\r\n        isStopped = false;\r\n        animationStatus = AnimationStatus.Paused;\r\n        \r\n        Debug.Log(\"动画已暂停\");\r\n    }\r\n\r\n    public void StopAnimation()\r\n    {\r\n        isPlaying = false;\r\n        isPaused = false;\r\n        isStopped = true;\r\n        animationStatus = AnimationStatus.Idle;\r\n        playbackTime = 0f;\r\n        normalizedTime = 0f;\r\n        currentFrame = 0;\r\n        \r\n        Debug.Log(\"动画已停止\");\r\n    }\r\n\r\n    public void SetPlaybackSpeed(float speed)\r\n    {\r\n        if (animator != null)\r\n        {\r\n            animator.speed = speed;\r\n            playbackSpeed = speed;\r\n            Debug.Log($\"播放速度设置为: {speed}\");\r\n        }\r\n    }\r\n\r\n    public void SetParameter(string parameterName, object value)\r\n    {\r\n        if (animator == null)\r\n        {\r\n            Debug.LogWarning(\"Animator组件不存在\");\r\n            return;\r\n        }\r\n        \r\n        try\r\n        {\r\n            if (value is float floatValue)\r\n            {\r\n                animator.SetFloat(parameterName, floatValue);\r\n            }\r\n            else if (value is int intValue)\r\n            {\r\n                animator.SetInteger(parameterName, intValue);\r\n            }\r\n            else if (value is bool boolValue)\r\n            {\r\n                animator.SetBool(parameterName, boolValue);\r\n            }\r\n            else if (value is string stringValue && stringValue == \"trigger\")\r\n            {\r\n                animator.SetTrigger(parameterName);\r\n            }\r\n            \r\n            // 更新参数变更计数\r\n            if (!parameterChangeCounts.ContainsKey(parameterName))\r\n            {\r\n                parameterChangeCounts[parameterName] = 0;\r\n            }\r\n            parameterChangeCounts[parameterName]++;\r\n            \r\n            Debug.Log($\"参数 {parameterName} 设置为: {value}\");\r\n        }\r\n        catch (System.Exception e)\r\n        {\r\n            Debug.LogError($\"设置参数失败: {e.Message}\");\r\n        }\r\n    }\r\n\r\n    public void AddState(string stateName, AnimationClip clip)\r\n    {\r\n        if (controller == null)\r\n        {\r\n            Debug.LogWarning(\"动画控制器不存在\");\r\n            return;\r\n        }\r\n        \r\n        try\r\n        {\r\n            var stateMachine = controller.layers[0].stateMachine;\r\n            var state = stateMachine.AddState(stateName);\r\n            state.motion = clip;\r\n            \r\n            Debug.Log($\"状态 {stateName} 已添加\");\r\n        }\r\n        catch (System.Exception e)\r\n        {\r\n            Debug.LogError($\"添加状态失败: {e.Message}\");\r\n        }\r\n    }\r\n\r\n    public void AddParameter(string parameterName, AnimatorControllerParameterType type)\r\n    {\r\n        if (controller == null)\r\n        {\r\n            Debug.LogWarning(\"动画控制器不存在\");\r\n            return;\r\n        }\r\n        \r\n        try\r\n        {\r\n            var parameter = new AnimatorControllerParameter();\r\n            parameter.name = parameterName;\r\n            parameter.type = type;\r\n            \r\n            var parameters = new List<AnimatorControllerParameter>(controller.parameters);\r\n            parameters.Add(parameter);\r\n            controller.parameters = parameters.ToArray();\r\n            \r\n            Debug.Log($\"参数 {parameterName} 已添加\");\r\n        }\r\n        catch (System.Exception e)\r\n        {\r\n            Debug.LogError($\"添加参数失败: {e.Message}\");\r\n        }\r\n    }\r\n\r\n    public void AddLayer(string layerName, float weight = 1f)\r\n    {\r\n        if (controller == null)\r\n        {\r\n            Debug.LogWarning(\"动画控制器不存在\");\r\n            return;\r\n        }\r\n        \r\n        try\r\n        {\r\n            var layer = new AnimatorControllerLayer();\r\n            layer.name = layerName;\r\n            layer.defaultWeight = weight;\r\n            layer.enabled = true;\r\n            \r\n            var layers = new List<AnimatorControllerLayer>(controller.layers);\r\n            layers.Add(layer);\r\n            controller.layers = layers.ToArray();\r\n            \r\n            Debug.Log($\"层 {layerName} 已添加\");\r\n        }\r\n        catch (System.Exception e)\r\n        {\r\n            Debug.LogError($\"添加层失败: {e.Message}\");\r\n        }\r\n    }\r\n\r\n    public void CreateAnimationEvent(string eventName, float time, string functionName)\r\n    {\r\n        if (animationClips.Count == 0)\r\n        {\r\n            Debug.LogWarning(\"没有可用的动画片段\");\r\n            return;\r\n        }\r\n        \r\n        try\r\n        {\r\n            var clip = animationClips[0];\r\n            var animationEvent = new AnimationEvent();\r\n            animationEvent.functionName = functionName;\r\n            animationEvent.time = time;\r\n            \r\n            var events = new List<AnimationEvent>(clip.events);\r\n            events.Add(animationEvent);\r\n            clip.events = events.ToArray();\r\n            \r\n            Debug.Log($\"动画事件 {eventName} 已创建\");\r\n        }\r\n        catch (System.Exception e)\r\n        {\r\n            Debug.LogError($\"创建动画事件失败: {e.Message}\");\r\n        }\r\n    }\r\n\r\n    public void GenerateAnimationReport()\r\n    {\r\n        reportBuilder.Clear();\r\n        reportBuilder.AppendLine(\"=== 动画系统报告 ===\");\r\n        reportBuilder.AppendLine($\"生成时间: {System.DateTime.Now}\");\r\n        reportBuilder.AppendLine($\"动画状态: {animationStatus}\");\r\n        reportBuilder.AppendLine($\"是否正在播放: {isPlaying}\");\r\n        reportBuilder.AppendLine($\"是否暂停: {isPaused}\");\r\n        reportBuilder.AppendLine($\"是否停止: {isStopped}\");\r\n        reportBuilder.AppendLine($\"播放时间: {playbackTime:F2}秒\");\r\n        reportBuilder.AppendLine($\"播放速度: {playbackSpeed}\");\r\n        reportBuilder.AppendLine($\"标准化时间: {normalizedTime:F2}\");\r\n        reportBuilder.AppendLine($\"当前帧: {currentFrame}\");\r\n        reportBuilder.AppendLine($\"总帧数: {totalFrames}\");\r\n        reportBuilder.AppendLine($\"持续时间: {duration:F2}秒\");\r\n        reportBuilder.AppendLine($\"是否循环: {isLooping}\");\r\n        reportBuilder.AppendLine();\r\n        \r\n        reportBuilder.AppendLine(\"=== 状态机信息 ===\");\r\n        reportBuilder.AppendLine($\"总状态数: {totalStates}\");\r\n        reportBuilder.AppendLine($\"活跃状态数: {activeStates}\");\r\n        reportBuilder.AppendLine($\"当前状态: {currentState}\");\r\n        reportBuilder.AppendLine($\"前一状态: {previousState}\");\r\n        reportBuilder.AppendLine();\r\n        \r\n        reportBuilder.AppendLine(\"=== 动画参数 ===\");\r\n        reportBuilder.AppendLine($\"总参数数: {totalParameters}\");\r\n        reportBuilder.AppendLine($\"活跃参数数: {activeParameters}\");\r\n        for (int i = 0; i < parameterNames.Length; i++)\r\n        {\r\n            reportBuilder.AppendLine($\"- {parameterNames[i]} ({parameterTypes[i]}): {parameterValues[i]}\");\r\n        }\r\n        reportBuilder.AppendLine();\r\n        \r\n        reportBuilder.AppendLine(\"=== 动画层 ===\");\r\n        reportBuilder.AppendLine($\"总层数: {totalLayers}\");\r\n        reportBuilder.AppendLine($\"活跃层数: {activeLayers}\");\r\n        for (int i = 0; i < layerNames.Length; i++)\r\n        {\r\n            reportBuilder.AppendLine($\"- {layerNames[i]}: 权重={layerWeights[i]}, 启用={layerEnabled[i]}\");\r\n        }\r\n        reportBuilder.AppendLine();\r\n        \r\n        reportBuilder.AppendLine(\"=== 动画性能 ===\");\r\n        reportBuilder.AppendLine($\"动画帧率: {animationFPS:F1} FPS\");\r\n        reportBuilder.AppendLine($\"动画内存使用: {animationMemory:F2} MB\");\r\n        reportBuilder.AppendLine($\"动画CPU使用: {animationCPU:F2} MB\");\r\n        reportBuilder.AppendLine($\"动画调用次数: {animationCalls}\");\r\n        reportBuilder.AppendLine($\"动画更新次数: {animationUpdates}\");\r\n        reportBuilder.AppendLine($\"平均更新时间: {averageUpdateTime * 1000:F2} ms\");\r\n        reportBuilder.AppendLine($\"最大更新时间: {maxUpdateTime * 1000:F2} ms\");\r\n        reportBuilder.AppendLine($\"最小更新时间: {minUpdateTime * 1000:F2} ms\");\r\n        reportBuilder.AppendLine();\r\n        \r\n        reportBuilder.AppendLine(\"=== 状态转换统计 ===\");\r\n        foreach (var kvp in stateTransitionCounts)\r\n        {\r\n            reportBuilder.AppendLine($\"- {kvp.Key}: {kvp.Value} 次\");\r\n        }\r\n        reportBuilder.AppendLine();\r\n        \r\n        reportBuilder.AppendLine(\"=== 状态播放时间 ===\");\r\n        foreach (var kvp in statePlayTime)\r\n        {\r\n            reportBuilder.AppendLine($\"- {kvp.Key}: {kvp.Value:F2} 秒\");\r\n        }\r\n        reportBuilder.AppendLine();\r\n        \r\n        reportBuilder.AppendLine(\"=== 参数变更统计 ===\");\r\n        foreach (var kvp in parameterChangeCounts)\r\n        {\r\n            reportBuilder.AppendLine($\"- {kvp.Key}: {kvp.Value} 次\");\r\n        }\r\n        \r\n        string report = reportBuilder.ToString();\r\n        Debug.Log(report);\r\n        \r\n        if (enableControllerBackup)\r\n        {\r\n            ExportReport(report);\r\n        }\r\n    }\r\n\r\n    private void ExportReport(string report)\r\n    {\r\n        try\r\n        {\r\n            string fileName = $\"AnimationReport_{System.DateTime.Now:yyyyMMdd_HHmmss}.txt\";\r\n            string filePath = System.IO.Path.Combine(backupPath, fileName);\r\n            \r\n            System.IO.Directory.CreateDirectory(backupPath);\r\n            System.IO.File.WriteAllText(filePath, report);\r\n            \r\n            Debug.Log($\"动画报告已导出: {filePath}\");\r\n        }\r\n        catch (System.Exception e)\r\n        {\r\n            Debug.LogError($\"导出动画报告失败: {e.Message}\");\r\n        }\r\n    }\r\n\r\n    public void OpenAnimationWindow()\r\n    {\r\n        if (enableAnimations)\r\n        {\r\n            EditorWindow.GetWindow<UnityEditor.AnimationWindow>();\r\n            Debug.Log(\"动画窗口已打开\");\r\n        }\r\n    }\r\n\r\n    public void OpenAnimatorWindow()\r\n    {\r\n        if (enableAnimationController)\r\n        {\r\n            EditorWindow.GetWindow<UnityEditor.AnimatorWindow>();\r\n            Debug.Log(\"动画器窗口已打开\");\r\n        }\r\n    }\r\n\r\n    public void ResetAnimationData()\r\n    {\r\n        InitializeAnimationState();\r\n        InitializeStateMachine();\r\n        InitializeAnimationParameters();\r\n        InitializeAnimationLayers();\r\n        InitializeAnimationEvents();\r\n        InitializeAnimationCurves();\r\n        \r\n        stateTransitionCounts.Clear();\r\n        statePlayTime.Clear();\r\n        parameterChangeCounts.Clear();\r\n        animationEvents.Clear();\r\n        animationWarnings.Clear();\r\n        animationErrors.Clear();\r\n        \r\n        Debug.Log(\"动画数据已重置\");\r\n    }\r\n\r\n    private void OnGUI()\r\n    {\r\n        GUILayout.BeginArea(new Rect(10, 10, 400, 800));\r\n        GUILayout.Label(\"Animations 动画系统演示\", UnityEditor.EditorStyles.boldLabel);\r\n        \r\n        GUILayout.Space(10);\r\n        GUILayout.Label(\"动画系统配置:\");\r\n        enableAnimations = GUILayout.Toggle(enableAnimations, \"启用动画系统\");\r\n        enableAnimationController = GUILayout.Toggle(enableAnimationController, \"启用动画控制器\");\r\n        enableStateMachine = GUILayout.Toggle(enableStateMachine, \"启用状态机\");\r\n        enableBlendTree = GUILayout.Toggle(enableBlendTree, \"启用混合树\");\r\n        enableAnimationProfiling = GUILayout.Toggle(enableAnimationProfiling, \"启用动画分析\");\r\n        \r\n        GUILayout.Space(10);\r\n        GUILayout.Label(\"动画状态:\");\r\n        GUILayout.Label($\"动画状态: {animationStatus}\");\r\n        GUILayout.Label($\"是否正在播放: {isPlaying}\");\r\n        GUILayout.Label($\"是否暂停: {isPaused}\");\r\n        GUILayout.Label($\"是否停止: {isStopped}\");\r\n        GUILayout.Label($\"播放时间: {playbackTime:F2}秒\");\r\n        GUILayout.Label($\"播放速度: {playbackSpeed}\");\r\n        GUILayout.Label($\"标准化时间: {normalizedTime:F2}\");\r\n        GUILayout.Label($\"当前帧: {currentFrame}\");\r\n        GUILayout.Label($\"总帧数: {totalFrames}\");\r\n        GUILayout.Label($\"持续时间: {duration:F2}秒\");\r\n        \r\n        GUILayout.Space(10);\r\n        GUILayout.Label(\"状态机信息:\");\r\n        GUILayout.Label($\"总状态数: {totalStates}\");\r\n        GUILayout.Label($\"活跃状态数: {activeStates}\");\r\n        GUILayout.Label($\"当前状态: {currentState}\");\r\n        GUILayout.Label($\"前一状态: {previousState}\");\r\n        \r\n        GUILayout.Space(10);\r\n        GUILayout.Label(\"动画参数:\");\r\n        GUILayout.Label($\"总参数数: {totalParameters}\");\r\n        GUILayout.Label($\"活跃参数数: {activeParameters}\");\r\n        \r\n        GUILayout.Space(10);\r\n        GUILayout.Label(\"动画层:\");\r\n        GUILayout.Label($\"总层数: {totalLayers}\");\r\n        GUILayout.Label($\"活跃层数: {activeLayers}\");\r\n        \r\n        GUILayout.Space(10);\r\n        GUILayout.Label(\"动画性能:\");\r\n        GUILayout.Label($\"动画帧率: {animationFPS:F1} FPS\");\r\n        GUILayout.Label($\"动画内存使用: {animationMemory:F2} MB\");\r\n        GUILayout.Label($\"动画CPU使用: {animationCPU:F2} MB\");\r\n        GUILayout.Label($\"动画调用次数: {animationCalls}\");\r\n        GUILayout.Label($\"动画更新次数: {animationUpdates}\");\r\n        GUILayout.Label($\"平均更新时间: {averageUpdateTime * 1000:F2} ms\");\r\n        \r\n        GUILayout.Space(10);\r\n        \r\n        if (GUILayout.Button(\"播放动画\"))\r\n        {\r\n            PlayAnimation();\r\n        }\r\n        \r\n        if (GUILayout.Button(\"暂停动画\"))\r\n        {\r\n            PauseAnimation();\r\n        }\r\n        \r\n        if (GUILayout.Button(\"停止动画\"))\r\n        {\r\n            StopAnimation();\r\n        }\r\n        \r\n        if (GUILayout.Button(\"设置播放速度\"))\r\n        {\r\n            SetPlaybackSpeed(2f);\r\n        }\r\n        \r\n        if (GUILayout.Button(\"设置参数\"))\r\n        {\r\n            SetParameter(\"Speed\", 1.5f);\r\n        }\r\n        \r\n        if (GUILayout.Button(\"添加状态\"))\r\n        {\r\n            AddState(\"NewState\", null);\r\n        }\r\n        \r\n        if (GUILayout.Button(\"添加参数\"))\r\n        {\r\n            AddParameter(\"NewParameter\", AnimatorControllerParameterType.Float);\r\n        }\r\n        \r\n        if (GUILayout.Button(\"添加层\"))\r\n        {\r\n            AddLayer(\"NewLayer\", 0.5f);\r\n        }\r\n        \r\n        if (GUILayout.Button(\"创建动画事件\"))\r\n        {\r\n            CreateAnimationEvent(\"TestEvent\", 0.5f, \"OnAnimationEvent\");\r\n        }\r\n        \r\n        if (GUILayout.Button(\"生成动画报告\"))\r\n        {\r\n            GenerateAnimationReport();\r\n        }\r\n        \r\n        if (GUILayout.Button(\"打开动画窗口\"))\r\n        {\r\n            OpenAnimationWindow();\r\n        }\r\n        \r\n        if (GUILayout.Button(\"打开动画器窗口\"))\r\n        {\r\n            OpenAnimatorWindow();\r\n        }\r\n        \r\n        if (GUILayout.Button(\"重置动画数据\"))\r\n        {\r\n            ResetAnimationData();\r\n        }\r\n        \r\n        GUILayout.Space(10);\r\n        GUILayout.Label(\"状态转换统计:\");\r\n        foreach (var kvp in stateTransitionCounts)\r\n        {\r\n            GUILayout.Label($\"{kvp.Key}: {kvp.Value} 次\");\r\n        }\r\n        \r\n        GUILayout.EndArea();\r\n    }\r\n}\r\n\r\npublic enum AnimationStatus\r\n{\r\n    Idle,\r\n    Playing,\r\n    Paused,\r\n    Stopped,\r\n    Completed,\r\n    Disabled\r\n}\r\n\r\npublic enum BlendTreeType\r\n{\r\n    BlendType,\r\n    BlendType1D,\r\n    BlendType2D,\r\n    BlendTypeDirect\r\n}\r\n\r\npublic enum AnimationEventType\r\n{\r\n    Function,\r\n    Audio,\r\n    Animation,\r\n    Custom\r\n}\r\n\r\npublic enum AnimationEventSeverity\r\n{\r\n    Info,\r\n    Warning,\r\n    Error\r\n}\r\n\r\n[System.Serializable]\r\npublic class StateMachineInfo\r\n{\r\n    public int totalStates;\r\n    public int activeStates;\r\n    public string currentState;\r\n    public string previousState;\r\n    public System.DateTime lastUpdateTime;\r\n}\r\n\r\n[System.Serializable]\r\npublic class AnimationParameterInfo\r\n{\r\n    public string name;\r\n    public AnimatorControllerParameterType type;\r\n    public object value;\r\n    public bool enabled;\r\n    public System.DateTime lastModified;\r\n}\r\n\r\n[System.Serializable]\r\npublic class AnimationLayerInfo\r\n{\r\n    public string name;\r\n    public float weight;\r\n    public bool enabled;\r\n    public AvatarMask mask;\r\n    public System.DateTime lastModified;\r\n}\r\n\r\n[System.Serializable]\r\npublic class BlendTreeInfo\r\n{\r\n    public string name;\r\n    public BlendTreeType type;\r\n    public float weight;\r\n    public bool enabled;\r\n    public System.DateTime lastModified;\r\n}\r\n\r\n[System.Serializable]\r\npublic class AnimationEventInfo\r\n{\r\n    public string name;\r\n    public float time;\r\n    public string function;\r\n    public object parameter;\r\n    public bool enabled;\r\n    public System.DateTime lastModified;\r\n}\r\n\r\n[System.Serializable]\r\npublic class AnimationCurveInfo\r\n{\r\n    public string name;\r\n    public AnimationCurve curve;\r\n    public string property;\r\n    public bool enabled;\r\n    public System.DateTime lastModified;\r\n}\r\n\r\n[System.Serializable]\r\npublic class AnimationPerformanceInfo\r\n{\r\n    public float fps;\r\n    public float memoryUsage;\r\n    public float cpuUsage;\r\n    public int updateCalls;\r\n    public int updateCount;\r\n    public float averageUpdateTime;\r\n    public float maxUpdateTime;\r\n    public float minUpdateTime;\r\n}\r\n\r\n[System.Serializable]\r\npublic class AnimationStatistics\r\n{\r\n    public int totalStates;\r\n    public int totalParameters;\r\n    public int totalLayers;\r\n    public int totalEvents;\r\n    public int totalCurves;\r\n    public float totalPlayTime;\r\n    public int totalTransitions;\r\n    public System.DateTime firstPlayTime;\r\n    public System.DateTime lastPlayTime;\r\n}\r\n\r\n[System.Serializable]\r\npublic class AnimationEvent\r\n{\r\n    public string name;\r\n    public float time;\r\n    public string function;\r\n    public object parameter;\r\n    public System.DateTime timestamp;\r\n}\r\n\r\n[System.Serializable]\r\npublic class AnimationWarning\r\n{\r\n    public string message;\r\n    public System.DateTime timestamp;\r\n    public AnimationEventSeverity severity;\r\n}\r\n\r\n[System.Serializable]\r\npublic class AnimationError\r\n{\r\n    public string message;\r\n    public System.DateTime timestamp;\r\n    public AnimationEventSeverity severity;\r\n} "
        }
    ]
}