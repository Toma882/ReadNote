{
    "sourceFile": "Assets/UnityEditor/Chapter 8 UnityAPI/UnityEditor/Compilation/CompilationExample.cs",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1750938789376,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1750938789376,
            "name": "Commit-0",
            "content": "using UnityEngine;\r\nusing UnityEditor;\r\nusing UnityEditor.Compilation;\r\nusing System.Collections.Generic;\r\n\r\n/// <summary>\r\n/// UnityEditor.Compilation 命名空间案例演示\r\n/// 展示编译系统的使用，包括编译状态、编译错误和编译回调\r\n/// </summary>\r\npublic class CompilationExample : MonoBehaviour\r\n{\r\n    [Header(\"编译系统配置\")]\r\n    [SerializeField] private bool enableCompilationSystem = true;\r\n    [SerializeField] private bool enableCompilationLogging = true;\r\n    [SerializeField] private bool enableCompilationValidation = true;\r\n    [SerializeField] private bool enableCompilationPerformance = true;\r\n    [SerializeField] private bool enableCompilationHistory = true;\r\n    \r\n    [Header(\"编译状态\")]\r\n    [SerializeField] private CompilationStatus compilationStatus = CompilationStatus.Idle;\r\n    [SerializeField] private bool isCompiling = false;\r\n    [SerializeField] private float compilationProgress = 0f;\r\n    [SerializeField] private string compilationMessage = \"\";\r\n    [SerializeField] private int totalAssemblies = 0;\r\n    [SerializeField] private int compiledAssemblies = 0;\r\n    [SerializeField] private int failedAssemblies = 0;\r\n    \r\n    [Header(\"编译错误\")]\r\n    [SerializeField] private CompilerMessage[] compilerMessages = new CompilerMessage[0];\r\n    [SerializeField] private int totalErrors = 0;\r\n    [SerializeField] private int totalWarnings = 0;\r\n    [SerializeField] private string[] errorMessages = new string[0];\r\n    [SerializeField] private string[] warningMessages = new string[0];\r\n    \r\n    [Header(\"编译历史\")]\r\n    [SerializeField] private CompilationHistoryEntry[] compilationHistory = new CompilationHistoryEntry[10];\r\n    [SerializeField] private int compilationHistoryIndex = 0;\r\n    [SerializeField] private bool enableCompilationHistory = true;\r\n    \r\n    [Header(\"性能监控\")]\r\n    [SerializeField] private bool enablePerformanceMonitoring = true;\r\n    [SerializeField] private float[] compilationTimeHistory = new float[100];\r\n    [SerializeField] private int compilationTimeIndex = 0;\r\n    [SerializeField] private float averageCompilationTime = 0f;\r\n    [SerializeField] private float maxCompilationTime = 0f;\r\n    [SerializeField] private float totalCompilationTime = 0f;\r\n    [SerializeField] private int totalCompilationCount = 0;\r\n    \r\n    [Header(\"编译统计\")]\r\n    [SerializeField] private Dictionary<string, int> assemblyCompilationCount = new Dictionary<string, int>();\r\n    [SerializeField] private Dictionary<string, float> assemblyCompilationTime = new Dictionary<string, float>();\r\n    [SerializeField] private int totalScripts = 0;\r\n    [SerializeField] private int totalScriptLines = 0;\r\n    [SerializeField] private long totalScriptSize = 0;\r\n    \r\n    [Header(\"编译配置\")]\r\n    [SerializeField] private bool enableAutoCompilation = true;\r\n    [SerializeField] private bool enableBackgroundCompilation = true;\r\n    [SerializeField] private bool enableScriptCompilation = true;\r\n    [SerializeField] private bool enableAssemblyCompilation = true;\r\n    [SerializeField] private int maxCompilationTimeSeconds = 300;\r\n    \r\n    private bool isInitialized = false;\r\n    private float compilationStartTime = 0f;\r\n    private System.Action<CompilationResult> compilationCallback;\r\n\r\n    private void Start()\r\n    {\r\n        InitializeCompilationSystem();\r\n    }\r\n\r\n    private void InitializeCompilationSystem()\r\n    {\r\n        if (!enableCompilationSystem) return;\r\n        \r\n        InitializeCompilationState();\r\n        InitializePerformanceMonitoring();\r\n        InitializeCompilationStatistics();\r\n        RegisterCompilationCallbacks();\r\n        \r\n        isInitialized = true;\r\n        compilationStatus = CompilationStatus.Idle;\r\n        Debug.Log(\"编译系统初始化完成\");\r\n    }\r\n\r\n    private void InitializeCompilationState()\r\n    {\r\n        compilationStatus = CompilationStatus.Idle;\r\n        isCompiling = false;\r\n        compilationProgress = 0f;\r\n        compilationMessage = \"就绪\";\r\n        totalAssemblies = 0;\r\n        compiledAssemblies = 0;\r\n        failedAssemblies = 0;\r\n        \r\n        Debug.Log(\"编译状态已初始化\");\r\n    }\r\n\r\n    private void InitializePerformanceMonitoring()\r\n    {\r\n        if (enablePerformanceMonitoring)\r\n        {\r\n            compilationTimeHistory = new float[100];\r\n            compilationTimeIndex = 0;\r\n            averageCompilationTime = 0f;\r\n            maxCompilationTime = 0f;\r\n            totalCompilationTime = 0f;\r\n            totalCompilationCount = 0;\r\n            \r\n            Debug.Log(\"性能监控初始化完成\");\r\n        }\r\n    }\r\n\r\n    private void InitializeCompilationStatistics()\r\n    {\r\n        assemblyCompilationCount.Clear();\r\n        assemblyCompilationTime.Clear();\r\n        totalScripts = 0;\r\n        totalScriptLines = 0;\r\n        totalScriptSize = 0;\r\n        \r\n        Debug.Log(\"编译统计初始化完成\");\r\n    }\r\n\r\n    private void RegisterCompilationCallbacks()\r\n    {\r\n        CompilationPipeline.compilationStarted += OnCompilationStarted;\r\n        CompilationPipeline.compilationFinished += OnCompilationFinished;\r\n        \r\n        compilationCallback = OnCompilationResult;\r\n        \r\n        Debug.Log(\"编译回调已注册\");\r\n    }\r\n\r\n    private void Update()\r\n    {\r\n        if (!isInitialized) return;\r\n        \r\n        UpdateCompilationStatus();\r\n        UpdateCompilationProgress();\r\n        \r\n        if (enablePerformanceMonitoring)\r\n        {\r\n            UpdatePerformanceMonitoring();\r\n        }\r\n    }\r\n\r\n    private void UpdateCompilationStatus()\r\n    {\r\n        if (isCompiling)\r\n        {\r\n            compilationStatus = CompilationStatus.Compiling;\r\n        }\r\n        else\r\n        {\r\n            compilationStatus = CompilationStatus.Idle;\r\n        }\r\n    }\r\n\r\n    private void UpdateCompilationProgress()\r\n    {\r\n        if (isCompiling)\r\n        {\r\n            // 模拟编译进度\r\n            compilationProgress = Mathf.Clamp01(compilationProgress + Time.deltaTime * 0.1f);\r\n        }\r\n        else\r\n        {\r\n            compilationProgress = 0f;\r\n        }\r\n    }\r\n\r\n    private void UpdatePerformanceMonitoring()\r\n    {\r\n        if (totalCompilationCount > 0)\r\n        {\r\n            averageCompilationTime = totalCompilationTime / totalCompilationCount;\r\n        }\r\n    }\r\n\r\n    private void OnCompilationStarted(object obj)\r\n    {\r\n        compilationStartTime = Time.realtimeSinceStartup;\r\n        isCompiling = true;\r\n        compilationProgress = 0f;\r\n        compilationMessage = \"编译开始...\";\r\n        \r\n        // 获取编译信息\r\n        UpdateCompilationInfo();\r\n        \r\n        if (enableCompilationLogging)\r\n        {\r\n            Debug.Log(\"编译开始\");\r\n        }\r\n    }\r\n\r\n    private void OnCompilationFinished(object obj)\r\n    {\r\n        float compilationTime = Time.realtimeSinceStartup - compilationStartTime;\r\n        isCompiling = false;\r\n        compilationProgress = 1f;\r\n        compilationMessage = \"编译完成\";\r\n        \r\n        // 更新编译结果\r\n        UpdateCompilationResult();\r\n        \r\n        // 更新性能数据\r\n        UpdateCompilationPerformance(compilationTime);\r\n        \r\n        // 记录到历史\r\n        if (enableCompilationHistory)\r\n        {\r\n            AddCompilationHistoryEntry(compilationTime);\r\n        }\r\n        \r\n        if (enableCompilationLogging)\r\n        {\r\n            Debug.Log($\"编译完成，耗时: {compilationTime:F2}秒\");\r\n        }\r\n    }\r\n\r\n    private void OnCompilationResult(CompilationResult result)\r\n    {\r\n        if (result.success)\r\n        {\r\n            compilationMessage = \"编译成功\";\r\n            Debug.Log(\"编译成功\");\r\n        }\r\n        else\r\n        {\r\n            compilationMessage = \"编译失败\";\r\n            Debug.LogError(\"编译失败\");\r\n        }\r\n    }\r\n\r\n    private void UpdateCompilationInfo()\r\n    {\r\n        // 获取所有程序集\r\n        var assemblies = CompilationPipeline.GetAssemblies();\r\n        totalAssemblies = assemblies.Length;\r\n        \r\n        // 统计脚本信息\r\n        CountScripts();\r\n        \r\n        Debug.Log($\"编译信息更新: {totalAssemblies} 个程序集, {totalScripts} 个脚本\");\r\n    }\r\n\r\n    private void CountScripts()\r\n    {\r\n        totalScripts = 0;\r\n        totalScriptLines = 0;\r\n        totalScriptSize = 0;\r\n        \r\n        // 获取所有脚本文件\r\n        string[] scriptGuids = AssetDatabase.FindAssets(\"t:Script\");\r\n        \r\n        foreach (string guid in scriptGuids)\r\n        {\r\n            string path = AssetDatabase.GUIDToAssetPath(guid);\r\n            if (!string.IsNullOrEmpty(path))\r\n            {\r\n                totalScripts++;\r\n                \r\n                // 计算脚本大小\r\n                var scriptAsset = AssetDatabase.LoadAssetAtPath<MonoScript>(path);\r\n                if (scriptAsset != null)\r\n                {\r\n                    string scriptText = scriptAsset.text;\r\n                    if (!string.IsNullOrEmpty(scriptText))\r\n                    {\r\n                        totalScriptLines += scriptText.Split('\\n').Length;\r\n                        totalScriptSize += System.Text.Encoding.UTF8.GetByteCount(scriptText);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    private void UpdateCompilationResult()\r\n    {\r\n        // 获取编译消息\r\n        compilerMessages = CompilationPipeline.GetCompilerMessages();\r\n        \r\n        totalErrors = 0;\r\n        totalWarnings = 0;\r\n        List<string> errors = new List<string>();\r\n        List<string> warnings = new List<string>();\r\n        \r\n        foreach (var message in compilerMessages)\r\n        {\r\n            if (message.type == CompilerMessageType.Error)\r\n            {\r\n                totalErrors++;\r\n                errors.Add($\"{message.file}:{message.line} - {message.message}\");\r\n            }\r\n            else if (message.type == CompilerMessageType.Warning)\r\n            {\r\n                totalWarnings++;\r\n                warnings.Add($\"{message.file}:{message.line} - {message.message}\");\r\n            }\r\n        }\r\n        \r\n        errorMessages = errors.ToArray();\r\n        warningMessages = warnings.ToArray();\r\n        \r\n        // 更新程序集统计\r\n        UpdateAssemblyStatistics();\r\n    }\r\n\r\n    private void UpdateAssemblyStatistics()\r\n    {\r\n        var assemblies = CompilationPipeline.GetAssemblies();\r\n        compiledAssemblies = 0;\r\n        failedAssemblies = 0;\r\n        \r\n        foreach (var assembly in assemblies)\r\n        {\r\n            string assemblyName = assembly.name;\r\n            \r\n            if (!assemblyCompilationCount.ContainsKey(assemblyName))\r\n            {\r\n                assemblyCompilationCount[assemblyName] = 0;\r\n            }\r\n            assemblyCompilationCount[assemblyName]++;\r\n            \r\n            if (assembly.status == AssemblyStatus.Compiled)\r\n            {\r\n                compiledAssemblies++;\r\n            }\r\n            else if (assembly.status == AssemblyStatus.CompilationError)\r\n            {\r\n                failedAssemblies++;\r\n            }\r\n        }\r\n    }\r\n\r\n    private void UpdateCompilationPerformance(float compilationTime)\r\n    {\r\n        if (enablePerformanceMonitoring)\r\n        {\r\n            compilationTimeHistory[compilationTimeIndex] = compilationTime;\r\n            compilationTimeIndex = (compilationTimeIndex + 1) % 100;\r\n            \r\n            totalCompilationTime += compilationTime;\r\n            totalCompilationCount++;\r\n            \r\n            if (compilationTime > maxCompilationTime)\r\n            {\r\n                maxCompilationTime = compilationTime;\r\n            }\r\n        }\r\n    }\r\n\r\n    private void AddCompilationHistoryEntry(float compilationTime)\r\n    {\r\n        var entry = new CompilationHistoryEntry\r\n        {\r\n            timestamp = System.DateTime.Now.ToString(),\r\n            compilationTime = compilationTime,\r\n            totalAssemblies = totalAssemblies,\r\n            compiledAssemblies = compiledAssemblies,\r\n            failedAssemblies = failedAssemblies,\r\n            totalErrors = totalErrors,\r\n            totalWarnings = totalWarnings,\r\n            success = totalErrors == 0\r\n        };\r\n        \r\n        compilationHistory[compilationHistoryIndex] = entry;\r\n        compilationHistoryIndex = (compilationHistoryIndex + 1) % compilationHistory.Length;\r\n    }\r\n\r\n    public void ForceCompilation()\r\n    {\r\n        if (isCompiling)\r\n        {\r\n            Debug.LogWarning(\"编译正在进行中，请等待完成\");\r\n            return;\r\n        }\r\n        \r\n        compilationStartTime = Time.realtimeSinceStartup;\r\n        isCompiling = true;\r\n        compilationProgress = 0f;\r\n        compilationMessage = \"强制编译开始...\";\r\n        \r\n        // 强制重新编译\r\n        AssetDatabase.Refresh();\r\n        \r\n        Debug.Log(\"强制编译已启动\");\r\n    }\r\n\r\n    public void RequestScriptCompilation()\r\n    {\r\n        if (isCompiling)\r\n        {\r\n            Debug.LogWarning(\"编译正在进行中，请等待完成\");\r\n            return;\r\n        }\r\n        \r\n        compilationStartTime = Time.realtimeSinceStartup;\r\n        isCompiling = true;\r\n        compilationProgress = 0f;\r\n        compilationMessage = \"脚本编译请求...\";\r\n        \r\n        // 请求脚本编译\r\n        CompilationPipeline.RequestScriptCompilation();\r\n        \r\n        Debug.Log(\"脚本编译请求已发送\");\r\n    }\r\n\r\n    public void CancelCompilation()\r\n    {\r\n        if (!isCompiling)\r\n        {\r\n            Debug.LogWarning(\"没有正在进行的编译\");\r\n            return;\r\n        }\r\n        \r\n        // 注意：Unity的编译系统通常不允许取消编译\r\n        // 这里只是示例\r\n        compilationMessage = \"编译取消请求已发送\";\r\n        \r\n        Debug.Log(\"编译取消请求已发送\");\r\n    }\r\n\r\n    public void GenerateCompilationReport()\r\n    {\r\n        Debug.Log(\"=== 编译系统报告 ===\");\r\n        Debug.Log($\"编译系统状态: {compilationStatus}\");\r\n        Debug.Log($\"是否正在编译: {isCompiling}\");\r\n        Debug.Log($\"编译进度: {compilationProgress * 100:F1}%\");\r\n        Debug.Log($\"编译消息: {compilationMessage}\");\r\n        Debug.Log($\"总程序集数: {totalAssemblies}\");\r\n        Debug.Log($\"已编译程序集数: {compiledAssemblies}\");\r\n        Debug.Log($\"失败程序集数: {failedAssemblies}\");\r\n        Debug.Log($\"总错误数: {totalErrors}\");\r\n        Debug.Log($\"总警告数: {totalWarnings}\");\r\n        Debug.Log($\"总脚本数: {totalScripts}\");\r\n        Debug.Log($\"总脚本行数: {totalScriptLines}\");\r\n        Debug.Log($\"总脚本大小: {FormatFileSize(totalScriptSize)}\");\r\n        Debug.Log($\"总编译次数: {totalCompilationCount}\");\r\n        Debug.Log($\"平均编译时间: {averageCompilationTime:F2}秒\");\r\n        Debug.Log($\"最大编译时间: {maxCompilationTime:F2}秒\");\r\n        Debug.Log($\"总编译时间: {totalCompilationTime:F2}秒\");\r\n        \r\n        if (totalErrors > 0)\r\n        {\r\n            Debug.Log(\"=== 编译错误 ===\");\r\n            foreach (string error in errorMessages)\r\n            {\r\n                Debug.LogError(error);\r\n            }\r\n        }\r\n        \r\n        if (totalWarnings > 0)\r\n        {\r\n            Debug.Log(\"=== 编译警告 ===\");\r\n            foreach (string warning in warningMessages)\r\n            {\r\n                Debug.LogWarning(warning);\r\n            }\r\n        }\r\n    }\r\n\r\n    private string FormatFileSize(long bytes)\r\n    {\r\n        string[] sizes = { \"B\", \"KB\", \"MB\", \"GB\" };\r\n        double len = bytes;\r\n        int order = 0;\r\n        \r\n        while (len >= 1024 && order < sizes.Length - 1)\r\n        {\r\n            order++;\r\n            len = len / 1024;\r\n        }\r\n        \r\n        return $\"{len:0.##} {sizes[order]}\";\r\n    }\r\n\r\n    public void ClearCompilationHistory()\r\n    {\r\n        compilationHistory = new CompilationHistoryEntry[10];\r\n        compilationHistoryIndex = 0;\r\n        Debug.Log(\"编译历史已清除\");\r\n    }\r\n\r\n    public void ResetCompilationStatistics()\r\n    {\r\n        assemblyCompilationCount.Clear();\r\n        assemblyCompilationTime.Clear();\r\n        totalCompilationCount = 0;\r\n        totalCompilationTime = 0f;\r\n        averageCompilationTime = 0f;\r\n        maxCompilationTime = 0f;\r\n        \r\n        Debug.Log(\"编译统计已重置\");\r\n    }\r\n\r\n    private void OnDestroy()\r\n    {\r\n        CompilationPipeline.compilationStarted -= OnCompilationStarted;\r\n        CompilationPipeline.compilationFinished -= OnCompilationFinished;\r\n        \r\n        Debug.Log(\"编译回调已清理\");\r\n    }\r\n\r\n    private void OnGUI()\r\n    {\r\n        GUILayout.BeginArea(new Rect(10, 10, 400, 800));\r\n        GUILayout.Label(\"Compilation 编译系统演示\", UnityEditor.EditorStyles.boldLabel);\r\n        \r\n        GUILayout.Space(10);\r\n        GUILayout.Label(\"编译系统配置:\");\r\n        enableCompilationSystem = GUILayout.Toggle(enableCompilationSystem, \"启用编译系统\");\r\n        enableCompilationLogging = GUILayout.Toggle(enableCompilationLogging, \"启用编译日志\");\r\n        enableCompilationValidation = GUILayout.Toggle(enableCompilationValidation, \"启用编译验证\");\r\n        enableCompilationPerformance = GUILayout.Toggle(enableCompilationPerformance, \"启用编译性能监控\");\r\n        enableCompilationHistory = GUILayout.Toggle(enableCompilationHistory, \"启用编译历史记录\");\r\n        \r\n        GUILayout.Space(10);\r\n        GUILayout.Label(\"编译配置:\");\r\n        enableAutoCompilation = GUILayout.Toggle(enableAutoCompilation, \"启用自动编译\");\r\n        enableBackgroundCompilation = GUILayout.Toggle(enableBackgroundCompilation, \"启用后台编译\");\r\n        enableScriptCompilation = GUILayout.Toggle(enableScriptCompilation, \"启用脚本编译\");\r\n        enableAssemblyCompilation = GUILayout.Toggle(enableAssemblyCompilation, \"启用程序集编译\");\r\n        \r\n        GUILayout.Space(10);\r\n        GUILayout.Label(\"编译状态:\");\r\n        GUILayout.Label($\"编译状态: {compilationStatus}\");\r\n        GUILayout.Label($\"是否正在编译: {isCompiling}\");\r\n        GUILayout.Label($\"编译进度: {compilationProgress * 100:F1}%\");\r\n        GUILayout.Label($\"编译消息: {compilationMessage}\");\r\n        GUILayout.Label($\"总程序集数: {totalAssemblies}\");\r\n        GUILayout.Label($\"已编译程序集数: {compiledAssemblies}\");\r\n        GUILayout.Label($\"失败程序集数: {failedAssemblies}\");\r\n        GUILayout.Label($\"总错误数: {totalErrors}\");\r\n        GUILayout.Label($\"总警告数: {totalWarnings}\");\r\n        GUILayout.Label($\"总脚本数: {totalScripts}\");\r\n        GUILayout.Label($\"总编译次数: {totalCompilationCount}\");\r\n        GUILayout.Label($\"平均编译时间: {averageCompilationTime:F2}秒\");\r\n        GUILayout.Label($\"最大编译时间: {maxCompilationTime:F2}秒\");\r\n        \r\n        GUILayout.Space(10);\r\n        \r\n        if (GUILayout.Button(\"强制编译\"))\r\n        {\r\n            ForceCompilation();\r\n        }\r\n        \r\n        if (GUILayout.Button(\"请求脚本编译\"))\r\n        {\r\n            RequestScriptCompilation();\r\n        }\r\n        \r\n        if (GUILayout.Button(\"取消编译\"))\r\n        {\r\n            CancelCompilation();\r\n        }\r\n        \r\n        if (GUILayout.Button(\"生成编译报告\"))\r\n        {\r\n            GenerateCompilationReport();\r\n        }\r\n        \r\n        if (GUILayout.Button(\"清除编译历史\"))\r\n        {\r\n            ClearCompilationHistory();\r\n        }\r\n        \r\n        if (GUILayout.Button(\"重置编译统计\"))\r\n        {\r\n            ResetCompilationStatistics();\r\n        }\r\n        \r\n        GUILayout.Space(10);\r\n        GUILayout.Label(\"编译历史:\");\r\n        for (int i = 0; i < compilationHistory.Length; i++)\r\n        {\r\n            if (compilationHistory[i] != null && !string.IsNullOrEmpty(compilationHistory[i].timestamp))\r\n            {\r\n                var entry = compilationHistory[i];\r\n                string status = entry.success ? \"成功\" : \"失败\";\r\n                GUILayout.Label($\"{entry.timestamp} - {status} - {entry.compilationTime:F2}s - {entry.totalErrors}错误\");\r\n            }\r\n        }\r\n        \r\n        GUILayout.EndArea();\r\n    }\r\n}\r\n\r\npublic enum CompilationStatus\r\n{\r\n    Idle,\r\n    Compiling,\r\n    Success,\r\n    Failed\r\n}\r\n\r\n[System.Serializable]\r\npublic class CompilationHistoryEntry\r\n{\r\n    public string timestamp;\r\n    public float compilationTime;\r\n    public int totalAssemblies;\r\n    public int compiledAssemblies;\r\n    public int failedAssemblies;\r\n    public int totalErrors;\r\n    public int totalWarnings;\r\n    public bool success;\r\n} "
        }
    ]
}