{
    "sourceFile": "Assets/UnityEditor/Chapter 8 UnityAPI/UnityEngine/Rendering/RenderingExample.cs",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1750929652456,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1750929652456,
            "name": "Commit-0",
            "content": "using UnityEngine;\r\nusing UnityEngine.Rendering;\r\nusing System.Collections.Generic;\r\n\r\n/// <summary>\r\n/// UnityEngine.Rendering 命名空间案例演示\r\n/// 展示渲染系统的核心功能\r\n/// </summary>\r\npublic class RenderingExample : MonoBehaviour\r\n{\r\n    [Header(\"渲染设置\")]\r\n    [SerializeField] private Camera targetCamera;\r\n    [SerializeField] private RenderPipelineAsset renderPipelineAsset;\r\n    [SerializeField] private bool useCustomRenderPipeline = false;\r\n    \r\n    [Header(\"渲染统计\")]\r\n    [SerializeField] private int drawCalls = 0;\r\n    [SerializeField] private int triangles = 0;\r\n    [SerializeField] private int vertices = 0;\r\n    [SerializeField] private float frameTime = 0f;\r\n    \r\n    [Header(\"渲染目标\")]\r\n    [SerializeField] private RenderTexture customRenderTexture;\r\n    [SerializeField] private Material renderMaterial;\r\n    [SerializeField] private bool enableCustomRendering = false;\r\n    \r\n    [Header(\"渲染事件\")]\r\n    [SerializeField] private bool enableRenderEvents = true;\r\n    [SerializeField] private bool enableCommandBuffer = false;\r\n    \r\n    // 渲染组件\r\n    private Renderer[] sceneRenderers;\r\n    private CommandBuffer commandBuffer;\r\n    private RenderTargetIdentifier renderTarget;\r\n    \r\n    // 渲染统计\r\n    private float lastFrameTime;\r\n    private int frameCount = 0;\r\n    \r\n    private void Start()\r\n    {\r\n        InitializeRenderingSystem();\r\n    }\r\n    \r\n    /// <summary>\r\n    /// 初始化渲染系统\r\n    /// </summary>\r\n    private void InitializeRenderingSystem()\r\n    {\r\n        // 获取目标相机\r\n        if (targetCamera == null)\r\n        {\r\n            targetCamera = Camera.main;\r\n            if (targetCamera == null)\r\n            {\r\n                targetCamera = FindObjectOfType<Camera>();\r\n            }\r\n        }\r\n        \r\n        // 获取场景中的所有渲染器\r\n        sceneRenderers = FindObjectsOfType<Renderer>();\r\n        \r\n        // 初始化命令缓冲区\r\n        if (enableCommandBuffer)\r\n        {\r\n            InitializeCommandBuffer();\r\n        }\r\n        \r\n        // 初始化自定义渲染目标\r\n        if (enableCustomRendering)\r\n        {\r\n            InitializeCustomRenderTarget();\r\n        }\r\n        \r\n        Debug.Log($\"渲染系统初始化完成 - 渲染器数量: {sceneRenderers.Length}\");\r\n    }\r\n    \r\n    /// <summary>\r\n    /// 初始化命令缓冲区\r\n    /// </summary>\r\n    private void InitializeCommandBuffer()\r\n    {\r\n        commandBuffer = new CommandBuffer();\r\n        commandBuffer.name = \"Custom Rendering Commands\";\r\n        \r\n        // 添加清除命令\r\n        commandBuffer.ClearRenderTarget(true, true, Color.black);\r\n        \r\n        // 添加绘制命令\r\n        commandBuffer.DrawProcedural(Matrix4x4.identity, renderMaterial, 0, MeshTopology.Triangles, 6);\r\n        \r\n        Debug.Log(\"命令缓冲区初始化完成\");\r\n    }\r\n    \r\n    /// <summary>\r\n    /// 初始化自定义渲染目标\r\n    /// </summary>\r\n    private void InitializeCustomRenderTarget()\r\n    {\r\n        if (customRenderTexture == null)\r\n        {\r\n            customRenderTexture = new RenderTexture(1024, 1024, 24);\r\n            customRenderTexture.name = \"Custom Render Target\";\r\n            customRenderTexture.Create();\r\n        }\r\n        \r\n        renderTarget = new RenderTargetIdentifier(customRenderTexture);\r\n        \r\n        Debug.Log(\"自定义渲染目标初始化完成\");\r\n    }\r\n    \r\n    /// <summary>\r\n    /// 获取渲染统计信息\r\n    /// </summary>\r\n    public void GetRenderingStatistics()\r\n    {\r\n        // 获取当前帧的渲染统计\r\n        drawCalls = UnityStats.drawCalls;\r\n        triangles = UnityStats.triangles;\r\n        vertices = UnityStats.vertices;\r\n        \r\n        // 计算帧时间\r\n        frameTime = Time.time - lastFrameTime;\r\n        lastFrameTime = Time.time;\r\n        frameCount++;\r\n        \r\n        Debug.Log($\"=== 渲染统计 (帧 {frameCount}) ===\");\r\n        Debug.Log($\"绘制调用: {drawCalls}\");\r\n        Debug.Log($\"三角形数: {triangles}\");\r\n        Debug.Log($\"顶点数: {vertices}\");\r\n        Debug.Log($\"帧时间: {frameTime * 1000:F2}ms\");\r\n        Debug.Log($\"FPS: {1.0f / frameTime:F1}\");\r\n    }\r\n    \r\n    /// <summary>\r\n    /// 设置渲染管线\r\n    /// </summary>\r\n    /// <param name=\"pipelineAsset\">渲染管线资产</param>\r\n    public void SetRenderPipeline(RenderPipelineAsset pipelineAsset)\r\n    {\r\n        if (pipelineAsset != null)\r\n        {\r\n            GraphicsSettings.renderPipelineAsset = pipelineAsset;\r\n            useCustomRenderPipeline = true;\r\n            Debug.Log($\"渲染管线已设置为: {pipelineAsset.name}\");\r\n        }\r\n        else\r\n        {\r\n            GraphicsSettings.renderPipelineAsset = null;\r\n            useCustomRenderPipeline = false;\r\n            Debug.Log(\"已切换到内置渲染管线\");\r\n        }\r\n    }\r\n    \r\n    /// <summary>\r\n    /// 切换渲染管线\r\n    /// </summary>\r\n    public void ToggleRenderPipeline()\r\n    {\r\n        if (useCustomRenderPipeline)\r\n        {\r\n            SetRenderPipeline(null);\r\n        }\r\n        else if (renderPipelineAsset != null)\r\n        {\r\n            SetRenderPipeline(renderPipelineAsset);\r\n        }\r\n    }\r\n    \r\n    /// <summary>\r\n    /// 启用/禁用渲染器\r\n    /// </summary>\r\n    /// <param name=\"enabled\">是否启用</param>\r\n    public void SetRenderersEnabled(bool enabled)\r\n    {\r\n        foreach (var renderer in sceneRenderers)\r\n        {\r\n            if (renderer != null)\r\n            {\r\n                renderer.enabled = enabled;\r\n            }\r\n        }\r\n        \r\n        Debug.Log($\"所有渲染器已{(enabled ? \"启用\" : \"禁用\")}\");\r\n    }\r\n    \r\n    /// <summary>\r\n    /// 设置渲染器材质\r\n    /// </summary>\r\n    /// <param name=\"material\">材质</param>\r\n    public void SetRenderersMaterial(Material material)\r\n    {\r\n        if (material == null) return;\r\n        \r\n        foreach (var renderer in sceneRenderers)\r\n        {\r\n            if (renderer != null)\r\n            {\r\n                renderer.material = material;\r\n            }\r\n        }\r\n        \r\n        Debug.Log($\"所有渲染器材质已设置为: {material.name}\");\r\n    }\r\n    \r\n    /// <summary>\r\n    /// 设置渲染器排序顺序\r\n    /// </summary>\r\n    /// <param name=\"sortingOrder\">排序顺序</param>\r\n    public void SetRenderersSortingOrder(int sortingOrder)\r\n    {\r\n        foreach (var renderer in sceneRenderers)\r\n        {\r\n            if (renderer != null)\r\n            {\r\n                renderer.sortingOrder = sortingOrder;\r\n            }\r\n        }\r\n        \r\n        Debug.Log($\"所有渲染器排序顺序已设置为: {sortingOrder}\");\r\n    }\r\n    \r\n    /// <summary>\r\n    /// 设置渲染器层级\r\n    /// </summary>\r\n    /// <param name=\"layer\">层级</param>\r\n    public void SetRenderersLayer(int layer)\r\n    {\r\n        foreach (var renderer in sceneRenderers)\r\n        {\r\n            if (renderer != null)\r\n            {\r\n                renderer.gameObject.layer = layer;\r\n            }\r\n        }\r\n        \r\n        Debug.Log($\"所有渲染器层级已设置为: {layer}\");\r\n    }\r\n    \r\n    /// <summary>\r\n    /// 启用/禁用阴影\r\n    /// </summary>\r\n    /// <param name=\"enabled\">是否启用</param>\r\n    public void SetShadowsEnabled(bool enabled)\r\n    {\r\n        foreach (var renderer in sceneRenderers)\r\n        {\r\n            if (renderer != null)\r\n            {\r\n                renderer.shadowCastingMode = enabled ? ShadowCastingMode.On : ShadowCastingMode.Off;\r\n                renderer.receiveShadows = enabled;\r\n            }\r\n        }\r\n        \r\n        Debug.Log($\"阴影已{(enabled ? \"启用\" : \"禁用\")}\");\r\n    }\r\n    \r\n    /// <summary>\r\n    /// 设置LOD组\r\n    /// </summary>\r\n    /// <param name=\"quality\">LOD质量 (0-1)</param>\r\n    public void SetLODQuality(float quality)\r\n    {\r\n        quality = Mathf.Clamp01(quality);\r\n        \r\n        foreach (var renderer in sceneRenderers)\r\n        {\r\n            if (renderer != null)\r\n            {\r\n                var lodGroup = renderer.GetComponent<LODGroup>();\r\n                if (lodGroup != null)\r\n                {\r\n                    LOD[] lods = lodGroup.GetLODs();\r\n                    for (int i = 0; i < lods.Length; i++)\r\n                    {\r\n                        lods[i].screenRelativeTransitionHeight = quality * (1.0f - i * 0.3f);\r\n                    }\r\n                    lodGroup.SetLODs(lods);\r\n                }\r\n            }\r\n        }\r\n        \r\n        Debug.Log($\"LOD质量已设置为: {quality}\");\r\n    }\r\n    \r\n    /// <summary>\r\n    /// 执行自定义渲染\r\n    /// </summary>\r\n    public void ExecuteCustomRendering()\r\n    {\r\n        if (!enableCustomRendering || customRenderTexture == null) return;\r\n        \r\n        // 设置渲染目标\r\n        RenderTexture.active = customRenderTexture;\r\n        \r\n        // 清除渲染目标\r\n        GL.Clear(true, true, Color.clear);\r\n        \r\n        // 执行渲染命令\r\n        if (commandBuffer != null)\r\n        {\r\n            Graphics.ExecuteCommandBuffer(commandBuffer);\r\n        }\r\n        \r\n        // 恢复默认渲染目标\r\n        RenderTexture.active = null;\r\n        \r\n        Debug.Log(\"自定义渲染执行完成\");\r\n    }\r\n    \r\n    /// <summary>\r\n    /// 添加渲染事件\r\n    /// </summary>\r\n    public void AddRenderEvent()\r\n    {\r\n        if (!enableRenderEvents || targetCamera == null) return;\r\n        \r\n        // 添加渲染事件\r\n        targetCamera.AddCommandBuffer(CameraEvent.AfterEverything, commandBuffer);\r\n        \r\n        Debug.Log(\"渲染事件已添加\");\r\n    }\r\n    \r\n    /// <summary>\r\n    /// 移除渲染事件\r\n    /// </summary>\r\n    public void RemoveRenderEvent()\r\n    {\r\n        if (targetCamera == null || commandBuffer == null) return;\r\n        \r\n        // 移除渲染事件\r\n        targetCamera.RemoveCommandBuffer(CameraEvent.AfterEverything, commandBuffer);\r\n        \r\n        Debug.Log(\"渲染事件已移除\");\r\n    }\r\n    \r\n    /// <summary>\r\n    /// 设置相机渲染路径\r\n    /// </summary>\r\n    /// <param name=\"renderingPath\">渲染路径</param>\r\n    public void SetCameraRenderingPath(RenderingPath renderingPath)\r\n    {\r\n        if (targetCamera == null) return;\r\n        \r\n        targetCamera.renderingPath = renderingPath;\r\n        Debug.Log($\"相机渲染路径已设置为: {renderingPath}\");\r\n    }\r\n    \r\n    /// <summary>\r\n    /// 设置相机清除标志\r\n    /// </summary>\r\n    /// <param name=\"clearFlags\">清除标志</param>\r\n    public void SetCameraClearFlags(CameraClearFlags clearFlags)\r\n    {\r\n        if (targetCamera == null) return;\r\n        \r\n        targetCamera.clearFlags = clearFlags;\r\n        Debug.Log($\"相机清除标志已设置为: {clearFlags}\");\r\n    }\r\n    \r\n    /// <summary>\r\n    /// 设置相机背景色\r\n    /// </summary>\r\n    /// <param name=\"backgroundColor\">背景色</param>\r\n    public void SetCameraBackgroundColor(Color backgroundColor)\r\n    {\r\n        if (targetCamera == null) return;\r\n        \r\n        targetCamera.backgroundColor = backgroundColor;\r\n        Debug.Log($\"相机背景色已设置为: {backgroundColor}\");\r\n    }\r\n    \r\n    /// <summary>\r\n    /// 获取渲染器信息\r\n    /// </summary>\r\n    public void GetRendererInfo()\r\n    {\r\n        Debug.Log(\"=== 渲染器信息 ===\");\r\n        \r\n        foreach (var renderer in sceneRenderers)\r\n        {\r\n            if (renderer != null)\r\n            {\r\n                Debug.Log($\"渲染器: {renderer.name}\");\r\n                Debug.Log($\"  材质: {renderer.material?.name ?? \"无\"}\");\r\n                Debug.Log($\"  排序顺序: {renderer.sortingOrder}\");\r\n                Debug.Log($\"  层级: {renderer.gameObject.layer}\");\r\n                Debug.Log($\"  阴影投射: {renderer.shadowCastingMode}\");\r\n                Debug.Log($\"  接收阴影: {renderer.receiveShadows}\");\r\n                Debug.Log($\"  启用状态: {renderer.enabled}\");\r\n            }\r\n        }\r\n    }\r\n    \r\n    /// <summary>\r\n    /// 优化渲染性能\r\n    /// </summary>\r\n    public void OptimizeRendering()\r\n    {\r\n        Debug.Log(\"开始渲染性能优化...\");\r\n        \r\n        // 设置静态批处理\r\n        foreach (var renderer in sceneRenderers)\r\n        {\r\n            if (renderer != null && renderer.gameObject.isStatic)\r\n            {\r\n                StaticBatchingUtility.Combine(renderer.gameObject);\r\n            }\r\n        }\r\n        \r\n        // 设置动态批处理\r\n        QualitySettings.maxQueuedFrames = 2;\r\n        QualitySettings.vSyncCount = 0;\r\n        \r\n        Debug.Log(\"渲染性能优化完成\");\r\n    }\r\n    \r\n    private void Update()\r\n    {\r\n        // 更新渲染统计\r\n        if (Time.frameCount % 60 == 0) // 每60帧更新一次\r\n        {\r\n            GetRenderingStatistics();\r\n        }\r\n    }\r\n    \r\n    private void OnDestroy()\r\n    {\r\n        // 清理资源\r\n        if (commandBuffer != null)\r\n        {\r\n            commandBuffer.Release();\r\n        }\r\n        \r\n        if (customRenderTexture != null)\r\n        {\r\n            customRenderTexture.Release();\r\n        }\r\n    }\r\n    \r\n    private void OnGUI()\r\n    {\r\n        // 简单的GUI界面用于测试\r\n        GUILayout.BeginArea(new Rect(10, 10, 400, 600));\r\n        GUILayout.Label(\"渲染系统演示\", EditorStyles.boldLabel);\r\n        \r\n        GUILayout.Space(10);\r\n        \r\n        // 渲染统计\r\n        GUILayout.Label($\"绘制调用: {drawCalls}\");\r\n        GUILayout.Label($\"三角形数: {triangles}\");\r\n        GUILayout.Label($\"顶点数: {vertices}\");\r\n        GUILayout.Label($\"帧时间: {frameTime * 1000:F2}ms\");\r\n        \r\n        GUILayout.Space(10);\r\n        \r\n        // 渲染设置\r\n        if (GUILayout.Button(\"切换渲染管线\"))\r\n        {\r\n            ToggleRenderPipeline();\r\n        }\r\n        \r\n        if (GUILayout.Button(\"启用所有渲染器\"))\r\n        {\r\n            SetRenderersEnabled(true);\r\n        }\r\n        \r\n        if (GUILayout.Button(\"禁用所有渲染器\"))\r\n        {\r\n            SetRenderersEnabled(false);\r\n        }\r\n        \r\n        GUILayout.Space(10);\r\n        \r\n        if (GUILayout.Button(\"启用阴影\"))\r\n        {\r\n            SetShadowsEnabled(true);\r\n        }\r\n        \r\n        if (GUILayout.Button(\"禁用阴影\"))\r\n        {\r\n            SetShadowsEnabled(false);\r\n        }\r\n        \r\n        GUILayout.Space(10);\r\n        \r\n        if (GUILayout.Button(\"获取渲染器信息\"))\r\n        {\r\n            GetRendererInfo();\r\n        }\r\n        \r\n        if (GUILayout.Button(\"优化渲染性能\"))\r\n        {\r\n            OptimizeRendering();\r\n        }\r\n        \r\n        GUILayout.Space(10);\r\n        \r\n        if (GUILayout.Button(\"执行自定义渲染\"))\r\n        {\r\n            ExecuteCustomRendering();\r\n        }\r\n        \r\n        if (GUILayout.Button(\"添加渲染事件\"))\r\n        {\r\n            AddRenderEvent();\r\n        }\r\n        \r\n        if (GUILayout.Button(\"移除渲染事件\"))\r\n        {\r\n            RemoveRenderEvent();\r\n        }\r\n        \r\n        GUILayout.Space(10);\r\n        \r\n        // 设置选项\r\n        enableCustomRendering = GUILayout.Toggle(enableCustomRendering, \"启用自定义渲染\");\r\n        enableRenderEvents = GUILayout.Toggle(enableRenderEvents, \"启用渲染事件\");\r\n        enableCommandBuffer = GUILayout.Toggle(enableCommandBuffer, \"启用命令缓冲区\");\r\n        \r\n        GUILayout.EndArea();\r\n    }\r\n} "
        }
    ]
}