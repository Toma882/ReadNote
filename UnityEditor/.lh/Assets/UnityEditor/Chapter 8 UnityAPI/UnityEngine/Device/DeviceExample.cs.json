{
    "sourceFile": "Assets/UnityEditor/Chapter 8 UnityAPI/UnityEngine/Device/DeviceExample.cs",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1750934455702,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1750934455702,
            "name": "Commit-0",
            "content": "using UnityEngine;\r\n\r\n/// <summary>\r\n/// UnityEngine.Device 命名空间案例演示\r\n/// 展示设备信息获取、设备特性检测、设备状态监控等核心功能\r\n/// </summary>\r\npublic class DeviceExample : MonoBehaviour\r\n{\r\n    [Header(\"设备基本信息\")]\r\n    [SerializeField] private string deviceModel = \"\"; //设备型号\r\n    [SerializeField] private string deviceName = \"\"; //设备名称\r\n    [SerializeField] private string deviceType = \"\"; //设备类型\r\n    [SerializeField] private string operatingSystem = \"\"; //操作系统\r\n    [SerializeField] private string processorType = \"\"; //处理器类型\r\n    [SerializeField] private int processorCount = 0; //处理器核心数\r\n\r\n    [Header(\"设备性能\")]\r\n    [SerializeField] private int systemMemorySize = 0; //系统内存大小\r\n    [SerializeField] private int graphicsMemorySize = 0; //图形内存大小\r\n    [SerializeField] private string graphicsDeviceName = \"\"; //图形设备名称\r\n    [SerializeField] private string graphicsDeviceVersion = \"\"; //图形设备版本\r\n    [SerializeField] private bool supportsComputeShaders = false; //支持计算着色器\r\n    [SerializeField] private bool supportsInstancing = false; //支持实例化\r\n\r\n    [Header(\"设备特性\")]\r\n    [SerializeField] private bool supportsGyroscope = false; //支持陀螺仪\r\n    [SerializeField] private bool supportsAccelerometer = false; //支持加速度计\r\n    [SerializeField] private bool supportsLocationService = false; //支持位置服务\r\n    [SerializeField] private bool supportsVibration = false; //支持震动\r\n    [SerializeField] private bool supportsAudio = false; //支持音频\r\n    [SerializeField] private bool supportsCamera = false; //支持相机\r\n\r\n    [Header(\"设备状态\")]\r\n    [SerializeField] private float batteryLevel = 0f; //电池电量\r\n    [SerializeField] private bool isCharging = false; //是否充电\r\n    [SerializeField] private string networkReachability = \"\"; //网络可达性\r\n    [SerializeField] private bool isInternetReachable = false; //网络是否可达\r\n    [SerializeField] private string deviceUniqueIdentifier = \"\"; //设备唯一标识符\r\n\r\n    [Header(\"设备监控\")]\r\n    [SerializeField] private bool enableDeviceMonitoring = true; //启用设备监控\r\n    [SerializeField] private float monitoringInterval = 1f; //监控间隔\r\n    [SerializeField] private bool logDeviceChanges = false; //记录设备变化\r\n\r\n    private float lastMonitoringTime = 0f;\r\n    private string lastDeviceState = \"\";\r\n\r\n    private void Start()\r\n    {\r\n        InitializeDeviceSystem();\r\n    }\r\n\r\n    /// <summary>\r\n    /// 初始化设备系统\r\n    /// </summary>\r\n    private void InitializeDeviceSystem()\r\n    {\r\n        // 获取设备基本信息\r\n        GetDeviceBasicInfo();\r\n        \r\n        // 获取设备性能信息\r\n        GetDevicePerformanceInfo();\r\n        \r\n        // 检测设备特性\r\n        DetectDeviceFeatures();\r\n        \r\n        // 获取设备状态\r\n        GetDeviceStatus();\r\n        \r\n        Debug.Log(\"设备系统初始化完成\");\r\n    }\r\n\r\n    /// <summary>\r\n    /// 获取设备基本信息\r\n    /// </summary>\r\n    private void GetDeviceBasicInfo()\r\n    {\r\n        deviceModel = SystemInfo.deviceModel;\r\n        deviceName = SystemInfo.deviceName;\r\n        deviceType = SystemInfo.deviceType.ToString();\r\n        operatingSystem = SystemInfo.operatingSystem;\r\n        processorType = SystemInfo.processorType;\r\n        processorCount = SystemInfo.processorCount;\r\n        \r\n        Debug.Log($\"设备信息: {deviceModel} ({deviceName})\");\r\n        Debug.Log($\"操作系统: {operatingSystem}\");\r\n        Debug.Log($\"处理器: {processorType} ({processorCount}核)\");\r\n    }\r\n\r\n    /// <summary>\r\n    /// 获取设备性能信息\r\n    /// </summary>\r\n    private void GetDevicePerformanceInfo()\r\n    {\r\n        systemMemorySize = SystemInfo.systemMemorySize;\r\n        graphicsMemorySize = SystemInfo.graphicsMemorySize;\r\n        graphicsDeviceName = SystemInfo.graphicsDeviceName;\r\n        graphicsDeviceVersion = SystemInfo.graphicsDeviceVersion;\r\n        supportsComputeShaders = SystemInfo.supportsComputeShaders;\r\n        supportsInstancing = SystemInfo.supportsInstancing;\r\n        \r\n        Debug.Log($\"内存: {systemMemorySize}MB\");\r\n        Debug.Log($\"图形设备: {graphicsDeviceName}\");\r\n        Debug.Log($\"图形内存: {graphicsMemorySize}MB\");\r\n    }\r\n\r\n    /// <summary>\r\n    /// 检测设备特性\r\n    /// </summary>\r\n    private void DetectDeviceFeatures()\r\n    {\r\n        supportsGyroscope = SystemInfo.supportsGyroscope;\r\n        supportsAccelerometer = SystemInfo.supportsAccelerometer;\r\n        supportsLocationService = Input.location.isEnabledByUser;\r\n        supportsVibration = SystemInfo.supportsVibration;\r\n        supportsAudio = SystemInfo.supportsAudio;\r\n        supportsCamera = SystemInfo.supportsCamera;\r\n        \r\n        Debug.Log($\"陀螺仪: {supportsGyroscope}\");\r\n        Debug.Log($\"加速度计: {supportsAccelerometer}\");\r\n        Debug.Log($\"位置服务: {supportsLocationService}\");\r\n        Debug.Log($\"震动: {supportsVibration}\");\r\n    }\r\n\r\n    /// <summary>\r\n    /// 获取设备状态\r\n    /// </summary>\r\n    private void GetDeviceStatus()\r\n    {\r\n        deviceUniqueIdentifier = SystemInfo.deviceUniqueIdentifier;\r\n        networkReachability = Application.internetReachability.ToString();\r\n        isInternetReachable = Application.internetReachability != NetworkReachability.NotReachable;\r\n        \r\n        // 获取电池信息（仅在移动平台可用）\r\n        if (Application.isMobilePlatform)\r\n        {\r\n            batteryLevel = SystemInfo.batteryLevel;\r\n            isCharging = SystemInfo.batteryStatus == BatteryStatus.Charging;\r\n        }\r\n        \r\n        Debug.Log($\"设备ID: {deviceUniqueIdentifier}\");\r\n        Debug.Log($\"网络状态: {networkReachability}\");\r\n        Debug.Log($\"电池电量: {batteryLevel:P0}\");\r\n    }\r\n\r\n    private void Update()\r\n    {\r\n        if (enableDeviceMonitoring && Time.time - lastMonitoringTime > monitoringInterval)\r\n        {\r\n            MonitorDeviceStatus();\r\n            lastMonitoringTime = Time.time;\r\n        }\r\n    }\r\n\r\n    /// <summary>\r\n    /// 监控设备状态\r\n    /// </summary>\r\n    private void MonitorDeviceStatus()\r\n    {\r\n        string currentState = GetCurrentDeviceState();\r\n        \r\n        if (logDeviceChanges && currentState != lastDeviceState)\r\n        {\r\n            Debug.Log($\"设备状态变化: {currentState}\");\r\n            lastDeviceState = currentState;\r\n        }\r\n        \r\n        // 更新状态信息\r\n        GetDeviceStatus();\r\n    }\r\n\r\n    /// <summary>\r\n    /// 获取当前设备状态\r\n    /// </summary>\r\n    /// <returns>设备状态字符串</returns>\r\n    private string GetCurrentDeviceState()\r\n    {\r\n        return $\"Battery:{batteryLevel:P0}, Network:{networkReachability}, Charging:{isCharging}\";\r\n    }\r\n\r\n    /// <summary>\r\n    /// 获取设备详细信息\r\n    /// </summary>\r\n    public void GetDeviceDetailedInfo()\r\n    {\r\n        Debug.Log(\"=== 设备详细信息 ===\");\r\n        Debug.Log($\"设备型号: {deviceModel}\");\r\n        Debug.Log($\"设备名称: {deviceName}\");\r\n        Debug.Log($\"设备类型: {deviceType}\");\r\n        Debug.Log($\"操作系统: {operatingSystem}\");\r\n        Debug.Log($\"处理器: {processorType}\");\r\n        Debug.Log($\"处理器核心数: {processorCount}\");\r\n        Debug.Log($\"系统内存: {systemMemorySize}MB\");\r\n        Debug.Log($\"图形设备: {graphicsDeviceName}\");\r\n        Debug.Log($\"图形设备版本: {graphicsDeviceVersion}\");\r\n        Debug.Log($\"图形内存: {graphicsMemorySize}MB\");\r\n        Debug.Log($\"支持计算着色器: {supportsComputeShaders}\");\r\n        Debug.Log($\"支持实例化: {supportsInstancing}\");\r\n        Debug.Log($\"设备唯一ID: {deviceUniqueIdentifier}\");\r\n    }\r\n\r\n    /// <summary>\r\n    /// 获取设备特性信息\r\n    /// </summary>\r\n    public void GetDeviceFeaturesInfo()\r\n    {\r\n        Debug.Log(\"=== 设备特性信息 ===\");\r\n        Debug.Log($\"陀螺仪支持: {supportsGyroscope}\");\r\n        Debug.Log($\"加速度计支持: {supportsAccelerometer}\");\r\n        Debug.Log($\"位置服务支持: {supportsLocationService}\");\r\n        Debug.Log($\"震动支持: {supportsVibration}\");\r\n        Debug.Log($\"音频支持: {supportsAudio}\");\r\n        Debug.Log($\"相机支持: {supportsCamera}\");\r\n        Debug.Log($\"网络可达性: {networkReachability}\");\r\n        Debug.Log($\"网络可达: {isInternetReachable}\");\r\n    }\r\n\r\n    /// <summary>\r\n    /// 测试设备功能\r\n    /// </summary>\r\n    public void TestDeviceFeatures()\r\n    {\r\n        Debug.Log(\"开始测试设备功能\");\r\n        \r\n        // 测试震动\r\n        if (supportsVibration)\r\n        {\r\n            Handheld.Vibrate();\r\n            Debug.Log(\"震动测试完成\");\r\n        }\r\n        \r\n        // 测试位置服务\r\n        if (supportsLocationService)\r\n        {\r\n            StartLocationService();\r\n        }\r\n        \r\n        // 测试网络连接\r\n        TestNetworkConnection();\r\n        \r\n        Debug.Log(\"设备功能测试完成\");\r\n    }\r\n\r\n    /// <summary>\r\n    /// 启动位置服务\r\n    /// </summary>\r\n    public void StartLocationService()\r\n    {\r\n        if (supportsLocationService)\r\n        {\r\n            StartCoroutine(StartLocationServiceCoroutine());\r\n        }\r\n    }\r\n\r\n    /// <summary>\r\n    /// 启动位置服务协程\r\n    /// </summary>\r\n    private System.Collections.IEnumerator StartLocationServiceCoroutine()\r\n    {\r\n        Input.location.Start();\r\n        \r\n        int maxWait = 20;\r\n        while (Input.location.status == LocationServiceStatus.Initializing && maxWait > 0)\r\n        {\r\n            yield return new WaitForSeconds(1);\r\n            maxWait--;\r\n        }\r\n        \r\n        if (maxWait < 1)\r\n        {\r\n            Debug.Log(\"位置服务初始化超时\");\r\n            yield break;\r\n        }\r\n        \r\n        if (Input.location.status == LocationServiceStatus.Failed)\r\n        {\r\n            Debug.Log(\"位置服务启动失败\");\r\n            yield break;\r\n        }\r\n        \r\n        Debug.Log($\"位置服务启动成功: {Input.location.lastData.latitude}, {Input.location.lastData.longitude}\");\r\n    }\r\n\r\n    /// <summary>\r\n    /// 测试网络连接\r\n    /// </summary>\r\n    public void TestNetworkConnection()\r\n    {\r\n        Debug.Log($\"网络可达性: {Application.internetReachability}\");\r\n        \r\n        switch (Application.internetReachability)\r\n        {\r\n            case NetworkReachability.NotReachable:\r\n                Debug.Log(\"网络不可达\");\r\n                break;\r\n            case NetworkReachability.ReachableViaCarrierDataNetwork:\r\n                Debug.Log(\"通过移动网络可达\");\r\n                break;\r\n            case NetworkReachability.ReachableViaLocalAreaNetwork:\r\n                Debug.Log(\"通过局域网可达\");\r\n                break;\r\n        }\r\n    }\r\n\r\n    /// <summary>\r\n    /// 获取设备性能报告\r\n    /// </summary>\r\n    public void GetDevicePerformanceReport()\r\n    {\r\n        Debug.Log(\"=== 设备性能报告 ===\");\r\n        Debug.Log($\"帧率: {1f / Time.deltaTime:F1} FPS\");\r\n        Debug.Log($\"内存使用: {SystemInfo.systemMemorySize - SystemInfo.systemMemorySize}MB\");\r\n        Debug.Log($\"图形内存使用: {SystemInfo.graphicsMemorySize}MB\");\r\n        Debug.Log($\"纹理质量: {QualitySettings.masterTextureLimit}\");\r\n        Debug.Log($\"抗锯齿: {QualitySettings.antiAliasing}\");\r\n        Debug.Log($\"阴影质量: {QualitySettings.shadowResolution}\");\r\n    }\r\n\r\n    /// <summary>\r\n    /// 设置设备监控\r\n    /// </summary>\r\n    /// <param name=\"enabled\">是否启用</param>\r\n    public void SetDeviceMonitoring(bool enabled)\r\n    {\r\n        enableDeviceMonitoring = enabled;\r\n        Debug.Log($\"设备监控: {(enabled ? \"启用\" : \"禁用\")}\");\r\n    }\r\n\r\n    /// <summary>\r\n    /// 设置监控间隔\r\n    /// </summary>\r\n    /// <param name=\"interval\">监控间隔（秒）</param>\r\n    public void SetMonitoringInterval(float interval)\r\n    {\r\n        monitoringInterval = Mathf.Max(0.1f, interval);\r\n        Debug.Log($\"监控间隔设置为: {monitoringInterval}秒\");\r\n    }\r\n\r\n    /// <summary>\r\n    /// 重置设备设置\r\n    /// </summary>\r\n    public void ResetDeviceSettings()\r\n    {\r\n        enableDeviceMonitoring = true;\r\n        monitoringInterval = 1f;\r\n        logDeviceChanges = false;\r\n        \r\n        Debug.Log(\"设备设置已重置\");\r\n    }\r\n\r\n    private void OnGUI()\r\n    {\r\n        GUILayout.BeginArea(new Rect(10, 10, 400, 700));\r\n        GUILayout.Label(\"Device 设备信息演示\", UnityEditor.EditorStyles.boldLabel);\r\n        \r\n        GUILayout.Space(10);\r\n        GUILayout.Label(\"设备信息:\");\r\n        GUILayout.Label($\"设备: {deviceModel}\");\r\n        GUILayout.Label($\"名称: {deviceName}\");\r\n        GUILayout.Label($\"类型: {deviceType}\");\r\n        GUILayout.Label($\"系统: {operatingSystem}\");\r\n        GUILayout.Label($\"处理器: {processorType}\");\r\n        GUILayout.Label($\"核心数: {processorCount}\");\r\n        \r\n        GUILayout.Space(10);\r\n        GUILayout.Label(\"性能信息:\");\r\n        GUILayout.Label($\"系统内存: {systemMemorySize}MB\");\r\n        GUILayout.Label($\"图形内存: {graphicsMemorySize}MB\");\r\n        GUILayout.Label($\"图形设备: {graphicsDeviceName}\");\r\n        GUILayout.Label($\"计算着色器: {(supportsComputeShaders ? \"支持\" : \"不支持\")}\");\r\n        \r\n        GUILayout.Space(10);\r\n        GUILayout.Label(\"设备特性:\");\r\n        GUILayout.Label($\"陀螺仪: {(supportsGyroscope ? \"支持\" : \"不支持\")}\");\r\n        GUILayout.Label($\"加速度计: {(supportsAccelerometer ? \"支持\" : \"不支持\")}\");\r\n        GUILayout.Label($\"位置服务: {(supportsLocationService ? \"支持\" : \"不支持\")}\");\r\n        GUILayout.Label($\"震动: {(supportsVibration ? \"支持\" : \"不支持\")}\");\r\n        \r\n        GUILayout.Space(10);\r\n        GUILayout.Label(\"设备状态:\");\r\n        GUILayout.Label($\"电池电量: {batteryLevel:P0}\");\r\n        GUILayout.Label($\"充电状态: {(isCharging ? \"充电中\" : \"未充电\")}\");\r\n        GUILayout.Label($\"网络状态: {networkReachability}\");\r\n        GUILayout.Label($\"设备ID: {deviceUniqueIdentifier}\");\r\n        \r\n        GUILayout.Space(10);\r\n        GUILayout.Label(\"监控设置:\");\r\n        \r\n        enableDeviceMonitoring = GUILayout.Toggle(enableDeviceMonitoring, \"启用设备监控\");\r\n        logDeviceChanges = GUILayout.Toggle(logDeviceChanges, \"记录设备变化\");\r\n        monitoringInterval = float.TryParse(GUILayout.TextField(\"监控间隔\", monitoringInterval.ToString()), out var interval) ? interval : monitoringInterval;\r\n        \r\n        GUILayout.Space(10);\r\n        \r\n        if (GUILayout.Button(\"获取详细信息\"))\r\n        {\r\n            GetDeviceDetailedInfo();\r\n        }\r\n        \r\n        if (GUILayout.Button(\"获取特性信息\"))\r\n        {\r\n            GetDeviceFeaturesInfo();\r\n        }\r\n        \r\n        if (GUILayout.Button(\"获取性能报告\"))\r\n        {\r\n            GetDevicePerformanceReport();\r\n        }\r\n        \r\n        if (GUILayout.Button(\"测试设备功能\"))\r\n        {\r\n            TestDeviceFeatures();\r\n        }\r\n        \r\n        if (GUILayout.Button(\"启动位置服务\"))\r\n        {\r\n            StartLocationService();\r\n        }\r\n        \r\n        if (GUILayout.Button(\"测试网络连接\"))\r\n        {\r\n            TestNetworkConnection();\r\n        }\r\n        \r\n        if (GUILayout.Button(\"重置设备设置\"))\r\n        {\r\n            ResetDeviceSettings();\r\n        }\r\n        \r\n        GUILayout.EndArea();\r\n    }\r\n} "
        }
    ]
}