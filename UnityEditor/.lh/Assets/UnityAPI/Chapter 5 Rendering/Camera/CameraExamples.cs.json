{
    "sourceFile": "Assets/UnityAPI/Chapter 5 Rendering/Camera/CameraExamples.cs",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1750928318686,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1750928318686,
            "name": "Commit-0",
            "content": "using UnityEngine;\r\n\r\n/// <summary>\r\n/// Camera API使用案例\r\n/// 演示摄像机组件的各种功能\r\n/// </summary>\r\npublic class CameraExamples : MonoBehaviour\r\n{\r\n    [Header(\"摄像机设置\")]\r\n    [SerializeField] private Camera targetCamera;\r\n    [SerializeField] private Camera[] additionalCameras;\r\n    \r\n    [Header(\"投影设置\")]\r\n    [SerializeField] private bool usePerspective = true;\r\n    [SerializeField] private float fieldOfView = 60f;\r\n    [SerializeField] private float orthographicSize = 5f;\r\n    [SerializeField] private float nearClipPlane = 0.3f;\r\n    [SerializeField] private float farClipPlane = 1000f;\r\n    \r\n    [Header(\"渲染设置\")]\r\n    [SerializeField] private Color backgroundColor = Color.black;\r\n    [SerializeField] private CameraClearFlags clearFlags = CameraClearFlags.Skybox;\r\n    [SerializeField] private int cullingMask = -1;\r\n    [SerializeField] private bool allowHDR = true;\r\n    [SerializeField] private bool allowMSAA = true;\r\n    \r\n    [Header(\"后处理效果\")]\r\n    [SerializeField] private bool usePostProcessing = false;\r\n    [SerializeField] private float bloomIntensity = 1f;\r\n    [SerializeField] private float vignetteIntensity = 0.5f;\r\n    \r\n    [Header(\"摄像机控制\")]\r\n    [SerializeField] private float moveSpeed = 5f;\r\n    [SerializeField] private float rotateSpeed = 2f;\r\n    [SerializeField] private float zoomSpeed = 2f;\r\n    [SerializeField] private bool enableMouseControl = true;\r\n    \r\n    [Header(\"目标跟随\")]\r\n    [SerializeField] private Transform targetToFollow;\r\n    [SerializeField] private Vector3 offset = new Vector3(0f, 2f, -5f);\r\n    [SerializeField] private float followSpeed = 5f;\r\n    [SerializeField] private bool smoothFollow = true;\r\n    \r\n    [Header(\"屏幕效果\")]\r\n    [SerializeField] private bool enableScreenShake = false;\r\n    [SerializeField] private float shakeIntensity = 0.1f;\r\n    [SerializeField] private float shakeDuration = 0.5f;\r\n    \r\n    private Vector3 originalPosition;\r\n    private Quaternion originalRotation;\r\n    private bool isInitialized = false;\r\n    private float shakeTimer = 0f;\r\n    private Vector3 shakeOffset = Vector3.zero;\r\n    \r\n    private void Start()\r\n    {\r\n        InitializeCamera();\r\n        DemonstrateCameraBasics();\r\n        DemonstrateCameraProjection();\r\n        DemonstrateCameraRendering();\r\n        DemonstrateCameraControl();\r\n    }\r\n    \r\n    /// <summary>\r\n    /// 初始化摄像机\r\n    /// </summary>\r\n    private void InitializeCamera()\r\n    {\r\n        // 如果没有指定目标摄像机，使用主摄像机\r\n        if (targetCamera == null)\r\n        {\r\n            targetCamera = Camera.main;\r\n            \r\n            if (targetCamera == null)\r\n            {\r\n                targetCamera = GetComponent<Camera>();\r\n                \r\n                if (targetCamera == null)\r\n                {\r\n                    targetCamera = gameObject.AddComponent<Camera>();\r\n                }\r\n            }\r\n        }\r\n        \r\n        // 保存原始变换\r\n        originalPosition = targetCamera.transform.position;\r\n        originalRotation = targetCamera.transform.rotation;\r\n        \r\n        // 配置摄像机\r\n        ConfigureCamera();\r\n        \r\n        isInitialized = true;\r\n    }\r\n    \r\n    /// <summary>\r\n    /// 配置摄像机\r\n    /// </summary>\r\n    private void ConfigureCamera()\r\n    {\r\n        // 投影设置\r\n        targetCamera.orthographic = !usePerspective;\r\n        \r\n        if (usePerspective)\r\n        {\r\n            targetCamera.fieldOfView = fieldOfView;\r\n        }\r\n        else\r\n        {\r\n            targetCamera.orthographicSize = orthographicSize;\r\n        }\r\n        \r\n        targetCamera.nearClipPlane = nearClipPlane;\r\n        targetCamera.farClipPlane = farClipPlane;\r\n        \r\n        // 渲染设置\r\n        targetCamera.backgroundColor = backgroundColor;\r\n        targetCamera.clearFlags = clearFlags;\r\n        targetCamera.cullingMask = cullingMask;\r\n        targetCamera.allowHDR = allowHDR;\r\n        targetCamera.allowMSAA = allowMSAA;\r\n        \r\n        // 设置主摄像机\r\n        if (targetCamera == Camera.main)\r\n        {\r\n            Debug.Log(\"设置为主摄像机\");\r\n        }\r\n    }\r\n    \r\n    /// <summary>\r\n    /// 演示摄像机基础功能\r\n    /// </summary>\r\n    private void DemonstrateCameraBasics()\r\n    {\r\n        Debug.Log(\"=== Camera基础功能示例 ===\");\r\n        \r\n        // 1. 基础属性\r\n        Debug.Log($\"摄像机名称: {targetCamera.name}\");\r\n        Debug.Log($\"是否为主摄像机: {targetCamera == Camera.main}\");\r\n        Debug.Log($\"是否启用: {targetCamera.enabled}\");\r\n        Debug.Log($\"深度: {targetCamera.depth}\");\r\n        \r\n        // 2. 变换信息\r\n        Debug.Log($\"位置: {targetCamera.transform.position}\");\r\n        Debug.Log($\"旋转: {targetCamera.transform.rotation.eulerAngles}\");\r\n        Debug.Log($\"前方向量: {targetCamera.transform.forward}\");\r\n        Debug.Log($\"右方向量: {targetCamera.transform.right}\");\r\n        Debug.Log($\"上方向量: {targetCamera.transform.up}\");\r\n        \r\n        // 3. 视口信息\r\n        Debug.Log($\"视口矩形: {targetCamera.rect}\");\r\n        Debug.Log($\"像素矩形: {targetCamera.pixelRect}\");\r\n        Debug.Log($\"屏幕坐标: {targetCamera.screen}\");\r\n        \r\n        // 4. 渲染路径\r\n        Debug.Log($\"渲染路径: {targetCamera.renderingPath}\");\r\n        Debug.Log($\"目标纹理: {targetCamera.targetTexture}\");\r\n        Debug.Log($\"目标显示器: {targetCamera.targetDisplay}\");\r\n    }\r\n    \r\n    /// <summary>\r\n    /// 演示摄像机投影\r\n    /// </summary>\r\n    private void DemonstrateCameraProjection()\r\n    {\r\n        Debug.Log(\"=== Camera投影示例 ===\");\r\n        \r\n        // 1. 投影矩阵\r\n        Matrix4x4 projectionMatrix = targetCamera.projectionMatrix;\r\n        Debug.Log($\"投影矩阵:\\n{projectionMatrix}\");\r\n        \r\n        // 2. 世界到摄像机矩阵\r\n        Matrix4x4 worldToCameraMatrix = targetCamera.worldToCameraMatrix;\r\n        Debug.Log($\"世界到摄像机矩阵:\\n{worldToCameraMatrix}\");\r\n        \r\n        // 3. 视口到屏幕矩阵\r\n        Matrix4x4 viewportToScreenMatrix = targetCamera.projectionMatrix * targetCamera.worldToCameraMatrix;\r\n        Debug.Log($\"视口到屏幕矩阵:\\n{viewportToScreenMatrix}\");\r\n        \r\n        // 4. 视锥体\r\n        Plane[] frustumPlanes = GeometryUtility.CalculateFrustumPlanes(targetCamera);\r\n        Debug.Log($\"视锥体平面数量: {frustumPlanes.Length}\");\r\n        \r\n        // 5. 视口大小\r\n        Debug.Log($\"视口宽度: {targetCamera.pixelWidth}\");\r\n        Debug.Log($\"视口高度: {targetCamera.pixelHeight}\");\r\n        Debug.Log($\"宽高比: {targetCamera.aspect}\");\r\n        \r\n        // 6. 投影类型\r\n        Debug.Log($\"投影类型: {(targetCamera.orthographic ? \"正交\" : \"透视\")}\");\r\n        if (targetCamera.orthographic)\r\n        {\r\n            Debug.Log($\"正交大小: {targetCamera.orthographicSize}\");\r\n        }\r\n        else\r\n        {\r\n            Debug.Log($\"视野角度: {targetCamera.fieldOfView}\");\r\n        }\r\n    }\r\n    \r\n    /// <summary>\r\n    /// 演示摄像机渲染\r\n    /// </summary>\r\n    private void DemonstrateCameraRendering()\r\n    {\r\n        Debug.Log(\"=== Camera渲染示例 ===\");\r\n        \r\n        // 1. 渲染设置\r\n        Debug.Log($\"背景颜色: {targetCamera.backgroundColor}\");\r\n        Debug.Log($\"清除标志: {targetCamera.clearFlags}\");\r\n        Debug.Log($\"剔除遮罩: {targetCamera.cullingMask}\");\r\n        Debug.Log($\"HDR支持: {targetCamera.allowHDR}\");\r\n        Debug.Log($\"MSAA支持: {targetCamera.allowMSAA}\");\r\n        \r\n        // 2. 渲染路径\r\n        Debug.Log($\"渲染路径: {targetCamera.renderingPath}\");\r\n        Debug.Log($\"实际渲染路径: {targetCamera.actualRenderingPath}\");\r\n        \r\n        // 3. 目标纹理\r\n        if (targetCamera.targetTexture != null)\r\n        {\r\n            Debug.Log($\"目标纹理: {targetCamera.targetTexture.name}\");\r\n            Debug.Log($\"纹理尺寸: {targetCamera.targetTexture.width}x{targetCamera.targetTexture.height}\");\r\n        }\r\n        \r\n        // 4. 后处理效果\r\n        if (usePostProcessing)\r\n        {\r\n            Debug.Log(\"启用后处理效果\");\r\n            // 这里可以添加具体的后处理效果\r\n        }\r\n    }\r\n    \r\n    /// <summary>\r\n    /// 演示摄像机控制\r\n    /// </summary>\r\n    private void DemonstrateCameraControl()\r\n    {\r\n        Debug.Log(\"=== Camera控制示例 ===\");\r\n        \r\n        // 1. 屏幕坐标转换\r\n        Vector3 worldPoint = new Vector3(0f, 0f, 10f);\r\n        Vector3 screenPoint = targetCamera.WorldToScreenPoint(worldPoint);\r\n        Vector3 viewportPoint = targetCamera.WorldToViewportPoint(worldPoint);\r\n        \r\n        Debug.Log($\"世界坐标 {worldPoint} 转换为屏幕坐标: {screenPoint}\");\r\n        Debug.Log($\"世界坐标 {worldPoint} 转换为视口坐标: {viewportPoint}\");\r\n        \r\n        // 2. 射线投射\r\n        Ray ray = targetCamera.ScreenPointToRay(Input.mousePosition);\r\n        Debug.Log($\"从屏幕点 {Input.mousePosition} 发射射线: {ray.origin} -> {ray.direction}\");\r\n        \r\n        // 3. 视锥体测试\r\n        Bounds testBounds = new Bounds(Vector3.zero, Vector3.one);\r\n        bool isVisible = GeometryUtility.TestPlanesAABB(GeometryUtility.CalculateFrustumPlanes(targetCamera), testBounds);\r\n        Debug.Log($\"测试边界框是否在视锥体内: {isVisible}\");\r\n        \r\n        // 4. 摄像机跟随演示\r\n        if (targetToFollow != null)\r\n        {\r\n            Debug.Log($\"摄像机将跟随目标: {targetToFollow.name}\");\r\n        }\r\n    }\r\n    \r\n    /// <summary>\r\n    /// 在Update中处理输入和更新\r\n    /// </summary>\r\n    private void Update()\r\n    {\r\n        if (!isInitialized) return;\r\n        \r\n        HandleInput();\r\n        UpdateCameraFollow();\r\n        UpdateScreenShake();\r\n        UpdateCameraEffects();\r\n    }\r\n    \r\n    /// <summary>\r\n    /// 处理输入\r\n    /// </summary>\r\n    private void HandleInput()\r\n    {\r\n        // WASD移动\r\n        Vector3 movement = Vector3.zero;\r\n        if (Input.GetKey(KeyCode.W)) movement += targetCamera.transform.forward;\r\n        if (Input.GetKey(KeyCode.S)) movement += -targetCamera.transform.forward;\r\n        if (Input.GetKey(KeyCode.A)) movement += -targetCamera.transform.right;\r\n        if (Input.GetKey(KeyCode.D)) movement += targetCamera.transform.right;\r\n        if (Input.GetKey(KeyCode.Q)) movement += Vector3.up;\r\n        if (Input.GetKey(KeyCode.E)) movement += Vector3.down;\r\n        \r\n        if (movement != Vector3.zero)\r\n        {\r\n            targetCamera.transform.Translate(movement * moveSpeed * Time.deltaTime, Space.World);\r\n        }\r\n        \r\n        // 鼠标控制旋转\r\n        if (enableMouseControl && Input.GetMouseButton(1))\r\n        {\r\n            float mouseX = Input.GetAxis(\"Mouse X\") * rotateSpeed;\r\n            float mouseY = Input.GetAxis(\"Mouse Y\") * rotateSpeed;\r\n            \r\n            targetCamera.transform.Rotate(Vector3.up * mouseX, Space.World);\r\n            targetCamera.transform.Rotate(Vector3.right * -mouseY, Space.Self);\r\n        }\r\n        \r\n        // 滚轮缩放\r\n        float scroll = Input.GetAxis(\"Mouse ScrollWheel\");\r\n        if (scroll != 0)\r\n        {\r\n            if (targetCamera.orthographic)\r\n            {\r\n                targetCamera.orthographicSize = Mathf.Max(0.1f, targetCamera.orthographicSize - scroll * zoomSpeed);\r\n            }\r\n            else\r\n            {\r\n                targetCamera.fieldOfView = Mathf.Clamp(targetCamera.fieldOfView - scroll * zoomSpeed, 1f, 179f);\r\n            }\r\n        }\r\n        \r\n        // 特殊按键\r\n        if (Input.GetKeyDown(KeyCode.R))\r\n        {\r\n            ResetCamera();\r\n        }\r\n        \r\n        if (Input.GetKeyDown(KeyCode.T))\r\n        {\r\n            ToggleProjection();\r\n        }\r\n        \r\n        if (Input.GetKeyDown(KeyCode.Space))\r\n        {\r\n            TriggerScreenShake();\r\n        }\r\n        \r\n        if (Input.GetKeyDown(KeyCode.F))\r\n        {\r\n            FocusOnTarget();\r\n        }\r\n        \r\n        if (Input.GetKeyDown(KeyCode.C))\r\n        {\r\n            CreateScreenshot();\r\n        }\r\n    }\r\n    \r\n    /// <summary>\r\n    /// 更新摄像机跟随\r\n    /// </summary>\r\n    private void UpdateCameraFollow()\r\n    {\r\n        if (targetToFollow == null) return;\r\n        \r\n        Vector3 targetPosition = targetToFollow.position + offset;\r\n        \r\n        if (smoothFollow)\r\n        {\r\n            targetCamera.transform.position = Vector3.Lerp(targetCamera.transform.position, targetPosition, followSpeed * Time.deltaTime);\r\n            targetCamera.transform.LookAt(targetToFollow);\r\n        }\r\n        else\r\n        {\r\n            targetCamera.transform.position = targetPosition;\r\n            targetCamera.transform.LookAt(targetToFollow);\r\n        }\r\n    }\r\n    \r\n    /// <summary>\r\n    /// 更新屏幕震动\r\n    /// </summary>\r\n    private void UpdateScreenShake()\r\n    {\r\n        if (shakeTimer > 0)\r\n        {\r\n            shakeTimer -= Time.deltaTime;\r\n            \r\n            if (shakeTimer <= 0)\r\n            {\r\n                shakeOffset = Vector3.zero;\r\n            }\r\n            else\r\n            {\r\n                shakeOffset = Random.insideUnitSphere * shakeIntensity * (shakeTimer / shakeDuration);\r\n            }\r\n            \r\n            targetCamera.transform.position = originalPosition + shakeOffset;\r\n        }\r\n    }\r\n    \r\n    /// <summary>\r\n    /// 更新摄像机效果\r\n    /// </summary>\r\n    private void UpdateCameraEffects()\r\n    {\r\n        // 动态调整背景颜色\r\n        if (Input.GetKey(KeyCode.B))\r\n        {\r\n            targetCamera.backgroundColor = Color.Lerp(targetCamera.backgroundColor, Color.red, Time.deltaTime);\r\n        }\r\n        \r\n        // 动态调整视野\r\n        if (Input.GetKey(KeyCode.V))\r\n        {\r\n            if (targetCamera.orthographic)\r\n            {\r\n                targetCamera.orthographicSize = Mathf.Lerp(targetCamera.orthographicSize, 10f, Time.deltaTime);\r\n            }\r\n            else\r\n            {\r\n                targetCamera.fieldOfView = Mathf.Lerp(targetCamera.fieldOfView, 90f, Time.deltaTime);\r\n            }\r\n        }\r\n    }\r\n    \r\n    /// <summary>\r\n    /// 重置摄像机\r\n    /// </summary>\r\n    private void ResetCamera()\r\n    {\r\n        targetCamera.transform.position = originalPosition;\r\n        targetCamera.transform.rotation = originalRotation;\r\n        targetCamera.backgroundColor = backgroundColor;\r\n        Debug.Log(\"重置摄像机\");\r\n    }\r\n    \r\n    /// <summary>\r\n    /// 切换投影模式\r\n    /// </summary>\r\n    private void ToggleProjection()\r\n    {\r\n        targetCamera.orthographic = !targetCamera.orthographic;\r\n        Debug.Log($\"投影模式切换为: {(targetCamera.orthographic ? \"正交\" : \"透视\")}\");\r\n    }\r\n    \r\n    /// <summary>\r\n    /// 触发屏幕震动\r\n    /// </summary>\r\n    private void TriggerScreenShake()\r\n    {\r\n        if (enableScreenShake)\r\n        {\r\n            shakeTimer = shakeDuration;\r\n            Debug.Log(\"触发屏幕震动\");\r\n        }\r\n    }\r\n    \r\n    /// <summary>\r\n    /// 聚焦到目标\r\n    /// </summary>\r\n    private void FocusOnTarget()\r\n    {\r\n        if (targetToFollow != null)\r\n        {\r\n            targetCamera.transform.LookAt(targetToFollow);\r\n            Debug.Log($\"摄像机聚焦到目标: {targetToFollow.name}\");\r\n        }\r\n    }\r\n    \r\n    /// <summary>\r\n    /// 创建截图\r\n    /// </summary>\r\n    private void CreateScreenshot()\r\n    {\r\n        string fileName = $\"Screenshot_{System.DateTime.Now:yyyyMMdd_HHmmss}.png\";\r\n        ScreenCapture.CaptureScreenshotAsTexture();\r\n        Debug.Log($\"截图已保存: {fileName}\");\r\n    }\r\n    \r\n    /// <summary>\r\n    /// 世界坐标转屏幕坐标\r\n    /// </summary>\r\n    public Vector3 WorldToScreenPoint(Vector3 worldPosition)\r\n    {\r\n        return targetCamera.WorldToScreenPoint(worldPosition);\r\n    }\r\n    \r\n    /// <summary>\r\n    /// 屏幕坐标转世界坐标\r\n    /// </summary>\r\n    public Vector3 ScreenToWorldPoint(Vector3 screenPosition)\r\n    {\r\n        return targetCamera.ScreenToWorldPoint(screenPosition);\r\n    }\r\n    \r\n    /// <summary>\r\n    /// 世界坐标转视口坐标\r\n    /// </summary>\r\n    public Vector3 WorldToViewportPoint(Vector3 worldPosition)\r\n    {\r\n        return targetCamera.WorldToViewportPoint(worldPosition);\r\n    }\r\n    \r\n    /// <summary>\r\n    /// 视口坐标转世界坐标\r\n    /// </summary>\r\n    public Vector3 ViewportToWorldPoint(Vector3 viewportPosition)\r\n    {\r\n        return targetCamera.ViewportToWorldPoint(viewportPosition);\r\n    }\r\n    \r\n    /// <summary>\r\n    /// 从屏幕点发射射线\r\n    /// </summary>\r\n    public Ray ScreenPointToRay(Vector3 screenPosition)\r\n    {\r\n        return targetCamera.ScreenPointToRay(screenPosition);\r\n    }\r\n    \r\n    /// <summary>\r\n    /// 从视口点发射射线\r\n    /// </summary>\r\n    public Ray ViewportPointToRay(Vector3 viewportPosition)\r\n    {\r\n        return targetCamera.ViewportPointToRay(viewportPosition);\r\n    }\r\n    \r\n    /// <summary>\r\n    /// 检查对象是否在视锥体内\r\n    /// </summary>\r\n    public bool IsVisibleFromCamera(Renderer renderer)\r\n    {\r\n        return GeometryUtility.TestPlanesAABB(GeometryUtility.CalculateFrustumPlanes(targetCamera), renderer.bounds);\r\n    }\r\n    \r\n    /// <summary>\r\n    /// 设置摄像机目标纹理\r\n    /// </summary>\r\n    public void SetTargetTexture(RenderTexture renderTexture)\r\n    {\r\n        targetCamera.targetTexture = renderTexture;\r\n    }\r\n    \r\n    /// <summary>\r\n    /// 渲染到纹理\r\n    /// </summary>\r\n    public void RenderToTexture(RenderTexture renderTexture)\r\n    {\r\n        targetCamera.targetTexture = renderTexture;\r\n        targetCamera.Render();\r\n        targetCamera.targetTexture = null;\r\n    }\r\n    \r\n    /// <summary>\r\n    /// 在OnGUI中显示摄像机信息\r\n    /// </summary>\r\n    private void OnGUI()\r\n    {\r\n        if (!isInitialized) return;\r\n        \r\n        GUILayout.BeginArea(new Rect(10, 10, 400, 500));\r\n        \r\n        GUILayout.Label(\"Camera信息\", EditorStyles.boldLabel);\r\n        GUILayout.Space(5);\r\n        \r\n        // 基础信息\r\n        GUILayout.Label($\"摄像机名称: {targetCamera.name}\");\r\n        GUILayout.Label($\"是否为主摄像机: {targetCamera == Camera.main}\");\r\n        GUILayout.Label($\"位置: {targetCamera.transform.position}\");\r\n        GUILayout.Label($\"旋转: {targetCamera.transform.rotation.eulerAngles}\");\r\n        GUILayout.Label($\"投影类型: {(targetCamera.orthographic ? \"正交\" : \"透视\")}\");\r\n        \r\n        if (targetCamera.orthographic)\r\n        {\r\n            GUILayout.Label($\"正交大小: {targetCamera.orthographicSize:F2}\");\r\n        }\r\n        else\r\n        {\r\n            GUILayout.Label($\"视野角度: {targetCamera.fieldOfView:F1}°\");\r\n        }\r\n        \r\n        GUILayout.Label($\"近裁剪面: {targetCamera.nearClipPlane}\");\r\n        GUILayout.Label($\"远裁剪面: {targetCamera.farClipPlane}\");\r\n        GUILayout.Label($\"宽高比: {targetCamera.aspect:F2}\");\r\n        \r\n        GUILayout.Space(10);\r\n        \r\n        // 渲染信息\r\n        GUILayout.Label(\"渲染设置\", EditorStyles.boldLabel);\r\n        GUILayout.Label($\"背景颜色: {targetCamera.backgroundColor}\");\r\n        GUILayout.Label($\"清除标志: {targetCamera.clearFlags}\");\r\n        GUILayout.Label($\"HDR支持: {targetCamera.allowHDR}\");\r\n        GUILayout.Label($\"MSAA支持: {targetCamera.allowMSAA}\");\r\n        \r\n        GUILayout.Space(10);\r\n        \r\n        // 屏幕信息\r\n        GUILayout.Label(\"屏幕信息\", EditorStyles.boldLabel);\r\n        GUILayout.Label($\"屏幕尺寸: {targetCamera.pixelWidth}x{targetCamera.pixelHeight}\");\r\n        GUILayout.Label($\"视口矩形: {targetCamera.rect}\");\r\n        GUILayout.Label($\"目标纹理: {(targetCamera.targetTexture != null ? targetCamera.targetTexture.name : \"无\")}\");\r\n        \r\n        GUILayout.Space(10);\r\n        \r\n        // 控制说明\r\n        GUILayout.Label(\"控制说明:\", EditorStyles.boldLabel);\r\n        GUILayout.Label(\"WASD - 移动\");\r\n        GUILayout.Label(\"QE - 上下移动\");\r\n        GUILayout.Label(\"右键拖拽 - 旋转\");\r\n        GUILayout.Label(\"滚轮 - 缩放\");\r\n        GUILayout.Label(\"R - 重置\");\r\n        GUILayout.Label(\"T - 切换投影\");\r\n        GUILayout.Label(\"空格 - 屏幕震动\");\r\n        GUILayout.Label(\"F - 聚焦目标\");\r\n        GUILayout.Label(\"C - 截图\");\r\n        GUILayout.Label(\"B - 背景色变化\");\r\n        GUILayout.Label(\"V - 视野变化\");\r\n        \r\n        GUILayout.EndArea();\r\n    }\r\n} "
        }
    ]
}