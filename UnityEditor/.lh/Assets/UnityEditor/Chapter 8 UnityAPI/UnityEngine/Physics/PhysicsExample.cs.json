{
    "sourceFile": "Assets/UnityEditor/Chapter 8 UnityAPI/UnityEngine/Physics/PhysicsExample.cs",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1750930365267,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1750930365267,
            "name": "Commit-0",
            "content": "using UnityEngine;\r\nusing System.Collections.Generic;\r\n\r\n/// <summary>\r\n/// UnityEngine.Physics 命名空间案例演示\r\n/// 展示物理系统的核心功能\r\n/// </summary>\r\npublic class PhysicsExample : MonoBehaviour\r\n{\r\n    [Header(\"物理设置\")]\r\n    [SerializeField] private bool enablePhysics = true;\r\n    [SerializeField] private float gravity = -9.81f;\r\n    [SerializeField] private int maxPhysicsObjects = 100;\r\n    [SerializeField] private LayerMask physicsLayerMask = -1;\r\n    \r\n    [Header(\"物理对象\")]\r\n    [SerializeField] private GameObject physicsPrefab;\r\n    [SerializeField] private Transform spawnPoint;\r\n    [SerializeField] private List<Rigidbody> physicsObjects = new List<Rigidbody>();\r\n    \r\n    [Header(\"物理状态\")]\r\n    [SerializeField] private bool isSimulating = true;\r\n    [SerializeField] private float simulationTime = 0f;\r\n    [SerializeField] private int activeObjects = 0;\r\n    [SerializeField] private float totalKineticEnergy = 0f;\r\n    \r\n    [Header(\"物理参数\")]\r\n    [SerializeField] private float bounceForce = 10f;\r\n    [SerializeField] private float dragForce = 0.5f;\r\n    [SerializeField] private float angularDrag = 0.05f;\r\n    [SerializeField] private bool useGravity = true;\r\n    \r\n    [Header(\"碰撞检测\")]\r\n    [SerializeField] private bool enableCollisionDetection = true;\r\n    [SerializeField] private float collisionRadius = 5f;\r\n    [SerializeField] private Vector3 collisionCenter = Vector3.zero;\r\n    \r\n    // 物理事件\r\n    private System.Action<Collision> onCollisionEnter;\r\n    private System.Action<Collision> onCollisionExit;\r\n    private System.Action<Collider> onTriggerEnter;\r\n    private System.Action<Collider> onTriggerExit;\r\n    \r\n    private void Start()\r\n    {\r\n        InitializePhysicsSystem();\r\n    }\r\n    \r\n    /// <summary>\r\n    /// 初始化物理系统\r\n    /// </summary>\r\n    private void InitializePhysicsSystem()\r\n    {\r\n        // 设置物理参数\r\n        Physics.gravity = new Vector3(0, gravity, 0);\r\n        Physics.autoSimulation = isSimulating;\r\n        \r\n        // 设置碰撞检测\r\n        if (enableCollisionDetection)\r\n        {\r\n            SetupCollisionDetection();\r\n        }\r\n        \r\n        // 创建物理对象\r\n        if (physicsPrefab != null)\r\n        {\r\n            CreatePhysicsObjects();\r\n        }\r\n        \r\n        Debug.Log(\"物理系统初始化完成\");\r\n    }\r\n    \r\n    /// <summary>\r\n    /// 设置碰撞检测\r\n    /// </summary>\r\n    private void SetupCollisionDetection()\r\n    {\r\n        // 添加碰撞器组件\r\n        var collider = GetComponent<Collider>();\r\n        if (collider == null)\r\n        {\r\n            collider = gameObject.AddComponent<SphereCollider>();\r\n        }\r\n        \r\n        // 设置触发器\r\n        if (collider is SphereCollider sphereCollider)\r\n        {\r\n            sphereCollider.isTrigger = true;\r\n            sphereCollider.radius = collisionRadius;\r\n        }\r\n        \r\n        // 添加刚体组件\r\n        var rigidbody = GetComponent<Rigidbody>();\r\n        if (rigidbody == null)\r\n        {\r\n            rigidbody = gameObject.AddComponent<Rigidbody>();\r\n        }\r\n        \r\n        rigidbody.isKinematic = true;\r\n        rigidbody.useGravity = false;\r\n        \r\n        Debug.Log(\"碰撞检测设置完成\");\r\n    }\r\n    \r\n    /// <summary>\r\n    /// 创建物理对象\r\n    /// </summary>\r\n    private void CreatePhysicsObjects()\r\n    {\r\n        if (spawnPoint == null)\r\n        {\r\n            spawnPoint = transform;\r\n        }\r\n        \r\n        for (int i = 0; i < maxPhysicsObjects; i++)\r\n        {\r\n            Vector3 spawnPosition = spawnPoint.position + Random.insideUnitSphere * 2f;\r\n            GameObject obj = Instantiate(physicsPrefab, spawnPosition, Random.rotation);\r\n            \r\n            var rigidbody = obj.GetComponent<Rigidbody>();\r\n            if (rigidbody != null)\r\n            {\r\n                ConfigureRigidbody(rigidbody);\r\n                physicsObjects.Add(rigidbody);\r\n            }\r\n        }\r\n        \r\n        activeObjects = physicsObjects.Count;\r\n        Debug.Log($\"创建了 {activeObjects} 个物理对象\");\r\n    }\r\n    \r\n    /// <summary>\r\n    /// 配置刚体\r\n    /// </summary>\r\n    /// <param name=\"rigidbody\">刚体组件</param>\r\n    private void ConfigureRigidbody(Rigidbody rigidbody)\r\n    {\r\n        rigidbody.mass = Random.Range(0.1f, 5f);\r\n        rigidbody.drag = dragForce;\r\n        rigidbody.angularDrag = angularDrag;\r\n        rigidbody.useGravity = useGravity;\r\n        rigidbody.collisionDetectionMode = CollisionDetectionMode.Continuous;\r\n        \r\n        // 添加随机力\r\n        rigidbody.AddForce(Random.insideUnitSphere * bounceForce, ForceMode.Impulse);\r\n        rigidbody.AddTorque(Random.insideUnitSphere * bounceForce, ForceMode.Impulse);\r\n    }\r\n    \r\n    /// <summary>\r\n    /// 添加物理对象\r\n    /// </summary>\r\n    /// <param name=\"position\">生成位置</param>\r\n    public void AddPhysicsObject(Vector3 position)\r\n    {\r\n        if (physicsPrefab == null || physicsObjects.Count >= maxPhysicsObjects)\r\n        {\r\n            return;\r\n        }\r\n        \r\n        GameObject obj = Instantiate(physicsPrefab, position, Random.rotation);\r\n        var rigidbody = obj.GetComponent<Rigidbody>();\r\n        \r\n        if (rigidbody != null)\r\n        {\r\n            ConfigureRigidbody(rigidbody);\r\n            physicsObjects.Add(rigidbody);\r\n            activeObjects = physicsObjects.Count;\r\n        }\r\n        \r\n        Debug.Log($\"添加物理对象，当前数量: {activeObjects}\");\r\n    }\r\n    \r\n    /// <summary>\r\n    /// 移除物理对象\r\n    /// </summary>\r\n    /// <param name=\"index\">对象索引</param>\r\n    public void RemovePhysicsObject(int index)\r\n    {\r\n        if (index >= 0 && index < physicsObjects.Count)\r\n        {\r\n            var rigidbody = physicsObjects[index];\r\n            if (rigidbody != null)\r\n            {\r\n                Destroy(rigidbody.gameObject);\r\n            }\r\n            \r\n            physicsObjects.RemoveAt(index);\r\n            activeObjects = physicsObjects.Count;\r\n            \r\n            Debug.Log($\"移除物理对象，当前数量: {activeObjects}\");\r\n        }\r\n    }\r\n    \r\n    /// <summary>\r\n    /// 清除所有物理对象\r\n    /// </summary>\r\n    public void ClearPhysicsObjects()\r\n    {\r\n        foreach (var rigidbody in physicsObjects)\r\n        {\r\n            if (rigidbody != null)\r\n            {\r\n                Destroy(rigidbody.gameObject);\r\n            }\r\n        }\r\n        \r\n        physicsObjects.Clear();\r\n        activeObjects = 0;\r\n        \r\n        Debug.Log(\"所有物理对象已清除\");\r\n    }\r\n    \r\n    /// <summary>\r\n    /// 设置重力\r\n    /// </summary>\r\n    /// <param name=\"newGravity\">新的重力值</param>\r\n    public void SetGravity(float newGravity)\r\n    {\r\n        gravity = newGravity;\r\n        Physics.gravity = new Vector3(0, gravity, 0);\r\n        \r\n        Debug.Log($\"重力已设置为: {gravity}\");\r\n    }\r\n    \r\n    /// <summary>\r\n    /// 设置物理模拟\r\n    /// </summary>\r\n    /// <param name=\"simulate\">是否模拟</param>\r\n    public void SetPhysicsSimulation(bool simulate)\r\n    {\r\n        isSimulating = simulate;\r\n        Physics.autoSimulation = simulate;\r\n        \r\n        Debug.Log($\"物理模拟已设置为: {simulate}\");\r\n    }\r\n    \r\n    /// <summary>\r\n    /// 手动模拟物理\r\n    /// </summary>\r\n    /// <param name=\"deltaTime\">时间步长</param>\r\n    public void SimulatePhysics(float deltaTime)\r\n    {\r\n        if (!isSimulating)\r\n        {\r\n            Physics.Simulate(deltaTime);\r\n            simulationTime += deltaTime;\r\n        }\r\n    }\r\n    \r\n    /// <summary>\r\n    /// 应用力到所有对象\r\n    /// </summary>\r\n    /// <param name=\"force\">力的大小</param>\r\n    /// <param name=\"forceMode\">力的模式</param>\r\n    public void ApplyForceToAll(float force, ForceMode forceMode = ForceMode.Force)\r\n    {\r\n        Vector3 forceVector = Random.insideUnitSphere * force;\r\n        \r\n        foreach (var rigidbody in physicsObjects)\r\n        {\r\n            if (rigidbody != null)\r\n            {\r\n                rigidbody.AddForce(forceVector, forceMode);\r\n            }\r\n        }\r\n        \r\n        Debug.Log($\"向所有对象施加力: {force}\");\r\n    }\r\n    \r\n    /// <summary>\r\n    /// 应用爆炸力\r\n    /// </summary>\r\n    /// <param name=\"explosionPosition\">爆炸位置</param>\r\n    /// <param name=\"explosionForce\">爆炸力</param>\r\n    /// <param name=\"explosionRadius\">爆炸半径</param>\r\n    public void ApplyExplosionForce(Vector3 explosionPosition, float explosionForce, float explosionRadius)\r\n    {\r\n        foreach (var rigidbody in physicsObjects)\r\n        {\r\n            if (rigidbody != null)\r\n            {\r\n                rigidbody.AddExplosionForce(explosionForce, explosionPosition, explosionRadius);\r\n            }\r\n        }\r\n        \r\n        Debug.Log($\"应用爆炸力: {explosionForce}, 半径: {explosionRadius}\");\r\n    }\r\n    \r\n    /// <summary>\r\n    /// 射线检测\r\n    /// </summary>\r\n    /// <param name=\"origin\">射线起点</param>\r\n    /// <param name=\"direction\">射线方向</param>\r\n    /// <param name=\"maxDistance\">最大距离</param>\r\n    /// <returns>检测结果</returns>\r\n    public RaycastHit[] RaycastAll(Vector3 origin, Vector3 direction, float maxDistance = 100f)\r\n    {\r\n        return Physics.RaycastAll(origin, direction, maxDistance, physicsLayerMask);\r\n    }\r\n    \r\n    /// <summary>\r\n    /// 球体检测\r\n    /// </summary>\r\n    /// <param name=\"center\">球心</param>\r\n    /// <param name=\"radius\">半径</param>\r\n    /// <returns>检测结果</returns>\r\n    public Collider[] SphereCastAll(Vector3 center, float radius)\r\n    {\r\n        return Physics.OverlapSphere(center, radius, physicsLayerMask);\r\n    }\r\n    \r\n    /// <summary>\r\n    /// 胶囊体检测\r\n    /// </summary>\r\n    /// <param name=\"point1\">起点</param>\r\n    /// <param name=\"point2\">终点</param>\r\n    /// <param name=\"radius\">半径</param>\r\n    /// <returns>检测结果</returns>\r\n    public Collider[] CapsuleCastAll(Vector3 point1, Vector3 point2, float radius)\r\n    {\r\n        return Physics.OverlapCapsule(point1, point2, radius, physicsLayerMask);\r\n    }\r\n    \r\n    /// <summary>\r\n    /// 计算总动能\r\n    /// </summary>\r\n    private void CalculateTotalKineticEnergy()\r\n    {\r\n        totalKineticEnergy = 0f;\r\n        \r\n        foreach (var rigidbody in physicsObjects)\r\n        {\r\n            if (rigidbody != null)\r\n            {\r\n                // 平移动能\r\n                float linearKE = 0.5f * rigidbody.mass * rigidbody.velocity.sqrMagnitude;\r\n                \r\n                // 转动动能\r\n                float angularKE = 0.5f * rigidbody.mass * rigidbody.angularVelocity.sqrMagnitude;\r\n                \r\n                totalKineticEnergy += linearKE + angularKE;\r\n            }\r\n        }\r\n    }\r\n    \r\n    /// <summary>\r\n    /// 获取物理信息\r\n    /// </summary>\r\n    public void GetPhysicsInfo()\r\n    {\r\n        Debug.Log(\"=== 物理系统信息 ===\");\r\n        Debug.Log($\"物理启用: {enablePhysics}\");\r\n        Debug.Log($\"重力: {Physics.gravity}\");\r\n        Debug.Log($\"物理模拟: {isSimulating}\");\r\n        Debug.Log($\"模拟时间: {simulationTime:F2}s\");\r\n        Debug.Log($\"活跃对象: {activeObjects}\");\r\n        Debug.Log($\"总动能: {totalKineticEnergy:F2}\");\r\n        Debug.Log($\"最大对象数: {maxPhysicsObjects}\");\r\n        Debug.Log($\"碰撞检测: {enableCollisionDetection}\");\r\n        Debug.Log($\"碰撞半径: {collisionRadius}\");\r\n        \r\n        // 物理设置信息\r\n        Debug.Log($\"默认求解器迭代次数: {Physics.defaultSolverIterations}\");\r\n        Debug.Log($\"默认求解器速度迭代次数: {Physics.defaultSolverVelocityIterations}\");\r\n        Debug.Log($\"默认接触偏移: {Physics.defaultContactOffset}\");\r\n        Debug.Log($\"默认睡眠阈值: {Physics.sleepThreshold}\");\r\n        Debug.Log($\"默认最大角速度: {Physics.defaultMaxAngularSpeed}\");\r\n    }\r\n    \r\n    /// <summary>\r\n    /// 重置物理系统\r\n    /// </summary>\r\n    public void ResetPhysicsSystem()\r\n    {\r\n        // 重置物理参数\r\n        gravity = -9.81f;\r\n        Physics.gravity = new Vector3(0, gravity, 0);\r\n        \r\n        // 重置对象参数\r\n        bounceForce = 10f;\r\n        dragForce = 0.5f;\r\n        angularDrag = 0.05f;\r\n        useGravity = true;\r\n        \r\n        // 重新配置所有对象\r\n        foreach (var rigidbody in physicsObjects)\r\n        {\r\n            if (rigidbody != null)\r\n            {\r\n                ConfigureRigidbody(rigidbody);\r\n            }\r\n        }\r\n        \r\n        Debug.Log(\"物理系统已重置\");\r\n    }\r\n    \r\n    private void Update()\r\n    {\r\n        // 更新物理状态\r\n        if (isSimulating)\r\n        {\r\n            simulationTime += Time.deltaTime;\r\n        }\r\n        \r\n        // 计算总动能\r\n        CalculateTotalKineticEnergy();\r\n        \r\n        // 更新活跃对象数量\r\n        activeObjects = 0;\r\n        foreach (var rigidbody in physicsObjects)\r\n        {\r\n            if (rigidbody != null && rigidbody.gameObject.activeInHierarchy)\r\n            {\r\n                activeObjects++;\r\n            }\r\n        }\r\n    }\r\n    \r\n    private void OnCollisionEnter(Collision collision)\r\n    {\r\n        Debug.Log($\"碰撞进入: {collision.gameObject.name}\");\r\n        onCollisionEnter?.Invoke(collision);\r\n    }\r\n    \r\n    private void OnCollisionExit(Collision collision)\r\n    {\r\n        Debug.Log($\"碰撞离开: {collision.gameObject.name}\");\r\n        onCollisionExit?.Invoke(collision);\r\n    }\r\n    \r\n    private void OnTriggerEnter(Collider other)\r\n    {\r\n        Debug.Log($\"触发器进入: {other.gameObject.name}\");\r\n        onTriggerEnter?.Invoke(other);\r\n    }\r\n    \r\n    private void OnTriggerExit(Collider other)\r\n    {\r\n        Debug.Log($\"触发器离开: {other.gameObject.name}\");\r\n        onTriggerExit?.Invoke(other);\r\n    }\r\n    \r\n    private void OnGUI()\r\n    {\r\n        // 简单的GUI界面用于测试\r\n        GUILayout.BeginArea(new Rect(10, 10, 400, 600));\r\n        GUILayout.Label(\"物理系统演示\", EditorStyles.boldLabel);\r\n        \r\n        GUILayout.Space(10);\r\n        \r\n        // 物理状态\r\n        GUILayout.Label($\"物理模拟: {isSimulating}\");\r\n        GUILayout.Label($\"活跃对象: {activeObjects}\");\r\n        GUILayout.Label($\"总动能: {totalKineticEnergy:F2}\");\r\n        GUILayout.Label($\"重力: {gravity:F2}\");\r\n        \r\n        GUILayout.Space(10);\r\n        \r\n        // 控制按钮\r\n        if (GUILayout.Button(\"添加物理对象\"))\r\n        {\r\n            Vector3 position = spawnPoint != null ? spawnPoint.position : transform.position;\r\n            AddPhysicsObject(position);\r\n        }\r\n        \r\n        if (GUILayout.Button(\"清除所有对象\"))\r\n        {\r\n            ClearPhysicsObjects();\r\n        }\r\n        \r\n        if (GUILayout.Button(\"应用爆炸力\"))\r\n        {\r\n            ApplyExplosionForce(transform.position, 1000f, 10f);\r\n        }\r\n        \r\n        if (GUILayout.Button(\"应用随机力\"))\r\n        {\r\n            ApplyForceToAll(500f, ForceMode.Impulse);\r\n        }\r\n        \r\n        GUILayout.Space(10);\r\n        \r\n        // 设置选项\r\n        isSimulating = GUILayout.Toggle(isSimulating, \"物理模拟\");\r\n        if (GUILayout.Button(\"设置物理模拟\"))\r\n        {\r\n            SetPhysicsSimulation(isSimulating);\r\n        }\r\n        \r\n        GUILayout.Label($\"重力: {gravity:F2}\");\r\n        gravity = GUILayout.HorizontalSlider(gravity, -20f, 0f);\r\n        if (GUILayout.Button(\"设置重力\"))\r\n        {\r\n            SetGravity(gravity);\r\n        }\r\n        \r\n        GUILayout.Space(10);\r\n        \r\n        if (GUILayout.Button(\"获取物理信息\"))\r\n        {\r\n            GetPhysicsInfo();\r\n        }\r\n        \r\n        if (GUILayout.Button(\"重置物理系统\"))\r\n        {\r\n            ResetPhysicsSystem();\r\n        }\r\n        \r\n        GUILayout.EndArea();\r\n    }\r\n    \r\n    private void OnDrawGizmos()\r\n    {\r\n        // 绘制碰撞检测范围\r\n        if (enableCollisionDetection)\r\n        {\r\n            Gizmos.color = Color.yellow;\r\n            Gizmos.DrawWireSphere(transform.position + collisionCenter, collisionRadius);\r\n        }\r\n        \r\n        // 绘制生成点\r\n        if (spawnPoint != null)\r\n        {\r\n            Gizmos.color = Color.green;\r\n            Gizmos.DrawWireSphere(spawnPoint.position, 0.5f);\r\n        }\r\n    }\r\n} "
        }
    ]
}