{
    "sourceFile": "Assets/UnityEditor/Chapter 7 EditorPrefs/AssetModificationProcessor/README.md",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 1,
            "patches": [
                {
                    "date": 1746900007964,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1746900164705,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -222,5 +222,5 @@\n ## 相关资源\r\n - [Unity文档: AssetModificationProcessor](https://docs.unity3d.com/ScriptReference/AssetModificationProcessor.html)\r\n - [Unity文档: AssetDatabase](https://docs.unity3d.com/ScriptReference/AssetDatabase.html)\r\n - [Unity文档: EditorUtility](https://docs.unity3d.com/ScriptReference/EditorUtility.html)\r\n-- [Unity文档: File I/O](https://docs.microsoft.com/en-us/dotnet/api/system.io.file)\n\\ No newline at end of file\n+- [Unity文档: File I/O](https://docs.microsoft.com/en-us/dotnet/api/system.io.file)\r\n"
                }
            ],
            "date": 1746900007964,
            "name": "Commit-0",
            "content": "# AssetModificationProcessor 模块\r\n\r\n## 概述\r\nAssetModificationProcessor 模块提供了一套用于监控和干预Unity资源修改流程的工具。通过继承Unity内置的AssetModificationProcessor类，可以在资源创建、移动、删除和保存等操作前后插入自定义逻辑，实现对资源变更的监控、验证和自动化处理。该模块展示了如何为新创建的脚本自动添加统一的头部注释模板，以及如何在移动包含脚本的文件夹时进行确认提示，帮助团队维护项目资源的一致性和规范性。\r\n\r\n## 核心功能\r\n- **资源创建干预**：在创建新资源时执行自定义逻辑\r\n- **资源移动监控**：在移动资源前进行确认和验证\r\n- **代码规范自动化**：为新创建的脚本文件自动添加统一的头部注释\r\n- **资源操作验证**：对资源操作进行验证和确认，防止误操作\r\n\r\n## 重要接口和类\r\n\r\n### `AssetModificationProcessor` 类\r\nUnity内置的资源修改监听基类，提供各种资源操作的回调方法。\r\n\r\n| 静态方法 | 说明 |\r\n|---------|------|\r\n| `OnWillCreateAsset(string path)` | 在资产创建前调用，可用于修改新创建的资产内容 |\r\n| `OnWillMoveAsset(string sourcePath, string destinationPath)` | 在资产移动前调用，可用于验证移动操作或提供自定义移动逻辑 |\r\n| `OnWillDeleteAsset(string assetPath, RemoveAssetOptions options)` | 在资产删除前调用，可用于验证删除操作 |\r\n| `OnWillSaveAssets(string[] paths)` | 在资产保存前调用，可用于修改将要保存的资产内容 |\r\n\r\n### `ScriptsHeader` 类\r\n实现了自动为新创建的脚本文件添加统一头部注释的功能。\r\n\r\n| 静态方法 | 说明 |\r\n|---------|------|\r\n| `OnWillCreateAsset(string path)` | 重写基类方法，在脚本文件创建时自动添加头部注释模板 |\r\n\r\n### `OnWillMoveAssetPrompt` 类\r\n实现了在移动包含脚本的文件夹时进行确认提示的功能。\r\n\r\n| 静态方法 | 说明 |\r\n|---------|------|\r\n| `OnWillMoveAsset(string sourcePath, string destinationPath)` | 重写基类方法，在移动包含脚本的文件夹时弹出确认对话框 |\r\n\r\n## UML类图\r\n\r\n```\r\n+-----------------------------+\r\n| UnityEditor.AssetModification|\r\n|         Processor           |\r\n+-----------------------------+\r\n| +OnWillCreateAsset()        |\r\n| +OnWillMoveAsset()          |\r\n| +OnWillDeleteAsset()        |\r\n| +OnWillSaveAssets()         |\r\n+-----------------------------+\r\n           ^\r\n           |\r\n+-----------------------------+    +-----------------------------+\r\n|       ScriptsHeader         |    |   OnWillMoveAssetPrompt    |\r\n+-----------------------------+    +-----------------------------+\r\n| -author: string             |    | +OnWillMoveAsset()         |\r\n| -email: string              |    |                            |\r\n| -firstVersion: string       |    |                            |\r\n| +OnWillCreateAsset()        |    |                            |\r\n+-----------------------------+    +-----------------------------+\r\n```\r\n\r\n## 资源修改流程图\r\n\r\n```\r\nUnity编辑器 --> 触发资源操作 --> AssetModificationProcessor拦截 --> 执行自定义逻辑 --> 返回操作结果 --> Unity继续或取消操作\r\n```\r\n\r\n## 思维导图\r\n\r\n```\r\nAssetModificationProcessor\r\n├── 资源操作拦截点\r\n│   ├── 创建资源 (OnWillCreateAsset)\r\n│   │   └── 脚本文件头部注释添加\r\n│   ├── 移动资源 (OnWillMoveAsset)\r\n│   │   └── 包含脚本的文件夹移动确认\r\n│   ├── 删除资源 (OnWillDeleteAsset)\r\n│   │   └── 重要资源删除验证\r\n│   └── 保存资源 (OnWillSaveAssets)\r\n│       └── 保存前资源内容修改\r\n├── 应用场景\r\n│   ├── 代码规范强制执行\r\n│   │   ├── 统一头部注释\r\n│   │   └── 命名规范验证\r\n│   ├── 资源管理安全\r\n│   │   ├── 重要资源保护\r\n│   │   └── 操作确认机制\r\n│   ├── 工作流程自动化\r\n│   │   ├── 自动元数据生成\r\n│   │   └── 依赖关系维护\r\n│   └── 团队协作支持\r\n│       ├── 资源变更记录\r\n│       └── 冲突预防机制\r\n└── 实现技术\r\n    ├── 静态方法回调\r\n    ├── 文件IO操作\r\n    └── 编辑器UI交互\r\n```\r\n\r\n## 应用场景\r\n1. **代码规范自动化**：自动为新创建的脚本添加统一的头部注释、版权信息和作者信息\r\n2. **资源命名规范检查**：在资源创建或重命名时验证是否符合团队的命名规范\r\n3. **重要资源保护**：防止意外删除或移动关键资源，如主场景、配置文件等\r\n4. **资源变更日志**：自动记录项目中资源的创建、修改、移动和删除操作\r\n5. **自动化导入处理**：与AssetPostprocessor配合，实现完整的资源生命周期管理\r\n\r\n## 最佳实践\r\n1. **轻量级处理**：在回调方法中避免执行耗时操作，以免影响编辑器性能\r\n2. **精确目标资源**：只对特定类型或路径的资源应用处理逻辑，避免过度干预\r\n3. **提供操作反馈**：在执行自动化操作时，为用户提供清晰的反馈和日志\r\n4. **妥善处理异常**：添加适当的错误处理，避免因处理器异常导致编辑器操作中断\r\n5. **保持向后兼容**：考虑项目演进过程中的向后兼容性，避免破坏现有资源结构\r\n\r\n## 扩展示例\r\n以下是一个扩展示例，用于在删除重要资源时进行确认和记录：\r\n\r\n```csharp\r\npublic class ImportantAssetProtector : AssetModificationProcessor\r\n{\r\n    // 定义重要资源路径列表\r\n    private static readonly string[] importantPaths = new string[]\r\n    {\r\n        \"Assets/Scenes/Main.unity\",\r\n        \"Assets/Resources/GameConfig.asset\",\r\n        \"Assets/Scripts/Core\"\r\n    };\r\n    \r\n    public static AssetDeleteResult OnWillDeleteAsset(string assetPath, RemoveAssetOptions options)\r\n    {\r\n        // 检查是否为重要资源\r\n        foreach (string path in importantPaths)\r\n        {\r\n            if (assetPath == path || assetPath.StartsWith(path + \"/\"))\r\n            {\r\n                // 记录删除尝试\r\n                Debug.LogWarning($\"尝试删除重要资源: {assetPath}\");\r\n                \r\n                // 弹出确认对话框\r\n                bool confirmDelete = EditorUtility.DisplayDialog(\r\n                    \"警告\",\r\n                    $\"您正在删除重要资源: {assetPath}\\n此操作可能会影响项目的正常运行。确定要继续吗？\",\r\n                    \"确认删除\",\r\n                    \"取消\"\r\n                );\r\n                \r\n                if (!confirmDelete)\r\n                {\r\n                    return AssetDeleteResult.FailedDelete;\r\n                }\r\n                \r\n                // 记录已确认的删除操作\r\n                Debug.Log($\"已确认删除重要资源: {assetPath}\");\r\n                \r\n                // 可以在这里添加删除记录到外部日志或通知系统\r\n                \r\n                break;\r\n            }\r\n        }\r\n        \r\n        // 允许删除\r\n        return AssetDeleteResult.DidNotDelete;\r\n    }\r\n}\r\n```\r\n\r\n## 代码示例\r\n```csharp\r\n// 自动为所有保存的C#脚本添加或更新最后修改时间\r\npublic class ScriptUpdateTracker : AssetModificationProcessor\r\n{\r\n    private static string[] OnWillSaveAssets(string[] paths)\r\n    {\r\n        foreach (string path in paths)\r\n        {\r\n            if (!path.EndsWith(\".cs\"))\r\n                continue;\r\n                \r\n            string fullPath = Path.Combine(Directory.GetCurrentDirectory(), path);\r\n            if (!File.Exists(fullPath))\r\n                continue;\r\n                \r\n            string content = File.ReadAllText(fullPath);\r\n            \r\n            // 查找和更新最后修改时间注释\r\n            string timeStamp = System.DateTime.Now.ToString(\"yyyy-MM-dd HH:mm:ss\");\r\n            string pattern = @\"// Last Modified: .*\";\r\n            string replacement = $\"// Last Modified: {timeStamp}\";\r\n            \r\n            if (System.Text.RegularExpressions.Regex.IsMatch(content, pattern))\r\n            {\r\n                // 更新现有的时间戳\r\n                content = System.Text.RegularExpressions.Regex.Replace(content, pattern, replacement);\r\n            }\r\n            else\r\n            {\r\n                // 添加新的时间戳在第一个非空行后面\r\n                string[] lines = content.Split(new[] { \"\\r\\n\", \"\\r\", \"\\n\" }, StringSplitOptions.None);\r\n                int insertIndex = 0;\r\n                \r\n                for (int i = 0; i < lines.Length; i++)\r\n                {\r\n                    if (!string.IsNullOrWhiteSpace(lines[i]))\r\n                    {\r\n                        insertIndex = i + 1;\r\n                        break;\r\n                    }\r\n                }\r\n                \r\n                List<string> newLines = new List<string>(lines);\r\n                newLines.Insert(insertIndex, replacement);\r\n                content = string.Join(Environment.NewLine, newLines);\r\n            }\r\n            \r\n            File.WriteAllText(fullPath, content);\r\n        }\r\n        \r\n        return paths;\r\n    }\r\n}\r\n```\r\n\r\n## 相关资源\r\n- [Unity文档: AssetModificationProcessor](https://docs.unity3d.com/ScriptReference/AssetModificationProcessor.html)\r\n- [Unity文档: AssetDatabase](https://docs.unity3d.com/ScriptReference/AssetDatabase.html)\r\n- [Unity文档: EditorUtility](https://docs.unity3d.com/ScriptReference/EditorUtility.html)\r\n- [Unity文档: File I/O](https://docs.microsoft.com/en-us/dotnet/api/system.io.file)"
        }
    ]
}