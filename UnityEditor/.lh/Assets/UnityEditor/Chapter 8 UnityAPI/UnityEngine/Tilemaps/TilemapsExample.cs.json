{
    "sourceFile": "Assets/UnityEditor/Chapter 8 UnityAPI/UnityEngine/Tilemaps/TilemapsExample.cs",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1750937847915,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1750937847915,
            "name": "Commit-0",
            "content": "using UnityEngine;\r\nusing UnityEngine.Tilemaps;\r\nusing System.Collections.Generic;\r\n\r\nnamespace UnityEditor.Chapter8.Tilemaps\r\n{\r\n    /// <summary>\r\n    /// UnityEngine.Tilemaps 瓦片地图系统案例\r\n    /// 演示Tilemap、Tile、TileBase、瓦片地图操作等功能\r\n    /// </summary>\r\n    public class TilemapsExample : MonoBehaviour\r\n    {\r\n        [Header(\"瓦片地图设置\")]\r\n        [SerializeField] private Grid grid;\r\n        [SerializeField] private Tilemap tilemap;\r\n        [SerializeField] private TilemapRenderer tilemapRenderer;\r\n        \r\n        [Header(\"瓦片资源\")]\r\n        [SerializeField] private List<TileBase> tiles = new List<TileBase>();\r\n        [SerializeField] private TileBase currentTile;\r\n        [SerializeField] private int currentTileIndex = 0;\r\n        \r\n        [Header(\"地图操作\")]\r\n        [SerializeField] private Vector3Int mapSize = new Vector3Int(20, 20, 1);\r\n        [SerializeField] private Vector3Int currentPosition = Vector3Int.zero;\r\n        [SerializeField] private bool showGrid = true;\r\n        [SerializeField] private bool showTilemap = true;\r\n        \r\n        [Header(\"绘制设置\")]\r\n        [SerializeField] private bool isDrawing = false;\r\n        [SerializeField] private bool isErasing = false;\r\n        [SerializeField] private Vector3Int brushSize = Vector3Int.one;\r\n        \r\n        [Header(\"地图生成\")]\r\n        [SerializeField] private bool autoGenerate = false;\r\n        [SerializeField] private float noiseScale = 0.1f;\r\n        [SerializeField] private float noiseThreshold = 0.5f;\r\n        \r\n        [Header(\"UI控制\")]\r\n        [SerializeField] private bool showControls = true;\r\n        \r\n        private Vector3Int lastMousePosition;\r\n        private bool isMouseDown = false;\r\n        \r\n        private void Start()\r\n        {\r\n            InitializeTilemapComponents();\r\n        }\r\n        \r\n        /// <summary>\r\n        /// 初始化瓦片地图组件\r\n        /// </summary>\r\n        private void InitializeTilemapComponents()\r\n        {\r\n            // 获取或创建Grid\r\n            if (grid == null)\r\n            {\r\n                grid = GetComponent<Grid>();\r\n                if (grid == null)\r\n                {\r\n                    grid = gameObject.AddComponent<Grid>();\r\n                }\r\n            }\r\n            \r\n            // 获取或创建Tilemap\r\n            if (tilemap == null)\r\n            {\r\n                tilemap = GetComponentInChildren<Tilemap>();\r\n                if (tilemap == null)\r\n                {\r\n                    GameObject tilemapObject = new GameObject(\"Tilemap\");\r\n                    tilemapObject.transform.SetParent(transform);\r\n                    tilemap = tilemapObject.AddComponent<Tilemap>();\r\n                    tilemapRenderer = tilemapObject.AddComponent<TilemapRenderer>();\r\n                }\r\n            }\r\n            \r\n            // 获取TilemapRenderer\r\n            if (tilemapRenderer == null)\r\n            {\r\n                tilemapRenderer = tilemap.GetComponent<TilemapRenderer>();\r\n            }\r\n            \r\n            // 设置初始属性\r\n            SetupGrid();\r\n            SetupTilemap();\r\n            \r\n            // 设置当前瓦片\r\n            if (tiles.Count > 0)\r\n            {\r\n                currentTile = tiles[0];\r\n            }\r\n        }\r\n        \r\n        /// <summary>\r\n        /// 设置Grid属性\r\n        /// </summary>\r\n        private void SetupGrid()\r\n        {\r\n            if (grid != null)\r\n            {\r\n                grid.cellSize = Vector3.one;\r\n                grid.cellGap = Vector3.zero;\r\n                grid.cellSwizzle = GridLayout.CellSwizzle.XYZ;\r\n            }\r\n        }\r\n        \r\n        /// <summary>\r\n        /// 设置Tilemap属性\r\n        /// </summary>\r\n        private void SetupTilemap()\r\n        {\r\n            if (tilemap != null)\r\n            {\r\n                tilemap.tileAnchor = Vector3.zero;\r\n                tilemap.orientation = Tilemap.Orientation.XY;\r\n            }\r\n            \r\n            if (tilemapRenderer != null)\r\n            {\r\n                tilemapRenderer.sortingOrder = 0;\r\n                tilemapRenderer.mode = TilemapRenderer.Mode.Chunk;\r\n            }\r\n        }\r\n        \r\n        /// <summary>\r\n        /// 在指定位置放置瓦片\r\n        /// </summary>\r\n        public void PlaceTile(Vector3Int position, TileBase tile)\r\n        {\r\n            if (tilemap != null && tile != null)\r\n            {\r\n                tilemap.SetTile(position, tile);\r\n                Debug.Log($\"在位置 {position} 放置瓦片: {tile.name}\");\r\n            }\r\n        }\r\n        \r\n        /// <summary>\r\n        /// 在指定位置移除瓦片\r\n        /// </summary>\r\n        public void RemoveTile(Vector3Int position)\r\n        {\r\n            if (tilemap != null)\r\n            {\r\n                tilemap.SetTile(position, null);\r\n                Debug.Log($\"移除位置 {position} 的瓦片\");\r\n            }\r\n        }\r\n        \r\n        /// <summary>\r\n        /// 获取指定位置的瓦片\r\n        /// </summary>\r\n        public TileBase GetTile(Vector3Int position)\r\n        {\r\n            if (tilemap != null)\r\n            {\r\n                return tilemap.GetTile(position);\r\n            }\r\n            return null;\r\n        }\r\n        \r\n        /// <summary>\r\n        /// 清除整个地图\r\n        /// </summary>\r\n        public void ClearMap()\r\n        {\r\n            if (tilemap != null)\r\n            {\r\n                tilemap.ClearAllTiles();\r\n                Debug.Log(\"地图已清空\");\r\n            }\r\n        }\r\n        \r\n        /// <summary>\r\n        /// 填充矩形区域\r\n        /// </summary>\r\n        public void FillRectangle(Vector3Int start, Vector3Int end, TileBase tile)\r\n        {\r\n            if (tilemap != null && tile != null)\r\n            {\r\n                Vector3Int min = Vector3Int.Min(start, end);\r\n                Vector3Int max = Vector3Int.Max(start, end);\r\n                \r\n                for (int x = min.x; x <= max.x; x++)\r\n                {\r\n                    for (int y = min.y; y <= max.y; y++)\r\n                    {\r\n                        for (int z = min.z; z <= max.z; z++)\r\n                        {\r\n                            tilemap.SetTile(new Vector3Int(x, y, z), tile);\r\n                        }\r\n                    }\r\n                }\r\n                \r\n                Debug.Log($\"填充矩形区域: {min} 到 {max}\");\r\n            }\r\n        }\r\n        \r\n        /// <summary>\r\n        /// 绘制圆形区域\r\n        /// </summary>\r\n        public void FillCircle(Vector3Int center, int radius, TileBase tile)\r\n        {\r\n            if (tilemap != null && tile != null)\r\n            {\r\n                for (int x = center.x - radius; x <= center.x + radius; x++)\r\n                {\r\n                    for (int y = center.y - radius; y <= center.y + radius; y++)\r\n                    {\r\n                        Vector3Int pos = new Vector3Int(x, y, center.z);\r\n                        float distance = Vector3Int.Distance(center, pos);\r\n                        \r\n                        if (distance <= radius)\r\n                        {\r\n                            tilemap.SetTile(pos, tile);\r\n                        }\r\n                    }\r\n                }\r\n                \r\n                Debug.Log($\"绘制圆形区域: 中心 {center}, 半径 {radius}\");\r\n            }\r\n        }\r\n        \r\n        /// <summary>\r\n        /// 生成随机地图\r\n        /// </summary>\r\n        public void GenerateRandomMap()\r\n        {\r\n            if (tilemap != null && tiles.Count > 0)\r\n            {\r\n                ClearMap();\r\n                \r\n                for (int x = 0; x < mapSize.x; x++)\r\n                {\r\n                    for (int y = 0; y < mapSize.y; y++)\r\n                    {\r\n                        Vector3Int pos = new Vector3Int(x, y, 0);\r\n                        int randomIndex = Random.Range(0, tiles.Count);\r\n                        tilemap.SetTile(pos, tiles[randomIndex]);\r\n                    }\r\n                }\r\n                \r\n                Debug.Log($\"生成随机地图: {mapSize.x} x {mapSize.y}\");\r\n            }\r\n        }\r\n        \r\n        /// <summary>\r\n        /// 使用噪声生成地图\r\n        /// </summary>\r\n        public void GenerateNoiseMap()\r\n        {\r\n            if (tilemap != null && tiles.Count >= 2)\r\n            {\r\n                ClearMap();\r\n                \r\n                for (int x = 0; x < mapSize.x; x++)\r\n                {\r\n                    for (int y = 0; y < mapSize.y; y++)\r\n                    {\r\n                        Vector3Int pos = new Vector3Int(x, y, 0);\r\n                        float noise = Mathf.PerlinNoise(x * noiseScale, y * noiseScale);\r\n                        \r\n                        TileBase tile = noise > noiseThreshold ? tiles[0] : tiles[1];\r\n                        tilemap.SetTile(pos, tile);\r\n                    }\r\n                }\r\n                \r\n                Debug.Log($\"使用噪声生成地图: 阈值 {noiseThreshold}\");\r\n            }\r\n        }\r\n        \r\n        /// <summary>\r\n        /// 切换瓦片\r\n        /// </summary>\r\n        public void NextTile()\r\n        {\r\n            if (tiles.Count > 0)\r\n            {\r\n                currentTileIndex = (currentTileIndex + 1) % tiles.Count;\r\n                currentTile = tiles[currentTileIndex];\r\n                Debug.Log($\"切换到瓦片: {currentTileIndex + 1}/{tiles.Count}\");\r\n            }\r\n        }\r\n        \r\n        /// <summary>\r\n        /// 上一个瓦片\r\n        /// </summary>\r\n        public void PreviousTile()\r\n        {\r\n            if (tiles.Count > 0)\r\n            {\r\n                currentTileIndex = (currentTileIndex - 1 + tiles.Count) % tiles.Count;\r\n                currentTile = tiles[currentTileIndex];\r\n                Debug.Log($\"切换到瓦片: {currentTileIndex + 1}/{tiles.Count}\");\r\n            }\r\n        }\r\n        \r\n        /// <summary>\r\n        /// 设置当前瓦片\r\n        /// </summary>\r\n        public void SetCurrentTile(int index)\r\n        {\r\n            if (index >= 0 && index < tiles.Count)\r\n            {\r\n                currentTileIndex = index;\r\n                currentTile = tiles[index];\r\n                Debug.Log($\"设置当前瓦片: {index + 1}/{tiles.Count}\");\r\n            }\r\n        }\r\n        \r\n        /// <summary>\r\n        /// 切换绘制模式\r\n        /// </summary>\r\n        public void ToggleDrawing()\r\n        {\r\n            isDrawing = !isDrawing;\r\n            isErasing = false;\r\n            Debug.Log($\"绘制模式: {(isDrawing ? \"开启\" : \"关闭\")}\");\r\n        }\r\n        \r\n        /// <summary>\r\n        /// 切换擦除模式\r\n        /// </summary>\r\n        public void ToggleErasing()\r\n        {\r\n            isErasing = !isErasing;\r\n            isDrawing = false;\r\n            Debug.Log($\"擦除模式: {(isErasing ? \"开启\" : \"关闭\")}\");\r\n        }\r\n        \r\n        /// <summary>\r\n        /// 设置画笔大小\r\n        /// </summary>\r\n        public void SetBrushSize(Vector3Int size)\r\n        {\r\n            brushSize = size;\r\n            Debug.Log($\"画笔大小设置为: {brushSize}\");\r\n        }\r\n        \r\n        /// <summary>\r\n        /// 获取地图信息\r\n        /// </summary>\r\n        public void GetMapInfo()\r\n        {\r\n            if (tilemap != null)\r\n            {\r\n                BoundsInt bounds = tilemap.cellBounds;\r\n                Debug.Log(\"=== 地图信息 ===\");\r\n                Debug.Log($\"地图边界: {bounds}\");\r\n                Debug.Log($\"地图大小: {bounds.size}\");\r\n                Debug.Log($\"瓦片数量: {tilemap.GetUsedTilesCount()}\");\r\n                Debug.Log($\"当前瓦片: {(currentTile != null ? currentTile.name : \"无\")}\");\r\n            }\r\n        }\r\n        \r\n        /// <summary>\r\n        /// 保存地图数据\r\n        /// </summary>\r\n        public void SaveMapData()\r\n        {\r\n            if (tilemap != null)\r\n            {\r\n                // 这里可以实现地图数据的序列化保存\r\n                Debug.Log(\"地图数据保存功能待实现\");\r\n            }\r\n        }\r\n        \r\n        /// <summary>\r\n        /// 加载地图数据\r\n        /// </summary>\r\n        public void LoadMapData()\r\n        {\r\n            if (tilemap != null)\r\n            {\r\n                // 这里可以实现地图数据的反序列化加载\r\n                Debug.Log(\"地图数据加载功能待实现\");\r\n            }\r\n        }\r\n        \r\n        /// <summary>\r\n        /// 世界坐标转换为瓦片坐标\r\n        /// </summary>\r\n        public Vector3Int WorldToCell(Vector3 worldPosition)\r\n        {\r\n            if (grid != null)\r\n            {\r\n                return grid.WorldToCell(worldPosition);\r\n            }\r\n            return Vector3Int.zero;\r\n        }\r\n        \r\n        /// <summary>\r\n        /// 瓦片坐标转换为世界坐标\r\n        /// </summary>\r\n        public Vector3 CellToWorld(Vector3Int cellPosition)\r\n        {\r\n            if (grid != null)\r\n            {\r\n                return grid.CellToWorld(cellPosition);\r\n            }\r\n            return Vector3.zero;\r\n        }\r\n        \r\n        private void Update()\r\n        {\r\n            HandleMouseInput();\r\n            \r\n            if (autoGenerate && Input.GetKeyDown(KeyCode.G))\r\n            {\r\n                GenerateRandomMap();\r\n            }\r\n        }\r\n        \r\n        /// <summary>\r\n        /// 处理鼠标输入\r\n        /// </summary>\r\n        private void HandleMouseInput()\r\n        {\r\n            if (Camera.main == null) return;\r\n            \r\n            Vector3 mouseWorldPos = Camera.main.ScreenToWorldPoint(Input.mousePosition);\r\n            Vector3Int mouseCellPos = WorldToCell(mouseWorldPos);\r\n            \r\n            // 鼠标按下\r\n            if (Input.GetMouseButtonDown(0))\r\n            {\r\n                isMouseDown = true;\r\n                lastMousePosition = mouseCellPos;\r\n                \r\n                if (isDrawing && currentTile != null)\r\n                {\r\n                    PlaceTile(mouseCellPos, currentTile);\r\n                }\r\n                else if (isErasing)\r\n                {\r\n                    RemoveTile(mouseCellPos);\r\n                }\r\n            }\r\n            \r\n            // 鼠标拖拽\r\n            if (isMouseDown && mouseCellPos != lastMousePosition)\r\n            {\r\n                if (isDrawing && currentTile != null)\r\n                {\r\n                    PlaceTile(mouseCellPos, currentTile);\r\n                }\r\n                else if (isErasing)\r\n                {\r\n                    RemoveTile(mouseCellPos);\r\n                }\r\n                \r\n                lastMousePosition = mouseCellPos;\r\n            }\r\n            \r\n            // 鼠标释放\r\n            if (Input.GetMouseButtonUp(0))\r\n            {\r\n                isMouseDown = false;\r\n            }\r\n            \r\n            currentPosition = mouseCellPos;\r\n        }\r\n        \r\n        private void OnGUI()\r\n        {\r\n            if (!showControls) return;\r\n            \r\n            GUILayout.BeginArea(new Rect(10, 10, 400, 700));\r\n            GUILayout.Label(\"UnityEngine.Tilemaps 瓦片地图系统案例\", EditorStyles.boldLabel);\r\n            \r\n            GUILayout.Space(10);\r\n            \r\n            // 瓦片选择\r\n            GUILayout.Label(\"瓦片选择\", EditorStyles.boldLabel);\r\n            GUILayout.BeginHorizontal();\r\n            if (GUILayout.Button(\"上一个瓦片\")) PreviousTile();\r\n            if (GUILayout.Button(\"下一个瓦片\")) NextTile();\r\n            GUILayout.EndHorizontal();\r\n            \r\n            GUILayout.Label($\"当前瓦片: {currentTileIndex + 1}/{tiles.Count}\");\r\n            if (currentTile != null)\r\n            {\r\n                GUILayout.Label($\"瓦片名称: {currentTile.name}\");\r\n            }\r\n            \r\n            GUILayout.Space(10);\r\n            \r\n            // 绘制控制\r\n            GUILayout.Label(\"绘制控制\", EditorStyles.boldLabel);\r\n            GUILayout.BeginHorizontal();\r\n            if (GUILayout.Button($\"绘制模式: {(isDrawing ? \"开启\" : \"关闭\")}\"))\r\n            {\r\n                ToggleDrawing();\r\n            }\r\n            if (GUILayout.Button($\"擦除模式: {(isErasing ? \"开启\" : \"关闭\")}\"))\r\n            {\r\n                ToggleErasing();\r\n            }\r\n            GUILayout.EndHorizontal();\r\n            \r\n            GUILayout.Space(10);\r\n            \r\n            // 地图操作\r\n            GUILayout.Label(\"地图操作\", EditorStyles.boldLabel);\r\n            if (GUILayout.Button(\"清空地图\"))\r\n            {\r\n                ClearMap();\r\n            }\r\n            \r\n            GUILayout.BeginHorizontal();\r\n            if (GUILayout.Button(\"随机生成\")) GenerateRandomMap();\r\n            if (GUILayout.Button(\"噪声生成\")) GenerateNoiseMap();\r\n            GUILayout.EndHorizontal();\r\n            \r\n            GUILayout.Space(10);\r\n            \r\n            // 区域填充\r\n            GUILayout.Label(\"区域填充\", EditorStyles.boldLabel);\r\n            if (GUILayout.Button(\"填充矩形区域\"))\r\n            {\r\n                Vector3Int start = new Vector3Int(0, 0, 0);\r\n                Vector3Int end = new Vector3Int(5, 5, 0);\r\n                FillRectangle(start, end, currentTile);\r\n            }\r\n            \r\n            if (GUILayout.Button(\"绘制圆形区域\"))\r\n            {\r\n                Vector3Int center = new Vector3Int(10, 10, 0);\r\n                FillCircle(center, 5, currentTile);\r\n            }\r\n            \r\n            GUILayout.Space(10);\r\n            \r\n            // 地图设置\r\n            GUILayout.Label(\"地图设置\", EditorStyles.boldLabel);\r\n            \r\n            Vector3Int newMapSize = mapSize;\r\n            newMapSize.x = (int)GUILayout.HorizontalSlider(newMapSize.x, 5, 50);\r\n            newMapSize.y = (int)GUILayout.HorizontalSlider(newMapSize.y, 5, 50);\r\n            GUILayout.Label($\"地图大小: {newMapSize.x} x {newMapSize.y}\");\r\n            \r\n            if (newMapSize != mapSize)\r\n            {\r\n                mapSize = newMapSize;\r\n            }\r\n            \r\n            float newNoiseScale = GUILayout.HorizontalSlider(noiseScale, 0.01f, 1f);\r\n            if (Mathf.Abs(newNoiseScale - noiseScale) > 0.01f)\r\n            {\r\n                noiseScale = newNoiseScale;\r\n            }\r\n            GUILayout.Label($\"噪声缩放: {noiseScale:F2}\");\r\n            \r\n            float newNoiseThreshold = GUILayout.HorizontalSlider(noiseThreshold, 0f, 1f);\r\n            if (Mathf.Abs(newNoiseThreshold - noiseThreshold) > 0.01f)\r\n            {\r\n                noiseThreshold = newNoiseThreshold;\r\n            }\r\n            GUILayout.Label($\"噪声阈值: {noiseThreshold:F2}\");\r\n            \r\n            GUILayout.Space(10);\r\n            \r\n            // 画笔设置\r\n            GUILayout.Label(\"画笔设置\", EditorStyles.boldLabel);\r\n            Vector3Int newBrushSize = brushSize;\r\n            newBrushSize.x = (int)GUILayout.HorizontalSlider(newBrushSize.x, 1, 10);\r\n            newBrushSize.y = (int)GUILayout.HorizontalSlider(newBrushSize.y, 1, 10);\r\n            GUILayout.Label($\"画笔大小: {newBrushSize.x} x {newBrushSize.y}\");\r\n            \r\n            if (newBrushSize != brushSize)\r\n            {\r\n                SetBrushSize(newBrushSize);\r\n            }\r\n            \r\n            GUILayout.Space(10);\r\n            \r\n            // 信息显示\r\n            GUILayout.Label(\"信息\", EditorStyles.boldLabel);\r\n            if (GUILayout.Button(\"获取地图信息\"))\r\n            {\r\n                GetMapInfo();\r\n            }\r\n            \r\n            GUILayout.Label($\"鼠标位置: {currentPosition}\");\r\n            GUILayout.Label($\"绘制模式: {(isDrawing ? \"绘制\" : (isErasing ? \"擦除\" : \"无\"))}\");\r\n            \r\n            if (tilemap != null)\r\n            {\r\n                GUILayout.Label($\"瓦片数量: {tilemap.GetUsedTilesCount()}\");\r\n            }\r\n            \r\n            GUILayout.Space(10);\r\n            \r\n            // 快捷键提示\r\n            GUILayout.Label(\"快捷键\", EditorStyles.boldLabel);\r\n            GUILayout.Label(\"G - 随机生成地图\");\r\n            GUILayout.Label(\"鼠标左键 - 绘制/擦除\");\r\n            GUILayout.Label(\"拖拽 - 连续绘制\");\r\n            \r\n            GUILayout.EndArea();\r\n        }\r\n        \r\n        private void OnDrawGizmos()\r\n        {\r\n            if (showGrid && grid != null)\r\n            {\r\n                Gizmos.color = Color.white;\r\n                BoundsInt bounds = new BoundsInt(Vector3Int.zero, mapSize);\r\n                \r\n                for (int x = bounds.min.x; x <= bounds.max.x; x++)\r\n                {\r\n                    for (int y = bounds.min.y; y <= bounds.max.y; y++)\r\n                    {\r\n                        Vector3 worldPos = CellToWorld(new Vector3Int(x, y, 0));\r\n                        Gizmos.DrawWireCube(worldPos + Vector3.one * 0.5f, Vector3.one);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n} "
        }
    ]
}