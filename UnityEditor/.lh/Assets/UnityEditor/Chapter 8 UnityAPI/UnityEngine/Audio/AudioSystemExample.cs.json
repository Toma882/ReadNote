{
    "sourceFile": "Assets/UnityEditor/Chapter 8 UnityAPI/UnityEngine/Audio/AudioSystemExample.cs",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 5,
            "patches": [
                {
                    "date": 1750929046507,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1750929079424,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -86,9 +86,9 @@\n     {\r\n         if (audioSource == null) return;\r\n         \r\n         // 基础设置\r\n-        audioSource.volume = volume;\r\n+        audioSource.volume = volume; --\r\n         audioSource.pitch = pitch;\r\n         audioSource.loop = loop;\r\n         audioSource.playOnAwake = false;\r\n         \r\n"
                },
                {
                    "date": 1750929085330,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -86,18 +86,18 @@\n     {\r\n         if (audioSource == null) return;\r\n         \r\n         // 基础设置\r\n-        audioSource.volume = volume; --\r\n-        audioSource.pitch = pitch;\r\n-        audioSource.loop = loop;\r\n-        audioSource.playOnAwake = false;\r\n+        audioSource.volume = volume; // 音量\r\n+        audioSource.pitch = pitch; // 音调\r\n+        audioSource.loop = loop; // 是否循环\r\n+        audioSource.playOnAwake = false; // 是否在Awake时播放\r\n         \r\n         // 3D音频设置\r\n-        audioSource.rolloffMode = rolloffMode;\r\n-        audioSource.minDistance = minDistance;\r\n-        audioSource.maxDistance = maxDistance;\r\n-        audioSource.dopplerLevel = dopplerLevel;\r\n+        audioSource.rolloffMode = rolloffMode; // 衰减模式\r\n+        audioSource.minDistance = minDistance; // 最小距离\r\n+        audioSource.maxDistance = maxDistance; // 最大距离\r\n+        audioSource.dopplerLevel = dopplerLevel; // 多普勒效应\r\n         \r\n         // 空间混合设置\r\n         audioSource.spatialBlend = 1.0f; // 完全3D\r\n         \r\n"
                },
                {
                    "date": 1750929093506,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -98,14 +98,14 @@\n         audioSource.maxDistance = maxDistance; // 最大距离\r\n         audioSource.dopplerLevel = dopplerLevel; // 多普勒效应\r\n         \r\n         // 空间混合设置\r\n-        audioSource.spatialBlend = 1.0f; // 完全3D\r\n+        audioSource.spatialBlend = 1.0f; // 空间混合\r\n         \r\n         // 设置音频混合器组\r\n         if (mixerGroups != null && mixerGroups.Length > 0)\r\n         {\r\n-            audioSource.outputAudioMixerGroup = mixerGroups[0];\r\n+            audioSource.outputAudioMixerGroup = mixerGroups[0]; // 输出音频混合器组\r\n         }\r\n     }\r\n     \r\n     /// <summary>\r\n@@ -115,20 +115,20 @@\n     {\r\n         // 混响效果\r\n         if (reverbFilter == null)\r\n         {\r\n-            reverbFilter = gameObject.AddComponent<AudioReverbFilter>();\r\n-            reverbFilter.reverbPreset = AudioReverbPreset.Cave;\r\n-            reverbFilter.dryLevel = 0.0f;\r\n-            reverbFilter.roomLevel = 0.0f;\r\n-            reverbFilter.roomHFLevel = 0.0f;\r\n-            reverbFilter.roomRolloffFactor = 10.0f;\r\n-            reverbFilter.decayTime = 1.49f;\r\n-            reverbFilter.decayHFRatio = 0.83f;\r\n-            reverbFilter.reflectionsLevel = -2602.0f;\r\n-            reverbFilter.reflectionsDelay = 0.007f;\r\n-            reverbFilter.reverbLevel = 200.0f;\r\n-            reverbFilter.reverbDelay = 0.011f;\r\n+            reverbFilter = gameObject.AddComponent<AudioReverbFilter>(); //\r\n+            reverbFilter.reverbPreset = AudioReverbPreset.Cave; // 混响预设\r\n+            reverbFilter.dryLevel = 0.0f; // 干声电平\r\n+            reverbFilter.roomLevel = 0.0f; // 房间电平\r\n+            reverbFilter.roomHFLevel = 0.0f; // 高频房间电平\r\n+            reverbFilter.roomRolloffFactor = 10.0f; // 房间衰减因子\r\n+            reverbFilter.decayTime = 1.49f; // 衰减时间\r\n+            reverbFilter.decayHFRatio = 0.83f; // 高频衰减比率\r\n+            reverbFilter.reflectionsLevel = -2602.0f; // 反射电平\r\n+            reverbFilter.reflectionsDelay = 0.007f; // 反射延迟\r\n+            reverbFilter.reverbLevel = 200.0f; // 混响电平\r\n+            reverbFilter.reverbDelay = 0.011f; // 混响延迟\r\n             reverbFilter.hfReference = 5000.0f;\r\n             reverbFilter.roomLF = 0.0f;\r\n             reverbFilter.lfReference = 250.0f;\r\n         }\r\n"
                },
                {
                    "date": 1750929100285,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -115,9 +115,9 @@\n     {\r\n         // 混响效果\r\n         if (reverbFilter == null)\r\n         {\r\n-            reverbFilter = gameObject.AddComponent<AudioReverbFilter>(); //\r\n+            reverbFilter = gameObject.AddComponent<AudioReverbFilter>(); // 添加混响效果组件\r\n             reverbFilter.reverbPreset = AudioReverbPreset.Cave; // 混响预设\r\n             reverbFilter.dryLevel = 0.0f; // 干声电平\r\n             reverbFilter.roomLevel = 0.0f; // 房间电平\r\n             reverbFilter.roomHFLevel = 0.0f; // 高频房间电平\r\n@@ -127,21 +127,21 @@\n             reverbFilter.reflectionsLevel = -2602.0f; // 反射电平\r\n             reverbFilter.reflectionsDelay = 0.007f; // 反射延迟\r\n             reverbFilter.reverbLevel = 200.0f; // 混响电平\r\n             reverbFilter.reverbDelay = 0.011f; // 混响延迟\r\n-            reverbFilter.hfReference = 5000.0f;\r\n-            reverbFilter.roomLF = 0.0f;\r\n-            reverbFilter.lfReference = 250.0f;\r\n+            reverbFilter.hfReference = 5000.0f; // 高频参考\r\n+            reverbFilter.roomLF = 0.0f; // 低频房间电平\r\n+            reverbFilter.lfReference = 250.0f; // 低频参考\r\n         }\r\n         \r\n         // 回声效果\r\n         if (echoFilter == null)\r\n         {\r\n-            echoFilter = gameObject.AddComponent<AudioEchoFilter>();\r\n-            echoFilter.delay = 500.0f;\r\n-            echoFilter.decayRatio = 0.5f;\r\n-            echoFilter.wetMix = 1.0f;\r\n-            echoFilter.dryMix = 1.0f;\r\n+            echoFilter = gameObject.AddComponent<AudioEchoFilter>(); // 添加回声效果组件\r\n+            echoFilter.delay = 500.0f; // 延迟\r\n+            echoFilter.decayRatio = 0.5f; // 衰减比率\r\n+            echoFilter.wetMix = 1.0f; // 湿声电平\r\n+            echoFilter.dryMix = 1.0f; // 干声电平\r\n         }\r\n         \r\n         // 低通滤波器\r\n         if (lowPassFilter == null)\r\n"
                },
                {
                    "date": 1750929108008,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -145,35 +145,35 @@\n         \r\n         // 低通滤波器\r\n         if (lowPassFilter == null)\r\n         {\r\n-            lowPassFilter = gameObject.AddComponent<AudioLowPassFilter>();\r\n-            lowPassFilter.cutoffFrequency = 5000.0f;\r\n-            lowPassFilter.lowpassResonanceQ = 1.0f;\r\n+            lowPassFilter = gameObject.AddComponent<AudioLowPassFilter>(); // 添加低通滤波器组件\r\n+            lowPassFilter.cutoffFrequency = 5000.0f; // 截止频率\r\n+            lowPassFilter.lowpassResonanceQ = 1.0f; // 低通共振\r\n         }\r\n         \r\n         // 高通滤波器\r\n         if (highPassFilter == null)\r\n         {\r\n-            highPassFilter = gameObject.AddComponent<AudioHighPassFilter>();\r\n-            highPassFilter.cutoffFrequency = 1000.0f;\r\n-            highPassFilter.highpassResonanceQ = 1.0f;\r\n+            highPassFilter = gameObject.AddComponent<AudioHighPassFilter>(); // 添加高通滤波器组件\r\n+            highPassFilter.cutoffFrequency = 1000.0f; // 截止频率\r\n+            highPassFilter.highpassResonanceQ = 1.0f; // 高通共振\r\n         }\r\n         \r\n         // 失真效果\r\n         if (distortionFilter == null)\r\n         {\r\n-            distortionFilter = gameObject.AddComponent<AudioDistortionFilter>();\r\n-            distortionFilter.distortionLevel = 0.5f;\r\n+            distortionFilter = gameObject.AddComponent<AudioDistortionFilter>(); // 添加失真效果组件\r\n+            distortionFilter.distortionLevel = 0.5f; // 失真电平\r\n         }\r\n         \r\n         // 合唱效果\r\n         if (chorusFilter == null)\r\n         {\r\n-            chorusFilter = gameObject.AddComponent<AudioChorusFilter>();\r\n-            chorusFilter.dryMix = 0.5f;\r\n-            chorusFilter.wetMix1 = 0.5f;\r\n-            chorusFilter.wetMix2 = 0.5f;\r\n+            chorusFilter = gameObject.AddComponent<AudioChorusFilter>(); // 添加合唱效果组件\r\n+            chorusFilter.dryMix = 0.5f; // 干声电平\r\n+            chorusFilter.wetMix1 = 0.5f; // 湿声电平\r\n+            chorusFilter.wetMix2 = 0.5f; // 湿声电平\r\n             chorusFilter.wetMix3 = 0.5f;\r\n             chorusFilter.delay = 40.0f;\r\n             chorusFilter.rate = 0.8f;\r\n             chorusFilter.depth = 0.03f;\r\n"
                }
            ],
            "date": 1750929046507,
            "name": "Commit-0",
            "content": "using UnityEngine;\r\nusing UnityEngine.Audio;\r\n\r\n/// <summary>\r\n/// UnityEngine.Audio 命名空间案例演示\r\n/// 展示音频系统的核心功能\r\n/// </summary>\r\npublic class AudioSystemExample : MonoBehaviour\r\n{\r\n    [Header(\"音频组件\")]\r\n    [SerializeField] private AudioSource audioSource;\r\n    [SerializeField] private AudioListener audioListener;\r\n    [SerializeField] private AudioClip[] audioClips;\r\n    \r\n    [Header(\"音频混合器\")]\r\n    [SerializeField] private AudioMixer audioMixer;\r\n    [SerializeField] private AudioMixerGroup[] mixerGroups;\r\n    \r\n    [Header(\"音频设置\")]\r\n    [SerializeField] private float volume = 1.0f;\r\n    [SerializeField] private float pitch = 1.0f;\r\n    [SerializeField] private bool loop = false;\r\n    [SerializeField] private AudioRolloffMode rolloffMode = AudioRolloffMode.Linear;\r\n    \r\n    [Header(\"3D音频设置\")]\r\n    [SerializeField] private float minDistance = 1.0f;\r\n    [SerializeField] private float maxDistance = 500.0f;\r\n    [SerializeField] private float dopplerLevel = 1.0f;\r\n    \r\n    [Header(\"音频效果\")]\r\n    [SerializeField] private AudioReverbFilter reverbFilter;\r\n    [SerializeField] private AudioEchoFilter echoFilter;\r\n    [SerializeField] private AudioLowPassFilter lowPassFilter;\r\n    [SerializeField] private AudioHighPassFilter highPassFilter;\r\n    [SerializeField] private AudioDistortionFilter distortionFilter;\r\n    [SerializeField] private AudioChorusFilter chorusFilter;\r\n    \r\n    private int currentClipIndex = 0;\r\n    private bool isPlaying = false;\r\n    \r\n    private void Start()\r\n    {\r\n        InitializeAudioSystem();\r\n    }\r\n    \r\n    /// <summary>\r\n    /// 初始化音频系统\r\n    /// </summary>\r\n    private void InitializeAudioSystem()\r\n    {\r\n        // 获取或创建AudioSource组件\r\n        if (audioSource == null)\r\n        {\r\n            audioSource = GetComponent<AudioSource>();\r\n            if (audioSource == null)\r\n            {\r\n                audioSource = gameObject.AddComponent<AudioSource>();\r\n            }\r\n        }\r\n        \r\n        // 获取或创建AudioListener组件\r\n        if (audioListener == null)\r\n        {\r\n            audioListener = FindObjectOfType<AudioListener>();\r\n            if (audioListener == null)\r\n            {\r\n                Camera mainCamera = Camera.main;\r\n                if (mainCamera != null)\r\n                {\r\n                    audioListener = mainCamera.gameObject.AddComponent<AudioListener>();\r\n                }\r\n            }\r\n        }\r\n        \r\n        // 设置音频源属性\r\n        ConfigureAudioSource();\r\n        \r\n        // 添加音频效果组件\r\n        AddAudioEffects();\r\n    }\r\n    \r\n    /// <summary>\r\n    /// 配置AudioSource属性\r\n    /// </summary>\r\n    private void ConfigureAudioSource()\r\n    {\r\n        if (audioSource == null) return;\r\n        \r\n        // 基础设置\r\n        audioSource.volume = volume;\r\n        audioSource.pitch = pitch;\r\n        audioSource.loop = loop;\r\n        audioSource.playOnAwake = false;\r\n        \r\n        // 3D音频设置\r\n        audioSource.rolloffMode = rolloffMode;\r\n        audioSource.minDistance = minDistance;\r\n        audioSource.maxDistance = maxDistance;\r\n        audioSource.dopplerLevel = dopplerLevel;\r\n        \r\n        // 空间混合设置\r\n        audioSource.spatialBlend = 1.0f; // 完全3D\r\n        \r\n        // 设置音频混合器组\r\n        if (mixerGroups != null && mixerGroups.Length > 0)\r\n        {\r\n            audioSource.outputAudioMixerGroup = mixerGroups[0];\r\n        }\r\n    }\r\n    \r\n    /// <summary>\r\n    /// 添加音频效果组件\r\n    /// </summary>\r\n    private void AddAudioEffects()\r\n    {\r\n        // 混响效果\r\n        if (reverbFilter == null)\r\n        {\r\n            reverbFilter = gameObject.AddComponent<AudioReverbFilter>();\r\n            reverbFilter.reverbPreset = AudioReverbPreset.Cave;\r\n            reverbFilter.dryLevel = 0.0f;\r\n            reverbFilter.roomLevel = 0.0f;\r\n            reverbFilter.roomHFLevel = 0.0f;\r\n            reverbFilter.roomRolloffFactor = 10.0f;\r\n            reverbFilter.decayTime = 1.49f;\r\n            reverbFilter.decayHFRatio = 0.83f;\r\n            reverbFilter.reflectionsLevel = -2602.0f;\r\n            reverbFilter.reflectionsDelay = 0.007f;\r\n            reverbFilter.reverbLevel = 200.0f;\r\n            reverbFilter.reverbDelay = 0.011f;\r\n            reverbFilter.hfReference = 5000.0f;\r\n            reverbFilter.roomLF = 0.0f;\r\n            reverbFilter.lfReference = 250.0f;\r\n        }\r\n        \r\n        // 回声效果\r\n        if (echoFilter == null)\r\n        {\r\n            echoFilter = gameObject.AddComponent<AudioEchoFilter>();\r\n            echoFilter.delay = 500.0f;\r\n            echoFilter.decayRatio = 0.5f;\r\n            echoFilter.wetMix = 1.0f;\r\n            echoFilter.dryMix = 1.0f;\r\n        }\r\n        \r\n        // 低通滤波器\r\n        if (lowPassFilter == null)\r\n        {\r\n            lowPassFilter = gameObject.AddComponent<AudioLowPassFilter>();\r\n            lowPassFilter.cutoffFrequency = 5000.0f;\r\n            lowPassFilter.lowpassResonanceQ = 1.0f;\r\n        }\r\n        \r\n        // 高通滤波器\r\n        if (highPassFilter == null)\r\n        {\r\n            highPassFilter = gameObject.AddComponent<AudioHighPassFilter>();\r\n            highPassFilter.cutoffFrequency = 1000.0f;\r\n            highPassFilter.highpassResonanceQ = 1.0f;\r\n        }\r\n        \r\n        // 失真效果\r\n        if (distortionFilter == null)\r\n        {\r\n            distortionFilter = gameObject.AddComponent<AudioDistortionFilter>();\r\n            distortionFilter.distortionLevel = 0.5f;\r\n        }\r\n        \r\n        // 合唱效果\r\n        if (chorusFilter == null)\r\n        {\r\n            chorusFilter = gameObject.AddComponent<AudioChorusFilter>();\r\n            chorusFilter.dryMix = 0.5f;\r\n            chorusFilter.wetMix1 = 0.5f;\r\n            chorusFilter.wetMix2 = 0.5f;\r\n            chorusFilter.wetMix3 = 0.5f;\r\n            chorusFilter.delay = 40.0f;\r\n            chorusFilter.rate = 0.8f;\r\n            chorusFilter.depth = 0.03f;\r\n        }\r\n    }\r\n    \r\n    /// <summary>\r\n    /// 播放音频\r\n    /// </summary>\r\n    public void PlayAudio()\r\n    {\r\n        if (audioSource == null || audioClips == null || audioClips.Length == 0) return;\r\n        \r\n        if (currentClipIndex >= audioClips.Length)\r\n        {\r\n            currentClipIndex = 0;\r\n        }\r\n        \r\n        audioSource.clip = audioClips[currentClipIndex];\r\n        audioSource.Play();\r\n        isPlaying = true;\r\n        \r\n        Debug.Log($\"播放音频: {audioClips[currentClipIndex].name}\");\r\n    }\r\n    \r\n    /// <summary>\r\n    /// 停止音频\r\n    /// </summary>\r\n    public void StopAudio()\r\n    {\r\n        if (audioSource == null) return;\r\n        \r\n        audioSource.Stop();\r\n        isPlaying = false;\r\n        Debug.Log(\"停止音频播放\");\r\n    }\r\n    \r\n    /// <summary>\r\n    /// 暂停音频\r\n    /// </summary>\r\n    public void PauseAudio()\r\n    {\r\n        if (audioSource == null) return;\r\n        \r\n        audioSource.Pause();\r\n        isPlaying = false;\r\n        Debug.Log(\"暂停音频播放\");\r\n    }\r\n    \r\n    /// <summary>\r\n    /// 恢复音频\r\n    /// </summary>\r\n    public void ResumeAudio()\r\n    {\r\n        if (audioSource == null) return;\r\n        \r\n        audioSource.UnPause();\r\n        isPlaying = true;\r\n        Debug.Log(\"恢复音频播放\");\r\n    }\r\n    \r\n    /// <summary>\r\n    /// 切换到下一个音频片段\r\n    /// </summary>\r\n    public void NextClip()\r\n    {\r\n        if (audioClips == null || audioClips.Length == 0) return;\r\n        \r\n        currentClipIndex = (currentClipIndex + 1) % audioClips.Length;\r\n        \r\n        if (isPlaying)\r\n        {\r\n            PlayAudio(); // 重新播放新片段\r\n        }\r\n        \r\n        Debug.Log($\"切换到音频片段: {audioClips[currentClipIndex].name}\");\r\n    }\r\n    \r\n    /// <summary>\r\n    /// 切换到上一个音频片段\r\n    /// </summary>\r\n    public void PreviousClip()\r\n    {\r\n        if (audioClips == null || audioClips.Length == 0) return;\r\n        \r\n        currentClipIndex = (currentClipIndex - 1 + audioClips.Length) % audioClips.Length;\r\n        \r\n        if (isPlaying)\r\n        {\r\n            PlayAudio(); // 重新播放新片段\r\n        }\r\n        \r\n        Debug.Log($\"切换到音频片段: {audioClips[currentClipIndex].name}\");\r\n    }\r\n    \r\n    /// <summary>\r\n    /// 设置音量\r\n    /// </summary>\r\n    /// <param name=\"newVolume\">新音量值 (0-1)</param>\r\n    public void SetVolume(float newVolume)\r\n    {\r\n        volume = Mathf.Clamp01(newVolume);\r\n        if (audioSource != null)\r\n        {\r\n            audioSource.volume = volume;\r\n        }\r\n        Debug.Log($\"设置音量: {volume}\");\r\n    }\r\n    \r\n    /// <summary>\r\n    /// 设置音调\r\n    /// </summary>\r\n    /// <param name=\"newPitch\">新音调值</param>\r\n    public void SetPitch(float newPitch)\r\n    {\r\n        pitch = Mathf.Clamp(newPitch, -3.0f, 3.0f);\r\n        if (audioSource != null)\r\n        {\r\n            audioSource.pitch = pitch;\r\n        }\r\n        Debug.Log($\"设置音调: {pitch}\");\r\n    }\r\n    \r\n    /// <summary>\r\n    /// 设置音频混合器参数\r\n    /// </summary>\r\n    /// <param name=\"parameterName\">参数名称</param>\r\n    /// <param name=\"value\">参数值</param>\r\n    public void SetMixerParameter(string parameterName, float value)\r\n    {\r\n        if (audioMixer != null)\r\n        {\r\n            audioMixer.SetFloat(parameterName, value);\r\n            Debug.Log($\"设置混合器参数 {parameterName}: {value}\");\r\n        }\r\n    }\r\n    \r\n    /// <summary>\r\n    /// 获取音频混合器参数\r\n    /// </summary>\r\n    /// <param name=\"parameterName\">参数名称</param>\r\n    /// <returns>参数值</returns>\r\n    public float GetMixerParameter(string parameterName)\r\n    {\r\n        if (audioMixer != null)\r\n        {\r\n            float value;\r\n            if (audioMixer.GetFloat(parameterName, out value))\r\n            {\r\n                return value;\r\n            }\r\n        }\r\n        return 0.0f;\r\n    }\r\n    \r\n    /// <summary>\r\n    /// 播放一次性音频（不循环）\r\n    /// </summary>\r\n    /// <param name=\"clip\">音频片段</param>\r\n    /// <param name=\"position\">播放位置</param>\r\n    public void PlayOneShot(AudioClip clip, Vector3 position)\r\n    {\r\n        if (audioSource == null || clip == null) return;\r\n        \r\n        AudioSource.PlayClipAtPoint(clip, position);\r\n        Debug.Log($\"在位置 {position} 播放一次性音频: {clip.name}\");\r\n    }\r\n    \r\n    /// <summary>\r\n    /// 获取音频时间信息\r\n    /// </summary>\r\n    public void GetAudioTimeInfo()\r\n    {\r\n        if (audioSource == null || audioSource.clip == null) return;\r\n        \r\n        float currentTime = audioSource.time;\r\n        float totalTime = audioSource.clip.length;\r\n        float timeRemaining = totalTime - currentTime;\r\n        \r\n        Debug.Log($\"音频时间信息 - 当前: {currentTime:F2}s, 总时长: {totalTime:F2}s, 剩余: {timeRemaining:F2}s\");\r\n    }\r\n    \r\n    /// <summary>\r\n    /// 设置音频时间\r\n    /// </summary>\r\n    /// <param name=\"time\">时间位置（秒）</param>\r\n    public void SetAudioTime(float time)\r\n    {\r\n        if (audioSource == null || audioSource.clip == null) return;\r\n        \r\n        time = Mathf.Clamp(time, 0.0f, audioSource.clip.length);\r\n        audioSource.time = time;\r\n        Debug.Log($\"设置音频时间: {time:F2}s\");\r\n    }\r\n    \r\n    private void Update()\r\n    {\r\n        // 更新音频状态\r\n        if (audioSource != null && audioSource.clip != null)\r\n        {\r\n            isPlaying = audioSource.isPlaying;\r\n        }\r\n    }\r\n    \r\n    private void OnGUI()\r\n    {\r\n        // 简单的GUI界面用于测试\r\n        GUILayout.BeginArea(new Rect(10, 10, 300, 400));\r\n        GUILayout.Label(\"音频系统控制\", EditorStyles.boldLabel);\r\n        \r\n        if (GUILayout.Button(\"播放\"))\r\n        {\r\n            PlayAudio();\r\n        }\r\n        \r\n        if (GUILayout.Button(\"停止\"))\r\n        {\r\n            StopAudio();\r\n        }\r\n        \r\n        if (GUILayout.Button(\"暂停\"))\r\n        {\r\n            PauseAudio();\r\n        }\r\n        \r\n        if (GUILayout.Button(\"恢复\"))\r\n        {\r\n            ResumeAudio();\r\n        }\r\n        \r\n        GUILayout.Space(10);\r\n        \r\n        if (GUILayout.Button(\"下一个\"))\r\n        {\r\n            NextClip();\r\n        }\r\n        \r\n        if (GUILayout.Button(\"上一个\"))\r\n        {\r\n            PreviousClip();\r\n        }\r\n        \r\n        GUILayout.Space(10);\r\n        \r\n        GUILayout.Label($\"音量: {volume:F2}\");\r\n        volume = GUILayout.HorizontalSlider(volume, 0.0f, 1.0f);\r\n        \r\n        GUILayout.Label($\"音调: {pitch:F2}\");\r\n        pitch = GUILayout.HorizontalSlider(pitch, -3.0f, 3.0f);\r\n        \r\n        GUILayout.Space(10);\r\n        \r\n        if (GUILayout.Button(\"获取时间信息\"))\r\n        {\r\n            GetAudioTimeInfo();\r\n        }\r\n        \r\n        GUILayout.EndArea();\r\n    }\r\n} "
        }
    ]
}