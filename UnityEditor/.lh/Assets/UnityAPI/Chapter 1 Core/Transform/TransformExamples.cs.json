{
    "sourceFile": "Assets/UnityAPI/Chapter 1 Core/Transform/TransformExamples.cs",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1750927831839,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1750927831839,
            "name": "Commit-0",
            "content": "using UnityEngine;\r\n\r\n/// <summary>\r\n/// Transform API使用案例\r\n/// 演示Transform的位置、旋转、缩放等变换操作\r\n/// </summary>\r\npublic class TransformExamples : MonoBehaviour\r\n{\r\n    [Header(\"变换目标\")]\r\n    [SerializeField] private Transform targetTransform;\r\n    \r\n    [Header(\"移动参数\")]\r\n    [SerializeField] private float moveSpeed = 5f;\r\n    [SerializeField] private float rotateSpeed = 90f;\r\n    [SerializeField] private float scaleSpeed = 1f;\r\n    \r\n    [Header(\"路径移动\")]\r\n    [SerializeField] private Transform[] waypoints;\r\n    [SerializeField] private float pathSpeed = 2f;\r\n    \r\n    private int currentWaypointIndex = 0;\r\n    private Vector3 originalPosition;\r\n    private Quaternion originalRotation;\r\n    private Vector3 originalScale;\r\n    \r\n    private void Start()\r\n    {\r\n        // 如果没有指定目标，使用自身\r\n        if (targetTransform == null)\r\n        {\r\n            targetTransform = transform;\r\n        }\r\n        \r\n        // 保存原始变换\r\n        originalPosition = targetTransform.position;\r\n        originalRotation = targetTransform.rotation;\r\n        originalScale = targetTransform.localScale;\r\n        \r\n        // 演示各种Transform操作\r\n        DemonstrateTransformBasics();\r\n        DemonstrateTransformMethods();\r\n        DemonstrateTransformHierarchy();\r\n        DemonstrateTransformLookAt();\r\n    }\r\n    \r\n    /// <summary>\r\n    /// 演示Transform基础属性\r\n    /// </summary>\r\n    private void DemonstrateTransformBasics()\r\n    {\r\n        Debug.Log(\"=== Transform基础属性示例 ===\");\r\n        \r\n        // 1. 位置 (Position)\r\n        Debug.Log($\"当前位置: {targetTransform.position}\");\r\n        Debug.Log($\"本地位置: {targetTransform.localPosition}\");\r\n        \r\n        // 2. 旋转 (Rotation)\r\n        Debug.Log($\"当前旋转: {targetTransform.rotation.eulerAngles}\");\r\n        Debug.Log($\"本地旋转: {targetTransform.localRotation.eulerAngles}\");\r\n        \r\n        // 3. 缩放 (Scale)\r\n        Debug.Log($\"当前缩放: {targetTransform.lossyScale}\");\r\n        Debug.Log($\"本地缩放: {targetTransform.localScale}\");\r\n        \r\n        // 4. 前方向量\r\n        Debug.Log($\"前方向量: {targetTransform.forward}\");\r\n        Debug.Log($\"右方向量: {targetTransform.right}\");\r\n        Debug.Log($\"上方向量: {targetTransform.up}\");\r\n    }\r\n    \r\n    /// <summary>\r\n    /// 演示Transform方法\r\n    /// </summary>\r\n    private void DemonstrateTransformMethods()\r\n    {\r\n        Debug.Log(\"=== Transform方法示例 ===\");\r\n        \r\n        // 1. Translate - 相对移动\r\n        targetTransform.Translate(Vector3.forward * 2f);\r\n        Debug.Log($\"使用Translate向前移动2个单位，新位置: {targetTransform.position}\");\r\n        \r\n        // 2. Rotate - 相对旋转\r\n        targetTransform.Rotate(Vector3.up * 45f);\r\n        Debug.Log($\"使用Rotate绕Y轴旋转45度，新旋转: {targetTransform.rotation.eulerAngles}\");\r\n        \r\n        // 3. LookAt - 朝向目标\r\n        GameObject lookTarget = new GameObject(\"LookTarget\");\r\n        lookTarget.transform.position = targetTransform.position + Vector3.right * 5f + Vector3.up * 2f;\r\n        targetTransform.LookAt(lookTarget.transform);\r\n        Debug.Log($\"使用LookAt朝向目标，新旋转: {targetTransform.rotation.eulerAngles}\");\r\n        \r\n        // 4. TransformPoint - 转换点坐标\r\n        Vector3 localPoint = new Vector3(1f, 0f, 1f);\r\n        Vector3 worldPoint = targetTransform.TransformPoint(localPoint);\r\n        Debug.Log($\"本地点 {localPoint} 转换为世界坐标: {worldPoint}\");\r\n        \r\n        // 5. InverseTransformPoint - 逆转换点坐标\r\n        Vector3 backToLocal = targetTransform.InverseTransformPoint(worldPoint);\r\n        Debug.Log($\"世界点 {worldPoint} 转换回本地坐标: {backToLocal}\");\r\n        \r\n        // 6. TransformDirection - 转换方向向量\r\n        Vector3 localDirection = Vector3.forward;\r\n        Vector3 worldDirection = targetTransform.TransformDirection(localDirection);\r\n        Debug.Log($\"本地方向 {localDirection} 转换为世界方向: {worldDirection}\");\r\n        \r\n        // 清理临时对象\r\n        DestroyImmediate(lookTarget);\r\n    }\r\n    \r\n    /// <summary>\r\n    /// 演示Transform层级操作\r\n    /// </summary>\r\n    private void DemonstrateTransformHierarchy()\r\n    {\r\n        Debug.Log(\"=== Transform层级操作示例 ===\");\r\n        \r\n        // 1. 创建父子关系\r\n        GameObject parent = new GameObject(\"Parent\");\r\n        GameObject child = new GameObject(\"Child\");\r\n        \r\n        child.transform.SetParent(parent.transform);\r\n        Debug.Log($\"创建父子关系: {parent.name} -> {child.name}\");\r\n        \r\n        // 2. 设置父对象\r\n        parent.transform.position = new Vector3(5f, 0f, 0f);\r\n        parent.transform.rotation = Quaternion.Euler(0f, 45f, 0f);\r\n        \r\n        Debug.Log($\"父对象位置: {parent.transform.position}\");\r\n        Debug.Log($\"子对象世界位置: {child.transform.position}\");\r\n        Debug.Log($\"子对象本地位置: {child.transform.localPosition}\");\r\n        \r\n        // 3. 获取根对象\r\n        Transform root = child.transform.root;\r\n        Debug.Log($\"{child.name} 的根对象是: {root.name}\");\r\n        \r\n        // 4. 检查是否为子对象\r\n        bool isChild = child.transform.IsChildOf(parent.transform);\r\n        Debug.Log($\"{child.name} 是否为 {parent.name} 的子对象: {isChild}\");\r\n        \r\n        // 5. 设置兄弟索引\r\n        GameObject sibling1 = new GameObject(\"Sibling1\");\r\n        GameObject sibling2 = new GameObject(\"Sibling2\");\r\n        \r\n        sibling1.transform.SetParent(parent.transform);\r\n        sibling2.transform.SetParent(parent.transform);\r\n        \r\n        sibling1.transform.SetSiblingIndex(0);\r\n        sibling2.transform.SetSiblingIndex(1);\r\n        \r\n        Debug.Log($\"设置兄弟索引: {sibling1.name}(0), {sibling2.name}(1)\");\r\n        \r\n        // 6. 获取兄弟索引\r\n        int siblingIndex = sibling2.transform.GetSiblingIndex();\r\n        Debug.Log($\"{sibling2.name} 的兄弟索引: {siblingIndex}\");\r\n    }\r\n    \r\n    /// <summary>\r\n    /// 演示LookAt功能\r\n    /// </summary>\r\n    private void DemonstrateTransformLookAt()\r\n    {\r\n        Debug.Log(\"=== Transform LookAt示例 ===\");\r\n        \r\n        // 创建多个目标点\r\n        Vector3[] targets = {\r\n            Vector3.forward * 5f,\r\n            Vector3.right * 5f,\r\n            Vector3.up * 5f,\r\n            Vector3.back * 5f\r\n        };\r\n        \r\n        foreach (Vector3 target in targets)\r\n        {\r\n            GameObject targetObj = new GameObject($\"Target_{target}\");\r\n            targetObj.transform.position = target;\r\n            \r\n            // 使用LookAt朝向目标\r\n            targetTransform.LookAt(targetObj.transform);\r\n            Debug.Log($\"朝向 {targetObj.name}，旋转: {targetTransform.rotation.eulerAngles}\");\r\n            \r\n            DestroyImmediate(targetObj);\r\n        }\r\n    }\r\n    \r\n    /// <summary>\r\n    /// 演示Transform的矩阵操作\r\n    /// </summary>\r\n    private void DemonstrateTransformMatrix()\r\n    {\r\n        Debug.Log(\"=== Transform矩阵操作示例 ===\");\r\n        \r\n        // 1. 获取变换矩阵\r\n        Matrix4x4 localToWorldMatrix = targetTransform.localToWorldMatrix;\r\n        Matrix4x4 worldToLocalMatrix = targetTransform.worldToLocalMatrix;\r\n        \r\n        Debug.Log($\"本地到世界矩阵:\\n{localToWorldMatrix}\");\r\n        Debug.Log($\"世界到本地矩阵:\\n{worldToLocalMatrix}\");\r\n        \r\n        // 2. 使用矩阵变换点\r\n        Vector3 localPoint = new Vector3(1f, 0f, 1f);\r\n        Vector3 worldPoint = localToWorldMatrix.MultiplyPoint3x4(localPoint);\r\n        Debug.Log($\"使用矩阵变换点: {localPoint} -> {worldPoint}\");\r\n        \r\n        // 3. 使用矩阵变换方向\r\n        Vector3 localDirection = Vector3.forward;\r\n        Vector3 worldDirection = localToWorldMatrix.MultiplyVector(localDirection);\r\n        Debug.Log($\"使用矩阵变换方向: {localDirection} -> {worldDirection}\");\r\n    }\r\n    \r\n    /// <summary>\r\n    /// 在Update中演示实时变换操作\r\n    /// </summary>\r\n    private void Update()\r\n    {\r\n        HandleInput();\r\n        UpdatePathMovement();\r\n    }\r\n    \r\n    /// <summary>\r\n    /// 处理输入控制\r\n    /// </summary>\r\n    private void HandleInput()\r\n    {\r\n        // WASD移动\r\n        float horizontal = Input.GetAxis(\"Horizontal\");\r\n        float vertical = Input.GetAxis(\"Vertical\");\r\n        \r\n        Vector3 movement = new Vector3(horizontal, 0f, vertical) * moveSpeed * Time.deltaTime;\r\n        targetTransform.Translate(movement, Space.World);\r\n        \r\n        // QE旋转\r\n        if (Input.GetKey(KeyCode.Q))\r\n        {\r\n            targetTransform.Rotate(Vector3.up * -rotateSpeed * Time.deltaTime, Space.World);\r\n        }\r\n        if (Input.GetKey(KeyCode.E))\r\n        {\r\n            targetTransform.Rotate(Vector3.up * rotateSpeed * Time.deltaTime, Space.World);\r\n        }\r\n        \r\n        // R重置变换\r\n        if (Input.GetKeyDown(KeyCode.R))\r\n        {\r\n            ResetTransform();\r\n        }\r\n        \r\n        // T切换父对象\r\n        if (Input.GetKeyDown(KeyCode.T))\r\n        {\r\n            ToggleParent();\r\n        }\r\n        \r\n        // Y缩放\r\n        if (Input.GetKey(KeyCode.Y))\r\n        {\r\n            targetTransform.localScale += Vector3.one * scaleSpeed * Time.deltaTime;\r\n        }\r\n        if (Input.GetKey(KeyCode.U))\r\n        {\r\n            targetTransform.localScale -= Vector3.one * scaleSpeed * Time.deltaTime;\r\n        }\r\n    }\r\n    \r\n    /// <summary>\r\n    /// 更新路径移动\r\n    /// </summary>\r\n    private void UpdatePathMovement()\r\n    {\r\n        if (waypoints == null || waypoints.Length == 0) return;\r\n        \r\n        Transform currentWaypoint = waypoints[currentWaypointIndex];\r\n        if (currentWaypoint == null) return;\r\n        \r\n        // 移动到当前路径点\r\n        Vector3 direction = (currentWaypoint.position - targetTransform.position).normalized;\r\n        targetTransform.position += direction * pathSpeed * Time.deltaTime;\r\n        \r\n        // 检查是否到达路径点\r\n        float distance = Vector3.Distance(targetTransform.position, currentWaypoint.position);\r\n        if (distance < 0.1f)\r\n        {\r\n            currentWaypointIndex = (currentWaypointIndex + 1) % waypoints.Length;\r\n            Debug.Log($\"到达路径点 {currentWaypointIndex}\");\r\n        }\r\n    }\r\n    \r\n    /// <summary>\r\n    /// 重置变换\r\n    /// </summary>\r\n    private void ResetTransform()\r\n    {\r\n        targetTransform.position = originalPosition;\r\n        targetTransform.rotation = originalRotation;\r\n        targetTransform.localScale = originalScale;\r\n        Debug.Log(\"重置了变换\");\r\n    }\r\n    \r\n    /// <summary>\r\n    /// 切换父对象\r\n    /// </summary>\r\n    private void ToggleParent()\r\n    {\r\n        if (targetTransform.parent == null)\r\n        {\r\n            // 创建新的父对象\r\n            GameObject newParent = new GameObject(\"DynamicParent\");\r\n            newParent.transform.position = Vector3.zero;\r\n            targetTransform.SetParent(newParent.transform);\r\n            Debug.Log(\"设置了父对象\");\r\n        }\r\n        else\r\n        {\r\n            // 移除父对象\r\n            targetTransform.SetParent(null);\r\n            Debug.Log(\"移除了父对象\");\r\n        }\r\n    }\r\n    \r\n    /// <summary>\r\n    /// 演示Transform的插值操作\r\n    /// </summary>\r\n    private void DemonstrateTransformInterpolation()\r\n    {\r\n        Debug.Log(\"=== Transform插值示例 ===\");\r\n        \r\n        Vector3 startPos = Vector3.zero;\r\n        Vector3 endPos = Vector3.forward * 10f;\r\n        \r\n        Quaternion startRot = Quaternion.identity;\r\n        Quaternion endRot = Quaternion.Euler(0f, 180f, 0f);\r\n        \r\n        Vector3 startScale = Vector3.one;\r\n        Vector3 endScale = Vector3.one * 2f;\r\n        \r\n        // 位置插值\r\n        Vector3 lerpedPos = Vector3.Lerp(startPos, endPos, 0.5f);\r\n        Debug.Log($\"位置插值(50%): {lerpedPos}\");\r\n        \r\n        // 旋转插值\r\n        Quaternion lerpedRot = Quaternion.Lerp(startRot, endRot, 0.5f);\r\n        Debug.Log($\"旋转插值(50%): {lerpedRot.eulerAngles}\");\r\n        \r\n        // 缩放插值\r\n        Vector3 lerpedScale = Vector3.Lerp(startScale, endScale, 0.5f);\r\n        Debug.Log($\"缩放插值(50%): {lerpedScale}\");\r\n        \r\n        // 球面插值\r\n        Quaternion slerpedRot = Quaternion.Slerp(startRot, endRot, 0.5f);\r\n        Debug.Log($\"球面插值(50%): {slerpedRot.eulerAngles}\");\r\n    }\r\n    \r\n    /// <summary>\r\n    /// 在OnGUI中显示变换信息\r\n    /// </summary>\r\n    private void OnGUI()\r\n    {\r\n        GUILayout.BeginArea(new Rect(10, 10, 300, 200));\r\n        GUILayout.Label(\"Transform信息\", EditorStyles.boldLabel);\r\n        GUILayout.Label($\"位置: {targetTransform.position}\");\r\n        GUILayout.Label($\"旋转: {targetTransform.rotation.eulerAngles}\");\r\n        GUILayout.Label($\"缩放: {targetTransform.localScale}\");\r\n        GUILayout.Label($\"前方向量: {targetTransform.forward}\");\r\n        GUILayout.Space(10);\r\n        GUILayout.Label(\"控制说明:\", EditorStyles.boldLabel);\r\n        GUILayout.Label(\"WASD - 移动\");\r\n        GUILayout.Label(\"QE - 旋转\");\r\n        GUILayout.Label(\"YU - 缩放\");\r\n        GUILayout.Label(\"R - 重置\");\r\n        GUILayout.Label(\"T - 切换父对象\");\r\n        GUILayout.EndArea();\r\n    }\r\n} "
        }
    ]
}