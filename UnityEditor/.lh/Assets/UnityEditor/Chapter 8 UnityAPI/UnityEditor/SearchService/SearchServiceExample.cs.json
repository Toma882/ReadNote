{
    "sourceFile": "Assets/UnityEditor/Chapter 8 UnityAPI/UnityEditor/SearchService/SearchServiceExample.cs",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1750941504261,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1750941504261,
            "name": "Commit-0",
            "content": "using UnityEngine;\r\nusing UnityEditor;\r\nusing UnityEditor.SearchService;\r\nusing UnityEditor.Search;\r\nusing System.Collections.Generic;\r\nusing System.Linq;\r\n\r\nnamespace UnityEditor.SearchService.Examples\r\n{\r\n    /// <summary>\r\n    /// UnityEditor.SearchService 命名空间使用示例\r\n    /// 演示搜索服务编辑器系统的配置、查询和管理功能\r\n    /// </summary>\r\n    public class SearchServiceExample : MonoBehaviour\r\n    {\r\n        [Header(\"搜索服务配置\")]\r\n        [SerializeField] private bool enableSearchService = true;\r\n        [SerializeField] private string searchQuery = \"\";\r\n        [SerializeField] private string searchProvider = \"asset\";\r\n        [SerializeField] private int maxResults = 100;\r\n        \r\n        [Header(\"搜索状态\")]\r\n        [SerializeField] private int resultCount = 0;\r\n        [SerializeField] private string lastSearchQuery = \"\";\r\n        [SerializeField] private bool isSearching = false;\r\n        \r\n        [Header(\"搜索结果\")]\r\n        [SerializeField] private List<SearchResult> searchResults = new List<SearchResult>();\r\n        [SerializeField] private SearchResult selectedResult;\r\n        \r\n        [Header(\"搜索配置\")]\r\n        [SerializeField] private SearchContext searchContext;\r\n        [SerializeField] private List<string> availableProviders = new List<string>();\r\n        \r\n        private Dictionary<string, ISearchProvider> providerRegistry = new Dictionary<string, ISearchProvider>();\r\n        \r\n        /// <summary>\r\n        /// 搜索结果\r\n        /// </summary>\r\n        [System.Serializable]\r\n        public class SearchResult\r\n        {\r\n            public string id;\r\n            public string name;\r\n            public string path;\r\n            public string type;\r\n            public float score;\r\n            public Object asset;\r\n            \r\n            public SearchResult(string id, string name, string path, string type, float score)\r\n            {\r\n                this.id = id;\r\n                this.name = name;\r\n                this.path = path;\r\n                this.type = type;\r\n                this.score = score;\r\n            }\r\n        }\r\n        \r\n        /// <summary>\r\n        /// 初始化搜索服务系统\r\n        /// </summary>\r\n        private void Start()\r\n        {\r\n            InitializeSearchServiceSystem();\r\n        }\r\n        \r\n        /// <summary>\r\n        /// 初始化搜索服务系统\r\n        /// </summary>\r\n        private void InitializeSearchServiceSystem()\r\n        {\r\n            if (!enableSearchService)\r\n            {\r\n                Debug.Log(\"搜索服务系统已禁用\");\r\n                return;\r\n            }\r\n            \r\n            try\r\n            {\r\n                // 初始化搜索上下文\r\n                InitializeSearchContext();\r\n                \r\n                // 加载可用搜索提供者\r\n                LoadAvailableProviders();\r\n                \r\n                // 注册自定义搜索提供者\r\n                RegisterCustomProviders();\r\n                \r\n                Debug.Log(\"搜索服务系统初始化完成\");\r\n            }\r\n            catch (System.Exception e)\r\n            {\r\n                Debug.LogError($\"搜索服务系统初始化失败: {e.Message}\");\r\n            }\r\n        }\r\n        \r\n        /// <summary>\r\n        /// 初始化搜索上下文\r\n        /// </summary>\r\n        private void InitializeSearchContext()\r\n        {\r\n            searchContext = SearchService.CreateContext(\"asset\");\r\n            searchContext.SetFilter(\"t:Object\");\r\n            searchContext.maxResults = maxResults;\r\n            \r\n            Debug.Log(\"搜索上下文已初始化\");\r\n        }\r\n        \r\n        /// <summary>\r\n        /// 加载可用搜索提供者\r\n        /// </summary>\r\n        private void LoadAvailableProviders()\r\n        {\r\n            availableProviders.Clear();\r\n            providerRegistry.Clear();\r\n            \r\n            // 获取所有可用的搜索提供者\r\n            var providers = SearchService.GetProviders(\"asset\");\r\n            foreach (var provider in providers)\r\n            {\r\n                availableProviders.Add(provider.name);\r\n                providerRegistry[provider.name] = provider;\r\n            }\r\n            \r\n            Debug.Log($\"加载了 {availableProviders.Count} 个搜索提供者\");\r\n        }\r\n        \r\n        /// <summary>\r\n        /// 注册自定义搜索提供者\r\n        /// </summary>\r\n        private void RegisterCustomProviders()\r\n        {\r\n            // 注册自定义搜索提供者\r\n            RegisterCustomProvider(\"CustomProvider\", \"自定义提供者\");\r\n            RegisterCustomProvider(\"GameObjectProvider\", \"游戏对象提供者\");\r\n        }\r\n        \r\n        /// <summary>\r\n        /// 注册自定义搜索提供者\r\n        /// </summary>\r\n        public void RegisterCustomProvider(string providerName, string displayName)\r\n        {\r\n            try\r\n            {\r\n                // 这里可以注册自定义的搜索提供者\r\n                // 由于SearchService的API限制，这里只是示例\r\n                availableProviders.Add(providerName);\r\n                \r\n                Debug.Log($\"自定义搜索提供者已注册: {providerName}\");\r\n            }\r\n            catch (System.Exception e)\r\n            {\r\n                Debug.LogError($\"注册自定义搜索提供者失败: {e.Message}\");\r\n            }\r\n        }\r\n        \r\n        /// <summary>\r\n        /// 执行搜索\r\n        /// </summary>\r\n        public void PerformSearch(string query)\r\n        {\r\n            if (string.IsNullOrEmpty(query))\r\n            {\r\n                Debug.LogWarning(\"搜索查询为空\");\r\n                return;\r\n            }\r\n            \r\n            if (searchContext == null)\r\n            {\r\n                Debug.LogError(\"搜索上下文未初始化\");\r\n                return;\r\n            }\r\n            \r\n            try\r\n            {\r\n                isSearching = true;\r\n                lastSearchQuery = query;\r\n                \r\n                // 设置搜索查询\r\n                searchContext.searchText = query;\r\n                \r\n                // 执行搜索\r\n                var results = SearchService.Request(searchContext);\r\n                \r\n                // 处理搜索结果\r\n                ProcessSearchResults(results);\r\n                \r\n                Debug.Log($\"搜索完成: {query}, 找到 {resultCount} 个结果\");\r\n            }\r\n            catch (System.Exception e)\r\n            {\r\n                Debug.LogError($\"搜索失败: {e.Message}\");\r\n            }\r\n            finally\r\n            {\r\n                isSearching = false;\r\n            }\r\n        }\r\n        \r\n        /// <summary>\r\n        /// 处理搜索结果\r\n        /// </summary>\r\n        private void ProcessSearchResults(SearchResult[] results)\r\n        {\r\n            searchResults.Clear();\r\n            \r\n            foreach (var result in results)\r\n            {\r\n                var searchResult = new SearchResult(\r\n                    result.id,\r\n                    result.name,\r\n                    result.path,\r\n                    result.type,\r\n                    result.score\r\n                );\r\n                \r\n                // 尝试加载资产\r\n                if (!string.IsNullOrEmpty(result.path))\r\n                {\r\n                    searchResult.asset = AssetDatabase.LoadAssetAtPath<Object>(result.path);\r\n                }\r\n                \r\n                searchResults.Add(searchResult);\r\n            }\r\n            \r\n            resultCount = searchResults.Count;\r\n        }\r\n        \r\n        /// <summary>\r\n        /// 按类型搜索\r\n        /// </summary>\r\n        public void SearchByType(string type)\r\n        {\r\n            if (string.IsNullOrEmpty(type))\r\n            {\r\n                Debug.LogWarning(\"类型为空\");\r\n                return;\r\n            }\r\n            \r\n            string query = $\"t:{type}\";\r\n            PerformSearch(query);\r\n        }\r\n        \r\n        /// <summary>\r\n        /// 按名称搜索\r\n        /// </summary>\r\n        public void SearchByName(string name)\r\n        {\r\n            if (string.IsNullOrEmpty(name))\r\n            {\r\n                Debug.LogWarning(\"名称为空\");\r\n                return;\r\n            }\r\n            \r\n            string query = $\"n:{name}\";\r\n            PerformSearch(query);\r\n        }\r\n        \r\n        /// <summary>\r\n        /// 按路径搜索\r\n        /// </summary>\r\n        public void SearchByPath(string path)\r\n        {\r\n            if (string.IsNullOrEmpty(path))\r\n            {\r\n                Debug.LogWarning(\"路径为空\");\r\n                return;\r\n            }\r\n            \r\n            string query = $\"p:{path}\";\r\n            PerformSearch(query);\r\n        }\r\n        \r\n        /// <summary>\r\n        /// 高级搜索\r\n        /// </summary>\r\n        public void AdvancedSearch(string query, string[] filters)\r\n        {\r\n            if (string.IsNullOrEmpty(query))\r\n            {\r\n                Debug.LogWarning(\"查询为空\");\r\n                return;\r\n            }\r\n            \r\n            try\r\n            {\r\n                // 设置搜索上下文\r\n                searchContext.searchText = query;\r\n                \r\n                // 应用过滤器\r\n                if (filters != null && filters.Length > 0)\r\n                {\r\n                    foreach (string filter in filters)\r\n                    {\r\n                        searchContext.SetFilter(filter);\r\n                    }\r\n                }\r\n                \r\n                // 执行搜索\r\n                var results = SearchService.Request(searchContext);\r\n                ProcessSearchResults(results);\r\n                \r\n                Debug.Log($\"高级搜索完成: {query}\");\r\n            }\r\n            catch (System.Exception e)\r\n            {\r\n                Debug.LogError($\"高级搜索失败: {e.Message}\");\r\n            }\r\n        }\r\n        \r\n        /// <summary>\r\n        /// 获取搜索结果信息\r\n        /// </summary>\r\n        public string GetSearchResultInfo(SearchResult result)\r\n        {\r\n            if (result == null)\r\n                return \"结果为空\";\r\n            \r\n            return $\"ID: {result.id}, 名称: {result.name}, 路径: {result.path}, 类型: {result.type}, 分数: {result.score:F2}\";\r\n        }\r\n        \r\n        /// <summary>\r\n        /// 选择搜索结果\r\n        /// </summary>\r\n        public void SelectSearchResult(SearchResult result)\r\n        {\r\n            if (result == null)\r\n            {\r\n                Debug.LogWarning(\"结果为空\");\r\n                return;\r\n            }\r\n            \r\n            selectedResult = result;\r\n            \r\n            // 在Project窗口中选中资产\r\n            if (result.asset != null)\r\n            {\r\n                Selection.activeObject = result.asset;\r\n                EditorGUIUtility.PingObject(result.asset);\r\n            }\r\n            \r\n            Debug.Log($\"已选择搜索结果: {result.name}\");\r\n        }\r\n        \r\n        /// <summary>\r\n        /// 打开搜索结果\r\n        /// </summary>\r\n        public void OpenSearchResult(SearchResult result)\r\n        {\r\n            if (result == null)\r\n            {\r\n                Debug.LogWarning(\"结果为空\");\r\n                return;\r\n            }\r\n            \r\n            if (result.asset != null)\r\n            {\r\n                AssetDatabase.OpenAsset(result.asset);\r\n                Debug.Log($\"已打开搜索结果: {result.name}\");\r\n            }\r\n            else\r\n            {\r\n                Debug.LogWarning($\"无法打开结果: {result.name}\");\r\n            }\r\n        }\r\n        \r\n        /// <summary>\r\n        /// 导出搜索结果\r\n        /// </summary>\r\n        public void ExportSearchResults()\r\n        {\r\n            if (searchResults.Count == 0)\r\n            {\r\n                Debug.LogWarning(\"没有搜索结果可导出\");\r\n                return;\r\n            }\r\n            \r\n            string exportPath = EditorUtility.SaveFilePanel(\"导出搜索结果\", \"\", \"search_results\", \"json\");\r\n            if (string.IsNullOrEmpty(exportPath))\r\n                return;\r\n            \r\n            try\r\n            {\r\n                var exportData = new List<object>();\r\n                foreach (var result in searchResults)\r\n                {\r\n                    exportData.Add(new\r\n                    {\r\n                        id = result.id,\r\n                        name = result.name,\r\n                        path = result.path,\r\n                        type = result.type,\r\n                        score = result.score\r\n                    });\r\n                }\r\n                \r\n                string json = JsonUtility.ToJson(new { results = exportData }, true);\r\n                System.IO.File.WriteAllText(exportPath, json);\r\n                \r\n                Debug.Log($\"搜索结果已导出到: {exportPath}\");\r\n            }\r\n            catch (System.Exception e)\r\n            {\r\n                Debug.LogError($\"导出搜索结果失败: {e.Message}\");\r\n            }\r\n        }\r\n        \r\n        /// <summary>\r\n        /// 清除搜索结果\r\n        /// </summary>\r\n        public void ClearSearchResults()\r\n        {\r\n            searchResults.Clear();\r\n            resultCount = 0;\r\n            selectedResult = null;\r\n            \r\n            Debug.Log(\"搜索结果已清除\");\r\n        }\r\n        \r\n        /// <summary>\r\n        /// 获取搜索统计信息\r\n        /// </summary>\r\n        public string GetSearchStats()\r\n        {\r\n            return $\"查询: {lastSearchQuery}, 结果数量: {resultCount}, 搜索中: {(isSearching ? \"是\" : \"否\")}\";\r\n        }\r\n        \r\n        /// <summary>\r\n        /// 验证搜索查询\r\n        /// </summary>\r\n        public bool ValidateSearchQuery(string query)\r\n        {\r\n            return !string.IsNullOrEmpty(query) && query.Length >= 2;\r\n        }\r\n        \r\n        /// <summary>\r\n        /// 获取所有搜索提供者名称\r\n        /// </summary>\r\n        public string[] GetAllProviderNames()\r\n        {\r\n            return availableProviders.ToArray();\r\n        }\r\n        \r\n        /// <summary>\r\n        /// 在编辑器中显示GUI\r\n        /// </summary>\r\n        private void OnGUI()\r\n        {\r\n            if (!Application.isPlaying) return;\r\n            \r\n            GUILayout.BeginArea(new Rect(10, 10, 500, 700));\r\n            GUILayout.Label(\"UnityEditor.SearchService 示例\", EditorStyles.boldLabel);\r\n            \r\n            GUILayout.Space(10);\r\n            GUILayout.Label($\"状态: {(enableSearchService ? \"启用\" : \"禁用\")}\");\r\n            GUILayout.Label($\"提供者数量: {availableProviders.Count}\");\r\n            GUILayout.Label($\"结果数量: {resultCount}\");\r\n            GUILayout.Label($\"搜索中: {(isSearching ? \"是\" : \"否\")}\");\r\n            \r\n            GUILayout.Space(10);\r\n            GUILayout.Label(\"搜索配置\", EditorStyles.boldLabel);\r\n            \r\n            searchQuery = GUILayout.TextField(\"搜索查询\", searchQuery);\r\n            searchProvider = EditorGUILayout.Popup(\"搜索提供者\", 0, GetAllProviderNames()).ToString();\r\n            maxResults = EditorGUILayout.IntField(\"最大结果数\", maxResults);\r\n            \r\n            if (GUILayout.Button(\"执行搜索\"))\r\n            {\r\n                if (ValidateSearchQuery(searchQuery))\r\n                {\r\n                    PerformSearch(searchQuery);\r\n                }\r\n                else\r\n                {\r\n                    Debug.LogWarning(\"搜索查询无效\");\r\n                }\r\n            }\r\n            \r\n            GUILayout.Space(10);\r\n            GUILayout.Label(\"快速搜索\", EditorStyles.boldLabel);\r\n            \r\n            if (GUILayout.Button(\"搜索GameObject\"))\r\n            {\r\n                SearchByType(\"GameObject\");\r\n            }\r\n            \r\n            if (GUILayout.Button(\"搜索Material\"))\r\n            {\r\n                SearchByType(\"Material\");\r\n            }\r\n            \r\n            if (GUILayout.Button(\"搜索Script\"))\r\n            {\r\n                SearchByType(\"Script\");\r\n            }\r\n            \r\n            if (GUILayout.Button(\"搜索Texture\"))\r\n            {\r\n                SearchByType(\"Texture2D\");\r\n            }\r\n            \r\n            GUILayout.Space(10);\r\n            GUILayout.Label(\"搜索结果\", EditorStyles.boldLabel);\r\n            \r\n            if (searchResults.Count > 0)\r\n            {\r\n                scrollPosition = GUILayout.BeginScrollView(scrollPosition, GUILayout.Height(200));\r\n                \r\n                for (int i = 0; i < searchResults.Count; i++)\r\n                {\r\n                    var result = searchResults[i];\r\n                    \r\n                    GUILayout.BeginHorizontal();\r\n                    \r\n                    if (GUILayout.Button(result.name, GUILayout.Width(200)))\r\n                    {\r\n                        SelectSearchResult(result);\r\n                    }\r\n                    \r\n                    GUILayout.Label(result.type, GUILayout.Width(80));\r\n                    GUILayout.Label($\"{result.score:F2}\", GUILayout.Width(50));\r\n                    \r\n                    if (GUILayout.Button(\"打开\", GUILayout.Width(50)))\r\n                    {\r\n                        OpenSearchResult(result);\r\n                    }\r\n                    \r\n                    GUILayout.EndHorizontal();\r\n                }\r\n                \r\n                GUILayout.EndScrollView();\r\n                \r\n                if (GUILayout.Button(\"导出结果\"))\r\n                {\r\n                    ExportSearchResults();\r\n                }\r\n                \r\n                if (GUILayout.Button(\"清除结果\"))\r\n                {\r\n                    ClearSearchResults();\r\n                }\r\n            }\r\n            else\r\n            {\r\n                GUILayout.Label(\"没有搜索结果\");\r\n            }\r\n            \r\n            GUILayout.Space(10);\r\n            GUILayout.Label(\"搜索统计\", EditorStyles.boldLabel);\r\n            \r\n            GUILayout.Label(GetSearchStats());\r\n            \r\n            GUILayout.Space(10);\r\n            GUILayout.Label(\"配置\", EditorStyles.boldLabel);\r\n            \r\n            enableSearchService = EditorGUILayout.Toggle(\"启用搜索服务\", enableSearchService);\r\n            \r\n            GUILayout.EndArea();\r\n        }\r\n        \r\n        private Vector2 scrollPosition = Vector2.zero;\r\n    }\r\n} "
        }
    ]
}