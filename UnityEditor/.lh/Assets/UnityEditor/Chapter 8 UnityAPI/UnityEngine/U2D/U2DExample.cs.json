{
    "sourceFile": "Assets/UnityEditor/Chapter 8 UnityAPI/UnityEngine/U2D/U2DExample.cs",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1750937688302,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1750937688302,
            "name": "Commit-0",
            "content": "using UnityEngine;\r\nusing UnityEngine.U2D;\r\nusing System.Collections.Generic;\r\n\r\nnamespace UnityEditor.Chapter8.U2D\r\n{\r\n    /// <summary>\r\n    /// UnityEngine.U2D 2D系统案例\r\n    /// 演示SpriteAtlas、SpriteRenderer、2D物理、2D动画等功能\r\n    /// </summary>\r\n    public class U2DExample : MonoBehaviour\r\n    {\r\n        [Header(\"Sprite Atlas 设置\")]\r\n        [SerializeField] private SpriteAtlas spriteAtlas;\r\n        [SerializeField] private List<Sprite> sprites = new List<Sprite>();\r\n        [SerializeField] private SpriteRenderer spriteRenderer;\r\n        \r\n        [Header(\"2D 物理设置\")]\r\n        [SerializeField] private Rigidbody2D rigidbody2D;\r\n        [SerializeField] private Collider2D collider2D;\r\n        [SerializeField] private bool enablePhysics = true;\r\n        [SerializeField] private float physicsForce = 10f;\r\n        \r\n        [Header(\"2D 动画设置\")]\r\n        [SerializeField] private Animator animator;\r\n        [SerializeField] private RuntimeAnimatorController animatorController;\r\n        [SerializeField] private bool enableAnimation = true;\r\n        \r\n        [Header(\"2D 渲染设置\")]\r\n        [SerializeField] private SpriteSortPoint spriteSortPoint = SpriteSortPoint.Center;\r\n        [SerializeField] private bool flipX = false;\r\n        [SerializeField] private bool flipY = false;\r\n        [SerializeField] private Color spriteColor = Color.white;\r\n        \r\n        [Header(\"UI控制\")]\r\n        [SerializeField] private bool showControls = true;\r\n        \r\n        private int currentSpriteIndex = 0;\r\n        private Vector2 originalPosition;\r\n        private bool isAnimating = false;\r\n        \r\n        private void Start()\r\n        {\r\n            InitializeU2DComponents();\r\n        }\r\n        \r\n        /// <summary>\r\n        /// 初始化2D组件\r\n        /// </summary>\r\n        private void InitializeU2DComponents()\r\n        {\r\n            // 获取或添加SpriteRenderer\r\n            if (spriteRenderer == null)\r\n            {\r\n                spriteRenderer = GetComponent<SpriteRenderer>();\r\n                if (spriteRenderer == null)\r\n                {\r\n                    spriteRenderer = gameObject.AddComponent<SpriteRenderer>();\r\n                }\r\n            }\r\n            \r\n            // 获取或添加Rigidbody2D\r\n            if (rigidbody2D == null)\r\n            {\r\n                rigidbody2D = GetComponent<Rigidbody2D>();\r\n                if (rigidbody2D == null && enablePhysics)\r\n                {\r\n                    rigidbody2D = gameObject.AddComponent<Rigidbody2D>();\r\n                }\r\n            }\r\n            \r\n            // 获取或添加Collider2D\r\n            if (collider2D == null)\r\n            {\r\n                collider2D = GetComponent<Collider2D>();\r\n                if (collider2D == null && enablePhysics)\r\n                {\r\n                    collider2D = gameObject.AddComponent<BoxCollider2D>();\r\n                }\r\n            }\r\n            \r\n            // 获取或添加Animator\r\n            if (animator == null)\r\n            {\r\n                animator = GetComponent<Animator>();\r\n                if (animator == null && enableAnimation)\r\n                {\r\n                    animator = gameObject.AddComponent<Animator>();\r\n                }\r\n            }\r\n            \r\n            // 设置初始属性\r\n            originalPosition = transform.position;\r\n            SetupSpriteRenderer();\r\n            SetupPhysics();\r\n            SetupAnimation();\r\n        }\r\n        \r\n        /// <summary>\r\n        /// 设置SpriteRenderer属性\r\n        /// </summary>\r\n        private void SetupSpriteRenderer()\r\n        {\r\n            if (spriteRenderer != null)\r\n            {\r\n                spriteRenderer.spriteSortPoint = spriteSortPoint;\r\n                spriteRenderer.flipX = flipX;\r\n                spriteRenderer.flipY = flipY;\r\n                spriteRenderer.color = spriteColor;\r\n                \r\n                // 设置第一个Sprite\r\n                if (sprites.Count > 0)\r\n                {\r\n                    spriteRenderer.sprite = sprites[0];\r\n                }\r\n            }\r\n        }\r\n        \r\n        /// <summary>\r\n        /// 设置2D物理属性\r\n        /// </summary>\r\n        private void SetupPhysics()\r\n        {\r\n            if (rigidbody2D != null)\r\n            {\r\n                rigidbody2D.gravityScale = 1f;\r\n                rigidbody2D.drag = 0.5f;\r\n                rigidbody2D.angularDrag = 0.5f;\r\n            }\r\n        }\r\n        \r\n        /// <summary>\r\n        /// 设置动画属性\r\n        /// </summary>\r\n        private void SetupAnimation()\r\n        {\r\n            if (animator != null && animatorController != null)\r\n            {\r\n                animator.runtimeAnimatorController = animatorController;\r\n            }\r\n        }\r\n        \r\n        /// <summary>\r\n        /// 从SpriteAtlas加载Sprite\r\n        /// </summary>\r\n        public void LoadSpritesFromAtlas()\r\n        {\r\n            if (spriteAtlas != null)\r\n            {\r\n                spriteAtlas.GetSprites(sprites);\r\n                Debug.Log($\"从SpriteAtlas加载了 {sprites.Count} 个Sprite\");\r\n                \r\n                if (sprites.Count > 0 && spriteRenderer != null)\r\n                {\r\n                    spriteRenderer.sprite = sprites[0];\r\n                    currentSpriteIndex = 0;\r\n                }\r\n            }\r\n        }\r\n        \r\n        /// <summary>\r\n        /// 切换到下一个Sprite\r\n        /// </summary>\r\n        public void NextSprite()\r\n        {\r\n            if (sprites.Count > 0)\r\n            {\r\n                currentSpriteIndex = (currentSpriteIndex + 1) % sprites.Count;\r\n                if (spriteRenderer != null)\r\n                {\r\n                    spriteRenderer.sprite = sprites[currentSpriteIndex];\r\n                }\r\n                Debug.Log($\"切换到Sprite: {currentSpriteIndex}\");\r\n            }\r\n        }\r\n        \r\n        /// <summary>\r\n        /// 切换到上一个Sprite\r\n        /// </summary>\r\n        public void PreviousSprite()\r\n        {\r\n            if (sprites.Count > 0)\r\n            {\r\n                currentSpriteIndex = (currentSpriteIndex - 1 + sprites.Count) % sprites.Count;\r\n                if (spriteRenderer != null)\r\n                {\r\n                    spriteRenderer.sprite = sprites[currentSpriteIndex];\r\n                }\r\n                Debug.Log($\"切换到Sprite: {currentSpriteIndex}\");\r\n            }\r\n        }\r\n        \r\n        /// <summary>\r\n        /// 应用物理力\r\n        /// </summary>\r\n        public void ApplyPhysicsForce(Vector2 force)\r\n        {\r\n            if (rigidbody2D != null)\r\n            {\r\n                rigidbody2D.AddForce(force, ForceMode2D.Impulse);\r\n                Debug.Log($\"应用物理力: {force}\");\r\n            }\r\n        }\r\n        \r\n        /// <summary>\r\n        /// 重置位置\r\n        /// </summary>\r\n        public void ResetPosition()\r\n        {\r\n            transform.position = originalPosition;\r\n            if (rigidbody2D != null)\r\n            {\r\n                rigidbody2D.velocity = Vector2.zero;\r\n                rigidbody2D.angularVelocity = 0f;\r\n            }\r\n            Debug.Log(\"位置已重置\");\r\n        }\r\n        \r\n        /// <summary>\r\n        /// 切换物理开关\r\n        /// </summary>\r\n        public void TogglePhysics()\r\n        {\r\n            enablePhysics = !enablePhysics;\r\n            \r\n            if (rigidbody2D != null)\r\n            {\r\n                rigidbody2D.simulated = enablePhysics;\r\n            }\r\n            \r\n            if (collider2D != null)\r\n            {\r\n                collider2D.enabled = enablePhysics;\r\n            }\r\n            \r\n            Debug.Log($\"物理系统: {(enablePhysics ? \"开启\" : \"关闭\")}\");\r\n        }\r\n        \r\n        /// <summary>\r\n        /// 切换动画开关\r\n        /// </summary>\r\n        public void ToggleAnimation()\r\n        {\r\n            enableAnimation = !enableAnimation;\r\n            \r\n            if (animator != null)\r\n            {\r\n                animator.enabled = enableAnimation;\r\n            }\r\n            \r\n            Debug.Log($\"动画系统: {(enableAnimation ? \"开启\" : \"关闭\")}\");\r\n        }\r\n        \r\n        /// <summary>\r\n        /// 播放动画\r\n        /// </summary>\r\n        public void PlayAnimation(string triggerName)\r\n        {\r\n            if (animator != null && enableAnimation)\r\n            {\r\n                animator.SetTrigger(triggerName);\r\n                isAnimating = true;\r\n                Debug.Log($\"播放动画: {triggerName}\");\r\n            }\r\n        }\r\n        \r\n        /// <summary>\r\n        /// 停止动画\r\n        /// </summary>\r\n        public void StopAnimation()\r\n        {\r\n            if (animator != null)\r\n            {\r\n                animator.enabled = false;\r\n                isAnimating = false;\r\n                Debug.Log(\"动画已停止\");\r\n            }\r\n        }\r\n        \r\n        /// <summary>\r\n        /// 设置Sprite颜色\r\n        /// </summary>\r\n        public void SetSpriteColor(Color color)\r\n        {\r\n            spriteColor = color;\r\n            if (spriteRenderer != null)\r\n            {\r\n                spriteRenderer.color = color;\r\n            }\r\n        }\r\n        \r\n        /// <summary>\r\n        /// 翻转Sprite\r\n        /// </summary>\r\n        public void FlipSprite(bool flipX, bool flipY)\r\n        {\r\n            this.flipX = flipX;\r\n            this.flipY = flipY;\r\n            \r\n            if (spriteRenderer != null)\r\n            {\r\n                spriteRenderer.flipX = flipX;\r\n                spriteRenderer.flipY = flipY;\r\n            }\r\n        }\r\n        \r\n        /// <summary>\r\n        /// 设置Sprite排序点\r\n        /// </summary>\r\n        public void SetSpriteSortPoint(SpriteSortPoint sortPoint)\r\n        {\r\n            spriteSortPoint = sortPoint;\r\n            if (spriteRenderer != null)\r\n            {\r\n                spriteRenderer.spriteSortPoint = sortPoint;\r\n            }\r\n        }\r\n        \r\n        /// <summary>\r\n        /// 创建2D碰撞器\r\n        /// </summary>\r\n        public void CreateCollider2D(Collider2DType type)\r\n        {\r\n            // 移除现有碰撞器\r\n            if (collider2D != null)\r\n            {\r\n                DestroyImmediate(collider2D);\r\n            }\r\n            \r\n            // 创建新碰撞器\r\n            switch (type)\r\n            {\r\n                case Collider2DType.Box:\r\n                    collider2D = gameObject.AddComponent<BoxCollider2D>();\r\n                    break;\r\n                case Collider2DType.Circle:\r\n                    collider2D = gameObject.AddComponent<CircleCollider2D>();\r\n                    break;\r\n                case Collider2DType.Capsule:\r\n                    collider2D = gameObject.AddComponent<CapsuleCollider2D>();\r\n                    break;\r\n                case Collider2DType.Polygon:\r\n                    collider2D = gameObject.AddComponent<PolygonCollider2D>();\r\n                    break;\r\n            }\r\n            \r\n            Debug.Log($\"创建了 {type} 碰撞器\");\r\n        }\r\n        \r\n        /// <summary>\r\n        /// 获取Sprite信息\r\n        /// </summary>\r\n        public void GetSpriteInfo()\r\n        {\r\n            if (spriteRenderer != null && spriteRenderer.sprite != null)\r\n            {\r\n                Sprite sprite = spriteRenderer.sprite;\r\n                Debug.Log(\"=== Sprite信息 ===\");\r\n                Debug.Log($\"名称: {sprite.name}\");\r\n                Debug.Log($\"尺寸: {sprite.rect.width} x {sprite.rect.height}\");\r\n                Debug.Log($\"像素密度: {sprite.pixelsPerUnit}\");\r\n                Debug.Log($\"边界: {sprite.bounds}\");\r\n                Debug.Log($\"枢轴点: {sprite.pivot}\");\r\n            }\r\n        }\r\n        \r\n        private void OnGUI()\r\n        {\r\n            if (!showControls) return;\r\n            \r\n            GUILayout.BeginArea(new Rect(10, 10, 400, 600));\r\n            GUILayout.Label(\"UnityEngine.U2D 2D系统案例\", EditorStyles.boldLabel);\r\n            \r\n            GUILayout.Space(10);\r\n            \r\n            // Sprite控制\r\n            GUILayout.Label(\"Sprite控制\", EditorStyles.boldLabel);\r\n            if (GUILayout.Button(\"从Atlas加载Sprites\"))\r\n            {\r\n                LoadSpritesFromAtlas();\r\n            }\r\n            \r\n            GUILayout.BeginHorizontal();\r\n            if (GUILayout.Button(\"上一个Sprite\")) PreviousSprite();\r\n            if (GUILayout.Button(\"下一个Sprite\")) NextSprite();\r\n            GUILayout.EndHorizontal();\r\n            \r\n            GUILayout.Label($\"当前Sprite: {currentSpriteIndex + 1}/{sprites.Count}\");\r\n            \r\n            GUILayout.Space(10);\r\n            \r\n            // 物理控制\r\n            GUILayout.Label(\"物理控制\", EditorStyles.boldLabel);\r\n            if (GUILayout.Button($\"物理系统: {(enablePhysics ? \"开启\" : \"关闭\")}\"))\r\n            {\r\n                TogglePhysics();\r\n            }\r\n            \r\n            GUILayout.BeginHorizontal();\r\n            if (GUILayout.Button(\"向上力\")) ApplyPhysicsForce(Vector2.up * physicsForce);\r\n            if (GUILayout.Button(\"向下力\")) ApplyPhysicsForce(Vector2.down * physicsForce);\r\n            GUILayout.EndHorizontal();\r\n            \r\n            GUILayout.BeginHorizontal();\r\n            if (GUILayout.Button(\"向左力\")) ApplyPhysicsForce(Vector2.left * physicsForce);\r\n            if (GUILayout.Button(\"向右力\")) ApplyPhysicsForce(Vector2.right * physicsForce);\r\n            GUILayout.EndHorizontal();\r\n            \r\n            if (GUILayout.Button(\"重置位置\"))\r\n            {\r\n                ResetPosition();\r\n            }\r\n            \r\n            GUILayout.Space(10);\r\n            \r\n            // 动画控制\r\n            GUILayout.Label(\"动画控制\", EditorStyles.boldLabel);\r\n            if (GUILayout.Button($\"动画系统: {(enableAnimation ? \"开启\" : \"关闭\")}\"))\r\n            {\r\n                ToggleAnimation();\r\n            }\r\n            \r\n            GUILayout.BeginHorizontal();\r\n            if (GUILayout.Button(\"播放动画\")) PlayAnimation(\"Play\");\r\n            if (GUILayout.Button(\"停止动画\")) StopAnimation();\r\n            GUILayout.EndHorizontal();\r\n            \r\n            GUILayout.Space(10);\r\n            \r\n            // 渲染设置\r\n            GUILayout.Label(\"渲染设置\", EditorStyles.boldLabel);\r\n            \r\n            bool newFlipX = GUILayout.Toggle(flipX, \"水平翻转\");\r\n            if (newFlipX != flipX)\r\n            {\r\n                FlipSprite(newFlipX, flipY);\r\n            }\r\n            \r\n            bool newFlipY = GUILayout.Toggle(flipY, \"垂直翻转\");\r\n            if (newFlipY != flipY)\r\n            {\r\n                FlipSprite(flipX, newFlipY);\r\n            }\r\n            \r\n            // 颜色选择\r\n            Color newColor = spriteColor;\r\n            GUILayout.Label(\"Sprite颜色:\");\r\n            newColor.r = GUILayout.HorizontalSlider(newColor.r, 0f, 1f);\r\n            newColor.g = GUILayout.HorizontalSlider(newColor.g, 0f, 1f);\r\n            newColor.b = GUILayout.HorizontalSlider(newColor.b, 0f, 1f);\r\n            newColor.a = GUILayout.HorizontalSlider(newColor.a, 0f, 1f);\r\n            \r\n            if (newColor != spriteColor)\r\n            {\r\n                SetSpriteColor(newColor);\r\n            }\r\n            \r\n            GUILayout.Space(10);\r\n            \r\n            // 碰撞器设置\r\n            GUILayout.Label(\"碰撞器设置\", EditorStyles.boldLabel);\r\n            GUILayout.BeginHorizontal();\r\n            if (GUILayout.Button(\"Box\")) CreateCollider2D(Collider2DType.Box);\r\n            if (GUILayout.Button(\"Circle\")) CreateCollider2D(Collider2DType.Circle);\r\n            GUILayout.EndHorizontal();\r\n            \r\n            GUILayout.BeginHorizontal();\r\n            if (GUILayout.Button(\"Capsule\")) CreateCollider2D(Collider2DType.Capsule);\r\n            if (GUILayout.Button(\"Polygon\")) CreateCollider2D(Collider2DType.Polygon);\r\n            GUILayout.EndHorizontal();\r\n            \r\n            GUILayout.Space(10);\r\n            \r\n            // 信息显示\r\n            GUILayout.Label(\"信息\", EditorStyles.boldLabel);\r\n            if (GUILayout.Button(\"获取Sprite信息\"))\r\n            {\r\n                GetSpriteInfo();\r\n            }\r\n            \r\n            GUILayout.Label($\"位置: {transform.position}\");\r\n            GUILayout.Label($\"旋转: {transform.rotation.eulerAngles}\");\r\n            GUILayout.Label($\"缩放: {transform.localScale}\");\r\n            \r\n            if (rigidbody2D != null)\r\n            {\r\n                GUILayout.Label($\"速度: {rigidbody2D.velocity}\");\r\n                GUILayout.Label($\"角速度: {rigidbody2D.angularVelocity}\");\r\n            }\r\n            \r\n            GUILayout.EndArea();\r\n        }\r\n        \r\n        /// <summary>\r\n        /// 碰撞器类型枚举\r\n        /// </summary>\r\n        public enum Collider2DType\r\n        {\r\n            Box,\r\n            Circle,\r\n            Capsule,\r\n            Polygon\r\n        }\r\n    }\r\n} "
        }
    ]
}