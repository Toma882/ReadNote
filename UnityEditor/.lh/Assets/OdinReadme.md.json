{
    "sourceFile": "Assets/OdinReadme.md",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 7,
            "patches": [
                {
                    "date": 1748162031290,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1748162078755,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -311,8 +311,215 @@\n }\r\n #endif\r\n ```\r\n \r\n+## 实例案例库\r\n+\r\n+以下是基于Odin Inspector官方Demo和源代码的实际案例，每个案例都对应README中的知识点，可以直接查看和学习。\r\n+\r\n+### 自定义绘制器案例\r\n+\r\n+#### 1. 健康条绘制器 - HealthBarExample\r\n+**对应知识点**: `OdinAttributeDrawer<T, U>` 自定义属性绘制器\r\n+**文件位置**: `Assets/Plugins/Sirenix/Demos/Custom Drawers/Scripts/HealthBarExample.cs`\r\n+**功能**: 为float类型字段创建可视化的健康条显示\r\n+\r\n+```csharp\r\n+// 使用示例\r\n+[HealthBar(100)]\r\n+public float Health;\r\n+\r\n+// 实现要点\r\n+public class HealthBarAttributeDrawer : OdinAttributeDrawer<HealthBarAttribute, float>\r\n+{\r\n+    protected override void DrawPropertyLayout(GUIContent label)\r\n+    {\r\n+        this.CallNextDrawer(label);  // 绘制原始字段\r\n+        // 绘制自定义健康条可视化\r\n+        float width = Mathf.Clamp01(this.ValueEntry.SmartValue / this.Attribute.MaxHealth);\r\n+        SirenixEditorGUI.DrawSolidRect(rect.SetWidth(rect.width * width), Color.red, false);\r\n+    }\r\n+}\r\n+```\r\n+\r\n+#### 2. 自定义结构体绘制器 - CustomDrawerExample\r\n+**对应知识点**: `OdinValueDrawer<T>` 值类型绘制器\r\n+**文件位置**: `Assets/Plugins/Sirenix/Demos/Custom Drawers/Scripts/CustomDrawerExample.cs`\r\n+**功能**: 为自定义结构体创建专门的Inspector显示\r\n+\r\n+```csharp\r\n+// 自定义结构体\r\n+[Serializable]\r\n+public struct MyStruct\r\n+{\r\n+    public float X;\r\n+    public float Y;\r\n+}\r\n+\r\n+// 绘制器实现\r\n+public class CustomStructDrawer : OdinValueDrawer<MyStruct>\r\n+{\r\n+    protected override void DrawPropertyLayout(GUIContent label)\r\n+    {\r\n+        // 自定义绘制逻辑，将X和Y显示为滑动条\r\n+        value.X = EditorGUI.Slider(rect.AlignLeft(rect.width * 0.5f), \"X\", value.X, 0, 1);\r\n+        value.Y = EditorGUI.Slider(rect.AlignRight(rect.width * 0.5f), \"Y\", value.Y, 0, 1);\r\n+    }\r\n+}\r\n+```\r\n+\r\n+#### 3. 扫雷游戏绘制器 - MinesweeperExample\r\n+**对应知识点**: 复杂自定义绘制器，游戏逻辑集成\r\n+**文件位置**: `Assets/Plugins/Sirenix/Demos/Custom Drawers/Scripts/MinesweeperExample.cs`\r\n+**功能**: 在Inspector中实现完整的扫雷游戏\r\n+\r\n+#### 4. 验证系统示例 - ValidationExample\r\n+**对应知识点**: `IAttributeValidator` 属性验证器\r\n+**文件位置**: `Assets/Plugins/Sirenix/Demos/Custom Drawers/Scripts/ValidationExample.cs`\r\n+**功能**: 实现字段值的自定义验证逻辑\r\n+\r\n+### 编辑器窗口案例\r\n+\r\n+#### 1. 基础Odin编辑器窗口 - BasicOdinEditorExampleWindow\r\n+**对应知识点**: `OdinEditorWindow` 基础编辑器窗口\r\n+**文件位置**: `Assets/Plugins/Sirenix/Demos/Editor Windows/Scripts/Editor/BasicOdinEditorExampleWindow.cs`\r\n+**功能**: 展示如何创建最简单的Odin编辑器窗口\r\n+\r\n+```csharp\r\n+public class BasicOdinEditorExampleWindow : OdinEditorWindow\r\n+{\r\n+    [MenuItem(\"Tools/Odin/Demos/基础Odin编辑器窗口\")]\r\n+    private static void OpenWindow()\r\n+    {\r\n+        var window = GetWindow<BasicOdinEditorExampleWindow>();\r\n+        window.position = GUIHelper.GetEditorWindowRect().AlignCenter(700, 700);\r\n+    }\r\n+\r\n+    [EnumToggleButtons]\r\n+    [InfoBox(\"从OdinEditorWindow继承，像创建Inspector一样创建编辑器窗口\")]\r\n+    public ViewTool SomeField;\r\n+}\r\n+```\r\n+\r\n+#### 2. Odin菜单编辑器窗口 - OdinMenuEditorWindowExample\r\n+**对应知识点**: `OdinMenuEditorWindow`, `OdinMenuTree` 菜单系统\r\n+**文件位置**: `Assets/Plugins/Sirenix/Demos/Editor Windows/Scripts/Editor/OdinMenuEditorWindowExample.cs`\r\n+**功能**: 创建带有树形菜单的复杂编辑器窗口\r\n+\r\n+```csharp\r\n+public class OdinMenuEditorWindowExample : OdinMenuEditorWindow\r\n+{\r\n+    protected override OdinMenuTree BuildMenuTree()\r\n+    {\r\n+        OdinMenuTree tree = new OdinMenuTree(supportsMultiSelect: true)\r\n+        {\r\n+            { \"首页\", this, EditorIcons.House },\r\n+            { \"Odin设置\", null, SdfIconType.GearFill },\r\n+            { \"Odin设置/调色板\", ColorPaletteManager.Instance, SdfIconType.PaletteFill }\r\n+        };\r\n+        \r\n+        tree.AddAllAssetsAtPath(\"更多设置\", \"Plugins/Sirenix\", typeof(ScriptableObject), true);\r\n+        return tree;\r\n+    }\r\n+}\r\n+```\r\n+\r\n+#### 3. 菜单样式自定义 - OdinMenuStyleExample\r\n+**对应知识点**: `OdinMenuStyle` 菜单外观定制\r\n+**文件位置**: `Assets/Plugins/Sirenix/Demos/Editor Windows/Scripts/Editor/OdinMenuStyleExample.cs`\r\n+**功能**: 展示如何自定义菜单树的外观和行为\r\n+\r\n+#### 4. 快速检查对象 - QuicklyInspectObjects\r\n+**对应知识点**: `PropertyTree` 属性树系统\r\n+**文件位置**: `Assets/Plugins/Sirenix/Demos/Editor Windows/Scripts/Editor/QuicklyInspectObjects.cs`\r\n+**功能**: 创建快速检查和编辑对象的工具窗口\r\n+\r\n+### 属性处理器案例\r\n+\r\n+#### 1. 基础属性处理器 - BasicAttributeProcessorExample\r\n+**对应知识点**: `OdinAttributeProcessor<T>` 属性处理器基类\r\n+**文件位置**: `Assets/Plugins/Sirenix/Demos/Custom Attribute Processors/Scripts/BasicAttributeProcessorExample.cs`\r\n+**功能**: 动态为类型添加特性，修改Inspector显示\r\n+\r\n+```csharp\r\n+public class MyResolvedClassAttributeProcessor : OdinAttributeProcessor<MyCustomClass>\r\n+{\r\n+    public override void ProcessSelfAttributes(InspectorProperty property, List<Attribute> attributes)\r\n+    {\r\n+        attributes.Add(new InfoBoxAttribute(\"动态添加的属性。\"));\r\n+        attributes.Add(new InlinePropertyAttribute());\r\n+    }\r\n+\r\n+    public override void ProcessChildMemberAttributes(InspectorProperty parentProperty, MemberInfo member, List<Attribute> attributes)\r\n+    {\r\n+        if (member.Name == \"Mode\")\r\n+        {\r\n+            attributes.Add(new EnumToggleButtonsAttribute());\r\n+        }\r\n+        else if (member.Name == \"Size\")\r\n+        {\r\n+            attributes.Add(new RangeAttribute(0, 100));\r\n+        }\r\n+    }\r\n+}\r\n+```\r\n+\r\n+#### 2. 按声明类型分组 - TabGroupByDeclaringType\r\n+**对应知识点**: 属性处理器的高级应用\r\n+**文件位置**: `Assets/Plugins/Sirenix/Demos/Custom Attribute Processors/Scripts/TabGroupByDeclaringType.cs`\r\n+**功能**: 根据成员的声明类型自动创建选项卡分组\r\n+\r\n+#### 3. 列表项属性处理器 - AttributeProcessorForListItemsExample\r\n+**对应知识点**: 集合类型的属性处理\r\n+**文件位置**: `Assets/Plugins/Sirenix/Demos/Custom Attribute Processors/Scripts/AttributeProcessorForListItemsExample.cs`\r\n+**功能**: 为列表中的每个项目动态添加特性\r\n+\r\n+#### 4. 字典键值自定义 - CustomizeDictionaryKeyValueExample\r\n+**对应知识点**: 复杂类型的属性处理\r\n+**文件位置**: `Assets/Plugins/Sirenix/Demos/Custom Attribute Processors/Scripts/CustomizeDictionaryKeyValueExample.cs`\r\n+**功能**: 自定义字典类型在Inspector中的显示方式\r\n+\r\n+### 特性组合案例\r\n+\r\n+#### 1. 值和动作解析器 - ValueAndActionResolversExample\r\n+**对应知识点**: `ValueResolver<T>`, `ActionResolver` 解析器系统\r\n+**文件位置**: `Assets/Plugins/Sirenix/Demos/Custom Drawers/Scripts/ValueAndActionResolversExample.cs`\r\n+**功能**: 展示如何使用解析器系统实现动态值计算和方法调用\r\n+\r\n+#### 2. 反射示例 - ReflectionExample\r\n+**对应知识点**: Odin的反射能力和动态特性\r\n+**文件位置**: `Assets/Plugins/Sirenix/Demos/Custom Drawers/Scripts/ReflectionExample.cs`\r\n+**功能**: 展示Odin如何处理复杂的反射场景\r\n+\r\n+#### 3. 泛型菜单示例 - GenericMenuExample\r\n+**对应知识点**: 泛型类型的处理\r\n+**文件位置**: `Assets/Plugins/Sirenix/Demos/Custom Drawers/Scripts/GenericMenuExample.cs`\r\n+**功能**: 展示如何为泛型类型创建自定义菜单\r\n+\r\n+### 案例学习路径建议\r\n+\r\n+1. **初学者路径**:\r\n+   - 从 `BasicOdinEditorExampleWindow` 开始了解基础窗口创建\r\n+   - 学习 `HealthBarExample` 理解简单的自定义绘制器\r\n+   - 查看 `BasicAttributeProcessorExample` 了解属性处理器概念\r\n+\r\n+2. **进阶路径**:\r\n+   - 研究 `OdinMenuEditorWindowExample` 掌握复杂窗口结构\r\n+   - 分析 `CustomDrawerExample` 学习值类型绘制器\r\n+   - 深入 `ValueAndActionResolversExample` 理解解析器系统\r\n+\r\n+3. **高级路径**:\r\n+   - 挑战 `MinesweeperExample` 学习复杂交互逻辑\r\n+   - 研究 `OdinMenuStyleExample` 掌握界面定制技巧\r\n+   - 分析各种属性处理器实现高级功能\r\n+\r\n+### 如何使用这些案例\r\n+\r\n+1. **查看源码**: 直接打开对应文件查看完整实现\r\n+2. **运行Demo**: 导入对应的unitypackage文件体验效果\r\n+3. **修改实验**: 基于现有代码进行修改和扩展\r\n+4. **组合应用**: 将多个案例的技术点组合到自己的项目中\r\n+\r\n ## 思维导图\r\n \r\n ```\r\n Odin Inspector\r\n"
                },
                {
                    "date": 1748162107215,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -28,23 +28,23 @@\n ## 重要类和接口\r\n \r\n ### 核心类\r\n \r\n-| 类名 | 命名空间 | 描述 | 重要方法 |\r\n-|------|----------|------|----------|\r\n-| `OdinEditor` | `Sirenix.OdinInspector.Editor` | Odin编辑器的基类，用于创建自定义编辑器 | `OdinEditor.DrawEditor(Object)` |\r\n-| `OdinEditorWindow` | `Sirenix.OdinInspector.Editor` | 创建自定义编辑器窗口的基类 | `OdinEditorWindow.DrawEditor(Object)`, `OdinEditorWindow.GetTarget()` |\r\n-| `OdinMenuEditorWindow` | `Sirenix.OdinInspector.Editor` | 带菜单的编辑器窗口基类 | `OdinMenuEditorWindow.BuildMenuTree()`, `OdinMenuEditorWindow.DrawMenu()` |\r\n-| `OdinSelector<T>` | `Sirenix.OdinInspector.Editor` | 创建自定义选择器的基类 | `OdinSelector<T>.SelectionConfirmed`, `OdinSelector<T>.DrawSelectionTree()` |\r\n-| `SerializedMonoBehaviour` | `Sirenix.OdinInspector` | 支持Odin序列化的MonoBehaviour | - |\r\n-| `SerializedScriptableObject` | `Sirenix.OdinInspector` | 支持Odin序列化的ScriptableObject | - |\r\n-| `GlobalConfig<T>` | `Sirenix.OdinInspector` | 全局配置单例的基类 | `GlobalConfig<T>.Instance` |\r\n-| `PropertyTree` | `Sirenix.OdinInspector.Editor` | 表示Inspector属性树的类 | `PropertyTree.Draw()`, `PropertyTree.GetPropertyAtPath()`, `PropertyTree.GetPropertyAtIndex()` |\r\n-| `InspectorProperty` | `Sirenix.OdinInspector.Editor` | 表示Inspector中的单个属性 | `InspectorProperty.Draw()`, `InspectorProperty.Children`, `InspectorProperty.ValueEntry` |\r\n-| `OdinMenuTree` | `Sirenix.OdinInspector.Editor` | 菜单树，用于构建编辑器窗口菜单 | `OdinMenuTree.AddItem()`, `OdinMenuTree.AddAllAssetsAtPath()`, `OdinMenuTree.Selection` |\r\n-| `OdinMenuItem` | `Sirenix.OdinInspector.Editor` | 表示菜单树中的单个菜单项 | `OdinMenuItem.ChildMenuItems`, `OdinMenuItem.Selected` |\r\n-| `TypeInfoBox` | `Sirenix.OdinInspector.Editor` | 用于在编辑器中显示类型信息的工具类 | `TypeInfoBox.DrawInfoBox()` |\r\n-| `SirenixEditorGUI` | `Sirenix.Utilities.Editor` | 提供扩展的编辑器GUI功能 | `SirenixEditorGUI.BeginBox()`, `SirenixEditorGUI.DrawSolidRect()` |\r\n+| 类名 | 命名空间 | 描述 | 重要方法 | 案例参考 |\r\n+|------|----------|------|----------|----------|\r\n+| `OdinEditor` | `Sirenix.OdinInspector.Editor` | Odin编辑器的基类，用于创建自定义编辑器 | `OdinEditor.DrawEditor(Object)` | - |\r\n+| `OdinEditorWindow` | `Sirenix.OdinInspector.Editor` | 创建自定义编辑器窗口的基类 | `OdinEditorWindow.DrawEditor(Object)`, `OdinEditorWindow.GetTarget()` | [BasicOdinEditorExampleWindow](#1-基础odin编辑器窗口---basicodineditorexamplewindow) |\r\n+| `OdinMenuEditorWindow` | `Sirenix.OdinInspector.Editor` | 带菜单的编辑器窗口基类 | `OdinMenuEditorWindow.BuildMenuTree()`, `OdinMenuEditorWindow.DrawMenu()` | [OdinMenuEditorWindowExample](#2-odin菜单编辑器窗口---odinmenueditorwindowexample) |\r\n+| `OdinSelector<T>` | `Sirenix.OdinInspector.Editor` | 创建自定义选择器的基类 | `OdinSelector<T>.SelectionConfirmed`, `OdinSelector<T>.DrawSelectionTree()` | - |\r\n+| `SerializedMonoBehaviour` | `Sirenix.OdinInspector` | 支持Odin序列化的MonoBehaviour | - | [SomeData.cs](Assets/Plugins/Sirenix/Demos/Editor%20Windows/Scripts/Editor/SomeData.cs) |\r\n+| `SerializedScriptableObject` | `Sirenix.OdinInspector` | 支持Odin序列化的ScriptableObject | - | - |\r\n+| `GlobalConfig<T>` | `Sirenix.OdinInspector` | 全局配置单例的基类 | `GlobalConfig<T>.Instance` | - |\r\n+| `PropertyTree` | `Sirenix.OdinInspector.Editor` | 表示Inspector属性树的类 | `PropertyTree.Draw()`, `PropertyTree.GetPropertyAtPath()`, `PropertyTree.GetPropertyAtIndex()` | [QuicklyInspectObjects](#4-快速检查对象---quicklyinspectobjects) |\r\n+| `InspectorProperty` | `Sirenix.OdinInspector.Editor` | 表示Inspector中的单个属性 | `InspectorProperty.Draw()`, `InspectorProperty.Children`, `InspectorProperty.ValueEntry` | [BasicAttributeProcessorExample](#1-基础属性处理器---basicattributeprocessorexample) |\r\n+| `OdinMenuTree` | `Sirenix.OdinInspector.Editor` | 菜单树，用于构建编辑器窗口菜单 | `OdinMenuTree.AddItem()`, `OdinMenuTree.AddAllAssetsAtPath()`, `OdinMenuTree.Selection` | [OdinMenuEditorWindowExample](#2-odin菜单编辑器窗口---odinmenueditorwindowexample) |\r\n+| `OdinMenuItem` | `Sirenix.OdinInspector.Editor` | 表示菜单树中的单个菜单项 | `OdinMenuItem.ChildMenuItems`, `OdinMenuItem.Selected` | [OdinMenuStyleExample](#3-菜单样式自定义---odinmenustyleexample) |\r\n+| `TypeInfoBox` | `Sirenix.OdinInspector.Editor` | 用于在编辑器中显示类型信息的工具类 | `TypeInfoBox.DrawInfoBox()` | [HealthBarExample](#1-健康条绘制器---healthbarexample) |\r\n+| `SirenixEditorGUI` | `Sirenix.Utilities.Editor` | 提供扩展的编辑器GUI功能 | `SirenixEditorGUI.BeginBox()`, `SirenixEditorGUI.DrawSolidRect()` | [HealthBarExample](#1-健康条绘制器---healthbarexample) |\r\n \r\n ### 重要接口\r\n \r\n | 接口名 | 命名空间 | 描述 | 重要方法 |\r\n"
                },
                {
                    "date": 1748162127836,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -69,17 +69,17 @@\n | `OdinAttributeProcessorLocator` | `Sirenix.OdinInspector.Editor` | Odin属性处理器定位器 | `OdinAttributeProcessorLocator.GetChildProcessors()` |\r\n \r\n ### 自定义绘制器类\r\n \r\n-| 类名 | 命名空间 | 描述 | 重要方法 |\r\n-|------|----------|------|----------|\r\n-| `OdinAttributeDrawer<T>` | `Sirenix.OdinInspector.Editor` | 属性绘制器基类，用于绘制带特定特性的属性 | `OdinAttributeDrawer<T>.DrawPropertyLayout()`, `OdinAttributeDrawer<T>.CallNextDrawer()` |\r\n-| `OdinAttributeDrawer<T, U>` | `Sirenix.OdinInspector.Editor` | 泛型属性绘制器基类，用于绘制带特定特性的特定类型属性 | `OdinAttributeDrawer<T, U>.DrawPropertyLayout()`, `OdinAttributeDrawer<T, U>.ValueEntry` |\r\n-| `OdinValueDrawer<T>` | `Sirenix.OdinInspector.Editor` | 值绘制器基类，用于绘制特定类型的值 | `OdinValueDrawer<T>.DrawPropertyLayout()`, `OdinValueDrawer<T>.ValueEntry` |\r\n-| `OdinGroupDrawer<T>` | `Sirenix.OdinInspector.Editor` | 组绘制器基类，用于绘制属性组 | `OdinGroupDrawer<T>.DrawPropertyLayout()`, `OdinGroupDrawer<T>.GroupAttribute` |\r\n-| `InspectorPropertyDrawer` | `Sirenix.OdinInspector.Editor` | Inspector属性绘制器基类 | `InspectorPropertyDrawer.CanDrawProperty()`, `InspectorPropertyDrawer.DrawProperty()` |\r\n-| `DrawerPriority` | `Sirenix.OdinInspector.Editor` | 绘制器优先级特性，用于控制绘制器的执行顺序 | - |\r\n-| `DrawerLocator` | `Sirenix.OdinInspector.Editor` | 绘制器定位器，用于查找适用的绘制器 | `DrawerLocator.GetDrawers()` |\r\n+| 类名 | 命名空间 | 描述 | 重要方法 | 案例参考 |\r\n+|------|----------|------|----------|----------|\r\n+| `OdinAttributeDrawer<T>` | `Sirenix.OdinInspector.Editor` | 属性绘制器基类，用于绘制带特定特性的属性 | `OdinAttributeDrawer<T>.DrawPropertyLayout()`, `OdinAttributeDrawer<T>.CallNextDrawer()` | - |\r\n+| `OdinAttributeDrawer<T, U>` | `Sirenix.OdinInspector.Editor` | 泛型属性绘制器基类，用于绘制带特定特性的特定类型属性 | `OdinAttributeDrawer<T, U>.DrawPropertyLayout()`, `OdinAttributeDrawer<T, U>.ValueEntry` | [HealthBarExample](#1-健康条绘制器---healthbarexample) |\r\n+| `OdinValueDrawer<T>` | `Sirenix.OdinInspector.Editor` | 值绘制器基类，用于绘制特定类型的值 | `OdinValueDrawer<T>.DrawPropertyLayout()`, `OdinValueDrawer<T>.ValueEntry` | [CustomDrawerExample](#2-自定义结构体绘制器---customdrawerexample) |\r\n+| `OdinGroupDrawer<T>` | `Sirenix.OdinInspector.Editor` | 组绘制器基类，用于绘制属性组 | `OdinGroupDrawer<T>.DrawPropertyLayout()`, `OdinGroupDrawer<T>.GroupAttribute` | [CustomGroupExample](Assets/Plugins/Sirenix/Demos/Custom%20Drawers/Scripts/CustomGroupExample.cs) |\r\n+| `InspectorPropertyDrawer` | `Sirenix.OdinInspector.Editor` | Inspector属性绘制器基类 | `InspectorPropertyDrawer.CanDrawProperty()`, `InspectorPropertyDrawer.DrawProperty()` | [GenericDrawerExample](Assets/Plugins/Sirenix/Demos/Custom%20Drawers/Scripts/GenericDrawerExample.cs) |\r\n+| `DrawerPriority` | `Sirenix.OdinInspector.Editor` | 绘制器优先级特性，用于控制绘制器的执行顺序 | - | [PriorityExamples](Assets/Plugins/Sirenix/Demos/Custom%20Drawers/Scripts/PriorityExamples.cs) |\r\n+| `DrawerLocator` | `Sirenix.OdinInspector.Editor` | 绘制器定位器，用于查找适用的绘制器 | `DrawerLocator.GetDrawers()` | - |\r\n \r\n ### 值提供器和解析器\r\n \r\n | 类名 | 命名空间 | 描述 | 重要方法 |\r\n"
                },
                {
                    "date": 1748162140911,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -60,14 +60,14 @@\n | `IPathRedirector` | `Sirenix.OdinInspector.Editor` | 路径重定向接口 | `IPathRedirector.RedirectPath()` |\r\n \r\n ### 属性处理器类\r\n \r\n-| 类名 | 命名空间 | 描述 | 重要方法 |\r\n-|------|----------|------|----------|\r\n-| `OdinAttributeProcessor<T>` | `Sirenix.OdinInspector.Editor` | 属性处理器基类，用于处理特定类型的属性 | `OdinAttributeProcessor<T>.ProcessChildMemberAttributes()`, `OdinAttributeProcessor<T>.ProcessMemberAttributes()` |\r\n-| `AttributeProcessorLocator` | `Sirenix.OdinInspector.Editor` | 属性处理器定位器，用于查找适用的处理器 | `AttributeProcessorLocator.GetProcessors()` |\r\n-| `DefaultOdinAttributeProcessor` | `Sirenix.OdinInspector.Editor` | 默认属性处理器 | - |\r\n-| `OdinAttributeProcessorLocator` | `Sirenix.OdinInspector.Editor` | Odin属性处理器定位器 | `OdinAttributeProcessorLocator.GetChildProcessors()` |\r\n+| 类名 | 命名空间 | 描述 | 重要方法 | 案例参考 |\r\n+|------|----------|------|----------|----------|\r\n+| `OdinAttributeProcessor<T>` | `Sirenix.OdinInspector.Editor` | 属性处理器基类，用于处理特定类型的属性 | `OdinAttributeProcessor<T>.ProcessChildMemberAttributes()`, `OdinAttributeProcessor<T>.ProcessMemberAttributes()` | [BasicAttributeProcessorExample](#1-基础属性处理器---basicattributeprocessorexample) |\r\n+| `AttributeProcessorLocator` | `Sirenix.OdinInspector.Editor` | 属性处理器定位器，用于查找适用的处理器 | `AttributeProcessorLocator.GetProcessors()` | [CustomAttributeProcessorLocatorExample](Assets/Plugins/Sirenix/Demos/Custom%20Attribute%20Processors/Scripts/CustomAttributeProcessorLocatorExample.cs) |\r\n+| `DefaultOdinAttributeProcessor` | `Sirenix.OdinInspector.Editor` | 默认属性处理器 | - | - |\r\n+| `OdinAttributeProcessorLocator` | `Sirenix.OdinInspector.Editor` | Odin属性处理器定位器 | `OdinAttributeProcessorLocator.GetChildProcessors()` | - |\r\n \r\n ### 自定义绘制器类\r\n \r\n | 类名 | 命名空间 | 描述 | 重要方法 | 案例参考 |\r\n"
                },
                {
                    "date": 1748162153332,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -81,14 +81,14 @@\n | `DrawerLocator` | `Sirenix.OdinInspector.Editor` | 绘制器定位器，用于查找适用的绘制器 | `DrawerLocator.GetDrawers()` | - |\r\n \r\n ### 值提供器和解析器\r\n \r\n-| 类名 | 命名空间 | 描述 | 重要方法 |\r\n-|------|----------|------|----------|\r\n-| `ValueResolver<T>` | `Sirenix.OdinInspector.Editor` | 值解析器，用于解析表达式或成员引用 | `ValueResolver<T>.GetValue()`, `ValueResolver<T>.TryGetValue()` |\r\n-| `ActionResolver` | `Sirenix.OdinInspector.Editor` | 动作解析器，用于解析方法调用 | `ActionResolver.DoAction()`, `ActionResolver.TryDoAction()` |\r\n-| `ValueProvider<T>` | `Sirenix.OdinInspector.Editor` | 值提供器，用于提供值 | `ValueProvider<T>.GetValue()` |\r\n-| `PropertyValueEntry<T>` | `Sirenix.OdinInspector.Editor` | 属性值条目，用于访问和修改属性值 | `PropertyValueEntry<T>.SmartValue`, `PropertyValueEntry<T>.Values` |\r\n+| 类名 | 命名空间 | 描述 | 重要方法 | 案例参考 |\r\n+|------|----------|------|----------|----------|\r\n+| `ValueResolver<T>` | `Sirenix.OdinInspector.Editor` | 值解析器，用于解析表达式或成员引用 | `ValueResolver<T>.GetValue()`, `ValueResolver<T>.TryGetValue()` | [ValueAndActionResolversExample](#1-值和动作解析器---valueandactionresolversexample) |\r\n+| `ActionResolver` | `Sirenix.OdinInspector.Editor` | 动作解析器，用于解析方法调用 | `ActionResolver.DoAction()`, `ActionResolver.TryDoAction()` | [ValueAndActionResolversExample](#1-值和动作解析器---valueandactionresolversexample) |\r\n+| `ValueProvider<T>` | `Sirenix.OdinInspector.Editor` | 值提供器，用于提供值 | `ValueProvider<T>.GetValue()` | - |\r\n+| `PropertyValueEntry<T>` | `Sirenix.OdinInspector.Editor` | 属性值条目，用于访问和修改属性值 | `PropertyValueEntry<T>.SmartValue`, `PropertyValueEntry<T>.Values` | [HealthBarExample](#1-健康条绘制器---healthbarexample) |\r\n \r\n ## 特性（Attributes）详解\r\n \r\n Odin Inspector的核心功能是通过特性（Attributes）来实现的。以下是一些最常用和最重要的特性：\r\n"
                },
                {
                    "date": 1748162168384,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -94,19 +94,19 @@\n Odin Inspector的核心功能是通过特性（Attributes）来实现的。以下是一些最常用和最重要的特性：\r\n \r\n ### 布局特性\r\n \r\n-| 特性 | 描述 | 示例 |\r\n-|------|------|------|\r\n-| `[BoxGroup]` | 在盒子中组织属性 | `[BoxGroup(\"Settings\")]` |\r\n-| `[TabGroup]` | 创建选项卡组 | `[TabGroup(\"Tabs\", \"General\")]` |\r\n-| `[HorizontalGroup]` | 水平排列属性 | `[HorizontalGroup(\"Split\")]` |\r\n-| `[VerticalGroup]` | 垂直排列属性 | `[VerticalGroup(\"Left\")]` |\r\n-| `[FoldoutGroup]` | 创建可折叠组 | `[FoldoutGroup(\"Advanced\")]` |\r\n-| `[ResponsiveButtonGroup]` | 响应式按钮组 | `[ResponsiveButtonGroup]` |\r\n-| `[PropertyOrder]` | 设置属性顺序 | `[PropertyOrder(-1)]` |\r\n-| `[Title]` | 添加标题 | `[Title(\"Player Settings\")]` |\r\n-| `[TitleGroup]` | 带标题的组 | `[TitleGroup(\"Stats\")]` |\r\n+| 特性 | 描述 | 示例 | 案例参考 |\r\n+|------|------|------|----------|\r\n+| `[BoxGroup]` | 在盒子中组织属性 | `[BoxGroup(\"Settings\")]` | [BasicAttributeProcessorExample](#1-基础属性处理器---basicattributeprocessorexample) |\r\n+| `[TabGroup]` | 创建选项卡组 | `[TabGroup(\"Tabs\", \"General\")]` | [TabGroupByDeclaringType](#2-按声明类型分组---tabgroupbydeclaringtype) |\r\n+| `[HorizontalGroup]` | 水平排列属性 | `[HorizontalGroup(\"Split\")]` | - |\r\n+| `[VerticalGroup]` | 垂直排列属性 | `[VerticalGroup(\"Left\")]` | - |\r\n+| `[FoldoutGroup]` | 创建可折叠组 | `[FoldoutGroup(\"Advanced\")]` | - |\r\n+| `[ResponsiveButtonGroup]` | 响应式按钮组 | `[ResponsiveButtonGroup]` | - |\r\n+| `[PropertyOrder]` | 设置属性顺序 | `[PropertyOrder(-1)]` | - |\r\n+| `[Title]` | 添加标题 | `[Title(\"Player Settings\")]` | - |\r\n+| `[TitleGroup]` | 带标题的组 | `[TitleGroup(\"Stats\")]` | - |\r\n \r\n ### 显示特性\r\n \r\n | 特性 | 描述 | 示例 |\r\n"
                },
                {
                    "date": 1748162187523,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -108,25 +108,25 @@\n | `[TitleGroup]` | 带标题的组 | `[TitleGroup(\"Stats\")]` | - |\r\n \r\n ### 显示特性\r\n \r\n-| 特性 | 描述 | 示例 |\r\n-|------|------|------|\r\n-| `[LabelText]` | 自定义标签文本 | `[LabelText(\"玩家名称\")]` |\r\n-| `[GUIColor]` | 设置GUI颜色 | `[GUIColor(1, 0, 0)]` |\r\n-| `[HideLabel]` | 隐藏属性标签 | `[HideLabel]` |\r\n-| `[HideInInspector]` | 在Inspector中隐藏属性 | `[HideInInspector]` |\r\n-| `[ShowInInspector]` | 在Inspector中显示属性 | `[ShowInInspector]` |\r\n-| `[ReadOnly]` | 使属性只读 | `[ReadOnly]` |\r\n-| `[ShowIf]` | 条件性显示属性 | `[ShowIf(\"IsEnabled\")]` |\r\n-| `[HideIf]` | 条件性隐藏属性 | `[HideIf(\"IsDisabled\")]` |\r\n-| `[EnableIf]` | 条件性启用属性 | `[EnableIf(\"CanEdit\")]` |\r\n-| `[DisableIf]` | 条件性禁用属性 | `[DisableIf(\"IsLocked\")]` |\r\n-| `[InfoBox]` | 显示信息框 | `[InfoBox(\"重要提示\")]` |\r\n-| `[DetailedInfoBox]` | 显示详细信息框 | `[DetailedInfoBox(\"标题\", \"详情\")]` |\r\n-| `[PreviewField]` | 显示预览字段 | `[PreviewField]` |\r\n-| `[ProgressBar]` | 显示进度条 | `[ProgressBar(0, 100)]` |\r\n-| `[TableList]` | 表格形式显示列表 | `[TableList]` |\r\n+| 特性 | 描述 | 示例 | 案例参考 |\r\n+|------|------|------|----------|\r\n+| `[LabelText]` | 自定义标签文本 | `[LabelText(\"玩家名称\")]` | [BasicAttributeProcessorExample](#1-基础属性处理器---basicattributeprocessorexample) |\r\n+| `[GUIColor]` | 设置GUI颜色 | `[GUIColor(1, 0, 0)]` | - |\r\n+| `[HideLabel]` | 隐藏属性标签 | `[HideLabel]` | [BasicAttributeProcessorExample](#1-基础属性处理器---basicattributeprocessorexample) |\r\n+| `[HideInInspector]` | 在Inspector中隐藏属性 | `[HideInInspector]` | - |\r\n+| `[ShowInInspector]` | 在Inspector中显示属性 | `[ShowInInspector]` | - |\r\n+| `[ReadOnly]` | 使属性只读 | `[ReadOnly]` | - |\r\n+| `[ShowIf]` | 条件性显示属性 | `[ShowIf(\"IsEnabled\")]` | - |\r\n+| `[HideIf]` | 条件性隐藏属性 | `[HideIf(\"IsDisabled\")]` | - |\r\n+| `[EnableIf]` | 条件性启用属性 | `[EnableIf(\"CanEdit\")]` | - |\r\n+| `[DisableIf]` | 条件性禁用属性 | `[DisableIf(\"IsLocked\")]` | - |\r\n+| `[InfoBox]` | 显示信息框 | `[InfoBox(\"重要提示\")]` | [BasicAttributeProcessorExample](#1-基础属性处理器---basicattributeprocessorexample), [BasicOdinEditorExampleWindow](#1-基础odin编辑器窗口---basicodineditorexamplewindow) |\r\n+| `[DetailedInfoBox]` | 显示详细信息框 | `[DetailedInfoBox(\"标题\", \"详情\")]` | - |\r\n+| `[PreviewField]` | 显示预览字段 | `[PreviewField]` | - |\r\n+| `[ProgressBar]` | 显示进度条 | `[ProgressBar(0, 100)]` | - |\r\n+| `[TableList]` | 表格形式显示列表 | `[TableList]` | - |\r\n \r\n ### 功能特性\r\n \r\n | 特性 | 描述 | 示例 |\r\n"
                }
            ],
            "date": 1748162031290,
            "name": "Commit-0",
            "content": "# Odin Inspector 使用指南\r\n\r\nOdin Inspector是Unity编辑器的一个强大扩展插件，它提供了丰富的特性来增强Unity编辑器的功能，使开发者能够创建更加强大和用户友好的自定义编辑器。\r\n\r\n## 目录\r\n\r\n- [核心功能](#核心功能)\r\n- [重要类和接口](#重要类和接口)\r\n- [特性（Attributes）详解](#特性attributes详解)\r\n- [核心架构](#核心架构)\r\n- [使用示例](#使用示例)\r\n- [实例案例库](#实例案例库)\r\n  - [自定义绘制器案例](#自定义绘制器案例)\r\n  - [编辑器窗口案例](#编辑器窗口案例)\r\n  - [属性处理器案例](#属性处理器案例)\r\n  - [特性组合案例](#特性组合案例)\r\n- [思维导图](#思维导图)\r\n\r\n## 核心功能\r\n\r\n- **强大的Inspector自定义**：使用特性（Attributes）轻松自定义Inspector视图\r\n- **自动序列化**：支持Unity原生不支持的类型序列化\r\n- **编辑器窗口扩展**：创建复杂的自定义编辑器窗口\r\n- **属性处理器**：自定义属性的处理方式\r\n- **自定义绘制器**：创建自定义的属性绘制方式\r\n- **验证系统**：为属性添加验证规则\r\n\r\n## 重要类和接口\r\n\r\n### 核心类\r\n\r\n| 类名 | 命名空间 | 描述 | 重要方法 |\r\n|------|----------|------|----------|\r\n| `OdinEditor` | `Sirenix.OdinInspector.Editor` | Odin编辑器的基类，用于创建自定义编辑器 | `OdinEditor.DrawEditor(Object)` |\r\n| `OdinEditorWindow` | `Sirenix.OdinInspector.Editor` | 创建自定义编辑器窗口的基类 | `OdinEditorWindow.DrawEditor(Object)`, `OdinEditorWindow.GetTarget()` |\r\n| `OdinMenuEditorWindow` | `Sirenix.OdinInspector.Editor` | 带菜单的编辑器窗口基类 | `OdinMenuEditorWindow.BuildMenuTree()`, `OdinMenuEditorWindow.DrawMenu()` |\r\n| `OdinSelector<T>` | `Sirenix.OdinInspector.Editor` | 创建自定义选择器的基类 | `OdinSelector<T>.SelectionConfirmed`, `OdinSelector<T>.DrawSelectionTree()` |\r\n| `SerializedMonoBehaviour` | `Sirenix.OdinInspector` | 支持Odin序列化的MonoBehaviour | - |\r\n| `SerializedScriptableObject` | `Sirenix.OdinInspector` | 支持Odin序列化的ScriptableObject | - |\r\n| `GlobalConfig<T>` | `Sirenix.OdinInspector` | 全局配置单例的基类 | `GlobalConfig<T>.Instance` |\r\n| `PropertyTree` | `Sirenix.OdinInspector.Editor` | 表示Inspector属性树的类 | `PropertyTree.Draw()`, `PropertyTree.GetPropertyAtPath()`, `PropertyTree.GetPropertyAtIndex()` |\r\n| `InspectorProperty` | `Sirenix.OdinInspector.Editor` | 表示Inspector中的单个属性 | `InspectorProperty.Draw()`, `InspectorProperty.Children`, `InspectorProperty.ValueEntry` |\r\n| `OdinMenuTree` | `Sirenix.OdinInspector.Editor` | 菜单树，用于构建编辑器窗口菜单 | `OdinMenuTree.AddItem()`, `OdinMenuTree.AddAllAssetsAtPath()`, `OdinMenuTree.Selection` |\r\n| `OdinMenuItem` | `Sirenix.OdinInspector.Editor` | 表示菜单树中的单个菜单项 | `OdinMenuItem.ChildMenuItems`, `OdinMenuItem.Selected` |\r\n| `TypeInfoBox` | `Sirenix.OdinInspector.Editor` | 用于在编辑器中显示类型信息的工具类 | `TypeInfoBox.DrawInfoBox()` |\r\n| `SirenixEditorGUI` | `Sirenix.Utilities.Editor` | 提供扩展的编辑器GUI功能 | `SirenixEditorGUI.BeginBox()`, `SirenixEditorGUI.DrawSolidRect()` |\r\n\r\n### 重要接口\r\n\r\n| 接口名 | 命名空间 | 描述 | 重要方法 |\r\n|--------|----------|------|----------|\r\n| `IAttrbuteProcessor` | `Sirenix.OdinInspector.Editor` | 属性处理器接口 | `IAttrbuteProcessor.ProcessChildMemberAttributes()` |\r\n| `IValueDropdownItem` | `Sirenix.OdinInspector` | 下拉值项接口 | `IValueDropdownItem.GetText()`, `IValueDropdownItem.GetValue()` |\r\n| `ISearchFilterable` | `Sirenix.OdinInspector` | 搜索过滤接口 | `ISearchFilterable.IsMatch()` |\r\n| `IPropertyValueEntry` | `Sirenix.OdinInspector.Editor` | 属性值条目接口 | `IPropertyValueEntry.SmartValue`, `IPropertyValueEntry.WeakSmartValue` |\r\n| `IAttributeValidator` | `Sirenix.OdinInspector.Editor` | 属性验证器接口 | `IAttributeValidator.Validate()` |\r\n| `IHideObjectMenuItems` | `Sirenix.OdinInspector.Editor` | 隐藏对象菜单项的接口 | - |\r\n| `IDrawnWithUnityLayout` | `Sirenix.OdinInspector.Editor` | 使用Unity布局绘制的接口 | - |\r\n| `IValueResolver` | `Sirenix.OdinInspector.Editor` | 值解析器接口 | `IValueResolver.TryGetValue()` |\r\n| `IPathRedirector` | `Sirenix.OdinInspector.Editor` | 路径重定向接口 | `IPathRedirector.RedirectPath()` |\r\n\r\n### 属性处理器类\r\n\r\n| 类名 | 命名空间 | 描述 | 重要方法 |\r\n|------|----------|------|----------|\r\n| `OdinAttributeProcessor<T>` | `Sirenix.OdinInspector.Editor` | 属性处理器基类，用于处理特定类型的属性 | `OdinAttributeProcessor<T>.ProcessChildMemberAttributes()`, `OdinAttributeProcessor<T>.ProcessMemberAttributes()` |\r\n| `AttributeProcessorLocator` | `Sirenix.OdinInspector.Editor` | 属性处理器定位器，用于查找适用的处理器 | `AttributeProcessorLocator.GetProcessors()` |\r\n| `DefaultOdinAttributeProcessor` | `Sirenix.OdinInspector.Editor` | 默认属性处理器 | - |\r\n| `OdinAttributeProcessorLocator` | `Sirenix.OdinInspector.Editor` | Odin属性处理器定位器 | `OdinAttributeProcessorLocator.GetChildProcessors()` |\r\n\r\n### 自定义绘制器类\r\n\r\n| 类名 | 命名空间 | 描述 | 重要方法 |\r\n|------|----------|------|----------|\r\n| `OdinAttributeDrawer<T>` | `Sirenix.OdinInspector.Editor` | 属性绘制器基类，用于绘制带特定特性的属性 | `OdinAttributeDrawer<T>.DrawPropertyLayout()`, `OdinAttributeDrawer<T>.CallNextDrawer()` |\r\n| `OdinAttributeDrawer<T, U>` | `Sirenix.OdinInspector.Editor` | 泛型属性绘制器基类，用于绘制带特定特性的特定类型属性 | `OdinAttributeDrawer<T, U>.DrawPropertyLayout()`, `OdinAttributeDrawer<T, U>.ValueEntry` |\r\n| `OdinValueDrawer<T>` | `Sirenix.OdinInspector.Editor` | 值绘制器基类，用于绘制特定类型的值 | `OdinValueDrawer<T>.DrawPropertyLayout()`, `OdinValueDrawer<T>.ValueEntry` |\r\n| `OdinGroupDrawer<T>` | `Sirenix.OdinInspector.Editor` | 组绘制器基类，用于绘制属性组 | `OdinGroupDrawer<T>.DrawPropertyLayout()`, `OdinGroupDrawer<T>.GroupAttribute` |\r\n| `InspectorPropertyDrawer` | `Sirenix.OdinInspector.Editor` | Inspector属性绘制器基类 | `InspectorPropertyDrawer.CanDrawProperty()`, `InspectorPropertyDrawer.DrawProperty()` |\r\n| `DrawerPriority` | `Sirenix.OdinInspector.Editor` | 绘制器优先级特性，用于控制绘制器的执行顺序 | - |\r\n| `DrawerLocator` | `Sirenix.OdinInspector.Editor` | 绘制器定位器，用于查找适用的绘制器 | `DrawerLocator.GetDrawers()` |\r\n\r\n### 值提供器和解析器\r\n\r\n| 类名 | 命名空间 | 描述 | 重要方法 |\r\n|------|----------|------|----------|\r\n| `ValueResolver<T>` | `Sirenix.OdinInspector.Editor` | 值解析器，用于解析表达式或成员引用 | `ValueResolver<T>.GetValue()`, `ValueResolver<T>.TryGetValue()` |\r\n| `ActionResolver` | `Sirenix.OdinInspector.Editor` | 动作解析器，用于解析方法调用 | `ActionResolver.DoAction()`, `ActionResolver.TryDoAction()` |\r\n| `ValueProvider<T>` | `Sirenix.OdinInspector.Editor` | 值提供器，用于提供值 | `ValueProvider<T>.GetValue()` |\r\n| `PropertyValueEntry<T>` | `Sirenix.OdinInspector.Editor` | 属性值条目，用于访问和修改属性值 | `PropertyValueEntry<T>.SmartValue`, `PropertyValueEntry<T>.Values` |\r\n\r\n## 特性（Attributes）详解\r\n\r\nOdin Inspector的核心功能是通过特性（Attributes）来实现的。以下是一些最常用和最重要的特性：\r\n\r\n### 布局特性\r\n\r\n| 特性 | 描述 | 示例 |\r\n|------|------|------|\r\n| `[BoxGroup]` | 在盒子中组织属性 | `[BoxGroup(\"Settings\")]` |\r\n| `[TabGroup]` | 创建选项卡组 | `[TabGroup(\"Tabs\", \"General\")]` |\r\n| `[HorizontalGroup]` | 水平排列属性 | `[HorizontalGroup(\"Split\")]` |\r\n| `[VerticalGroup]` | 垂直排列属性 | `[VerticalGroup(\"Left\")]` |\r\n| `[FoldoutGroup]` | 创建可折叠组 | `[FoldoutGroup(\"Advanced\")]` |\r\n| `[ResponsiveButtonGroup]` | 响应式按钮组 | `[ResponsiveButtonGroup]` |\r\n| `[PropertyOrder]` | 设置属性顺序 | `[PropertyOrder(-1)]` |\r\n| `[Title]` | 添加标题 | `[Title(\"Player Settings\")]` |\r\n| `[TitleGroup]` | 带标题的组 | `[TitleGroup(\"Stats\")]` |\r\n\r\n### 显示特性\r\n\r\n| 特性 | 描述 | 示例 |\r\n|------|------|------|\r\n| `[LabelText]` | 自定义标签文本 | `[LabelText(\"玩家名称\")]` |\r\n| `[GUIColor]` | 设置GUI颜色 | `[GUIColor(1, 0, 0)]` |\r\n| `[HideLabel]` | 隐藏属性标签 | `[HideLabel]` |\r\n| `[HideInInspector]` | 在Inspector中隐藏属性 | `[HideInInspector]` |\r\n| `[ShowInInspector]` | 在Inspector中显示属性 | `[ShowInInspector]` |\r\n| `[ReadOnly]` | 使属性只读 | `[ReadOnly]` |\r\n| `[ShowIf]` | 条件性显示属性 | `[ShowIf(\"IsEnabled\")]` |\r\n| `[HideIf]` | 条件性隐藏属性 | `[HideIf(\"IsDisabled\")]` |\r\n| `[EnableIf]` | 条件性启用属性 | `[EnableIf(\"CanEdit\")]` |\r\n| `[DisableIf]` | 条件性禁用属性 | `[DisableIf(\"IsLocked\")]` |\r\n| `[InfoBox]` | 显示信息框 | `[InfoBox(\"重要提示\")]` |\r\n| `[DetailedInfoBox]` | 显示详细信息框 | `[DetailedInfoBox(\"标题\", \"详情\")]` |\r\n| `[PreviewField]` | 显示预览字段 | `[PreviewField]` |\r\n| `[ProgressBar]` | 显示进度条 | `[ProgressBar(0, 100)]` |\r\n| `[TableList]` | 表格形式显示列表 | `[TableList]` |\r\n\r\n### 功能特性\r\n\r\n| 特性 | 描述 | 示例 |\r\n|------|------|------|\r\n| `[Button]` | 创建按钮 | `[Button]` |\r\n| `[OnValueChanged]` | 值变化时触发 | `[OnValueChanged(\"OnNameChanged\")]` |\r\n| `[OnInspectorGUI]` | 自定义Inspector GUI | `[OnInspectorGUI]` |\r\n| `[ValidateInput]` | 验证输入 | `[ValidateInput(\"IsValidName\")]` |\r\n| `[Required]` | 标记必填字段 | `[Required]` |\r\n| `[ValueDropdown]` | 创建下拉选择 | `[ValueDropdown(\"GetOptions\")]` |\r\n| `[ListDrawerSettings]` | 自定义列表绘制 | `[ListDrawerSettings(ShowIndexLabels = true)]` |\r\n| `[InlineEditor]` | 内联编辑对象 | `[InlineEditor]` |\r\n| `[InlineProperty]` | 内联显示属性 | `[InlineProperty]` |\r\n| `[TypeFilter]` | 类型过滤 | `[TypeFilter(\"GetFilteredTypeList\")]` |\r\n| `[AssetSelector]` | 资源选择器 | `[AssetSelector]` |\r\n| `[FilePath]` | 文件路径选择 | `[FilePath(Extensions = \"cs\")]` |\r\n| `[FolderPath]` | 文件夹路径选择 | `[FolderPath]` |\r\n\r\n### 自定义序列化特性\r\n\r\n| 特性 | 描述 | 示例 |\r\n|------|------|------|\r\n| `[OdinSerialize]` | 标记使用Odin序列化 | `[OdinSerialize]` |\r\n| `[NonSerialized]` | 标记不序列化 | `[NonSerialized]` |\r\n\r\n## 核心架构\r\n\r\nOdin Inspector的核心架构由以下几个部分组成：\r\n\r\n1. **特性系统（Attribute System）**：提供各种特性来自定义Inspector\r\n2. **绘制系统（Drawing System）**：负责在Inspector中绘制属性\r\n3. **序列化系统（Serialization System）**：处理对象的序列化和反序列化\r\n4. **属性树系统（Property Tree System）**：管理属性的层次结构\r\n5. **处理器系统（Processor System）**：处理属性的特性和修改其行为\r\n6. **验证系统（Validation System）**：验证属性值的有效性\r\n\r\n### UML类图（核心部分）\r\n\r\n```\r\n+-------------------------+     +-------------------------+\r\n|    OdinEditor           |     |    OdinEditorWindow     |\r\n+-------------------------+     +-------------------------+\r\n| - DrawEditor(Object)    |     | - GetTarget()           |\r\n| - CreatePropertyTree()  |     | - DrawEditor()          |\r\n+----------+--------------+     +------------+------------+\r\n           |                                |\r\n           v                                v\r\n+----------+--------------+     +------------+------------+\r\n|    PropertyTree         |     |    OdinMenuTree         |\r\n+-------------------------+     +-------------------------+\r\n| - Draw()                |     | - AddItem()             |\r\n| - GetPropertyAtPath()   |     | - Selection             |\r\n| - GetPropertyAtIndex()  |     | - EnumerateTree()       |\r\n+----------+--------------+     +-------------------------+\r\n           |                                ^\r\n           v                                |\r\n+----------+--------------+                 |\r\n|  InspectorProperty      |                 |\r\n+-------------------------+                 |\r\n| - Draw()                |                 |\r\n| - Children              |                 |\r\n| - ValueEntry            |                 |\r\n+----------+--------------+                 |\r\n           |                                |\r\n           v                                v\r\n+----------+--------------+     +-----------+-------------+\r\n| OdinAttributeProcessor  |     |    OdinMenuItem         |\r\n+-------------------------+     +-------------------------+\r\n| - ProcessAttributes()   |     | - Selected              |\r\n| - ProcessMemberAttr()   |     | - ChildMenuItems        |\r\n+----------+--------------+     +-------------------------+\r\n           |\r\n           v\r\n+----------+--------------+     +-------------------------+\r\n| OdinAttributeDrawer<T>  |     |   OdinValueDrawer<T>    |\r\n+-------------------------+     +-------------------------+\r\n| - DrawPropertyLayout()  |     | - DrawPropertyLayout()  |\r\n| - CallNextDrawer()      |     | - ValueEntry            |\r\n+-------------------------+     +-------------------------+\r\n           |                                |\r\n           v                                v\r\n+----------+--------------+     +-------------------------+\r\n| DrawerChain             |     |   PropertyValueEntry<T> |\r\n+-------------------------+     +-------------------------+\r\n| - DrawProperty()        |     | - SmartValue            |\r\n| - GetDrawers()          |     | - Values                |\r\n+-------------------------+     +-------------------------+\r\n           |                                |\r\n           v                                v\r\n+----------+--------------+     +-------------------------+\r\n| DrawerLocator           |     |   ValueResolver<T>      |\r\n+-------------------------+     +-------------------------+\r\n| - GetDrawers()          |     | - GetValue()            |\r\n+-------------------------+     | - TryGetValue()         |\r\n                                +-------------------------+\r\n```\r\n\r\n## 使用示例\r\n\r\n### 基本使用\r\n\r\n```csharp\r\nusing Sirenix.OdinInspector;\r\nusing UnityEngine;\r\n\r\npublic class PlayerStats : MonoBehaviour\r\n{\r\n    [Title(\"基本信息\")]\r\n    [LabelText(\"玩家名称\")]\r\n    public string playerName;\r\n\r\n    [ProgressBar(0, 100)]\r\n    [LabelText(\"生命值\")]\r\n    public float health = 100;\r\n\r\n    [BoxGroup(\"属性\")]\r\n    [LabelText(\"力量\"), Range(1, 100)]\r\n    public int strength = 10;\r\n\r\n    [BoxGroup(\"属性\")]\r\n    [LabelText(\"敏捷\"), Range(1, 100)]\r\n    public int agility = 10;\r\n\r\n    [BoxGroup(\"属性\")]\r\n    [LabelText(\"智力\"), Range(1, 100)]\r\n    public int intelligence = 10;\r\n\r\n    [Button(\"重置属性\")]\r\n    private void ResetStats()\r\n    {\r\n        strength = 10;\r\n        agility = 10;\r\n        intelligence = 10;\r\n    }\r\n}\r\n```\r\n\r\n### 自定义绘制器\r\n\r\n```csharp\r\n#if UNITY_EDITOR\r\nusing Sirenix.OdinInspector.Editor;\r\nusing UnityEditor;\r\nusing UnityEngine;\r\n\r\npublic class HealthBarAttributeDrawer : OdinAttributeDrawer<HealthBarAttribute, float>\r\n{\r\n    protected override void DrawPropertyLayout(GUIContent label)\r\n    {\r\n        // 调用下一个绘制器，它将绘制浮点字段\r\n        this.CallNextDrawer(label);\r\n\r\n        // 获取一个用于绘制生命值条的矩形\r\n        Rect rect = EditorGUILayout.GetControlRect();\r\n\r\n        // 绘制生命值条\r\n        float width = Mathf.Clamp01(this.ValueEntry.SmartValue / this.Attribute.MaxHealth);\r\n        EditorGUI.DrawRect(rect, new Color(0f, 0f, 0f, 0.3f));\r\n        EditorGUI.DrawRect(new Rect(rect.x, rect.y, rect.width * width, rect.height), Color.red);\r\n    }\r\n}\r\n#endif\r\n```\r\n\r\n### 自定义属性处理器\r\n\r\n```csharp\r\n#if UNITY_EDITOR\r\nusing Sirenix.OdinInspector.Editor;\r\nusing System;\r\nusing System.Collections.Generic;\r\nusing System.Reflection;\r\n\r\npublic class TabifyTypeProcessor<T> : OdinAttributeProcessor<T>\r\n{\r\n    public override void ProcessChildMemberAttributes(InspectorProperty parentProperty, MemberInfo member, List<Attribute> attributes)\r\n    {\r\n        // 根据成员的声明类型将属性分组到不同的选项卡中\r\n        var tabName = member.DeclaringType.Name;\r\n        attributes.Add(new TabGroupAttribute(\"类型\", tabName));\r\n    }\r\n}\r\n#endif\r\n```\r\n\r\n## 思维导图\r\n\r\n```\r\nOdin Inspector\r\n├── 核心功能\r\n│   ├── Inspector自定义 - 使用特性轻松自定义Inspector视图\r\n│   ├── 自动序列化 - 支持Unity原生不支持的类型序列化\r\n│   ├── 编辑器窗口 - 创建复杂的自定义编辑器窗口\r\n│   ├── 属性处理器 - 自定义属性的处理方式\r\n│   ├── 自定义绘制器 - 创建自定义的属性绘制方式\r\n│   └── 验证系统 - 为属性添加验证规则\r\n│\r\n├── 特性系统\r\n│   ├── 布局特性 - 控制Inspector中属性的布局和组织\r\n│   │   ├── BoxGroup - 在盒子中组织属性\r\n│   │   ├── TabGroup - 创建选项卡组\r\n│   │   ├── HorizontalGroup - 水平排列属性\r\n│   │   ├── VerticalGroup - 垂直排列属性\r\n│   │   ├── FoldoutGroup - 创建可折叠组\r\n│   │   ├── PropertyOrder - 设置属性顺序\r\n│   │   └── TitleGroup - 带标题的组\r\n│   │\r\n│   ├── 显示特性 - 控制属性在Inspector中的显示方式\r\n│   │   ├── LabelText - 自定义标签文本\r\n│   │   ├── GUIColor - 设置GUI颜色\r\n│   │   ├── ShowIf/HideIf - 条件性显示或隐藏属性\r\n│   │   ├── EnableIf/DisableIf - 条件性启用或禁用属性\r\n│   │   ├── InfoBox - 显示信息框\r\n│   │   ├── PreviewField - 显示预览字段\r\n│   │   └── ProgressBar - 显示进度条\r\n│   │\r\n│   └── 功能特性 - 为Inspector添加功能\r\n│       ├── Button - 创建按钮\r\n│       ├── OnValueChanged - 值变化时触发\r\n│       ├── ValidateInput - 验证输入\r\n│       ├── Required - 标记必填字段\r\n│       ├── ValueDropdown - 创建下拉选择\r\n│       ├── InlineEditor - 内联编辑对象\r\n│       ├── AssetSelector - 资源选择器\r\n│       └── FilePath/FolderPath - 路径选择\r\n│\r\n├── 绘制系统\r\n│   ├── OdinAttributeDrawer<T> - 属性绘制器基类\r\n│   │   ├── DrawPropertyLayout() - 绘制属性布局\r\n│   │   ├── CallNextDrawer() - 调用下一个绘制器\r\n│   │   └── CanDrawProperty() - 检查是否可以绘制属性\r\n│   │\r\n│   ├── OdinValueDrawer<T> - 值绘制器基类\r\n│   │   ├── DrawPropertyLayout() - 绘制属性布局\r\n│   │   └── ValueEntry - 访问属性值\r\n│   │\r\n│   ├── OdinGroupDrawer<T> - 组绘制器基类\r\n│   │   ├── DrawPropertyLayout() - 绘制属性布局\r\n│   │   └── GroupAttribute - 访问组特性\r\n│   │\r\n│   ├── DrawerLocator - 绘制器定位器\r\n│   │   └── GetDrawers() - 获取适用的绘制器\r\n│   │\r\n│   └── DrawerChain - 绘制器链\r\n│       └── DrawProperty() - 绘制属性\r\n│\r\n├── 序列化系统\r\n│   ├── SerializedMonoBehaviour - 支持Odin序列化的MonoBehaviour\r\n│   ├── SerializedScriptableObject - 支持Odin序列化的ScriptableObject\r\n│   ├── OdinSerialize特性 - 标记使用Odin序列化\r\n│   └── 支持的类型 - 字典、队列、堆栈、复杂对象等\r\n│\r\n├── 属性树系统\r\n│   ├── PropertyTree - 表示Inspector属性树的类\r\n│   │   ├── Draw() - 绘制整个属性树\r\n│   │   ├── GetPropertyAtPath() - 通过路径获取属性\r\n│   │   └── GetPropertyAtIndex() - 通过索引获取属性\r\n│   │\r\n│   ├── InspectorProperty - 表示单个属性\r\n│   │   ├── Draw() - 绘制属性\r\n│   │   ├── Children - 子属性集合\r\n│   │   └── ValueEntry - 属性值条目\r\n│   │\r\n│   └── PropertyValueEntry<T> - 属性值条目\r\n│       ├── SmartValue - 获取或设置值\r\n│       └── Values - 获取所有目标的值\r\n│\r\n├── 处理器系统\r\n│   ├── OdinAttributeProcessor<T> - 属性处理器基类\r\n│   │   ├── ProcessChildMemberAttributes() - 处理子成员特性\r\n│   │   └── ProcessMemberAttributes() - 处理成员特性\r\n│   │\r\n│   ├── AttributeProcessorLocator - 属性处理器定位器\r\n│   │   └── GetProcessors() - 获取适用的处理器\r\n│   │\r\n│   └── 处理器优先级 - 控制处理器执行顺序\r\n│\r\n├── 值解析系统\r\n│   ├── ValueResolver<T> - 值解析器\r\n│   │   ├── GetValue() - 获取值\r\n│   │   └── TryGetValue() - 尝试获取值\r\n│   │\r\n│   ├── ActionResolver - 动作解析器\r\n│   │   ├── DoAction() - 执行动作\r\n│   │   └── TryDoAction() - 尝试执行动作\r\n│   │\r\n│   └── ValueProvider<T> - 值提供器\r\n│       └── GetValue() - 获取值\r\n│\r\n└── 编辑器窗口系统\r\n    ├── OdinEditorWindow - 创建自定义编辑器窗口的基类\r\n    │   ├── DrawEditor() - 绘制编辑器\r\n    │   └── GetTarget() - 获取目标对象\r\n    │\r\n    ├── OdinMenuEditorWindow - 带菜单的编辑器窗口基类\r\n    │   ├── BuildMenuTree() - 构建菜单树\r\n    │   └── DrawMenu() - 绘制菜单\r\n    │\r\n    ├── OdinMenuTree - 管理菜单项的树结构\r\n    │   ├── AddItem() - 添加菜单项\r\n    │   ├── AddAllAssetsAtPath() - 添加路径下的所有资源\r\n    │   └── Selection - 当前选择的菜单项\r\n    │\r\n    └── OdinMenuItem - 表示单个菜单项\r\n        ├── Selected - 是否被选中\r\n        └── ChildMenuItems - 子菜单项集合\r\n```\r\n。 "
        }
    ]
}