{
    "sourceFile": "Assets/UnityEditor/Chapter 8 UnityAPI/UnityEngine/Playables/PlayablesExample.cs",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1750935316206,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1750935316206,
            "name": "Commit-0",
            "content": "using UnityEngine;\r\nusing UnityEngine.Playables;\r\nusing UnityEngine.Timeline;\r\nusing UnityEngine.Animations;\r\n\r\n/// <summary>\r\n/// UnityEngine.Playables 命名空间案例演示\r\n/// 展示可播放系统、动画混合、时间轴控制等核心功能\r\n/// </summary>\r\npublic class PlayablesExample : MonoBehaviour\r\n{\r\n    [Header(\"可播放系统配置\")]\r\n    [SerializeField] private bool enablePlayables = true; //启用可播放系统\r\n    [SerializeField] private bool enableAnimationBlending = true; //启用动画混合\r\n    [SerializeField] private bool enableTimelineControl = true; //启用时间轴控制\r\n    [SerializeField] private bool enableCustomPlayables = true; //启用自定义可播放\r\n    [SerializeField] private bool enablePerformanceMonitoring = true; //启用性能监控\r\n    \r\n    [Header(\"动画混合\")]\r\n    [SerializeField] private AnimationClip[] animationClips; //动画片段\r\n    [SerializeField] private float blendWeight = 0.5f; //混合权重\r\n    [SerializeField] private float blendSpeed = 1f; //混合速度\r\n    [SerializeField] private bool enableCrossFade = true; //启用交叉淡入淡出\r\n    [SerializeField] private float crossFadeDuration = 0.3f; //交叉淡入淡出持续时间\r\n    \r\n    [Header(\"时间轴控制\")]\r\n    [SerializeField] private PlayableDirector playableDirector; //可播放导演\r\n    [SerializeField] private TimelineAsset timelineAsset; //时间轴资源\r\n    [SerializeField] private double currentTime = 0.0; //当前时间\r\n    [SerializeField] private double duration = 10.0; //持续时间\r\n    [SerializeField] private bool isPlaying = false; //是否播放\r\n    [SerializeField] private bool isLooping = false; //是否循环\r\n    \r\n    [Header(\"自定义可播放\")]\r\n    [SerializeField] private bool enableCustomAnimation = true; //启用自定义动画\r\n    [SerializeField] private bool enableCustomAudio = true; //启用自定义音频\r\n    [SerializeField] private bool enableCustomVideo = true; //启用自定义视频\r\n    [SerializeField] private bool enableCustomScript = true; //启用自定义脚本\r\n    \r\n    [Header(\"性能监控\")]\r\n    [SerializeField] private bool enablePlayableMonitoring = true; //启用可播放监控\r\n    [SerializeField] private float monitoringInterval = 1f; //监控间隔\r\n    [SerializeField] private bool logPlayableData = false; //记录可播放数据\r\n    [SerializeField] private int activePlayables = 0; //活跃可播放数\r\n    [SerializeField] private float playableUpdateTime = 0f; //可播放更新时间\r\n    \r\n    [Header(\"系统状态\")]\r\n    [SerializeField] private string currentPlayableState = \"未初始化\"; //当前可播放状态\r\n    [SerializeField] private string currentAnimationState = \"空闲\"; //当前动画状态\r\n    [SerializeField] private float animationProgress = 0f; //动画进度\r\n    [SerializeField] private float audioProgress = 0f; //音频进度\r\n    [SerializeField] private float videoProgress = 0f; //视频进度\r\n    \r\n    private PlayableGraph playableGraph;\r\n    private AnimationMixerPlayable animationMixer;\r\n    private AudioMixerPlayable audioMixer;\r\n    private VideoMixerPlayable videoMixer;\r\n    private ScriptPlayable<CustomPlayableBehaviour> scriptPlayable;\r\n    private Animator animator;\r\n    private AudioSource audioSource;\r\n    private float lastMonitoringTime = 0f;\r\n    private bool isInitialized = false;\r\n\r\n    private void Start()\r\n    {\r\n        InitializePlayablesSystem();\r\n    }\r\n\r\n    /// <summary>\r\n    /// 初始化可播放系统\r\n    /// </summary>\r\n    private void InitializePlayablesSystem()\r\n    {\r\n        // 获取组件\r\n        animator = GetComponent<Animator>();\r\n        audioSource = GetComponent<AudioSource>();\r\n        \r\n        if (animator == null)\r\n        {\r\n            animator = gameObject.AddComponent<Animator>();\r\n        }\r\n        \r\n        if (audioSource == null)\r\n        {\r\n            audioSource = gameObject.AddComponent<AudioSource>();\r\n        }\r\n        \r\n        // 创建可播放图\r\n        CreatePlayableGraph();\r\n        \r\n        // 初始化动画混合\r\n        if (enableAnimationBlending)\r\n        {\r\n            InitializeAnimationBlending();\r\n        }\r\n        \r\n        // 初始化时间轴控制\r\n        if (enableTimelineControl)\r\n        {\r\n            InitializeTimelineControl();\r\n        }\r\n        \r\n        // 初始化自定义可播放\r\n        if (enableCustomPlayables)\r\n        {\r\n            InitializeCustomPlayables();\r\n        }\r\n        \r\n        isInitialized = true;\r\n        currentPlayableState = \"已初始化\";\r\n        Debug.Log(\"可播放系统初始化完成\");\r\n    }\r\n\r\n    /// <summary>\r\n    /// 创建可播放图\r\n    /// </summary>\r\n    private void CreatePlayableGraph()\r\n    {\r\n        // 创建可播放图\r\n        playableGraph = PlayableGraph.Create(\"PlayablesExample\");\r\n        \r\n        // 设置输出\r\n        var output = AnimationPlayableOutput.Create(playableGraph, \"Animation\", animator);\r\n        \r\n        // 创建动画混合器\r\n        animationMixer = AnimationMixerPlayable.Create(playableGraph, 2);\r\n        output.SetSourcePlayable(animationMixer);\r\n        \r\n        Debug.Log(\"可播放图创建完成\");\r\n    }\r\n\r\n    /// <summary>\r\n    /// 初始化动画混合\r\n    /// </summary>\r\n    private void InitializeAnimationBlending()\r\n    {\r\n        if (animationClips == null || animationClips.Length == 0)\r\n        {\r\n            Debug.LogWarning(\"没有可用的动画片段\");\r\n            return;\r\n        }\r\n        \r\n        // 创建动画片段可播放\r\n        for (int i = 0; i < Mathf.Min(animationClips.Length, 2); i++)\r\n        {\r\n            if (animationClips[i] != null)\r\n            {\r\n                var clipPlayable = AnimationClipPlayable.Create(playableGraph, animationClips[i]);\r\n                animationMixer.ConnectInput(i, clipPlayable, 0);\r\n                animationMixer.SetInputWeight(i, i == 0 ? 1.0f : 0.0f);\r\n            }\r\n        }\r\n        \r\n        currentAnimationState = \"动画混合已初始化\";\r\n        Debug.Log(\"动画混合初始化完成\");\r\n    }\r\n\r\n    /// <summary>\r\n    /// 初始化时间轴控制\r\n    /// </summary>\r\n    private void InitializeTimelineControl()\r\n    {\r\n        // 获取或创建PlayableDirector\r\n        if (playableDirector == null)\r\n        {\r\n            playableDirector = GetComponent<PlayableDirector>();\r\n            if (playableDirector == null)\r\n            {\r\n                playableDirector = gameObject.AddComponent<PlayableDirector>();\r\n            }\r\n        }\r\n        \r\n        // 设置时间轴资源\r\n        if (timelineAsset != null)\r\n        {\r\n            playableDirector.playableAsset = timelineAsset;\r\n            duration = timelineAsset.duration;\r\n        }\r\n        \r\n        Debug.Log(\"时间轴控制初始化完成\");\r\n    }\r\n\r\n    /// <summary>\r\n    /// 初始化自定义可播放\r\n    /// </summary>\r\n    private void InitializeCustomPlayables()\r\n    {\r\n        // 创建自定义脚本可播放\r\n        if (enableCustomScript)\r\n        {\r\n            scriptPlayable = ScriptPlayable<CustomPlayableBehaviour>.Create(playableGraph);\r\n            scriptPlayable.GetBehaviour().Initialize(this);\r\n        }\r\n        \r\n        Debug.Log(\"自定义可播放初始化完成\");\r\n    }\r\n\r\n    private void Update()\r\n    {\r\n        if (!isInitialized) return;\r\n        \r\n        // 更新可播放系统\r\n        UpdatePlayablesSystem();\r\n        \r\n        // 更新动画混合\r\n        if (enableAnimationBlending)\r\n        {\r\n            UpdateAnimationBlending();\r\n        }\r\n        \r\n        // 更新时间轴控制\r\n        if (enableTimelineControl)\r\n        {\r\n            UpdateTimelineControl();\r\n        }\r\n        \r\n        // 性能监控\r\n        if (enablePerformanceMonitoring && Time.time - lastMonitoringTime > monitoringInterval)\r\n        {\r\n            MonitorPerformance();\r\n            lastMonitoringTime = Time.time;\r\n        }\r\n    }\r\n\r\n    /// <summary>\r\n    /// 更新可播放系统\r\n    /// </summary>\r\n    private void UpdatePlayablesSystem()\r\n    {\r\n        float startTime = Time.realtimeSinceStartup;\r\n        \r\n        // 更新可播放图\r\n        if (playableGraph.IsValid())\r\n        {\r\n            playableGraph.Evaluate(Time.deltaTime);\r\n        }\r\n        \r\n        // 更新当前时间\r\n        if (playableDirector != null && playableDirector.playableAsset != null)\r\n        {\r\n            currentTime = playableDirector.time;\r\n        }\r\n        \r\n        playableUpdateTime = Time.realtimeSinceStartup - startTime;\r\n        \r\n        // 更新进度\r\n        if (duration > 0)\r\n        {\r\n            animationProgress = (float)(currentTime / duration);\r\n        }\r\n    }\r\n\r\n    /// <summary>\r\n    /// 更新动画混合\r\n    /// </summary>\r\n    private void UpdateAnimationBlending()\r\n    {\r\n        if (!animationMixer.IsValid()) return;\r\n        \r\n        // 更新混合权重\r\n        if (animationMixer.GetInputCount() >= 2)\r\n        {\r\n            float weight1 = 1.0f - blendWeight;\r\n            float weight2 = blendWeight;\r\n            \r\n            animationMixer.SetInputWeight(0, weight1);\r\n            animationMixer.SetInputWeight(1, weight2);\r\n        }\r\n        \r\n        // 更新动画状态\r\n        currentAnimationState = $\"混合中 (权重: {blendWeight:F2})\";\r\n    }\r\n\r\n    /// <summary>\r\n    /// 更新时间轴控制\r\n    /// </summary>\r\n    private void UpdateTimelineControl()\r\n    {\r\n        if (playableDirector == null) return;\r\n        \r\n        // 更新播放状态\r\n        isPlaying = playableDirector.state == PlayState.Playing;\r\n        \r\n        // 处理循环\r\n        if (isLooping && currentTime >= duration)\r\n        {\r\n            playableDirector.time = 0.0;\r\n        }\r\n    }\r\n\r\n    /// <summary>\r\n    /// 监控性能\r\n    /// </summary>\r\n    private void MonitorPerformance()\r\n    {\r\n        // 计算活跃可播放数\r\n        activePlayables = 0;\r\n        if (animationMixer.IsValid()) activePlayables++;\r\n        if (audioMixer.IsValid()) activePlayables++;\r\n        if (videoMixer.IsValid()) activePlayables++;\r\n        if (scriptPlayable.IsValid()) activePlayables++;\r\n        \r\n        if (logPlayableData)\r\n        {\r\n            Debug.Log($\"可播放性能: 活跃数={activePlayables}, 更新时间={playableUpdateTime * 1000:F2}ms\");\r\n        }\r\n    }\r\n\r\n    /// <summary>\r\n    /// 播放动画\r\n    /// </summary>\r\n    /// <param name=\"clipIndex\">动画片段索引</param>\r\n    public void PlayAnimation(int clipIndex)\r\n    {\r\n        if (clipIndex < 0 || clipIndex >= animationClips.Length)\r\n        {\r\n            Debug.LogWarning($\"无效的动画片段索引: {clipIndex}\");\r\n            return;\r\n        }\r\n        \r\n        if (enableCrossFade)\r\n        {\r\n            StartCrossFade(clipIndex);\r\n        }\r\n        else\r\n        {\r\n            // 直接切换动画\r\n            if (animationMixer.IsValid() && animationMixer.GetInputCount() > clipIndex)\r\n            {\r\n                // 重置所有权重\r\n                for (int i = 0; i < animationMixer.GetInputCount(); i++)\r\n                {\r\n                    animationMixer.SetInputWeight(i, i == clipIndex ? 1.0f : 0.0f);\r\n                }\r\n            }\r\n        }\r\n        \r\n        currentAnimationState = $\"播放动画: {animationClips[clipIndex].name}\";\r\n        Debug.Log($\"开始播放动画: {animationClips[clipIndex].name}\");\r\n    }\r\n\r\n    /// <summary>\r\n    /// 开始交叉淡入淡出\r\n    /// </summary>\r\n    /// <param name=\"targetClipIndex\">目标动画片段索引</param>\r\n    public void StartCrossFade(int targetClipIndex)\r\n    {\r\n        StartCoroutine(CrossFadeCoroutine(targetClipIndex));\r\n    }\r\n\r\n    /// <summary>\r\n    /// 交叉淡入淡出协程\r\n    /// </summary>\r\n    private System.Collections.IEnumerator CrossFadeCoroutine(int targetClipIndex)\r\n    {\r\n        float elapsedTime = 0f;\r\n        float startWeight = blendWeight;\r\n        float targetWeight = targetClipIndex == 0 ? 0f : 1f;\r\n        \r\n        while (elapsedTime < crossFadeDuration)\r\n        {\r\n            elapsedTime += Time.deltaTime;\r\n            float t = elapsedTime / crossFadeDuration;\r\n            \r\n            blendWeight = Mathf.Lerp(startWeight, targetWeight, t);\r\n            \r\n            yield return null;\r\n        }\r\n        \r\n        blendWeight = targetWeight;\r\n        currentAnimationState = $\"交叉淡入淡出完成: {animationClips[targetClipIndex].name}\";\r\n    }\r\n\r\n    /// <summary>\r\n    /// 播放时间轴\r\n    /// </summary>\r\n    public void PlayTimeline()\r\n    {\r\n        if (playableDirector != null)\r\n        {\r\n            playableDirector.Play();\r\n            isPlaying = true;\r\n            currentPlayableState = \"时间轴播放中\";\r\n            Debug.Log(\"开始播放时间轴\");\r\n        }\r\n    }\r\n\r\n    /// <summary>\r\n    /// 暂停时间轴\r\n    /// </summary>\r\n    public void PauseTimeline()\r\n    {\r\n        if (playableDirector != null)\r\n        {\r\n            playableDirector.Pause();\r\n            isPlaying = false;\r\n            currentPlayableState = \"时间轴已暂停\";\r\n            Debug.Log(\"时间轴已暂停\");\r\n        }\r\n    }\r\n\r\n    /// <summary>\r\n    /// 停止时间轴\r\n    /// </summary>\r\n    public void StopTimeline()\r\n    {\r\n        if (playableDirector != null)\r\n        {\r\n            playableDirector.Stop();\r\n            isPlaying = false;\r\n            currentTime = 0.0;\r\n            currentPlayableState = \"时间轴已停止\";\r\n            Debug.Log(\"时间轴已停止\");\r\n        }\r\n    }\r\n\r\n    /// <summary>\r\n    /// 设置时间轴时间\r\n    /// </summary>\r\n    /// <param name=\"time\">时间（秒）</param>\r\n    public void SetTimelineTime(double time)\r\n    {\r\n        if (playableDirector != null)\r\n        {\r\n            playableDirector.time = Mathf.Clamp((float)time, 0f, (float)duration);\r\n            currentTime = playableDirector.time;\r\n        }\r\n    }\r\n\r\n    /// <summary>\r\n    /// 设置循环播放\r\n    /// </summary>\r\n    /// <param name=\"looping\">是否循环</param>\r\n    public void SetLooping(bool looping)\r\n    {\r\n        isLooping = looping;\r\n        if (playableDirector != null)\r\n        {\r\n            playableDirector.extrapolationMode = looping ? DirectorWrapMode.Loop : DirectorWrapMode.Hold;\r\n        }\r\n        Debug.Log($\"循环播放: {(looping ? \"启用\" : \"禁用\")}\");\r\n    }\r\n\r\n    /// <summary>\r\n    /// 创建自定义动画可播放\r\n    /// </summary>\r\n    public void CreateCustomAnimationPlayable()\r\n    {\r\n        if (!enableCustomAnimation) return;\r\n        \r\n        // 这里可以实现自定义动画可播放\r\n        Debug.Log(\"自定义动画可播放已创建\");\r\n    }\r\n\r\n    /// <summary>\r\n    /// 创建自定义音频可播放\r\n    /// </summary>\r\n    public void CreateCustomAudioPlayable()\r\n    {\r\n        if (!enableCustomAudio) return;\r\n        \r\n        // 这里可以实现自定义音频可播放\r\n        Debug.Log(\"自定义音频可播放已创建\");\r\n    }\r\n\r\n    /// <summary>\r\n    /// 创建自定义视频可播放\r\n    /// </summary>\r\n    public void CreateCustomVideoPlayable()\r\n    {\r\n        if (!enableCustomVideo) return;\r\n        \r\n        // 这里可以实现自定义视频可播放\r\n        Debug.Log(\"自定义视频可播放已创建\");\r\n    }\r\n\r\n    /// <summary>\r\n    /// 生成可播放报告\r\n    /// </summary>\r\n    public void GeneratePlayablesReport()\r\n    {\r\n        Debug.Log(\"=== 可播放系统报告 ===\");\r\n        Debug.Log($\"可播放状态: {currentPlayableState}\");\r\n        Debug.Log($\"动画状态: {currentAnimationState}\");\r\n        Debug.Log($\"播放状态: {(isPlaying ? \"播放中\" : \"已停止\")}\");\r\n        Debug.Log($\"当前时间: {currentTime:F2}s / {duration:F2}s\");\r\n        Debug.Log($\"动画进度: {animationProgress:P1}\");\r\n        Debug.Log($\"活跃可播放数: {activePlayables}\");\r\n        Debug.Log($\"可播放更新时间: {playableUpdateTime * 1000:F2}ms\");\r\n        Debug.Log($\"混合权重: {blendWeight:F2}\");\r\n        Debug.Log($\"循环播放: {(isLooping ? \"启用\" : \"禁用\")}\");\r\n    }\r\n\r\n    /// <summary>\r\n    /// 重置可播放系统\r\n    /// </summary>\r\n    public void ResetPlayablesSystem()\r\n    {\r\n        Debug.Log(\"重置可播放系统...\");\r\n        \r\n        // 停止播放\r\n        StopTimeline();\r\n        \r\n        // 重置混合权重\r\n        blendWeight = 0.5f;\r\n        \r\n        // 重置时间\r\n        currentTime = 0.0;\r\n        animationProgress = 0f;\r\n        \r\n        // 重置状态\r\n        currentPlayableState = \"已重置\";\r\n        currentAnimationState = \"空闲\";\r\n        \r\n        Debug.Log(\"可播放系统重置完成\");\r\n    }\r\n\r\n    /// <summary>\r\n    /// 导出可播放数据\r\n    /// </summary>\r\n    public void ExportPlayablesData()\r\n    {\r\n        var data = new PlayablesData\r\n        {\r\n            timestamp = System.DateTime.Now.ToString(),\r\n            currentPlayableState = currentPlayableState,\r\n            currentAnimationState = currentAnimationState,\r\n            isPlaying = isPlaying,\r\n            currentTime = currentTime,\r\n            duration = duration,\r\n            animationProgress = animationProgress,\r\n            blendWeight = blendWeight,\r\n            activePlayables = activePlayables,\r\n            playableUpdateTime = playableUpdateTime,\r\n            isLooping = isLooping\r\n        };\r\n        \r\n        string json = JsonUtility.ToJson(data, true);\r\n        string filename = $\"playables_{System.DateTime.Now:yyyyMMdd_HHmmss}.json\";\r\n        \r\n        System.IO.File.WriteAllText(filename, json);\r\n        Debug.Log($\"可播放数据已导出: {filename}\");\r\n    }\r\n\r\n    private void OnGUI()\r\n    {\r\n        GUILayout.BeginArea(new Rect(10, 10, 400, 800));\r\n        GUILayout.Label(\"Playables 可播放系统演示\", UnityEditor.EditorStyles.boldLabel);\r\n        \r\n        GUILayout.Space(10);\r\n        GUILayout.Label(\"系统配置:\");\r\n        enablePlayables = GUILayout.Toggle(enablePlayables, \"启用可播放系统\");\r\n        enableAnimationBlending = GUILayout.Toggle(enableAnimationBlending, \"启用动画混合\");\r\n        enableTimelineControl = GUILayout.Toggle(enableTimelineControl, \"启用时间轴控制\");\r\n        enableCustomPlayables = GUILayout.Toggle(enableCustomPlayables, \"启用自定义可播放\");\r\n        enablePerformanceMonitoring = GUILayout.Toggle(enablePerformanceMonitoring, \"启用性能监控\");\r\n        \r\n        GUILayout.Space(10);\r\n        GUILayout.Label(\"动画混合:\");\r\n        blendWeight = GUILayout.HorizontalSlider(blendWeight, 0f, 1f);\r\n        GUILayout.Label($\"混合权重: {blendWeight:F2}\");\r\n        blendSpeed = float.TryParse(GUILayout.TextField(\"混合速度\", blendSpeed.ToString()), out var speed) ? speed : blendSpeed;\r\n        enableCrossFade = GUILayout.Toggle(enableCrossFade, \"启用交叉淡入淡出\");\r\n        crossFadeDuration = float.TryParse(GUILayout.TextField(\"交叉淡入淡出持续时间\", crossFadeDuration.ToString()), out var fadeDuration) ? fadeDuration : crossFadeDuration;\r\n        \r\n        GUILayout.Space(10);\r\n        GUILayout.Label(\"时间轴控制:\");\r\n        GUILayout.Label($\"当前时间: {currentTime:F2}s / {duration:F2}s\");\r\n        GUILayout.Label($\"播放状态: {(isPlaying ? \"播放中\" : \"已停止\")}\");\r\n        isLooping = GUILayout.Toggle(isLooping, \"循环播放\");\r\n        \r\n        GUILayout.Space(10);\r\n        GUILayout.Label(\"系统状态:\");\r\n        GUILayout.Label($\"可播放状态: {currentPlayableState}\");\r\n        GUILayout.Label($\"动画状态: {currentAnimationState}\");\r\n        GUILayout.Label($\"动画进度: {animationProgress:P1}\");\r\n        GUILayout.Label($\"活跃可播放数: {activePlayables}\");\r\n        GUILayout.Label($\"可播放更新时间: {playableUpdateTime * 1000:F2}ms\");\r\n        \r\n        GUILayout.Space(10);\r\n        \r\n        if (GUILayout.Button(\"播放时间轴\"))\r\n        {\r\n            PlayTimeline();\r\n        }\r\n        \r\n        if (GUILayout.Button(\"暂停时间轴\"))\r\n        {\r\n            PauseTimeline();\r\n        }\r\n        \r\n        if (GUILayout.Button(\"停止时间轴\"))\r\n        {\r\n            StopTimeline();\r\n        }\r\n        \r\n        if (animationClips != null && animationClips.Length > 0)\r\n        {\r\n            for (int i = 0; i < animationClips.Length; i++)\r\n            {\r\n                if (GUILayout.Button($\"播放动画 {i}: {animationClips[i].name}\"))\r\n                {\r\n                    PlayAnimation(i);\r\n                }\r\n            }\r\n        }\r\n        \r\n        if (GUILayout.Button(\"创建自定义动画可播放\"))\r\n        {\r\n            CreateCustomAnimationPlayable();\r\n        }\r\n        \r\n        if (GUILayout.Button(\"创建自定义音频可播放\"))\r\n        {\r\n            CreateCustomAudioPlayable();\r\n        }\r\n        \r\n        if (GUILayout.Button(\"创建自定义视频可播放\"))\r\n        {\r\n            CreateCustomVideoPlayable();\r\n        }\r\n        \r\n        if (GUILayout.Button(\"生成可播放报告\"))\r\n        {\r\n            GeneratePlayablesReport();\r\n        }\r\n        \r\n        if (GUILayout.Button(\"重置可播放系统\"))\r\n        {\r\n            ResetPlayablesSystem();\r\n        }\r\n        \r\n        if (GUILayout.Button(\"导出可播放数据\"))\r\n        {\r\n            ExportPlayablesData();\r\n        }\r\n        \r\n        GUILayout.EndArea();\r\n    }\r\n\r\n    private void OnDestroy()\r\n    {\r\n        // 清理可播放图\r\n        if (playableGraph.IsValid())\r\n        {\r\n            playableGraph.Destroy();\r\n        }\r\n    }\r\n}\r\n\r\n/// <summary>\r\n/// 自定义可播放行为\r\n/// </summary>\r\n[System.Serializable]\r\npublic class CustomPlayableBehaviour : PlayableBehaviour\r\n{\r\n    public PlayablesExample playablesExample;\r\n    \r\n    public void Initialize(PlayablesExample example)\r\n    {\r\n        playablesExample = example;\r\n    }\r\n    \r\n    public override void OnPlayableCreate(Playable playable)\r\n    {\r\n        Debug.Log(\"自定义可播放行为已创建\");\r\n    }\r\n    \r\n    public override void OnPlayableDestroy(Playable playable)\r\n    {\r\n        Debug.Log(\"自定义可播放行为已销毁\");\r\n    }\r\n    \r\n    public override void ProcessFrame(Playable playable, FrameData info, object playerData)\r\n    {\r\n        // 处理帧数据\r\n        if (playablesExample != null)\r\n        {\r\n            // 这里可以实现自定义的帧处理逻辑\r\n        }\r\n    }\r\n}\r\n\r\n/// <summary>\r\n/// 可播放数据类\r\n/// </summary>\r\n[System.Serializable]\r\npublic class PlayablesData\r\n{\r\n    public string timestamp;\r\n    public string currentPlayableState;\r\n    public string currentAnimationState;\r\n    public bool isPlaying;\r\n    public double currentTime;\r\n    public double duration;\r\n    public float animationProgress;\r\n    public float blendWeight;\r\n    public int activePlayables;\r\n    public float playableUpdateTime;\r\n    public bool isLooping;\r\n} "
        }
    ]
}