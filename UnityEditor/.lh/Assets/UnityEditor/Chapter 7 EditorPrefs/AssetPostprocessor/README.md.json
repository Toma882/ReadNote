{
    "sourceFile": "Assets/UnityEditor/Chapter 7 EditorPrefs/AssetPostprocessor/README.md",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 1,
            "patches": [
                {
                    "date": 1746899967348,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1746900179027,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,135 @@\n+# AssetPostprocessor 模块\r\n+\r\n+## 概述\r\n+AssetPostprocessor 模块提供了Unity资源导入过程中的自动化处理工具，特别是针对纹理资源的预处理和后处理。该模块允许开发者自定义资源导入参数，确保项目中的所有资源遵循统一的导入设置，从而提高项目的一致性和工作效率。\r\n+\r\n+## 核心功能\r\n+- **自动化纹理资源导入处理**：在资源导入Unity编辑器时自动应用预设的导入参数\r\n+- **统一的纹理设置管理**：通过ScriptableObject集中管理纹理导入参数\r\n+- **自定义资源处理流程**：在资源导入的不同阶段进行干预和自定义处理\r\n+\r\n+## 重要接口和类\r\n+\r\n+### `AssetPostprocessor` 类\r\n+Unity内置的资源处理基类，提供资源导入各阶段的钩子方法。\r\n+\r\n+| 方法 | 说明 |\r\n+|------|------|\r\n+| `OnPreprocessTexture()` | 在纹理导入之前触发，可以修改纹理导入器的设置 |\r\n+| `OnPostprocessTexture(Texture2D texture)` | 纹理导入完成后触发，可以修改已导入的纹理 |\r\n+| `OnPostprocessGameObjectWithUserProperties(GameObject go, string[] propNames, object[] values)` | 处理带有自定义属性的游戏对象导入 |\r\n+| `OnPostprocessMeshHierarchy(GameObject root)` | 处理导入的网格层级结构 |\r\n+| `OnPostprocessAllAssets(string[] importedAssets, string[] deletedAssets, string[] movedAssets, string[] movedFromAssetPaths)` | 所有资源处理完成后的回调方法 |\r\n+\r\n+### `TexturePostprocessor` 类\r\n+继承自 `AssetPostprocessor`，专门处理纹理资源的导入。\r\n+\r\n+| 方法 | 说明 |\r\n+|------|------|\r\n+| `OnPreprocessTexture()` | 在纹理导入前应用自定义的纹理导入设置 |\r\n+\r\n+### `TexturePreprocessSettings` 类\r\n+ScriptableObject类型，用于定义和存储纹理导入的默认参数。\r\n+\r\n+| 属性 | 说明 |\r\n+|------|------|\r\n+| `TextureType` | 纹理类型（默认、法线贴图、编辑器GUI等） |\r\n+| `TextureShape` | 纹理形状（2D、3D、Cube等） |\r\n+| `SRGBTexture` | 是否为sRGB纹理 |\r\n+| `MaxSize` | 最大纹理尺寸 |\r\n+| `Compression` | 压缩方式 |\r\n+| ... | 更多纹理导入相关设置 |\r\n+\r\n+## UML类图\r\n+\r\n+```\r\n++--------------------+        +-------------------------+\r\n+|  AssetPostprocessor |<------| TexturePostprocessor   |\r\n++--------------------+        +-------------------------+\r\n+| #assetImporter     |        | -OnPreprocessTexture() |\r\n+| #assetPath         |        +-------------------------+\r\n+|                    |                    ^\r\n+| +OnPreprocessXXX() |                    |\r\n+| +OnPostprocessXXX()|                    | 使用\r\n++--------------------+                    |\r\n+                                          v\r\n+                            +---------------------------+\r\n+                            | TexturePreprocessSettings |\r\n+                            +---------------------------+\r\n+                            | -textureType              |\r\n+                            | -textureShape             |\r\n+                            | -sRGBTexture              |\r\n+                            | ...                       |\r\n+                            | +static Settings          |\r\n+                            | +static TextureType       |\r\n+                            | +static TextureShape      |\r\n+                            | ...                       |\r\n+                            +---------------------------+\r\n+```\r\n+\r\n+## 工作流程图\r\n+\r\n+```\r\n+导入纹理资源 --> OnPreprocessTexture() --> 应用TexturePreprocessSettings配置 --> Unity内部处理 --> OnPostprocessTexture() --> 完成导入\r\n+```\r\n+\r\n+## 思维导图\r\n+\r\n+```\r\n+AssetPostprocessor\r\n+├── 处理时机\r\n+│   ├── 预处理 (OnPreprocess系列方法)\r\n+│   │   └── 修改导入参数\r\n+│   └── 后处理 (OnPostprocess系列方法)\r\n+│       └── 修改已导入资源\r\n+├── 纹理处理 (TexturePostprocessor)\r\n+│   ├── 设置纹理类型\r\n+│   ├── 设置压缩方式\r\n+│   ├── 设置Mipmap生成\r\n+│   └── 设置其他参数\r\n+└── 设置管理 (TexturePreprocessSettings)\r\n+    ├── ScriptableObject存储\r\n+    ├── 统一项目配置\r\n+    ├── 编辑器界面配置\r\n+    └── 运行时读取\r\n+```\r\n+\r\n+## 应用场景\r\n+1. **自动化资源导入工作流**: 确保所有团队成员导入的纹理资源遵循相同的参数设置\r\n+2. **针对特定平台优化**: 根据目标平台自动调整纹理的压缩格式和质量设置\r\n+3. **特殊资源处理**: 对特定路径或命名规则的资源应用特殊的导入设置\r\n+4. **内容流水线集成**: 在大型项目中集成到资源管理流水线\r\n+\r\n+## 最佳实践\r\n+1. **模块化的处理器**: 为不同类型的资源创建专门的处理器类\r\n+2. **基于路径的规则**: 使用资源路径来决定应用哪些导入设置\r\n+3. **性能考虑**: 处理器中的代码应当高效，避免在导入阶段引入长时间操作\r\n+4. **记录和通知**: 考虑为重要的资源处理操作添加日志或编辑器通知\r\n+5. **集中配置**: 使用ScriptableObject存储配置，便于统一管理和版本控制\r\n+\r\n+## 代码示例\r\n+```csharp\r\n+// 基于文件名应用不同的纹理设置\r\n+public class AdvancedTextureProcessor : AssetPostprocessor\r\n+{\r\n+    void OnPreprocessTexture()\r\n+    {\r\n+        TextureImporter importer = assetImporter as TextureImporter;\r\n+        \r\n+        if (assetPath.Contains(\"_normal\"))\r\n+        {\r\n+            importer.textureType = TextureImporterType.NormalMap;\r\n+        }\r\n+        else if (assetPath.Contains(\"_mask\"))\r\n+        {\r\n+            importer.textureType = TextureImporterType.Default;\r\n+            importer.alphaIsTransparency = true;\r\n+        }\r\n+    }\r\n+}\r\n+```\r\n+\r\n+## 相关资源\r\n+- [Unity文档: AssetPostprocessor](https://docs.unity3d.com/ScriptReference/AssetPostprocessor.html)\r\n+- [Unity文档: TextureImporter](https://docs.unity3d.com/ScriptReference/TextureImporter.html)\r\n+- [Unity文档: ScriptableObject](https://docs.unity3d.com/ScriptReference/ScriptableObject.html)\r\n"
                }
            ],
            "date": 1746899967347,
            "name": "Commit-0",
            "content": "# AssetPostprocessor 模块\r\n\r\n## 概述\r\nAssetPostprocessor 模块提供了Unity资源导入过程中的自动化处理工具，特别是针对纹理资源的预处理和后处理。该模块允许开发者自定义资源导入参数，确保项目中的所有资源遵循统一的导入设置，从而提高项目的一致性和工作效率。\r\n\r\n## 核心功能\r\n- **自动化纹理资源导入处理**：在资源导入Unity编辑器时自动应用预设的导入参数\r\n- **统一的纹理设置管理**：通过ScriptableObject集中管理纹理导入参数\r\n- **自定义资源处理流程**：在资源导入的不同阶段进行干预和自定义处理\r\n\r\n## 重要接口和类\r\n\r\n### `AssetPostprocessor` 类\r\nUnity内置的资源处理基类，提供资源导入各阶段的钩子方法。\r\n\r\n| 方法 | 说明 |\r\n|------|------|\r\n| `OnPreprocessTexture()` | 在纹理导入之前触发，可以修改纹理导入器的设置 |\r\n| `OnPostprocessTexture(Texture2D texture)` | 纹理导入完成后触发，可以修改已导入的纹理 |\r\n| `OnPostprocessGameObjectWithUserProperties(GameObject go, string[] propNames, object[] values)` | 处理带有自定义属性的游戏对象导入 |\r\n| `OnPostprocessMeshHierarchy(GameObject root)` | 处理导入的网格层级结构 |\r\n| `OnPostprocessAllAssets(string[] importedAssets, string[] deletedAssets, string[] movedAssets, string[] movedFromAssetPaths)` | 所有资源处理完成后的回调方法 |\r\n\r\n### `TexturePostprocessor` 类\r\n继承自 `AssetPostprocessor`，专门处理纹理资源的导入。\r\n\r\n| 方法 | 说明 |\r\n|------|------|\r\n| `OnPreprocessTexture()` | 在纹理导入前应用自定义的纹理导入设置 |\r\n\r\n### `TexturePreprocessSettings` 类\r\nScriptableObject类型，用于定义和存储纹理导入的默认参数。\r\n\r\n| 属性 | 说明 |\r\n|------|------|\r\n| `TextureType` | 纹理类型（默认、法线贴图、编辑器GUI等） |\r\n| `TextureShape` | 纹理形状（2D、3D、Cube等） |\r\n| `SRGBTexture` | 是否为sRGB纹理 |\r\n| `MaxSize` | 最大纹理尺寸 |\r\n| `Compression` | 压缩方式 |\r\n| ... | 更多纹理导入相关设置 |\r\n\r\n## UML类图\r\n\r\n```\r\n+--------------------+        +-------------------------+\r\n|  AssetPostprocessor |<------| TexturePostprocessor   |\r\n+--------------------+        +-------------------------+\r\n| #assetImporter     |        | -OnPreprocessTexture() |\r\n| #assetPath         |        +-------------------------+\r\n|                    |                    ^\r\n| +OnPreprocessXXX() |                    |\r\n| +OnPostprocessXXX()|                    | 使用\r\n+--------------------+                    |\r\n                                          v\r\n                            +---------------------------+\r\n                            | TexturePreprocessSettings |\r\n                            +---------------------------+\r\n                            | -textureType              |\r\n                            | -textureShape             |\r\n                            | -sRGBTexture              |\r\n                            | ...                       |\r\n                            | +static Settings          |\r\n                            | +static TextureType       |\r\n                            | +static TextureShape      |\r\n                            | ...                       |\r\n                            +---------------------------+\r\n```\r\n\r\n## 工作流程图\r\n\r\n```\r\n导入纹理资源 --> OnPreprocessTexture() --> 应用TexturePreprocessSettings配置 --> Unity内部处理 --> OnPostprocessTexture() --> 完成导入\r\n```\r\n\r\n## 思维导图\r\n\r\n```\r\nAssetPostprocessor\r\n├── 处理时机\r\n│   ├── 预处理 (OnPreprocess系列方法)\r\n│   │   └── 修改导入参数\r\n│   └── 后处理 (OnPostprocess系列方法)\r\n│       └── 修改已导入资源\r\n├── 纹理处理 (TexturePostprocessor)\r\n│   ├── 设置纹理类型\r\n│   ├── 设置压缩方式\r\n│   ├── 设置Mipmap生成\r\n│   └── 设置其他参数\r\n└── 设置管理 (TexturePreprocessSettings)\r\n    ├── ScriptableObject存储\r\n    ├── 统一项目配置\r\n    ├── 编辑器界面配置\r\n    └── 运行时读取\r\n```\r\n\r\n## 应用场景\r\n1. **自动化资源导入工作流**: 确保所有团队成员导入的纹理资源遵循相同的参数设置\r\n2. **针对特定平台优化**: 根据目标平台自动调整纹理的压缩格式和质量设置\r\n3. **特殊资源处理**: 对特定路径或命名规则的资源应用特殊的导入设置\r\n4. **内容流水线集成**: 在大型项目中集成到资源管理流水线\r\n\r\n## 最佳实践\r\n1. **模块化的处理器**: 为不同类型的资源创建专门的处理器类\r\n2. **基于路径的规则**: 使用资源路径来决定应用哪些导入设置\r\n3. **性能考虑**: 处理器中的代码应当高效，避免在导入阶段引入长时间操作\r\n4. **记录和通知**: 考虑为重要的资源处理操作添加日志或编辑器通知\r\n5. **集中配置**: 使用ScriptableObject存储配置，便于统一管理和版本控制\r\n\r\n## 代码示例\r\n```csharp\r\n// 基于文件名应用不同的纹理设置\r\npublic class AdvancedTextureProcessor : AssetPostprocessor\r\n{\r\n    void OnPreprocessTexture()\r\n    {\r\n        TextureImporter importer = assetImporter as TextureImporter;\r\n        \r\n        if (assetPath.Contains(\"_normal\"))\r\n        {\r\n            importer.textureType = TextureImporterType.NormalMap;\r\n        }\r\n        else if (assetPath.Contains(\"_mask\"))\r\n        {\r\n            importer.textureType = TextureImporterType.Default;\r\n            importer.alphaIsTransparency = true;\r\n        }\r\n    }\r\n}\r\n```\r\n\r\n## 相关资源\r\n- [Unity文档: AssetPostprocessor](https://docs.unity3d.com/ScriptReference/AssetPostprocessor.html)\r\n- [Unity文档: TextureImporter](https://docs.unity3d.com/ScriptReference/TextureImporter.html)\r\n- [Unity文档: ScriptableObject](https://docs.unity3d.com/ScriptReference/ScriptableObject.html)"
        }
    ]
}