{
    "sourceFile": "Assets/UnityEditor/Chapter 8 UnityAPI/UnityEngine/TerrainTools/TerrainToolsExample.cs",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1750932830207,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1750932830207,
            "name": "Commit-0",
            "content": "using UnityEngine;\r\n#if UNITY_2020_2_OR_NEWER\r\nusing UnityEngine.TerrainTools;\r\n#endif\r\n\r\n/// <summary>\r\n/// UnityEngine.TerrainTools 命名空间案例演示\r\n/// 展示地形编辑、高度图、纹理等核心功能\r\n/// </summary>\r\npublic class TerrainToolsExample : MonoBehaviour\r\n{\r\n    [Header(\"地形工具设置\")]\r\n    [SerializeField] private Terrain terrain; //地形对象\r\n    [SerializeField] private bool enableTerrainTools = true; //是否启用地形工具\r\n    [SerializeField] private float brushSize = 10f; //笔刷大小\r\n    [SerializeField] private float brushStrength = 0.5f; //笔刷强度\r\n    [SerializeField] private TerrainToolType toolType = TerrainToolType.Raise; //工具类型\r\n\r\n    private TerrainData terrainData;\r\n    private int terrainResolution;\r\n\r\n    public enum TerrainToolType\r\n    {\r\n        Raise, //升高\r\n        Lower, //降低\r\n        Smooth, //平滑\r\n        Paint //绘制\r\n    }\r\n\r\n    private void Start()\r\n    {\r\n        if (terrain == null)\r\n        {\r\n            terrain = FindObjectOfType<Terrain>();\r\n        }\r\n\r\n        if (terrain != null)\r\n        {\r\n            terrainData = terrain.terrainData;\r\n            terrainResolution = terrainData.heightmapResolution;\r\n            Debug.Log($\"地形分辨率: {terrainResolution}x{terrainResolution}\");\r\n        }\r\n    }\r\n\r\n    private void Update()\r\n    {\r\n        if (enableTerrainTools && terrain != null)\r\n        {\r\n            HandleTerrainEditing();\r\n        }\r\n    }\r\n\r\n    /// <summary>\r\n    /// 处理地形编辑\r\n    /// </summary>\r\n    private void HandleTerrainEditing()\r\n    {\r\n        if (Input.GetMouseButton(0)) // 左键按下\r\n        {\r\n            Ray ray = Camera.main.ScreenPointToRay(Input.mousePosition);\r\n            RaycastHit hit;\r\n\r\n            if (Physics.Raycast(ray, out hit) && hit.collider.gameObject == terrain.gameObject)\r\n            {\r\n                Vector3 terrainPosition = hit.point;\r\n                ApplyTerrainTool(terrainPosition);\r\n            }\r\n        }\r\n    }\r\n\r\n    /// <summary>\r\n    /// 应用地形工具\r\n    /// </summary>\r\n    /// <param name=\"worldPosition\">世界坐标</param>\r\n    private void ApplyTerrainTool(Vector3 worldPosition)\r\n    {\r\n        Vector3 terrainPosition = terrain.transform.position;\r\n        Vector3 localPosition = worldPosition - terrainPosition;\r\n\r\n        // 转换为地形坐标\r\n        float normalizedX = localPosition.x / terrainData.size.x;\r\n        float normalizedZ = localPosition.z / terrainData.size.z;\r\n\r\n        // 转换为高度图坐标\r\n        int heightmapX = Mathf.RoundToInt(normalizedX * (terrainResolution - 1));\r\n        int heightmapZ = Mathf.RoundToInt(normalizedZ * (terrainResolution - 1));\r\n\r\n        // 确保坐标在有效范围内\r\n        heightmapX = Mathf.Clamp(heightmapX, 0, terrainResolution - 1);\r\n        heightmapZ = Mathf.Clamp(heightmapZ, 0, terrainResolution - 1);\r\n\r\n        // 计算笔刷范围\r\n        int brushRadius = Mathf.RoundToInt(brushSize);\r\n        int startX = Mathf.Max(0, heightmapX - brushRadius);\r\n        int endX = Mathf.Min(terrainResolution - 1, heightmapX + brushRadius);\r\n        int startZ = Mathf.Max(0, heightmapZ - brushRadius);\r\n        int endZ = Mathf.Min(terrainResolution - 1, heightmapZ + brushRadius);\r\n\r\n        // 获取当前高度图数据\r\n        float[,] heights = terrainData.GetHeights(startX, startZ, endX - startX + 1, endZ - startZ + 1);\r\n\r\n        // 应用工具\r\n        for (int x = 0; x <= endX - startX; x++)\r\n        {\r\n            for (int z = 0; z <= endZ - startZ; z++)\r\n            {\r\n                float distance = Vector2.Distance(new Vector2(x, z), new Vector2(heightmapX - startX, heightmapZ - startZ));\r\n                float brushInfluence = 1f - Mathf.Clamp01(distance / brushRadius);\r\n                brushInfluence *= brushStrength;\r\n\r\n                switch (toolType)\r\n                {\r\n                    case TerrainToolType.Raise:\r\n                        heights[x, z] += brushInfluence * Time.deltaTime;\r\n                        break;\r\n                    case TerrainToolType.Lower:\r\n                        heights[x, z] -= brushInfluence * Time.deltaTime;\r\n                        break;\r\n                    case TerrainToolType.Smooth:\r\n                        // 简单的平滑算法\r\n                        if (x > 0 && x < heights.GetLength(0) - 1 && z > 0 && z < heights.GetLength(1) - 1)\r\n                        {\r\n                            float average = (heights[x - 1, z] + heights[x + 1, z] + heights[x, z - 1] + heights[x, z + 1]) / 4f;\r\n                            heights[x, z] = Mathf.Lerp(heights[x, z], average, brushInfluence);\r\n                        }\r\n                        break;\r\n                }\r\n\r\n                // 限制高度范围\r\n                heights[x, z] = Mathf.Clamp01(heights[x, z]);\r\n            }\r\n        }\r\n\r\n        // 应用高度图数据\r\n        terrainData.SetHeights(startX, startZ, heights);\r\n    }\r\n\r\n    /// <summary>\r\n    /// 重置地形\r\n    /// </summary>\r\n    public void ResetTerrain()\r\n    {\r\n        if (terrainData != null)\r\n        {\r\n            float[,] heights = new float[terrainResolution, terrainResolution];\r\n            terrainData.SetHeights(0, 0, heights);\r\n            Debug.Log(\"地形已重置\");\r\n        }\r\n    }\r\n\r\n    /// <summary>\r\n    /// 生成随机地形\r\n    /// </summary>\r\n    public void GenerateRandomTerrain()\r\n    {\r\n        if (terrainData != null)\r\n        {\r\n            float[,] heights = new float[terrainResolution, terrainResolution];\r\n            \r\n            for (int x = 0; x < terrainResolution; x++)\r\n            {\r\n                for (int z = 0; z < terrainResolution; z++)\r\n                {\r\n                    float noiseX = (float)x / terrainResolution * 10f;\r\n                    float noiseZ = (float)z / terrainResolution * 10f;\r\n                    heights[x, z] = Mathf.PerlinNoise(noiseX, noiseZ) * 0.5f;\r\n                }\r\n            }\r\n            \r\n            terrainData.SetHeights(0, 0, heights);\r\n            Debug.Log(\"随机地形已生成\");\r\n        }\r\n    }\r\n\r\n    /// <summary>\r\n    /// 获取地形信息\r\n    /// </summary>\r\n    public void GetTerrainInfo()\r\n    {\r\n        if (terrainData != null)\r\n        {\r\n            Debug.Log(\"=== 地形信息 ===\");\r\n            Debug.Log($\"地形大小: {terrainData.size}\");\r\n            Debug.Log($\"高度图分辨率: {terrainData.heightmapResolution}\");\r\n            Debug.Log($\"地形分辨率: {terrainData.heightmapResolution}x{terrainData.heightmapResolution}\");\r\n            Debug.Log($\"最大高度: {terrainData.size.y}\");\r\n            Debug.Log($\"纹理层数: {terrainData.terrainLayers?.Length ?? 0}\");\r\n        }\r\n    }\r\n\r\n    private void OnGUI()\r\n    {\r\n        GUILayout.BeginArea(new Rect(10, 10, 350, 350));\r\n        GUILayout.Label(\"Terrain Tools 地形工具演示\", UnityEditor.EditorStyles.boldLabel);\r\n        \r\n        terrain = (Terrain)UnityEditor.EditorGUILayout.ObjectField(\"地形\", terrain, typeof(Terrain), true);\r\n        enableTerrainTools = GUILayout.Toggle(enableTerrainTools, \"启用地形工具\");\r\n        brushSize = float.TryParse(GUILayout.TextField(\"笔刷大小\", brushSize.ToString()), out var size) ? size : brushSize;\r\n        brushStrength = float.TryParse(GUILayout.TextField(\"笔刷强度\", brushStrength.ToString()), out var strength) ? strength : brushStrength;\r\n        \r\n        GUILayout.Label(\"工具类型:\");\r\n        toolType = (TerrainToolType)GUILayout.SelectionGrid((int)toolType, \r\n            new string[] { \"升高\", \"降低\", \"平滑\", \"绘制\" }, 2);\r\n        \r\n        GUILayout.Space(10);\r\n        \r\n        if (GUILayout.Button(\"获取地形信息\"))\r\n        {\r\n            GetTerrainInfo();\r\n        }\r\n        \r\n        if (GUILayout.Button(\"重置地形\"))\r\n        {\r\n            ResetTerrain();\r\n        }\r\n        \r\n        if (GUILayout.Button(\"生成随机地形\"))\r\n        {\r\n            GenerateRandomTerrain();\r\n        }\r\n        \r\n        GUILayout.Space(10);\r\n        GUILayout.Label(\"操作说明:\");\r\n        GUILayout.Label(\"• 左键拖拽编辑地形\");\r\n        GUILayout.Label(\"• 调整笔刷大小和强度\");\r\n        GUILayout.Label(\"• 选择不同的工具类型\");\r\n        \r\n        GUILayout.EndArea();\r\n    }\r\n} "
        }
    ]
}