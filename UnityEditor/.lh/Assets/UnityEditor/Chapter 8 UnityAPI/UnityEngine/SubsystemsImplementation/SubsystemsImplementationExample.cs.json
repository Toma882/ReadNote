{
    "sourceFile": "Assets/UnityEditor/Chapter 8 UnityAPI/UnityEngine/SubsystemsImplementation/SubsystemsImplementationExample.cs",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1750936092960,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1750936092960,
            "name": "Commit-0",
            "content": "using UnityEngine;\r\nusing UnityEngine.SubsystemsImplementation;\r\n\r\n/// <summary>\r\n/// UnityEngine.SubsystemsImplementation 命名空间案例演示\r\n/// 展示子系统实现、生命周期管理、配置管理等核心功能\r\n/// </summary>\r\npublic class SubsystemsImplementationExample : MonoBehaviour\r\n{\r\n    [Header(\"子系统实现配置\")]\r\n    [SerializeField] private bool enableSubsystems = true; //启用子系统\r\n    [SerializeField] private bool enableLifecycleManagement = true; //启用生命周期管理\r\n    [SerializeField] private bool enableConfigurationManagement = true; //启用配置管理\r\n    [SerializeField] private bool enableProviderManagement = true; //启用提供者管理\r\n    [SerializeField] private bool enableSubsystemRegistry = true; //启用子系统注册表\r\n    \r\n    [Header(\"子系统配置\")]\r\n    [SerializeField] private int maxSubsystems = 10; //最大子系统数\r\n    [SerializeField] private float subsystemUpdateInterval = 0.016f; //子系统更新间隔\r\n    [SerializeField] private bool enableAutoStart = true; //启用自动启动\r\n    [SerializeField] private bool enableAutoStop = true; //启用自动停止\r\n    [SerializeField] private bool enableErrorHandling = true; //启用错误处理\r\n    [SerializeField] private bool enablePerformanceMonitoring = true; //启用性能监控\r\n    \r\n    [Header(\"生命周期配置\")]\r\n    [SerializeField] private bool enableStartupSequence = true; //启用启动序列\r\n    [SerializeField] private bool enableShutdownSequence = true; //启用关闭序列\r\n    [SerializeField] private float startupTimeout = 5f; //启动超时时间\r\n    [SerializeField] private float shutdownTimeout = 3f; //关闭超时时间\r\n    [SerializeField] private bool enableGracefulShutdown = true; //启用优雅关闭\r\n    [SerializeField] private bool enableForceShutdown = false; //启用强制关闭\r\n    \r\n    [Header(\"提供者配置\")]\r\n    [SerializeField] private bool enableProviderDiscovery = true; //启用提供者发现\r\n    [SerializeField] private bool enableProviderValidation = true; //启用提供者验证\r\n    [SerializeField] private bool enableProviderFallback = true; //启用提供者回退\r\n    [SerializeField] private int maxProviders = 5; //最大提供者数\r\n    [SerializeField] private float providerTimeout = 2f; //提供者超时时间\r\n    \r\n    [Header(\"性能监控\")]\r\n    [SerializeField] private bool enableSubsystemMonitoring = true; //启用子系统监控\r\n    [SerializeField] private float monitoringInterval = 1f; //监控间隔\r\n    [SerializeField] private bool logSubsystemData = false; //记录子系统数据\r\n    [SerializeField] private int totalSubsystems = 0; //总子系统数\r\n    [SerializeField] private int activeSubsystems = 0; //活跃子系统数\r\n    [SerializeField] private float averageUpdateTime = 0f; //平均更新时间\r\n    [SerializeField] private int totalErrors = 0; //总错误数\r\n    \r\n    [Header(\"子系统状态\")]\r\n    [SerializeField] private string subsystemsState = \"未初始化\"; //子系统状态\r\n    [SerializeField] private string currentLifecycleState = \"空闲\"; //当前生命周期状态\r\n    [SerializeField] private bool isInitialized = false; //是否已初始化\r\n    [SerializeField] private bool isRunning = false; //是否正在运行\r\n    [SerializeField] private bool isShuttingDown = false; //是否正在关闭\r\n    [SerializeField] private float lastUpdateTime = 0f; //上次更新时间\r\n    [SerializeField] private string lastError = \"\"; //上次错误\r\n    \r\n    [Header(\"性能数据\")]\r\n    [SerializeField] private float[] updateTimeHistory = new float[100]; //更新时间历史\r\n    [SerializeField] private int updateTimeIndex = 0; //更新时间索引\r\n    [SerializeField] private float[] errorCountHistory = new float[100]; //错误数量历史\r\n    [SerializeField] private int errorCountIndex = 0; //错误数量索引\r\n    \r\n    private SubsystemManager subsystemManager;\r\n    private System.Collections.Generic.List<ISubsystem> subsystems = new System.Collections.Generic.List<ISubsystem>();\r\n    private System.Collections.Generic.List<ISubsystemProvider> providers = new System.Collections.Generic.List<ISubsystemProvider>();\r\n    private System.Collections.Generic.Dictionary<string, SubsystemConfiguration> configurations = new System.Collections.Generic.Dictionary<string, SubsystemConfiguration>();\r\n    private float lastMonitoringTime = 0f;\r\n    private float lastSubsystemUpdateTime = 0f;\r\n    private bool isInitializing = false;\r\n\r\n    private void Start()\r\n    {\r\n        InitializeSubsystemsImplementation();\r\n    }\r\n\r\n    /// <summary>\r\n    /// 初始化子系统实现\r\n    /// </summary>\r\n    private void InitializeSubsystemsImplementation()\r\n    {\r\n        // 创建子系统管理器\r\n        subsystemManager = new SubsystemManager();\r\n        \r\n        // 初始化配置管理\r\n        InitializeConfigurationManagement();\r\n        \r\n        // 初始化提供者管理\r\n        InitializeProviderManagement();\r\n        \r\n        // 初始化子系统注册表\r\n        InitializeSubsystemRegistry();\r\n        \r\n        // 初始化性能监控\r\n        InitializePerformanceMonitoring();\r\n        \r\n        // 配置子系统实现\r\n        ConfigureSubsystemsImplementation();\r\n        \r\n        isInitialized = true;\r\n        subsystemsState = \"已初始化\";\r\n        Debug.Log(\"子系统实现初始化完成\");\r\n    }\r\n\r\n    /// <summary>\r\n    /// 初始化配置管理\r\n    /// </summary>\r\n    private void InitializeConfigurationManagement()\r\n    {\r\n        if (enableConfigurationManagement)\r\n        {\r\n            // 创建默认配置\r\n            CreateDefaultConfigurations();\r\n            \r\n            Debug.Log(\"配置管理初始化完成\");\r\n        }\r\n    }\r\n\r\n    /// <summary>\r\n    /// 创建默认配置\r\n    /// </summary>\r\n    private void CreateDefaultConfigurations()\r\n    {\r\n        // 音频子系统配置\r\n        var audioConfig = new SubsystemConfiguration\r\n        {\r\n            name = \"AudioSubsystem\",\r\n            enabled = true,\r\n            priority = 1,\r\n            timeout = 2f,\r\n            autoStart = true,\r\n            errorHandling = true\r\n        };\r\n        configurations[\"AudioSubsystem\"] = audioConfig;\r\n        \r\n        // 输入子系统配置\r\n        var inputConfig = new SubsystemConfiguration\r\n        {\r\n            name = \"InputSubsystem\",\r\n            enabled = true,\r\n            priority = 2,\r\n            timeout = 1f,\r\n            autoStart = true,\r\n            errorHandling = true\r\n        };\r\n        configurations[\"InputSubsystem\"] = inputConfig;\r\n        \r\n        // 网络子系统配置\r\n        var networkConfig = new SubsystemConfiguration\r\n        {\r\n            name = \"NetworkSubsystem\",\r\n            enabled = true,\r\n            priority = 3,\r\n            timeout = 5f,\r\n            autoStart = false,\r\n            errorHandling = true\r\n        };\r\n        configurations[\"NetworkSubsystem\"] = networkConfig;\r\n        \r\n        // 渲染子系统配置\r\n        var renderConfig = new SubsystemConfiguration\r\n        {\r\n            name = \"RenderSubsystem\",\r\n            enabled = true,\r\n            priority = 4,\r\n            timeout = 3f,\r\n            autoStart = true,\r\n            errorHandling = true\r\n        };\r\n        configurations[\"RenderSubsystem\"] = renderConfig;\r\n        \r\n        Debug.Log($\"默认配置创建完成: {configurations.Count} 个配置\");\r\n    }\r\n\r\n    /// <summary>\r\n    /// 初始化提供者管理\r\n    /// </summary>\r\n    private void InitializeProviderManagement()\r\n    {\r\n        if (enableProviderManagement)\r\n        {\r\n            // 创建示例提供者\r\n            CreateSampleProviders();\r\n            \r\n            Debug.Log(\"提供者管理初始化完成\");\r\n        }\r\n    }\r\n\r\n    /// <summary>\r\n    /// 创建示例提供者\r\n    /// </summary>\r\n    private void CreateSampleProviders()\r\n    {\r\n        // 音频提供者\r\n        var audioProvider = new AudioSubsystemProvider();\r\n        providers.Add(audioProvider);\r\n        \r\n        // 输入提供者\r\n        var inputProvider = new InputSubsystemProvider();\r\n        providers.Add(inputProvider);\r\n        \r\n        // 网络提供者\r\n        var networkProvider = new NetworkSubsystemProvider();\r\n        providers.Add(networkProvider);\r\n        \r\n        // 渲染提供者\r\n        var renderProvider = new RenderSubsystemProvider();\r\n        providers.Add(renderProvider);\r\n        \r\n        Debug.Log($\"示例提供者创建完成: {providers.Count} 个提供者\");\r\n    }\r\n\r\n    /// <summary>\r\n    /// 初始化子系统注册表\r\n    /// </summary>\r\n    private void InitializeSubsystemRegistry()\r\n    {\r\n        if (enableSubsystemRegistry)\r\n        {\r\n            // 注册子系统类型\r\n            RegisterSubsystemTypes();\r\n            \r\n            Debug.Log(\"子系统注册表初始化完成\");\r\n        }\r\n    }\r\n\r\n    /// <summary>\r\n    /// 注册子系统类型\r\n    /// </summary>\r\n    private void RegisterSubsystemTypes()\r\n    {\r\n        // 注册音频子系统\r\n        SubsystemRegistry.RegisterSubsystem<AudioSubsystem, AudioSubsystemProvider>();\r\n        \r\n        // 注册输入子系统\r\n        SubsystemRegistry.RegisterSubsystem<InputSubsystem, InputSubsystemProvider>();\r\n        \r\n        // 注册网络子系统\r\n        SubsystemRegistry.RegisterSubsystem<NetworkSubsystem, NetworkSubsystemProvider>();\r\n        \r\n        // 注册渲染子系统\r\n        SubsystemRegistry.RegisterSubsystem<RenderSubsystem, RenderSubsystemProvider>();\r\n        \r\n        Debug.Log(\"子系统类型注册完成\");\r\n    }\r\n\r\n    /// <summary>\r\n    /// 初始化性能监控\r\n    /// </summary>\r\n    private void InitializePerformanceMonitoring()\r\n    {\r\n        if (enableSubsystemMonitoring)\r\n        {\r\n            updateTimeHistory = new float[100];\r\n            errorCountHistory = new float[100];\r\n            updateTimeIndex = 0;\r\n            errorCountIndex = 0;\r\n            \r\n            Debug.Log(\"性能监控初始化完成\");\r\n        }\r\n    }\r\n\r\n    /// <summary>\r\n    /// 配置子系统实现\r\n    /// </summary>\r\n    private void ConfigureSubsystemsImplementation()\r\n    {\r\n        subsystemManager.EnableErrorHandling = enableErrorHandling;\r\n        subsystemManager.EnablePerformanceMonitoring = enablePerformanceMonitoring;\r\n        subsystemManager.MaxSubsystems = maxSubsystems;\r\n        subsystemManager.UpdateInterval = subsystemUpdateInterval;\r\n        \r\n        Debug.Log(\"子系统实现配置完成\");\r\n    }\r\n\r\n    private void Update()\r\n    {\r\n        if (!isInitialized) return;\r\n        \r\n        // 子系统更新\r\n        if (isRunning && Time.time - lastSubsystemUpdateTime > subsystemUpdateInterval)\r\n        {\r\n            UpdateSubsystems();\r\n            lastSubsystemUpdateTime = Time.time;\r\n        }\r\n        \r\n        // 性能监控\r\n        if (enableSubsystemMonitoring && Time.time - lastMonitoringTime > monitoringInterval)\r\n        {\r\n            MonitorSubsystemPerformance();\r\n            lastMonitoringTime = Time.time;\r\n        }\r\n    }\r\n\r\n    /// <summary>\r\n    /// 更新子系统\r\n    /// </summary>\r\n    private void UpdateSubsystems()\r\n    {\r\n        float startTime = Time.realtimeSinceStartup;\r\n        \r\n        try\r\n        {\r\n            foreach (var subsystem in subsystems)\r\n            {\r\n                if (subsystem.IsRunning)\r\n                {\r\n                    subsystem.Update();\r\n                }\r\n            }\r\n            \r\n            lastUpdateTime = Time.realtimeSinceStartup - startTime;\r\n            \r\n            // 更新性能数据\r\n            UpdatePerformanceData();\r\n        }\r\n        catch (System.Exception e)\r\n        {\r\n            HandleSubsystemError(e);\r\n        }\r\n    }\r\n\r\n    /// <summary>\r\n    /// 监控子系统性能\r\n    /// </summary>\r\n    private void MonitorSubsystemPerformance()\r\n    {\r\n        activeSubsystems = 0;\r\n        foreach (var subsystem in subsystems)\r\n        {\r\n            if (subsystem.IsRunning)\r\n            {\r\n                activeSubsystems++;\r\n            }\r\n        }\r\n        \r\n        if (logSubsystemData)\r\n        {\r\n            Debug.Log($\"子系统性能监控: 总系统={totalSubsystems}, 活跃系统={activeSubsystems}, 平均更新时间={averageUpdateTime * 1000:F2}ms, 总错误={totalErrors}\");\r\n        }\r\n    }\r\n\r\n    /// <summary>\r\n    /// 更新性能数据\r\n    /// </summary>\r\n    private void UpdatePerformanceData()\r\n    {\r\n        // 更新更新时间历史\r\n        updateTimeHistory[updateTimeIndex] = lastUpdateTime;\r\n        updateTimeIndex = (updateTimeIndex + 1) % 100;\r\n        \r\n        // 更新错误数量历史\r\n        errorCountHistory[errorCountIndex] = totalErrors;\r\n        errorCountIndex = (errorCountIndex + 1) % 100;\r\n        \r\n        // 计算平均更新时间\r\n        float totalTime = 0f;\r\n        for (int i = 0; i < 100; i++)\r\n        {\r\n            totalTime += updateTimeHistory[i];\r\n        }\r\n        averageUpdateTime = totalTime / 100;\r\n    }\r\n\r\n    /// <summary>\r\n    /// 启动子系统\r\n    /// </summary>\r\n    public void StartSubsystems()\r\n    {\r\n        if (isInitializing || isRunning)\r\n        {\r\n            Debug.LogWarning(\"子系统已在运行或正在初始化\");\r\n            return;\r\n        }\r\n        \r\n        isInitializing = true;\r\n        currentLifecycleState = \"启动中...\";\r\n        \r\n        StartCoroutine(StartupSequence());\r\n    }\r\n\r\n    /// <summary>\r\n    /// 启动序列\r\n    /// </summary>\r\n    private System.Collections.IEnumerator StartupSequence()\r\n    {\r\n        Debug.Log(\"开始子系统启动序列...\");\r\n        \r\n        float startTime = Time.time;\r\n        \r\n        // 按优先级启动子系统\r\n        var sortedConfigs = configurations.Values.OrderBy(c => c.priority).ToList();\r\n        \r\n        foreach (var config in sortedConfigs)\r\n        {\r\n            if (config.enabled && config.autoStart)\r\n            {\r\n                yield return StartCoroutine(StartSubsystem(config));\r\n                \r\n                if (Time.time - startTime > startupTimeout)\r\n                {\r\n                    Debug.LogError($\"子系统启动超时: {startupTimeout}秒\");\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        \r\n        isInitializing = false;\r\n        isRunning = true;\r\n        currentLifecycleState = \"运行中\";\r\n        \r\n        Debug.Log(\"子系统启动序列完成\");\r\n    }\r\n\r\n    /// <summary>\r\n    /// 启动单个子系统\r\n    /// </summary>\r\n    private System.Collections.IEnumerator StartSubsystem(SubsystemConfiguration config)\r\n    {\r\n        Debug.Log($\"启动子系统: {config.name}\");\r\n        \r\n        try\r\n        {\r\n            // 创建子系统实例\r\n            var subsystem = CreateSubsystem(config.name);\r\n            if (subsystem != null)\r\n            {\r\n                subsystems.Add(subsystem);\r\n                totalSubsystems++;\r\n                \r\n                // 启动子系统\r\n                subsystem.Start();\r\n                \r\n                // 等待启动完成\r\n                float startTime = Time.time;\r\n                while (!subsystem.IsRunning && Time.time - startTime < config.timeout)\r\n                {\r\n                    yield return null;\r\n                }\r\n                \r\n                if (subsystem.IsRunning)\r\n                {\r\n                    Debug.Log($\"子系统启动成功: {config.name}\");\r\n                }\r\n                else\r\n                {\r\n                    Debug.LogError($\"子系统启动失败: {config.name}\");\r\n                    totalErrors++;\r\n                }\r\n            }\r\n        }\r\n        catch (System.Exception e)\r\n        {\r\n            Debug.LogError($\"启动子系统时发生错误: {config.name}, {e.Message}\");\r\n            totalErrors++;\r\n            lastError = e.Message;\r\n        }\r\n    }\r\n\r\n    /// <summary>\r\n    /// 创建子系统\r\n    /// </summary>\r\n    private ISubsystem CreateSubsystem(string subsystemName)\r\n    {\r\n        switch (subsystemName)\r\n        {\r\n            case \"AudioSubsystem\":\r\n                return new AudioSubsystem();\r\n            case \"InputSubsystem\":\r\n                return new InputSubsystem();\r\n            case \"NetworkSubsystem\":\r\n                return new NetworkSubsystem();\r\n            case \"RenderSubsystem\":\r\n                return new RenderSubsystem();\r\n            default:\r\n                Debug.LogWarning($\"未知的子系统类型: {subsystemName}\");\r\n                return null;\r\n        }\r\n    }\r\n\r\n    /// <summary>\r\n    /// 停止子系统\r\n    /// </summary>\r\n    public void StopSubsystems()\r\n    {\r\n        if (!isRunning || isShuttingDown)\r\n        {\r\n            Debug.LogWarning(\"子系统未运行或正在关闭\");\r\n            return;\r\n        }\r\n        \r\n        isShuttingDown = true;\r\n        currentLifecycleState = \"关闭中...\";\r\n        \r\n        StartCoroutine(ShutdownSequence());\r\n    }\r\n\r\n    /// <summary>\r\n    /// 关闭序列\r\n    /// </summary>\r\n    private System.Collections.IEnumerator ShutdownSequence()\r\n    {\r\n        Debug.Log(\"开始子系统关闭序列...\");\r\n        \r\n        float startTime = Time.time;\r\n        \r\n        // 按优先级倒序关闭子系统\r\n        var sortedConfigs = configurations.Values.OrderByDescending(c => c.priority).ToList();\r\n        \r\n        foreach (var config in sortedConfigs)\r\n        {\r\n            if (config.enabled)\r\n            {\r\n                yield return StartCoroutine(StopSubsystem(config));\r\n                \r\n                if (Time.time - startTime > shutdownTimeout)\r\n                {\r\n                    Debug.LogError($\"子系统关闭超时: {shutdownTimeout}秒\");\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        \r\n        isShuttingDown = false;\r\n        isRunning = false;\r\n        currentLifecycleState = \"已停止\";\r\n        \r\n        Debug.Log(\"子系统关闭序列完成\");\r\n    }\r\n\r\n    /// <summary>\r\n    /// 停止单个子系统\r\n    /// </summary>\r\n    private System.Collections.IEnumerator StopSubsystem(SubsystemConfiguration config)\r\n    {\r\n        Debug.Log($\"停止子系统: {config.name}\");\r\n        \r\n        try\r\n        {\r\n            var subsystem = subsystems.FirstOrDefault(s => s.GetType().Name == config.name);\r\n            if (subsystem != null)\r\n            {\r\n                if (enableGracefulShutdown)\r\n                {\r\n                    // 优雅关闭\r\n                    subsystem.Stop();\r\n                    \r\n                    float startTime = Time.time;\r\n                    while (subsystem.IsRunning && Time.time - startTime < config.timeout)\r\n                    {\r\n                        yield return null;\r\n                    }\r\n                }\r\n                \r\n                if (subsystem.IsRunning && enableForceShutdown)\r\n                {\r\n                    // 强制关闭\r\n                    subsystem.Destroy();\r\n                }\r\n                \r\n                subsystems.Remove(subsystem);\r\n                totalSubsystems--;\r\n                \r\n                Debug.Log($\"子系统停止成功: {config.name}\");\r\n            }\r\n        }\r\n        catch (System.Exception e)\r\n        {\r\n            Debug.LogError($\"停止子系统时发生错误: {config.name}, {e.Message}\");\r\n            totalErrors++;\r\n            lastError = e.Message;\r\n        }\r\n    }\r\n\r\n    /// <summary>\r\n    /// 处理子系统错误\r\n    /// </summary>\r\n    private void HandleSubsystemError(System.Exception e)\r\n    {\r\n        totalErrors++;\r\n        lastError = e.Message;\r\n        \r\n        if (enableErrorHandling)\r\n        {\r\n            Debug.LogError($\"子系统错误: {e.Message}\");\r\n            \r\n            // 尝试恢复\r\n            StartCoroutine(RecoverFromError());\r\n        }\r\n    }\r\n\r\n    /// <summary>\r\n    /// 从错误中恢复\r\n    /// </summary>\r\n    private System.Collections.IEnumerator RecoverFromError()\r\n    {\r\n        Debug.Log(\"尝试从错误中恢复...\");\r\n        \r\n        // 等待一段时间\r\n        yield return new WaitForSeconds(1f);\r\n        \r\n        // 重新启动失败的子系统\r\n        foreach (var subsystem in subsystems)\r\n        {\r\n            if (!subsystem.IsRunning)\r\n            {\r\n                try\r\n                {\r\n                    subsystem.Start();\r\n                }\r\n                catch (System.Exception e)\r\n                {\r\n                    Debug.LogError($\"恢复子系统失败: {e.Message}\");\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /// <summary>\r\n    /// 添加子系统\r\n    /// </summary>\r\n    /// <param name=\"subsystem\">子系统</param>\r\n    public void AddSubsystem(ISubsystem subsystem)\r\n    {\r\n        if (subsystems.Count < maxSubsystems)\r\n        {\r\n            subsystems.Add(subsystem);\r\n            totalSubsystems++;\r\n            \r\n            if (isRunning)\r\n            {\r\n                subsystem.Start();\r\n            }\r\n            \r\n            Debug.Log($\"子系统已添加: {subsystem.GetType().Name}\");\r\n        }\r\n        else\r\n        {\r\n            Debug.LogWarning($\"无法添加子系统，已达到最大数量: {maxSubsystems}\");\r\n        }\r\n    }\r\n\r\n    /// <summary>\r\n    /// 移除子系统\r\n    /// </summary>\r\n    /// <param name=\"subsystem\">子系统</param>\r\n    public void RemoveSubsystem(ISubsystem subsystem)\r\n    {\r\n        if (subsystems.Contains(subsystem))\r\n        {\r\n            if (subsystem.IsRunning)\r\n            {\r\n                subsystem.Stop();\r\n            }\r\n            \r\n            subsystems.Remove(subsystem);\r\n            totalSubsystems--;\r\n            \r\n            Debug.Log($\"子系统已移除: {subsystem.GetType().Name}\");\r\n        }\r\n    }\r\n\r\n    /// <summary>\r\n    /// 获取子系统\r\n    /// </summary>\r\n    /// <typeparam name=\"T\">子系统类型</typeparam>\r\n    public T GetSubsystem<T>() where T : class, ISubsystem\r\n    {\r\n        return subsystems.OfType<T>().FirstOrDefault();\r\n    }\r\n\r\n    /// <summary>\r\n    /// 生成子系统报告\r\n    /// </summary>\r\n    public void GenerateSubsystemReport()\r\n    {\r\n        Debug.Log(\"=== 子系统实现报告 ===\");\r\n        Debug.Log($\"子系统状态: {subsystemsState}\");\r\n        Debug.Log($\"生命周期状态: {currentLifecycleState}\");\r\n        Debug.Log($\"总子系统数: {totalSubsystems}\");\r\n        Debug.Log($\"活跃子系统数: {activeSubsystems}\");\r\n        Debug.Log($\"平均更新时间: {averageUpdateTime * 1000:F2}ms\");\r\n        Debug.Log($\"总错误数: {totalErrors}\");\r\n        Debug.Log($\"上次错误: {lastError}\");\r\n        Debug.Log($\"上次更新时间: {lastUpdateTime * 1000:F2}ms\");\r\n        \r\n        foreach (var subsystem in subsystems)\r\n        {\r\n            Debug.Log($\"子系统: {subsystem.GetType().Name}, 运行状态: {subsystem.IsRunning}\");\r\n        }\r\n    }\r\n\r\n    /// <summary>\r\n    /// 导出子系统数据\r\n    /// </summary>\r\n    public void ExportSubsystemData()\r\n    {\r\n        var data = new SubsystemImplementationData\r\n        {\r\n            timestamp = System.DateTime.Now.ToString(),\r\n            subsystemsState = subsystemsState,\r\n            currentLifecycleState = currentLifecycleState,\r\n            totalSubsystems = totalSubsystems,\r\n            activeSubsystems = activeSubsystems,\r\n            averageUpdateTime = averageUpdateTime,\r\n            totalErrors = totalErrors,\r\n            lastError = lastError,\r\n            lastUpdateTime = lastUpdateTime,\r\n            updateTimeHistory = updateTimeHistory,\r\n            errorCountHistory = errorCountHistory\r\n        };\r\n        \r\n        string json = JsonUtility.ToJson(data, true);\r\n        string filename = $\"subsystems_{System.DateTime.Now:yyyyMMdd_HHmmss}.json\";\r\n        \r\n        System.IO.File.WriteAllText(filename, json);\r\n        Debug.Log($\"子系统数据已导出: {filename}\");\r\n    }\r\n\r\n    private void OnGUI()\r\n    {\r\n        GUILayout.BeginArea(new Rect(10, 10, 400, 800));\r\n        GUILayout.Label(\"SubsystemsImplementation 子系统实现演示\", UnityEditor.EditorStyles.boldLabel);\r\n        \r\n        GUILayout.Space(10);\r\n        GUILayout.Label(\"子系统实现配置:\");\r\n        enableSubsystems = GUILayout.Toggle(enableSubsystems, \"启用子系统\");\r\n        enableLifecycleManagement = GUILayout.Toggle(enableLifecycleManagement, \"启用生命周期管理\");\r\n        enableConfigurationManagement = GUILayout.Toggle(enableConfigurationManagement, \"启用配置管理\");\r\n        enableProviderManagement = GUILayout.Toggle(enableProviderManagement, \"启用提供者管理\");\r\n        enableSubsystemRegistry = GUILayout.Toggle(enableSubsystemRegistry, \"启用子系统注册表\");\r\n        \r\n        GUILayout.Space(10);\r\n        GUILayout.Label(\"子系统配置:\");\r\n        maxSubsystems = int.TryParse(GUILayout.TextField(\"最大子系统数\", maxSubsystems.ToString()), out var maxSubs) ? maxSubs : maxSubsystems;\r\n        subsystemUpdateInterval = float.TryParse(GUILayout.TextField(\"更新间隔\", subsystemUpdateInterval.ToString()), out var updateInterval) ? updateInterval : subsystemUpdateInterval;\r\n        enableAutoStart = GUILayout.Toggle(enableAutoStart, \"启用自动启动\");\r\n        enableAutoStop = GUILayout.Toggle(enableAutoStop, \"启用自动停止\");\r\n        enableErrorHandling = GUILayout.Toggle(enableErrorHandling, \"启用错误处理\");\r\n        enablePerformanceMonitoring = GUILayout.Toggle(enablePerformanceMonitoring, \"启用性能监控\");\r\n        \r\n        GUILayout.Space(10);\r\n        GUILayout.Label(\"生命周期配置:\");\r\n        enableStartupSequence = GUILayout.Toggle(enableStartupSequence, \"启用启动序列\");\r\n        enableShutdownSequence = GUILayout.Toggle(enableShutdownSequence, \"启用关闭序列\");\r\n        startupTimeout = float.TryParse(GUILayout.TextField(\"启动超时时间\", startupTimeout.ToString()), out var startTimeout) ? startTimeout : startupTimeout;\r\n        shutdownTimeout = float.TryParse(GUILayout.TextField(\"关闭超时时间\", shutdownTimeout.ToString()), out var stopTimeout) ? stopTimeout : shutdownTimeout;\r\n        enableGracefulShutdown = GUILayout.Toggle(enableGracefulShutdown, \"启用优雅关闭\");\r\n        enableForceShutdown = GUILayout.Toggle(enableForceShutdown, \"启用强制关闭\");\r\n        \r\n        GUILayout.Space(10);\r\n        GUILayout.Label(\"提供者配置:\");\r\n        enableProviderDiscovery = GUILayout.Toggle(enableProviderDiscovery, \"启用提供者发现\");\r\n        enableProviderValidation = GUILayout.Toggle(enableProviderValidation, \"启用提供者验证\");\r\n        enableProviderFallback = GUILayout.Toggle(enableProviderFallback, \"启用提供者回退\");\r\n        maxProviders = int.TryParse(GUILayout.TextField(\"最大提供者数\", maxProviders.ToString()), out var maxProv) ? maxProv : maxProviders;\r\n        providerTimeout = float.TryParse(GUILayout.TextField(\"提供者超时时间\", providerTimeout.ToString()), out var provTimeout) ? provTimeout : providerTimeout;\r\n        \r\n        GUILayout.Space(10);\r\n        GUILayout.Label(\"子系统状态:\");\r\n        GUILayout.Label($\"实现状态: {subsystemsState}\");\r\n        GUILayout.Label($\"生命周期状态: {currentLifecycleState}\");\r\n        GUILayout.Label($\"总子系统数: {totalSubsystems}\");\r\n        GUILayout.Label($\"活跃子系统数: {activeSubsystems}\");\r\n        GUILayout.Label($\"平均更新时间: {averageUpdateTime * 1000:F2}ms\");\r\n        GUILayout.Label($\"总错误数: {totalErrors}\");\r\n        GUILayout.Label($\"上次错误: {lastError}\");\r\n        \r\n        GUILayout.Space(10);\r\n        \r\n        if (GUILayout.Button(\"启动子系统\"))\r\n        {\r\n            StartSubsystems();\r\n        }\r\n        \r\n        if (GUILayout.Button(\"停止子系统\"))\r\n        {\r\n            StopSubsystems();\r\n        }\r\n        \r\n        if (GUILayout.Button(\"添加音频子系统\"))\r\n        {\r\n            AddSubsystem(new AudioSubsystem());\r\n        }\r\n        \r\n        if (GUILayout.Button(\"添加输入子系统\"))\r\n        {\r\n            AddSubsystem(new InputSubsystem());\r\n        }\r\n        \r\n        if (GUILayout.Button(\"生成子系统报告\"))\r\n        {\r\n            GenerateSubsystemReport();\r\n        }\r\n        \r\n        if (GUILayout.Button(\"导出子系统数据\"))\r\n        {\r\n            ExportSubsystemData();\r\n        }\r\n        \r\n        GUILayout.EndArea();\r\n    }\r\n}\r\n\r\n/// <summary>\r\n/// 子系统配置\r\n/// </summary>\r\n[System.Serializable]\r\npublic class SubsystemConfiguration\r\n{\r\n    public string name;\r\n    public bool enabled;\r\n    public int priority;\r\n    public float timeout;\r\n    public bool autoStart;\r\n    public bool errorHandling;\r\n}\r\n\r\n/// <summary>\r\n/// 子系统接口\r\n/// </summary>\r\npublic interface ISubsystem\r\n{\r\n    bool IsRunning { get; }\r\n    void Start();\r\n    void Stop();\r\n    void Update();\r\n    void Destroy();\r\n}\r\n\r\n/// <summary>\r\n/// 子系统提供者接口\r\n/// </summary>\r\npublic interface ISubsystemProvider\r\n{\r\n    string Name { get; }\r\n    bool IsAvailable { get; }\r\n    ISubsystem CreateSubsystem();\r\n}\r\n\r\n/// <summary>\r\n/// 音频子系统\r\n/// </summary>\r\npublic class AudioSubsystem : ISubsystem\r\n{\r\n    public bool IsRunning { get; private set; }\r\n    \r\n    public void Start() { IsRunning = true; Debug.Log(\"音频子系统已启动\"); }\r\n    public void Stop() { IsRunning = false; Debug.Log(\"音频子系统已停止\"); }\r\n    public void Update() { /* 音频更新逻辑 */ }\r\n    public void Destroy() { Stop(); Debug.Log(\"音频子系统已销毁\"); }\r\n}\r\n\r\n/// <summary>\r\n/// 输入子系统\r\n/// </summary>\r\npublic class InputSubsystem : ISubsystem\r\n{\r\n    public bool IsRunning { get; private set; }\r\n    \r\n    public void Start() { IsRunning = true; Debug.Log(\"输入子系统已启动\"); }\r\n    public void Stop() { IsRunning = false; Debug.Log(\"输入子系统已停止\"); }\r\n    public void Update() { /* 输入更新逻辑 */ }\r\n    public void Destroy() { Stop(); Debug.Log(\"输入子系统已销毁\"); }\r\n}\r\n\r\n/// <summary>\r\n/// 网络子系统\r\n/// </summary>\r\npublic class NetworkSubsystem : ISubsystem\r\n{\r\n    public bool IsRunning { get; private set; }\r\n    \r\n    public void Start() { IsRunning = true; Debug.Log(\"网络子系统已启动\"); }\r\n    public void Stop() { IsRunning = false; Debug.Log(\"网络子系统已停止\"); }\r\n    public void Update() { /* 网络更新逻辑 */ }\r\n    public void Destroy() { Stop(); Debug.Log(\"网络子系统已销毁\"); }\r\n}\r\n\r\n/// <summary>\r\n/// 渲染子系统\r\n/// </summary>\r\npublic class RenderSubsystem : ISubsystem\r\n{\r\n    public bool IsRunning { get; private set; }\r\n    \r\n    public void Start() { IsRunning = true; Debug.Log(\"渲染子系统已启动\"); }\r\n    public void Stop() { IsRunning = false; Debug.Log(\"渲染子系统已停止\"); }\r\n    public void Update() { /* 渲染更新逻辑 */ }\r\n    public void Destroy() { Stop(); Debug.Log(\"渲染子系统已销毁\"); }\r\n}\r\n\r\n/// <summary>\r\n/// 音频子系统提供者\r\n/// </summary>\r\npublic class AudioSubsystemProvider : ISubsystemProvider\r\n{\r\n    public string Name => \"AudioSubsystem\";\r\n    public bool IsAvailable => true;\r\n    public ISubsystem CreateSubsystem() => new AudioSubsystem();\r\n}\r\n\r\n/// <summary>\r\n/// 输入子系统提供者\r\n/// </summary>\r\npublic class InputSubsystemProvider : ISubsystemProvider\r\n{\r\n    public string Name => \"InputSubsystem\";\r\n    public bool IsAvailable => true;\r\n    public ISubsystem CreateSubsystem() => new InputSubsystem();\r\n}\r\n\r\n/// <summary>\r\n/// 网络子系统提供者\r\n/// </summary>\r\npublic class NetworkSubsystemProvider : ISubsystemProvider\r\n{\r\n    public string Name => \"NetworkSubsystem\";\r\n    public bool IsAvailable => true;\r\n    public ISubsystem CreateSubsystem() => new NetworkSubsystem();\r\n}\r\n\r\n/// <summary>\r\n/// 渲染子系统提供者\r\n/// </summary>\r\npublic class RenderSubsystemProvider : ISubsystemProvider\r\n{\r\n    public string Name => \"RenderSubsystem\";\r\n    public bool IsAvailable => true;\r\n    public ISubsystem CreateSubsystem() => new RenderSubsystem();\r\n}\r\n\r\n/// <summary>\r\n/// 子系统管理器\r\n/// </summary>\r\npublic class SubsystemManager\r\n{\r\n    public bool EnableErrorHandling { get; set; }\r\n    public bool EnablePerformanceMonitoring { get; set; }\r\n    public int MaxSubsystems { get; set; }\r\n    public float UpdateInterval { get; set; }\r\n}\r\n\r\n/// <summary>\r\n/// 子系统注册表\r\n/// </summary>\r\npublic static class SubsystemRegistry\r\n{\r\n    public static void RegisterSubsystem<TSubsystem, TProvider>() where TSubsystem : class, ISubsystem where TProvider : class, ISubsystemProvider\r\n    {\r\n        Debug.Log($\"注册子系统: {typeof(TSubsystem).Name}\");\r\n    }\r\n}\r\n\r\n/// <summary>\r\n/// 子系统实现数据类\r\n/// </summary>\r\n[System.Serializable]\r\npublic class SubsystemImplementationData\r\n{\r\n    public string timestamp;\r\n    public string subsystemsState;\r\n    public string currentLifecycleState;\r\n    public int totalSubsystems;\r\n    public int activeSubsystems;\r\n    public float averageUpdateTime;\r\n    public int totalErrors;\r\n    public string lastError;\r\n    public float lastUpdateTime;\r\n    public float[] updateTimeHistory;\r\n    public float[] errorCountHistory;\r\n} "
        }
    ]
}