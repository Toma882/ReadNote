{
    "sourceFile": "Assets/UnityEditor/Chapter 8 UnityAPI/UnityEngine/CrashReportHandler/CrashReportHandlerExample.cs",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1750933619297,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1750933619297,
            "name": "Commit-0",
            "content": "using UnityEngine;\r\n\r\n/// <summary>\r\n/// UnityEngine.CrashReportHandler 命名空间案例演示\r\n/// 展示崩溃报告处理、错误日志、异常捕获等核心功能\r\n/// </summary>\r\npublic class CrashReportHandlerExample : MonoBehaviour\r\n{\r\n    [Header(\"崩溃报告设置\")]\r\n    [SerializeField] private bool enableCrashReporting = true; //启用崩溃报告\r\n    [SerializeField] private bool enableAutomaticReporting = true; //自动报告\r\n    [SerializeField] private bool enableDetailedLogging = false; //详细日志\r\n    [SerializeField] private string crashReportUrl = \"https://api.crashlytics.com\"; //崩溃报告URL\r\n\r\n    [Header(\"错误处理\")]\r\n    [SerializeField] private bool enableExceptionHandling = true; //启用异常处理\r\n    [SerializeField] private bool enableLogCapture = true; //启用日志捕获\r\n    [SerializeField] private bool enableStackTraces = true; //启用堆栈跟踪\r\n    [SerializeField] private int maxLogEntries = 1000; //最大日志条目数\r\n\r\n    [Header(\"报告信息\")]\r\n    [SerializeField] private string appVersion = \"1.0.0\"; //应用版本\r\n    [SerializeField] private string buildNumber = \"1\"; //构建号\r\n    [SerializeField] private string deviceId = \"\"; //设备ID\r\n    [SerializeField] private string userId = \"\"; //用户ID\r\n\r\n    [Header(\"崩溃统计\")]\r\n    [SerializeField] private int crashCount = 0; //崩溃次数\r\n    [SerializeField] private string lastCrashTime = \"\"; //最后崩溃时间\r\n    [SerializeField] private string lastCrashType = \"\"; //最后崩溃类型\r\n    [SerializeField] private bool hasUnsentReports = false; //是否有未发送报告\r\n\r\n    private System.Collections.Generic.List<string> logBuffer = new System.Collections.Generic.List<string>();\r\n    private System.Collections.Generic.List<CrashReport> crashReports = new System.Collections.Generic.List<CrashReport>();\r\n\r\n    [System.Serializable]\r\n    public class CrashReport\r\n    {\r\n        public string timestamp;\r\n        public string type;\r\n        public string message;\r\n        public string stackTrace;\r\n        public string deviceInfo;\r\n        public string userInfo;\r\n    }\r\n\r\n    private void Start()\r\n    {\r\n        InitializeCrashReporting();\r\n    }\r\n\r\n    /// <summary>\r\n    /// 初始化崩溃报告系统\r\n    /// </summary>\r\n    private void InitializeCrashReporting()\r\n    {\r\n        if (enableCrashReporting)\r\n        {\r\n            // 设置设备ID\r\n            deviceId = SystemInfo.deviceUniqueIdentifier;\r\n            \r\n            // 设置异常处理\r\n            if (enableExceptionHandling)\r\n            {\r\n                Application.logMessageReceived += OnLogMessageReceived;\r\n            }\r\n            \r\n            // 检查未发送的报告\r\n            CheckUnsentReports();\r\n            \r\n            Debug.Log(\"崩溃报告系统已初始化\");\r\n        }\r\n    }\r\n\r\n    /// <summary>\r\n    /// 日志消息接收回调\r\n    /// </summary>\r\n    /// <param name=\"logString\">日志字符串</param>\r\n    /// <param name=\"stackTrace\">堆栈跟踪</param>\r\n    /// <param name=\"type\">日志类型</param>\r\n    private void OnLogMessageReceived(string logString, string stackTrace, LogType type)\r\n    {\r\n        if (enableLogCapture)\r\n        {\r\n            // 添加到日志缓冲区\r\n            string logEntry = $\"[{System.DateTime.Now:yyyy-MM-dd HH:mm:ss}] [{type}] {logString}\";\r\n            logBuffer.Add(logEntry);\r\n            \r\n            // 限制日志条目数量\r\n            if (logBuffer.Count > maxLogEntries)\r\n            {\r\n                logBuffer.RemoveAt(0);\r\n            }\r\n        }\r\n        \r\n        // 检查是否是错误或异常\r\n        if (type == LogType.Error || type == LogType.Exception)\r\n        {\r\n            HandleCrash(logString, stackTrace, type.ToString());\r\n        }\r\n    }\r\n\r\n    /// <summary>\r\n    /// 处理崩溃\r\n    /// </summary>\r\n    /// <param name=\"message\">错误消息</param>\r\n    /// <param name=\"stackTrace\">堆栈跟踪</param>\r\n    /// <param name=\"type\">错误类型</param>\r\n    private void HandleCrash(string message, string stackTrace, string type)\r\n    {\r\n        if (!enableCrashReporting) return;\r\n        \r\n        // 创建崩溃报告\r\n        CrashReport report = new CrashReport\r\n        {\r\n            timestamp = System.DateTime.Now.ToString(\"yyyy-MM-dd HH:mm:ss\"),\r\n            type = type,\r\n            message = message,\r\n            stackTrace = enableStackTraces ? stackTrace : \"\",\r\n            deviceInfo = GetDeviceInfo(),\r\n            userInfo = GetUserInfo()\r\n        };\r\n        \r\n        // 添加到崩溃报告列表\r\n        crashReports.Add(report);\r\n        crashCount++;\r\n        \r\n        // 更新统计信息\r\n        lastCrashTime = report.timestamp;\r\n        lastCrashType = type;\r\n        hasUnsentReports = true;\r\n        \r\n        Debug.Log($\"崩溃已记录: {type} - {message}\");\r\n        \r\n        // 自动发送报告\r\n        if (enableAutomaticReporting)\r\n        {\r\n            SendCrashReport(report);\r\n        }\r\n    }\r\n\r\n    /// <summary>\r\n    /// 获取设备信息\r\n    /// </summary>\r\n    /// <returns>设备信息字符串</returns>\r\n    private string GetDeviceInfo()\r\n    {\r\n        return $\"Device: {SystemInfo.deviceModel}, OS: {SystemInfo.operatingSystem}, \" +\r\n               $\"Memory: {SystemInfo.systemMemorySize}MB, GPU: {SystemInfo.graphicsDeviceName}\";\r\n    }\r\n\r\n    /// <summary>\r\n    /// 获取用户信息\r\n    /// </summary>\r\n    /// <returns>用户信息字符串</returns>\r\n    private string GetUserInfo()\r\n    {\r\n        return $\"UserID: {userId}, AppVersion: {appVersion}, Build: {buildNumber}\";\r\n    }\r\n\r\n    /// <summary>\r\n    /// 发送崩溃报告\r\n    /// </summary>\r\n    /// <param name=\"report\">崩溃报告</param>\r\n    public void SendCrashReport(CrashReport report)\r\n    {\r\n        if (string.IsNullOrEmpty(crashReportUrl)) return;\r\n        \r\n        // 这里应该实现实际的报告发送逻辑\r\n        // 例如使用WWW或UnityWebRequest发送到服务器\r\n        \r\n        Debug.Log($\"发送崩溃报告: {report.type} - {report.message}\");\r\n        \r\n        // 模拟发送成功\r\n        hasUnsentReports = false;\r\n    }\r\n\r\n    /// <summary>\r\n    /// 手动触发崩溃测试\r\n    /// </summary>\r\n    public void TriggerTestCrash()\r\n    {\r\n        Debug.Log(\"触发测试崩溃\");\r\n        \r\n        // 模拟不同类型的崩溃\r\n        try\r\n        {\r\n            // 模拟空引用异常\r\n            object nullObject = null;\r\n            nullObject.ToString();\r\n        }\r\n        catch (System.Exception e)\r\n        {\r\n            HandleCrash(e.Message, e.StackTrace, \"TestException\");\r\n        }\r\n    }\r\n\r\n    /// <summary>\r\n    /// 检查未发送的报告\r\n    /// </summary>\r\n    private void CheckUnsentReports()\r\n    {\r\n        // 检查是否有未发送的崩溃报告\r\n        hasUnsentReports = crashReports.Count > 0;\r\n        \r\n        if (hasUnsentReports)\r\n        {\r\n            Debug.Log($\"发现 {crashReports.Count} 个未发送的崩溃报告\");\r\n        }\r\n    }\r\n\r\n    /// <summary>\r\n    /// 发送所有未发送的报告\r\n    /// </summary>\r\n    public void SendAllUnsentReports()\r\n    {\r\n        if (!hasUnsentReports) return;\r\n        \r\n        Debug.Log($\"发送 {crashReports.Count} 个崩溃报告\");\r\n        \r\n        foreach (var report in crashReports)\r\n        {\r\n            SendCrashReport(report);\r\n        }\r\n        \r\n        crashReports.Clear();\r\n        hasUnsentReports = false;\r\n    }\r\n\r\n    /// <summary>\r\n    /// 清除所有崩溃报告\r\n    /// </summary>\r\n    public void ClearAllCrashReports()\r\n    {\r\n        crashReports.Clear();\r\n        logBuffer.Clear();\r\n        crashCount = 0;\r\n        hasUnsentReports = false;\r\n        \r\n        Debug.Log(\"所有崩溃报告已清除\");\r\n    }\r\n\r\n    /// <summary>\r\n    /// 获取崩溃报告信息\r\n    /// </summary>\r\n    public void GetCrashReportInfo()\r\n    {\r\n        Debug.Log(\"=== 崩溃报告信息 ===\");\r\n        Debug.Log($\"崩溃报告启用: {enableCrashReporting}\");\r\n        Debug.Log($\"自动报告: {enableAutomaticReporting}\");\r\n        Debug.Log($\"详细日志: {enableDetailedLogging}\");\r\n        Debug.Log($\"崩溃次数: {crashCount}\");\r\n        Debug.Log($\"最后崩溃时间: {lastCrashTime}\");\r\n        Debug.Log($\"最后崩溃类型: {lastCrashType}\");\r\n        Debug.Log($\"未发送报告: {hasUnsentReports}\");\r\n        Debug.Log($\"报告数量: {crashReports.Count}\");\r\n        Debug.Log($\"日志条目数: {logBuffer.Count}\");\r\n    }\r\n\r\n    /// <summary>\r\n    /// 获取最近的日志\r\n    /// </summary>\r\n    /// <param name=\"count\">日志数量</param>\r\n    public void GetRecentLogs(int count = 10)\r\n    {\r\n        Debug.Log(\"=== 最近的日志 ===\");\r\n        \r\n        int startIndex = Mathf.Max(0, logBuffer.Count - count);\r\n        for (int i = startIndex; i < logBuffer.Count; i++)\r\n        {\r\n            Debug.Log(logBuffer[i]);\r\n        }\r\n    }\r\n\r\n    /// <summary>\r\n    /// 设置用户信息\r\n    /// </summary>\r\n    /// <param name=\"newUserId\">用户ID</param>\r\n    public void SetUserInfo(string newUserId)\r\n    {\r\n        userId = newUserId;\r\n        Debug.Log($\"用户信息已设置: {userId}\");\r\n    }\r\n\r\n    /// <summary>\r\n    /// 设置应用版本信息\r\n    /// </summary>\r\n    /// <param name=\"version\">版本号</param>\r\n    /// <param name=\"build\">构建号</param>\r\n    public void SetAppVersion(string version, string build)\r\n    {\r\n        appVersion = version;\r\n        buildNumber = build;\r\n        Debug.Log($\"应用版本已设置: {appVersion} (Build {buildNumber})\");\r\n    }\r\n\r\n    /// <summary>\r\n    /// 测试崩溃报告功能\r\n    /// </summary>\r\n    public void TestCrashReporting()\r\n    {\r\n        Debug.Log(\"开始测试崩溃报告功能\");\r\n        \r\n        // 测试不同类型的错误\r\n        Debug.LogError(\"这是一个测试错误\");\r\n        Debug.LogWarning(\"这是一个测试警告\");\r\n        \r\n        // 测试异常\r\n        TriggerTestCrash();\r\n        \r\n        // 测试日志捕获\r\n        GetRecentLogs(5);\r\n        \r\n        Debug.Log(\"崩溃报告功能测试完成\");\r\n    }\r\n\r\n    /// <summary>\r\n    /// 重置崩溃报告设置\r\n    /// </summary>\r\n    public void ResetCrashReportingSettings()\r\n    {\r\n        enableCrashReporting = true;\r\n        enableAutomaticReporting = true;\r\n        enableDetailedLogging = false;\r\n        enableExceptionHandling = true;\r\n        enableLogCapture = true;\r\n        enableStackTraces = true;\r\n        maxLogEntries = 1000;\r\n        \r\n        ClearAllCrashReports();\r\n        Debug.Log(\"崩溃报告设置已重置\");\r\n    }\r\n\r\n    private void OnDestroy()\r\n    {\r\n        // 清理事件监听\r\n        if (enableExceptionHandling)\r\n        {\r\n            Application.logMessageReceived -= OnLogMessageReceived;\r\n        }\r\n    }\r\n\r\n    private void OnGUI()\r\n    {\r\n        GUILayout.BeginArea(new Rect(10, 10, 400, 700));\r\n        GUILayout.Label(\"CrashReportHandler 崩溃报告处理演示\", UnityEditor.EditorStyles.boldLabel);\r\n        \r\n        GUILayout.Space(10);\r\n        GUILayout.Label(\"崩溃统计:\");\r\n        GUILayout.Label($\"崩溃次数: {crashCount}\");\r\n        GUILayout.Label($\"最后崩溃: {lastCrashTime}\");\r\n        GUILayout.Label($\"崩溃类型: {lastCrashType}\");\r\n        GUILayout.Label($\"未发送报告: {(hasUnsentReports ? \"是\" : \"否\")}\");\r\n        \r\n        GUILayout.Space(10);\r\n        GUILayout.Label(\"报告设置:\");\r\n        \r\n        enableCrashReporting = GUILayout.Toggle(enableCrashReporting, \"启用崩溃报告\");\r\n        enableAutomaticReporting = GUILayout.Toggle(enableAutomaticReporting, \"自动报告\");\r\n        enableDetailedLogging = GUILayout.Toggle(enableDetailedLogging, \"详细日志\");\r\n        enableExceptionHandling = GUILayout.Toggle(enableExceptionHandling, \"异常处理\");\r\n        enableLogCapture = GUILayout.Toggle(enableLogCapture, \"日志捕获\");\r\n        enableStackTraces = GUILayout.Toggle(enableStackTraces, \"堆栈跟踪\");\r\n        \r\n        GUILayout.Space(5);\r\n        maxLogEntries = int.TryParse(GUILayout.TextField(\"最大日志条目\", maxLogEntries.ToString()), out var maxLog) ? maxLog : maxLogEntries;\r\n        \r\n        GUILayout.Space(10);\r\n        GUILayout.Label(\"应用信息:\");\r\n        \r\n        appVersion = GUILayout.TextField(\"应用版本\", appVersion);\r\n        buildNumber = GUILayout.TextField(\"构建号\", buildNumber);\r\n        userId = GUILayout.TextField(\"用户ID\", userId);\r\n        crashReportUrl = GUILayout.TextField(\"报告URL\", crashReportUrl);\r\n        \r\n        GUILayout.Space(10);\r\n        \r\n        if (GUILayout.Button(\"触发测试崩溃\"))\r\n        {\r\n            TriggerTestCrash();\r\n        }\r\n        \r\n        if (GUILayout.Button(\"发送所有未发送报告\"))\r\n        {\r\n            SendAllUnsentReports();\r\n        }\r\n        \r\n        if (GUILayout.Button(\"清除所有报告\"))\r\n        {\r\n            ClearAllCrashReports();\r\n        }\r\n        \r\n        GUILayout.Space(10);\r\n        \r\n        if (GUILayout.Button(\"获取崩溃报告信息\"))\r\n        {\r\n            GetCrashReportInfo();\r\n        }\r\n        \r\n        if (GUILayout.Button(\"获取最近日志\"))\r\n        {\r\n            GetRecentLogs(10);\r\n        }\r\n        \r\n        if (GUILayout.Button(\"测试崩溃报告功能\"))\r\n        {\r\n            TestCrashReporting();\r\n        }\r\n        \r\n        if (GUILayout.Button(\"重置崩溃报告设置\"))\r\n        {\r\n            ResetCrashReportingSettings();\r\n        }\r\n        \r\n        GUILayout.EndArea();\r\n    }\r\n} "
        }
    ]
}