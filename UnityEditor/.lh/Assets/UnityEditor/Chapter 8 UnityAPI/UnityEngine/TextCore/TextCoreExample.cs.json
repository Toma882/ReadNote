{
    "sourceFile": "Assets/UnityEditor/Chapter 8 UnityAPI/UnityEngine/TextCore/TextCoreExample.cs",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 1,
            "patches": [
                {
                    "date": 1750933109041,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1750935907709,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,251 +1,734 @@\n using UnityEngine;\r\n-using TMPro;\r\n+using UnityEngine.TextCore;\r\n+using UnityEngine.TextCore.Text;\r\n \r\n /// <summary>\r\n /// UnityEngine.TextCore 命名空间案例演示\r\n-/// 展示TextMeshPro、字体、文本渲染等核心功能\r\n+/// 展示文本渲染、字体管理、文本布局等核心功能\r\n /// </summary>\r\n public class TextCoreExample : MonoBehaviour\r\n {\r\n-    [Header(\"文本设置\")]\r\n-    [SerializeField] private TextMeshPro textMeshPro; //TextMeshPro组件\r\n-    [SerializeField] private string displayText = \"Hello World\"; //显示文本\r\n-    [SerializeField] private float fontSize = 24f; //字体大小\r\n+    [Header(\"文本核心配置\")]\r\n+    [SerializeField] private bool enableTextCore = true; //启用文本核心\r\n+    [SerializeField] private bool enableFontAtlas = true; //启用字体图集\r\n+    [SerializeField] private bool enableTextMesh = true; //启用文本网格\r\n+    [SerializeField] private bool enableTextRendering = true; //启用文本渲染\r\n+    [SerializeField] private bool enableTextLayout = true; //启用文本布局\r\n+    \r\n+    [Header(\"字体配置\")]\r\n+    [SerializeField] private FontAsset fontAsset; //字体资源\r\n+    [SerializeField] private int fontSize = 24; //字体大小\r\n+    [SerializeField] private FontWeight fontWeight = FontWeight.Regular; //字体粗细\r\n+    [SerializeField] private FontStyle fontStyle = FontStyle.Normal; //字体样式\r\n+    [SerializeField] private bool enableFontFallback = true; //启用字体回退\r\n+    [SerializeField] private FontAsset[] fallbackFonts; //回退字体列表\r\n+    \r\n+    [Header(\"文本渲染配置\")]\r\n     [SerializeField] private Color textColor = Color.white; //文本颜色\r\n-    [SerializeField] private bool enableAnimation = false; //是否启用动画\r\n+    [SerializeField] private Color outlineColor = Color.black; //轮廓颜色\r\n+    [SerializeField] private float outlineWidth = 0f; //轮廓宽度\r\n+    [SerializeField] private Color shadowColor = Color.black; //阴影颜色\r\n+    [SerializeField] private Vector2 shadowOffset = new Vector2(1f, -1f); //阴影偏移\r\n+    [SerializeField] private bool enableGradient = false; //启用渐变\r\n+    [SerializeField] private Color gradientTop = Color.white; //渐变顶部颜色\r\n+    [SerializeField] private Color gradientBottom = Color.gray; //渐变底部颜色\r\n+    \r\n+    [Header(\"文本布局配置\")]\r\n+    [SerializeField] private TextAlignmentOptions alignment = TextAlignmentOptions.Left; //文本对齐\r\n+    [SerializeField] private float lineSpacing = 0f; //行间距\r\n+    [SerializeField] private float characterSpacing = 0f; //字符间距\r\n+    [SerializeField] private float wordSpacing = 0f; //词间距\r\n+    [SerializeField] private float paragraphSpacing = 0f; //段落间距\r\n+    [SerializeField] private bool enableWordWrap = true; //启用自动换行\r\n+    [SerializeField] private float maxWidth = 500f; //最大宽度\r\n+    [SerializeField] private float maxHeight = 300f; //最大高度\r\n+    \r\n+    [Header(\"文本内容\")]\r\n+    [SerializeField] private string sampleText = \"Hello World! 这是一个Unity TextCore示例。\\n支持多行文本、富文本标签和特殊字符。\"; //示例文本\r\n+    [SerializeField] private bool enableRichText = true; //启用富文本\r\n+    [SerializeField] private bool enableMarkdown = false; //启用Markdown\r\n+    [SerializeField] private string customText = \"\"; //自定义文本\r\n+    [SerializeField] private bool enableTextAnimation = false; //启用文本动画\r\n     [SerializeField] private float animationSpeed = 1f; //动画速度\r\n+    \r\n+    [Header(\"性能监控\")]\r\n+    [SerializeField] private bool enableTextMonitoring = true; //启用文本监控\r\n+    [SerializeField] private float monitoringInterval = 1f; //监控间隔\r\n+    [SerializeField] private bool logTextData = false; //记录文本数据\r\n+    [SerializeField] private int totalCharacters = 0; //总字符数\r\n+    [SerializeField] private int totalWords = 0; //总词数\r\n+    [SerializeField] private int totalLines = 0; //总行数\r\n+    [SerializeField] private float textRenderTime = 0f; //文本渲染时间\r\n+    [SerializeField] private int fontAtlasSize = 0; //字体图集大小\r\n+    \r\n+    [Header(\"文本状态\")]\r\n+    [SerializeField] private string textCoreState = \"未初始化\"; //文本核心状态\r\n+    [SerializeField] private string currentTextStatus = \"空闲\"; //当前文本状态\r\n+    [SerializeField] private bool isTextDirty = false; //文本是否脏\r\n+    [SerializeField] private bool isLayoutDirty = false; //布局是否脏\r\n+    [SerializeField] private bool isFontDirty = false; //字体是否脏\r\n+    [SerializeField] private Vector2 textBounds = Vector2.zero; //文本边界\r\n+    [SerializeField] private Vector2 textSize = Vector2.zero; //文本大小\r\n+    \r\n+    [Header(\"性能数据\")]\r\n+    [SerializeField] private float[] renderTimeHistory = new float[100]; //渲染时间历史\r\n+    [SerializeField] private int renderTimeIndex = 0; //渲染时间索引\r\n+    [SerializeField] private float[] characterCountHistory = new float[100]; //字符数量历史\r\n+    [SerializeField] private int characterCountIndex = 0; //字符数量索引\r\n+    \r\n+    private TextMeshPro textMeshPro;\r\n+    private TextInfo textInfo;\r\n+    private FontAsset currentFontAsset;\r\n+    private System.Collections.Generic.List<TextElement> textElements = new System.Collections.Generic.List<TextElement>();\r\n+    private System.Collections.Generic.List<TextStyle> textStyles = new System.Collections.Generic.List<TextStyle>();\r\n+    private float lastMonitoringTime = 0f;\r\n+    private bool isInitialized = false;\r\n+    private float animationTime = 0f;\r\n \r\n-    [Header(\"文本效果\")]\r\n-    [SerializeField] private bool enableOutline = false; //是否启用描边\r\n-    [SerializeField] private Color outlineColor = Color.black; //描边颜色\r\n-    [SerializeField] private float outlineWidth = 0.1f; //描边宽度\r\n-    [SerializeField] private bool enableShadow = false; //是否启用阴影\r\n-    [SerializeField] private Vector2 shadowOffset = new Vector2(2f, -2f); //阴影偏移\r\n+    private void Start()\r\n+    {\r\n+        InitializeTextCore();\r\n+    }\r\n \r\n-    private float animationTimer = 0f;\r\n-    private string originalText = \"\";\r\n+    /// <summary>\r\n+    /// 初始化文本核心\r\n+    /// </summary>\r\n+    private void InitializeTextCore()\r\n+    {\r\n+        // 创建TextMeshPro组件\r\n+        textMeshPro = gameObject.AddComponent<TextMeshPro>();\r\n+        \r\n+        // 初始化字体资源\r\n+        InitializeFontAsset();\r\n+        \r\n+        // 初始化文本信息\r\n+        InitializeTextInfo();\r\n+        \r\n+        // 初始化文本样式\r\n+        InitializeTextStyles();\r\n+        \r\n+        // 初始化性能监控\r\n+        InitializePerformanceMonitoring();\r\n+        \r\n+        // 配置文本核心\r\n+        ConfigureTextCore();\r\n+        \r\n+        // 设置初始文本\r\n+        SetSampleText();\r\n+        \r\n+        isInitialized = true;\r\n+        textCoreState = \"已初始化\";\r\n+        Debug.Log(\"文本核心初始化完成\");\r\n+    }\r\n \r\n-    private void Start()\r\n+    /// <summary>\r\n+    /// 初始化字体资源\r\n+    /// </summary>\r\n+    private void InitializeFontAsset()\r\n     {\r\n-        if (textMeshPro == null)\r\n+        if (fontAsset == null)\r\n         {\r\n-            textMeshPro = GetComponent<TextMeshPro>();\r\n+            // 创建默认字体资源\r\n+            fontAsset = CreateDefaultFontAsset();\r\n         }\r\n+        \r\n+        currentFontAsset = fontAsset;\r\n+        textMeshPro.font = fontAsset;\r\n+        textMeshPro.fontSize = fontSize;\r\n+        textMeshPro.fontWeight = fontWeight;\r\n+        textMeshPro.fontStyle = fontStyle;\r\n+        \r\n+        if (enableFontFallback && fallbackFonts != null)\r\n+        {\r\n+            textMeshPro.fallbackFontAssetTable = new System.Collections.Generic.List<FontAsset>(fallbackFonts);\r\n+        }\r\n+        \r\n+        Debug.Log($\"字体资源初始化完成: {fontAsset.name}\");\r\n+    }\r\n \r\n-        if (textMeshPro == null)\r\n+    /// <summary>\r\n+    /// 创建默认字体资源\r\n+    /// </summary>\r\n+    private FontAsset CreateDefaultFontAsset()\r\n+    {\r\n+        // 这里应该创建或加载一个默认字体资源\r\n+        // 在实际项目中，通常会从Resources文件夹或AssetBundle中加载\r\n+        var defaultFont = Resources.Load<FontAsset>(\"Fonts/DefaultFont\");\r\n+        if (defaultFont == null)\r\n         {\r\n-            textMeshPro = gameObject.AddComponent<TextMeshPro>();\r\n+            Debug.LogWarning(\"未找到默认字体资源，将使用系统默认字体\");\r\n+            // 创建一个基本的字体资源\r\n+            defaultFont = ScriptableObject.CreateInstance<FontAsset>();\r\n+            defaultFont.name = \"DefaultFont\";\r\n         }\r\n+        return defaultFont;\r\n+    }\r\n \r\n-        originalText = displayText;\r\n-        UpdateTextSettings();\r\n+    /// <summary>\r\n+    /// 初始化文本信息\r\n+    /// </summary>\r\n+    private void InitializeTextInfo()\r\n+    {\r\n+        textInfo = new TextInfo();\r\n+        textInfo.textElementType = TextElementType.Character;\r\n+        \r\n+        Debug.Log(\"文本信息初始化完成\");\r\n     }\r\n \r\n-    private void Update()\r\n+    /// <summary>\r\n+    /// 初始化文本样式\r\n+    /// </summary>\r\n+    private void InitializeTextStyles()\r\n     {\r\n-        if (enableAnimation)\r\n+        // 创建基本文本样式\r\n+        var normalStyle = new TextStyle\r\n         {\r\n-            AnimateText();\r\n+            name = \"Normal\",\r\n+            fontSize = fontSize,\r\n+            fontStyle = fontStyle,\r\n+            fontWeight = fontWeight,\r\n+            color = textColor\r\n+        };\r\n+        textStyles.Add(normalStyle);\r\n+        \r\n+        // 创建标题样式\r\n+        var titleStyle = new TextStyle\r\n+        {\r\n+            name = \"Title\",\r\n+            fontSize = fontSize * 1.5f,\r\n+            fontStyle = FontStyle.Bold,\r\n+            fontWeight = FontWeight.Bold,\r\n+            color = Color.yellow\r\n+        };\r\n+        textStyles.Add(titleStyle);\r\n+        \r\n+        // 创建强调样式\r\n+        var emphasisStyle = new TextStyle\r\n+        {\r\n+            name = \"Emphasis\",\r\n+            fontSize = fontSize,\r\n+            fontStyle = FontStyle.Italic,\r\n+            fontWeight = FontWeight.Medium,\r\n+            color = Color.cyan\r\n+        };\r\n+        textStyles.Add(emphasisStyle);\r\n+        \r\n+        Debug.Log($\"文本样式初始化完成: {textStyles.Count} 个样式\");\r\n+    }\r\n+\r\n+    /// <summary>\r\n+    /// 初始化性能监控\r\n+    /// </summary>\r\n+    private void InitializePerformanceMonitoring()\r\n+    {\r\n+        if (enableTextMonitoring)\r\n+        {\r\n+            renderTimeHistory = new float[100];\r\n+            characterCountHistory = new float[100];\r\n+            renderTimeIndex = 0;\r\n+            characterCountIndex = 0;\r\n+            \r\n+            Debug.Log(\"性能监控初始化完成\");\r\n         }\r\n     }\r\n \r\n     /// <summary>\r\n-    /// 更新文本设置\r\n+    /// 配置文本核心\r\n     /// </summary>\r\n-    private void UpdateTextSettings()\r\n+    private void ConfigureTextCore()\r\n     {\r\n-        if (textMeshPro != null)\r\n+        // 配置文本渲染\r\n+        textMeshPro.color = textColor;\r\n+        textMeshPro.outlineColor = outlineColor;\r\n+        textMeshPro.outlineWidth = outlineWidth;\r\n+        textMeshPro.shadowColor = shadowColor;\r\n+        textMeshPro.shadowOffset = shadowOffset;\r\n+        \r\n+        // 配置文本布局\r\n+        textMeshPro.alignment = alignment;\r\n+        textMeshPro.lineSpacing = lineSpacing;\r\n+        textMeshPro.characterSpacing = characterSpacing;\r\n+        textMeshPro.wordSpacing = wordSpacing;\r\n+        textMeshPro.paragraphSpacing = paragraphSpacing;\r\n+        textMeshPro.enableWordWrapping = enableWordWrap;\r\n+        textMeshPro.rectTransform.sizeDelta = new Vector2(maxWidth, maxHeight);\r\n+        \r\n+        // 配置富文本\r\n+        textMeshPro.richText = enableRichText;\r\n+        \r\n+        Debug.Log(\"文本核心配置完成\");\r\n+    }\r\n+\r\n+    /// <summary>\r\n+    /// 设置示例文本\r\n+    /// </summary>\r\n+    private void SetSampleText()\r\n+    {\r\n+        string text = sampleText;\r\n+        \r\n+        if (enableRichText)\r\n         {\r\n-            textMeshPro.text = displayText;\r\n-            textMeshPro.fontSize = fontSize;\r\n-            textMeshPro.color = textColor;\r\n+            text = ApplyRichTextFormatting(text);\r\n+        }\r\n+        \r\n+        if (enableMarkdown)\r\n+        {\r\n+            text = ApplyMarkdownFormatting(text);\r\n+        }\r\n+        \r\n+        SetText(text);\r\n+    }\r\n \r\n-            // 设置描边\r\n-            if (enableOutline)\r\n-            {\r\n-                textMeshPro.outlineWidth = outlineWidth;\r\n-                textMeshPro.outlineColor = outlineColor;\r\n-            }\r\n-            else\r\n-            {\r\n-                textMeshPro.outlineWidth = 0f;\r\n-            }\r\n+    /// <summary>\r\n+    /// 应用富文本格式\r\n+    /// </summary>\r\n+    private string ApplyRichTextFormatting(string text)\r\n+    {\r\n+        // 添加富文本标签\r\n+        text = text.Replace(\"Hello\", \"<color=yellow><b>Hello</b></color>\");\r\n+        text = text.Replace(\"Unity\", \"<color=cyan><i>Unity</i></color>\");\r\n+        text = text.Replace(\"TextCore\", \"<color=green><b>TextCore</b></color>\");\r\n+        \r\n+        return text;\r\n+    }\r\n \r\n-            // 设置阴影\r\n-            if (enableShadow)\r\n-            {\r\n-                textMeshPro.enableShadow = true;\r\n-                textMeshPro.shadowOffset = shadowOffset;\r\n-            }\r\n-            else\r\n-            {\r\n-                textMeshPro.enableShadow = false;\r\n-            }\r\n+    /// <summary>\r\n+    /// 应用Markdown格式\r\n+    /// </summary>\r\n+    private string ApplyMarkdownFormatting(string text)\r\n+    {\r\n+        // 简单的Markdown转换\r\n+        text = text.Replace(\"**\", \"<b>\").Replace(\"**\", \"</b>\");\r\n+        text = text.Replace(\"*\", \"<i>\").Replace(\"*\", \"</i>\");\r\n+        text = text.Replace(\"`\", \"<color=orange>\").Replace(\"`\", \"</color>\");\r\n+        \r\n+        return text;\r\n+    }\r\n+\r\n+    private void Update()\r\n+    {\r\n+        if (!isInitialized) return;\r\n+        \r\n+        // 文本动画\r\n+        if (enableTextAnimation)\r\n+        {\r\n+            UpdateTextAnimation();\r\n         }\r\n+        \r\n+        // 文本监控\r\n+        if (enableTextMonitoring && Time.time - lastMonitoringTime > monitoringInterval)\r\n+        {\r\n+            MonitorTextPerformance();\r\n+            lastMonitoringTime = Time.time;\r\n+        }\r\n+        \r\n+        // 检查文本是否需要更新\r\n+        if (isTextDirty)\r\n+        {\r\n+            UpdateText();\r\n+        }\r\n     }\r\n \r\n     /// <summary>\r\n-    /// 文本动画\r\n+    /// 更新文本动画\r\n     /// </summary>\r\n-    private void AnimateText()\r\n+    private void UpdateTextAnimation()\r\n     {\r\n-        animationTimer += Time.deltaTime * animationSpeed;\r\n+        animationTime += Time.deltaTime * animationSpeed;\r\n         \r\n-        if (animationTimer >= 1f)\r\n+        // 简单的颜色动画\r\n+        Color animatedColor = Color.Lerp(textColor, gradientTop, Mathf.Sin(animationTime) * 0.5f + 0.5f);\r\n+        textMeshPro.color = animatedColor;\r\n+        \r\n+        // 简单的缩放动画\r\n+        float scale = 1f + Mathf.Sin(animationTime * 2f) * 0.1f;\r\n+        textMeshPro.transform.localScale = Vector3.one * scale;\r\n+    }\r\n+\r\n+    /// <summary>\r\n+    /// 监控文本性能\r\n+    /// </summary>\r\n+    private void MonitorTextPerformance()\r\n+    {\r\n+        // 更新文本统计信息\r\n+        UpdateTextStatistics();\r\n+        \r\n+        if (logTextData)\r\n         {\r\n-            animationTimer = 0f;\r\n-            \r\n-            // 简单的文本动画效果\r\n-            string animatedText = \"\";\r\n-            for (int i = 0; i < originalText.Length; i++)\r\n-            {\r\n-                if (i < (int)(originalText.Length * (animationTimer + 0.1f)))\r\n-                {\r\n-                    animatedText += originalText[i];\r\n-                }\r\n-                else\r\n-                {\r\n-                    animatedText += \"_\";\r\n-                }\r\n-            }\r\n-            \r\n-            textMeshPro.text = animatedText;\r\n+            Debug.Log($\"文本性能监控: 字符数={totalCharacters}, 词数={totalWords}, 行数={totalLines}, 渲染时间={textRenderTime * 1000:F2}ms\");\r\n         }\r\n     }\r\n \r\n     /// <summary>\r\n+    /// 更新文本统计信息\r\n+    /// </summary>\r\n+    private void UpdateTextStatistics()\r\n+    {\r\n+        if (textMeshPro.textInfo != null)\r\n+        {\r\n+            totalCharacters = textMeshPro.textInfo.characterCount;\r\n+            totalWords = textMeshPro.textInfo.wordCount;\r\n+            totalLines = textMeshPro.textInfo.lineCount;\r\n+        }\r\n+        \r\n+        // 更新性能数据\r\n+        renderTimeHistory[renderTimeIndex] = textRenderTime;\r\n+        renderTimeIndex = (renderTimeIndex + 1) % 100;\r\n+        \r\n+        characterCountHistory[characterCountIndex] = totalCharacters;\r\n+        characterCountIndex = (characterCountIndex + 1) % 100;\r\n+    }\r\n+\r\n+    /// <summary>\r\n     /// 设置文本\r\n     /// </summary>\r\n     /// <param name=\"text\">文本内容</param>\r\n     public void SetText(string text)\r\n     {\r\n-        displayText = text;\r\n-        originalText = text;\r\n         if (textMeshPro != null)\r\n         {\r\n             textMeshPro.text = text;\r\n+            isTextDirty = true;\r\n+            currentTextStatus = \"文本已设置\";\r\n+            \r\n+            Debug.Log($\"文本已设置: {text.Length} 个字符\");\r\n         }\r\n     }\r\n \r\n     /// <summary>\r\n-    /// 设置字体大小\r\n+    /// 更新文本\r\n     /// </summary>\r\n-    /// <param name=\"size\">字体大小</param>\r\n-    public void SetFontSize(float size)\r\n+    private void UpdateText()\r\n     {\r\n-        fontSize = size;\r\n-        if (textMeshPro != null)\r\n+        float startTime = Time.realtimeSinceStartup;\r\n+        \r\n+        // 强制更新文本\r\n+        textMeshPro.ForceMeshUpdate();\r\n+        \r\n+        // 更新文本信息\r\n+        if (textMeshPro.textInfo != null)\r\n         {\r\n-            textMeshPro.fontSize = size;\r\n+            textInfo = textMeshPro.textInfo;\r\n+            UpdateTextStatistics();\r\n         }\r\n+        \r\n+        // 更新文本边界\r\n+        textBounds = textMeshPro.bounds.size;\r\n+        textSize = textMeshPro.rectTransform.sizeDelta;\r\n+        \r\n+        textRenderTime = Time.realtimeSinceStartup - startTime;\r\n+        \r\n+        isTextDirty = false;\r\n+        currentTextStatus = \"文本已更新\";\r\n     }\r\n \r\n     /// <summary>\r\n+    /// 应用文本样式\r\n+    /// </summary>\r\n+    /// <param name=\"styleName\">样式名称</param>\r\n+    public void ApplyTextStyle(string styleName)\r\n+    {\r\n+        var style = textStyles.Find(s => s.name == styleName);\r\n+        if (style != null)\r\n+        {\r\n+            textMeshPro.fontSize = style.fontSize;\r\n+            textMeshPro.fontStyle = style.fontStyle;\r\n+            textMeshPro.fontWeight = style.fontWeight;\r\n+            textMeshPro.color = style.color;\r\n+            \r\n+            isTextDirty = true;\r\n+            Debug.Log($\"文本样式已应用: {styleName}\");\r\n+        }\r\n+    }\r\n+\r\n+    /// <summary>\r\n+    /// 设置字体\r\n+    /// </summary>\r\n+    /// <param name=\"newFontAsset\">新字体资源</param>\r\n+    public void SetFont(FontAsset newFontAsset)\r\n+    {\r\n+        if (newFontAsset != null)\r\n+        {\r\n+            currentFontAsset = newFontAsset;\r\n+            textMeshPro.font = newFontAsset;\r\n+            isFontDirty = true;\r\n+            \r\n+            Debug.Log($\"字体已更改: {newFontAsset.name}\");\r\n+        }\r\n+    }\r\n+\r\n+    /// <summary>\r\n     /// 设置文本颜色\r\n     /// </summary>\r\n     /// <param name=\"color\">颜色</param>\r\n     public void SetTextColor(Color color)\r\n     {\r\n         textColor = color;\r\n-        if (textMeshPro != null)\r\n-        {\r\n-            textMeshPro.color = color;\r\n-        }\r\n+        textMeshPro.color = color;\r\n+        isTextDirty = true;\r\n+        \r\n+        Debug.Log($\"文本颜色已设置: {color}\");\r\n     }\r\n \r\n     /// <summary>\r\n-    /// 获取文本信息\r\n+    /// 设置文本对齐\r\n     /// </summary>\r\n-    public void GetTextInfo()\r\n+    /// <param name=\"newAlignment\">新对齐方式</param>\r\n+    public void SetTextAlignment(TextAlignmentOptions newAlignment)\r\n     {\r\n-        if (textMeshPro != null)\r\n+        alignment = newAlignment;\r\n+        textMeshPro.alignment = newAlignment;\r\n+        isLayoutDirty = true;\r\n+        \r\n+        Debug.Log($\"文本对齐已设置: {newAlignment}\");\r\n+    }\r\n+\r\n+    /// <summary>\r\n+    /// 设置文本大小\r\n+    /// </summary>\r\n+    /// <param name=\"size\">大小</param>\r\n+    public void SetTextSize(Vector2 size)\r\n+    {\r\n+        maxWidth = size.x;\r\n+        maxHeight = size.y;\r\n+        textMeshPro.rectTransform.sizeDelta = size;\r\n+        isLayoutDirty = true;\r\n+        \r\n+        Debug.Log($\"文本大小已设置: {size}\");\r\n+    }\r\n+\r\n+    /// <summary>\r\n+    /// 添加文本效果\r\n+    /// </summary>\r\n+    /// <param name=\"effectType\">效果类型</param>\r\n+    public void AddTextEffect(TextEffectType effectType)\r\n+    {\r\n+        switch (effectType)\r\n         {\r\n-            Debug.Log(\"=== 文本信息 ===\");\r\n-            Debug.Log($\"文本内容: {textMeshPro.text}\");\r\n-            Debug.Log($\"字体大小: {textMeshPro.fontSize}\");\r\n-            Debug.Log($\"文本颜色: {textMeshPro.color}\");\r\n-            Debug.Log($\"文本长度: {textMeshPro.text.Length}\");\r\n-            Debug.Log($\"字符数量: {textMeshPro.textInfo.characterCount}\");\r\n-            Debug.Log($\"行数: {textMeshPro.textInfo.lineCount}\");\r\n-            Debug.Log($\"页面数: {textMeshPro.textInfo.pageCount}\");\r\n+            case TextEffectType.Outline:\r\n+                textMeshPro.outlineWidth = 0.1f;\r\n+                textMeshPro.outlineColor = Color.black;\r\n+                break;\r\n+            case TextEffectType.Shadow:\r\n+                textMeshPro.shadowOffset = new Vector2(1f, -1f);\r\n+                textMeshPro.shadowColor = Color.black;\r\n+                break;\r\n+            case TextEffectType.Gradient:\r\n+                // 实现渐变效果\r\n+                break;\r\n         }\r\n+        \r\n+        isTextDirty = true;\r\n+        Debug.Log($\"文本效果已添加: {effectType}\");\r\n     }\r\n \r\n     /// <summary>\r\n-    /// 应用文本效果\r\n+    /// 生成文本报告\r\n     /// </summary>\r\n-    public void ApplyTextEffects()\r\n+    public void GenerateTextReport()\r\n     {\r\n-        UpdateTextSettings();\r\n-        Debug.Log(\"文本效果已应用\");\r\n+        Debug.Log(\"=== 文本核心报告 ===\");\r\n+        Debug.Log($\"文本核心状态: {textCoreState}\");\r\n+        Debug.Log($\"当前文本状态: {currentTextStatus}\");\r\n+        Debug.Log($\"总字符数: {totalCharacters}\");\r\n+        Debug.Log($\"总词数: {totalWords}\");\r\n+        Debug.Log($\"总行数: {totalLines}\");\r\n+        Debug.Log($\"文本渲染时间: {textRenderTime * 1000:F2}ms\");\r\n+        Debug.Log($\"字体图集大小: {fontAtlasSize}\");\r\n+        Debug.Log($\"文本边界: {textBounds}\");\r\n+        Debug.Log($\"文本大小: {textSize}\");\r\n+        Debug.Log($\"当前字体: {currentFontAsset?.name}\");\r\n+        Debug.Log($\"字体大小: {fontSize}\");\r\n+        Debug.Log($\"文本对齐: {alignment}\");\r\n     }\r\n \r\n     /// <summary>\r\n-    /// 重置文本设置\r\n+    /// 导出文本数据\r\n     /// </summary>\r\n-    public void ResetTextSettings()\r\n+    public void ExportTextData()\r\n     {\r\n-        displayText = \"Hello World\";\r\n-        fontSize = 24f;\r\n-        textColor = Color.white;\r\n-        enableAnimation = false;\r\n-        enableOutline = false;\r\n-        enableShadow = false;\r\n+        var data = new TextCoreData\r\n+        {\r\n+            timestamp = System.DateTime.Now.ToString(),\r\n+            textCoreState = textCoreState,\r\n+            currentTextStatus = currentTextStatus,\r\n+            totalCharacters = totalCharacters,\r\n+            totalWords = totalWords,\r\n+            totalLines = totalLines,\r\n+            textRenderTime = textRenderTime,\r\n+            fontAtlasSize = fontAtlasSize,\r\n+            textBounds = textBounds,\r\n+            textSize = textSize,\r\n+            fontSize = fontSize,\r\n+            alignment = alignment.ToString(),\r\n+            renderTimeHistory = renderTimeHistory,\r\n+            characterCountHistory = characterCountHistory\r\n+        };\r\n         \r\n-        UpdateTextSettings();\r\n-        Debug.Log(\"文本设置已重置\");\r\n+        string json = JsonUtility.ToJson(data, true);\r\n+        string filename = $\"textcore_{System.DateTime.Now:yyyyMMdd_HHmmss}.json\";\r\n+        \r\n+        System.IO.File.WriteAllText(filename, json);\r\n+        Debug.Log($\"文本数据已导出: {filename}\");\r\n     }\r\n \r\n     private void OnGUI()\r\n     {\r\n-        GUILayout.BeginArea(new Rect(10, 10, 350, 400));\r\n-        GUILayout.Label(\"Text Core 文本核心演示\", UnityEditor.EditorStyles.boldLabel);\r\n+        GUILayout.BeginArea(new Rect(10, 10, 400, 800));\r\n+        GUILayout.Label(\"TextCore 文本核心演示\", UnityEditor.EditorStyles.boldLabel);\r\n         \r\n-        displayText = GUILayout.TextField(\"显示文本\", displayText);\r\n-        fontSize = float.TryParse(GUILayout.TextField(\"字体大小\", fontSize.ToString()), out var size) ? size : fontSize;\r\n+        GUILayout.Space(10);\r\n+        GUILayout.Label(\"文本核心配置:\");\r\n+        enableTextCore = GUILayout.Toggle(enableTextCore, \"启用文本核心\");\r\n+        enableFontAtlas = GUILayout.Toggle(enableFontAtlas, \"启用字体图集\");\r\n+        enableTextMesh = GUILayout.Toggle(enableTextMesh, \"启用文本网格\");\r\n+        enableTextRendering = GUILayout.Toggle(enableTextRendering, \"启用文本渲染\");\r\n+        enableTextLayout = GUILayout.Toggle(enableTextLayout, \"启用文本布局\");\r\n         \r\n-        GUILayout.Label(\"文本颜色:\");\r\n-        textColor = UnityEditor.EditorGUILayout.ColorField(textColor);\r\n+        GUILayout.Space(10);\r\n+        GUILayout.Label(\"字体配置:\");\r\n+        fontSize = int.TryParse(GUILayout.TextField(\"字体大小\", fontSize.ToString()), out var size) ? size : fontSize;\r\n+        fontWeight = (FontWeight)System.Enum.Parse(typeof(FontWeight), GUILayout.TextField(\"字体粗细\", fontWeight.ToString()));\r\n+        fontStyle = (FontStyle)System.Enum.Parse(typeof(FontStyle), GUILayout.TextField(\"字体样式\", fontStyle.ToString()));\r\n+        enableFontFallback = GUILayout.Toggle(enableFontFallback, \"启用字体回退\");\r\n         \r\n-        enableAnimation = GUILayout.Toggle(enableAnimation, \"启用文本动画\");\r\n-        if (enableAnimation)\r\n+        GUILayout.Space(10);\r\n+        GUILayout.Label(\"文本渲染配置:\");\r\n+        textColor = UnityEditor.EditorGUILayout.ColorField(\"文本颜色\", textColor);\r\n+        outlineColor = UnityEditor.EditorGUILayout.ColorField(\"轮廓颜色\", outlineColor);\r\n+        outlineWidth = float.TryParse(GUILayout.TextField(\"轮廓宽度\", outlineWidth.ToString()), out var outline) ? outline : outlineWidth;\r\n+        shadowColor = UnityEditor.EditorGUILayout.ColorField(\"阴影颜色\", shadowColor);\r\n+        shadowOffset = UnityEditor.EditorGUILayout.Vector2Field(\"阴影偏移\", shadowOffset);\r\n+        enableGradient = GUILayout.Toggle(enableGradient, \"启用渐变\");\r\n+        \r\n+        GUILayout.Space(10);\r\n+        GUILayout.Label(\"文本布局配置:\");\r\n+        alignment = (TextAlignmentOptions)System.Enum.Parse(typeof(TextAlignmentOptions), GUILayout.TextField(\"文本对齐\", alignment.ToString()));\r\n+        lineSpacing = float.TryParse(GUILayout.TextField(\"行间距\", lineSpacing.ToString()), out var lineSpace) ? lineSpace : lineSpacing;\r\n+        characterSpacing = float.TryParse(GUILayout.TextField(\"字符间距\", characterSpacing.ToString()), out var charSpace) ? charSpace : characterSpacing;\r\n+        wordSpacing = float.TryParse(GUILayout.TextField(\"词间距\", wordSpacing.ToString()), out var wordSpace) ? wordSpace : wordSpacing;\r\n+        enableWordWrap = GUILayout.Toggle(enableWordWrap, \"启用自动换行\");\r\n+        maxWidth = float.TryParse(GUILayout.TextField(\"最大宽度\", maxWidth.ToString()), out var width) ? width : maxWidth;\r\n+        maxHeight = float.TryParse(GUILayout.TextField(\"最大高度\", maxHeight.ToString()), out var height) ? height : maxHeight;\r\n+        \r\n+        GUILayout.Space(10);\r\n+        GUILayout.Label(\"文本内容:\");\r\n+        sampleText = GUILayout.TextArea(sampleText, GUILayout.Height(60));\r\n+        enableRichText = GUILayout.Toggle(enableRichText, \"启用富文本\");\r\n+        enableMarkdown = GUILayout.Toggle(enableMarkdown, \"启用Markdown\");\r\n+        enableTextAnimation = GUILayout.Toggle(enableTextAnimation, \"启用文本动画\");\r\n+        animationSpeed = float.TryParse(GUILayout.TextField(\"动画速度\", animationSpeed.ToString()), out var animSpeed) ? animSpeed : animationSpeed;\r\n+        \r\n+        GUILayout.Space(10);\r\n+        GUILayout.Label(\"文本状态:\");\r\n+        GUILayout.Label($\"核心状态: {textCoreState}\");\r\n+        GUILayout.Label($\"文本状态: {currentTextStatus}\");\r\n+        GUILayout.Label($\"总字符数: {totalCharacters}\");\r\n+        GUILayout.Label($\"总词数: {totalWords}\");\r\n+        GUILayout.Label($\"总行数: {totalLines}\");\r\n+        GUILayout.Label($\"渲染时间: {textRenderTime * 1000:F2}ms\");\r\n+        GUILayout.Label($\"文本边界: {textBounds}\");\r\n+        \r\n+        GUILayout.Space(10);\r\n+        \r\n+        if (GUILayout.Button(\"设置示例文本\"))\r\n         {\r\n-            animationSpeed = float.TryParse(GUILayout.TextField(\"动画速度\", animationSpeed.ToString()), out var speed) ? speed : animationSpeed;\r\n+            SetSampleText();\r\n         }\r\n         \r\n-        GUILayout.Space(10);\r\n-        GUILayout.Label(\"文本效果:\");\r\n+        if (GUILayout.Button(\"应用普通样式\"))\r\n+        {\r\n+            ApplyTextStyle(\"Normal\");\r\n+        }\r\n         \r\n-        enableOutline = GUILayout.Toggle(enableOutline, \"启用描边\");\r\n-        if (enableOutline)\r\n+        if (GUILayout.Button(\"应用标题样式\"))\r\n         {\r\n-            outlineColor = UnityEditor.EditorGUILayout.ColorField(\"描边颜色\", outlineColor);\r\n-            outlineWidth = float.TryParse(GUILayout.TextField(\"描边宽度\", outlineWidth.ToString()), out var width) ? width : outlineWidth;\r\n+            ApplyTextStyle(\"Title\");\r\n         }\r\n         \r\n-        enableShadow = GUILayout.Toggle(enableShadow, \"启用阴影\");\r\n-        if (enableShadow)\r\n+        if (GUILayout.Button(\"应用强调样式\"))\r\n         {\r\n-            shadowOffset = UnityEditor.EditorGUILayout.Vector2Field(\"阴影偏移\", shadowOffset);\r\n+            ApplyTextStyle(\"Emphasis\");\r\n         }\r\n         \r\n-        GUILayout.Space(10);\r\n+        if (GUILayout.Button(\"添加轮廓效果\"))\r\n+        {\r\n+            AddTextEffect(TextEffectType.Outline);\r\n+        }\r\n         \r\n-        if (GUILayout.Button(\"应用文本效果\"))\r\n+        if (GUILayout.Button(\"添加阴影效果\"))\r\n         {\r\n-            ApplyTextEffects();\r\n+            AddTextEffect(TextEffectType.Shadow);\r\n         }\r\n         \r\n-        if (GUILayout.Button(\"获取文本信息\"))\r\n+        if (GUILayout.Button(\"生成文本报告\"))\r\n         {\r\n-            GetTextInfo();\r\n+            GenerateTextReport();\r\n         }\r\n         \r\n-        if (GUILayout.Button(\"重置文本设置\"))\r\n+        if (GUILayout.Button(\"导出文本数据\"))\r\n         {\r\n-            ResetTextSettings();\r\n+            ExportTextData();\r\n         }\r\n         \r\n         GUILayout.EndArea();\r\n     }\r\n+}\r\n+\r\n+/// <summary>\r\n+/// 文本样式\r\n+/// </summary>\r\n+[System.Serializable]\r\n+public class TextStyle\r\n+{\r\n+    public string name;\r\n+    public float fontSize;\r\n+    public FontStyle fontStyle;\r\n+    public FontWeight fontWeight;\r\n+    public Color color;\r\n+}\r\n+\r\n+/// <summary>\r\n+/// 文本元素\r\n+/// </summary>\r\n+[System.Serializable]\r\n+public class TextElement\r\n+{\r\n+    public string text;\r\n+    public TextStyle style;\r\n+    public Vector2 position;\r\n+    public Vector2 size;\r\n+}\r\n+\r\n+/// <summary>\r\n+/// 文本效果类型\r\n+/// </summary>\r\n+public enum TextEffectType\r\n+{\r\n+    None,\r\n+    Outline,\r\n+    Shadow,\r\n+    Gradient\r\n+}\r\n+\r\n+/// <summary>\r\n+/// 文本核心数据类\r\n+/// </summary>\r\n+[System.Serializable]\r\n+public class TextCoreData\r\n+{\r\n+    public string timestamp;\r\n+    public string textCoreState;\r\n+    public string currentTextStatus;\r\n+    public int totalCharacters;\r\n+    public int totalWords;\r\n+    public int totalLines;\r\n+    public float textRenderTime;\r\n+    public int fontAtlasSize;\r\n+    public Vector2 textBounds;\r\n+    public Vector2 textSize;\r\n+    public int fontSize;\r\n+    public string alignment;\r\n+    public float[] renderTimeHistory;\r\n+    public float[] characterCountHistory;\r\n } \n\\ No newline at end of file\n"
                }
            ],
            "date": 1750933109041,
            "name": "Commit-0",
            "content": "using UnityEngine;\r\nusing TMPro;\r\n\r\n/// <summary>\r\n/// UnityEngine.TextCore 命名空间案例演示\r\n/// 展示TextMeshPro、字体、文本渲染等核心功能\r\n/// </summary>\r\npublic class TextCoreExample : MonoBehaviour\r\n{\r\n    [Header(\"文本设置\")]\r\n    [SerializeField] private TextMeshPro textMeshPro; //TextMeshPro组件\r\n    [SerializeField] private string displayText = \"Hello World\"; //显示文本\r\n    [SerializeField] private float fontSize = 24f; //字体大小\r\n    [SerializeField] private Color textColor = Color.white; //文本颜色\r\n    [SerializeField] private bool enableAnimation = false; //是否启用动画\r\n    [SerializeField] private float animationSpeed = 1f; //动画速度\r\n\r\n    [Header(\"文本效果\")]\r\n    [SerializeField] private bool enableOutline = false; //是否启用描边\r\n    [SerializeField] private Color outlineColor = Color.black; //描边颜色\r\n    [SerializeField] private float outlineWidth = 0.1f; //描边宽度\r\n    [SerializeField] private bool enableShadow = false; //是否启用阴影\r\n    [SerializeField] private Vector2 shadowOffset = new Vector2(2f, -2f); //阴影偏移\r\n\r\n    private float animationTimer = 0f;\r\n    private string originalText = \"\";\r\n\r\n    private void Start()\r\n    {\r\n        if (textMeshPro == null)\r\n        {\r\n            textMeshPro = GetComponent<TextMeshPro>();\r\n        }\r\n\r\n        if (textMeshPro == null)\r\n        {\r\n            textMeshPro = gameObject.AddComponent<TextMeshPro>();\r\n        }\r\n\r\n        originalText = displayText;\r\n        UpdateTextSettings();\r\n    }\r\n\r\n    private void Update()\r\n    {\r\n        if (enableAnimation)\r\n        {\r\n            AnimateText();\r\n        }\r\n    }\r\n\r\n    /// <summary>\r\n    /// 更新文本设置\r\n    /// </summary>\r\n    private void UpdateTextSettings()\r\n    {\r\n        if (textMeshPro != null)\r\n        {\r\n            textMeshPro.text = displayText;\r\n            textMeshPro.fontSize = fontSize;\r\n            textMeshPro.color = textColor;\r\n\r\n            // 设置描边\r\n            if (enableOutline)\r\n            {\r\n                textMeshPro.outlineWidth = outlineWidth;\r\n                textMeshPro.outlineColor = outlineColor;\r\n            }\r\n            else\r\n            {\r\n                textMeshPro.outlineWidth = 0f;\r\n            }\r\n\r\n            // 设置阴影\r\n            if (enableShadow)\r\n            {\r\n                textMeshPro.enableShadow = true;\r\n                textMeshPro.shadowOffset = shadowOffset;\r\n            }\r\n            else\r\n            {\r\n                textMeshPro.enableShadow = false;\r\n            }\r\n        }\r\n    }\r\n\r\n    /// <summary>\r\n    /// 文本动画\r\n    /// </summary>\r\n    private void AnimateText()\r\n    {\r\n        animationTimer += Time.deltaTime * animationSpeed;\r\n        \r\n        if (animationTimer >= 1f)\r\n        {\r\n            animationTimer = 0f;\r\n            \r\n            // 简单的文本动画效果\r\n            string animatedText = \"\";\r\n            for (int i = 0; i < originalText.Length; i++)\r\n            {\r\n                if (i < (int)(originalText.Length * (animationTimer + 0.1f)))\r\n                {\r\n                    animatedText += originalText[i];\r\n                }\r\n                else\r\n                {\r\n                    animatedText += \"_\";\r\n                }\r\n            }\r\n            \r\n            textMeshPro.text = animatedText;\r\n        }\r\n    }\r\n\r\n    /// <summary>\r\n    /// 设置文本\r\n    /// </summary>\r\n    /// <param name=\"text\">文本内容</param>\r\n    public void SetText(string text)\r\n    {\r\n        displayText = text;\r\n        originalText = text;\r\n        if (textMeshPro != null)\r\n        {\r\n            textMeshPro.text = text;\r\n        }\r\n    }\r\n\r\n    /// <summary>\r\n    /// 设置字体大小\r\n    /// </summary>\r\n    /// <param name=\"size\">字体大小</param>\r\n    public void SetFontSize(float size)\r\n    {\r\n        fontSize = size;\r\n        if (textMeshPro != null)\r\n        {\r\n            textMeshPro.fontSize = size;\r\n        }\r\n    }\r\n\r\n    /// <summary>\r\n    /// 设置文本颜色\r\n    /// </summary>\r\n    /// <param name=\"color\">颜色</param>\r\n    public void SetTextColor(Color color)\r\n    {\r\n        textColor = color;\r\n        if (textMeshPro != null)\r\n        {\r\n            textMeshPro.color = color;\r\n        }\r\n    }\r\n\r\n    /// <summary>\r\n    /// 获取文本信息\r\n    /// </summary>\r\n    public void GetTextInfo()\r\n    {\r\n        if (textMeshPro != null)\r\n        {\r\n            Debug.Log(\"=== 文本信息 ===\");\r\n            Debug.Log($\"文本内容: {textMeshPro.text}\");\r\n            Debug.Log($\"字体大小: {textMeshPro.fontSize}\");\r\n            Debug.Log($\"文本颜色: {textMeshPro.color}\");\r\n            Debug.Log($\"文本长度: {textMeshPro.text.Length}\");\r\n            Debug.Log($\"字符数量: {textMeshPro.textInfo.characterCount}\");\r\n            Debug.Log($\"行数: {textMeshPro.textInfo.lineCount}\");\r\n            Debug.Log($\"页面数: {textMeshPro.textInfo.pageCount}\");\r\n        }\r\n    }\r\n\r\n    /// <summary>\r\n    /// 应用文本效果\r\n    /// </summary>\r\n    public void ApplyTextEffects()\r\n    {\r\n        UpdateTextSettings();\r\n        Debug.Log(\"文本效果已应用\");\r\n    }\r\n\r\n    /// <summary>\r\n    /// 重置文本设置\r\n    /// </summary>\r\n    public void ResetTextSettings()\r\n    {\r\n        displayText = \"Hello World\";\r\n        fontSize = 24f;\r\n        textColor = Color.white;\r\n        enableAnimation = false;\r\n        enableOutline = false;\r\n        enableShadow = false;\r\n        \r\n        UpdateTextSettings();\r\n        Debug.Log(\"文本设置已重置\");\r\n    }\r\n\r\n    private void OnGUI()\r\n    {\r\n        GUILayout.BeginArea(new Rect(10, 10, 350, 400));\r\n        GUILayout.Label(\"Text Core 文本核心演示\", UnityEditor.EditorStyles.boldLabel);\r\n        \r\n        displayText = GUILayout.TextField(\"显示文本\", displayText);\r\n        fontSize = float.TryParse(GUILayout.TextField(\"字体大小\", fontSize.ToString()), out var size) ? size : fontSize;\r\n        \r\n        GUILayout.Label(\"文本颜色:\");\r\n        textColor = UnityEditor.EditorGUILayout.ColorField(textColor);\r\n        \r\n        enableAnimation = GUILayout.Toggle(enableAnimation, \"启用文本动画\");\r\n        if (enableAnimation)\r\n        {\r\n            animationSpeed = float.TryParse(GUILayout.TextField(\"动画速度\", animationSpeed.ToString()), out var speed) ? speed : animationSpeed;\r\n        }\r\n        \r\n        GUILayout.Space(10);\r\n        GUILayout.Label(\"文本效果:\");\r\n        \r\n        enableOutline = GUILayout.Toggle(enableOutline, \"启用描边\");\r\n        if (enableOutline)\r\n        {\r\n            outlineColor = UnityEditor.EditorGUILayout.ColorField(\"描边颜色\", outlineColor);\r\n            outlineWidth = float.TryParse(GUILayout.TextField(\"描边宽度\", outlineWidth.ToString()), out var width) ? width : outlineWidth;\r\n        }\r\n        \r\n        enableShadow = GUILayout.Toggle(enableShadow, \"启用阴影\");\r\n        if (enableShadow)\r\n        {\r\n            shadowOffset = UnityEditor.EditorGUILayout.Vector2Field(\"阴影偏移\", shadowOffset);\r\n        }\r\n        \r\n        GUILayout.Space(10);\r\n        \r\n        if (GUILayout.Button(\"应用文本效果\"))\r\n        {\r\n            ApplyTextEffects();\r\n        }\r\n        \r\n        if (GUILayout.Button(\"获取文本信息\"))\r\n        {\r\n            GetTextInfo();\r\n        }\r\n        \r\n        if (GUILayout.Button(\"重置文本设置\"))\r\n        {\r\n            ResetTextSettings();\r\n        }\r\n        \r\n        GUILayout.EndArea();\r\n    }\r\n} "
        }
    ]
}