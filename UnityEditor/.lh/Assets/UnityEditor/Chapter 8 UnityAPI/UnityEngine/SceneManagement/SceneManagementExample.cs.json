{
    "sourceFile": "Assets/UnityEditor/Chapter 8 UnityAPI/UnityEngine/SceneManagement/SceneManagementExample.cs",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 4,
            "patches": [
                {
                    "date": 1750929149016,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1750929210121,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,9 +8,9 @@\n /// </summary>\r\n public class SceneManagementExample : MonoBehaviour\r\n {\r\n     [Header(\"场景设置\")]\r\n-    [SerializeField] private string[] sceneNames;\r\n+    [SerializeField] private string[] sceneNames;//\r\n     [SerializeField] private int[] sceneBuildIndexes;\r\n     [SerializeField] private LoadSceneMode loadMode = LoadSceneMode.Single;\r\n     [SerializeField] private bool allowSceneActivation = true;\r\n     \r\n"
                },
                {
                    "date": 1750929215751,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,27 +8,27 @@\n /// </summary>\r\n public class SceneManagementExample : MonoBehaviour\r\n {\r\n     [Header(\"场景设置\")]\r\n-    [SerializeField] private string[] sceneNames;//\r\n-    [SerializeField] private int[] sceneBuildIndexes;\r\n-    [SerializeField] private LoadSceneMode loadMode = LoadSceneMode.Single;\r\n-    [SerializeField] private bool allowSceneActivation = true;\r\n+    [SerializeField] private string[] sceneNames;//场景名称\r\n+    [SerializeField] private int[] sceneBuildIndexes;//场景索引\r\n+    [SerializeField] private LoadSceneMode loadMode = LoadSceneMode.Single;//加载模式\r\n+    [SerializeField] private bool allowSceneActivation = true;//是否允许场景激活\r\n     \r\n     [Header(\"场景加载设置\")]\r\n-    [SerializeField] private float loadingProgress = 0f;\r\n-    [SerializeField] private bool isLoading = false;\r\n-    [SerializeField] private string currentLoadingScene = \"\";\r\n+    [SerializeField] private float loadingProgress = 0f;//加载进度\r\n+    [SerializeField] private bool isLoading = false;//是否正在加载\r\n+    [SerializeField] private string currentLoadingScene = \"\";//当前加载场景\r\n     \r\n     [Header(\"场景信息\")]\r\n-    [SerializeField] private int currentSceneIndex = 0;\r\n-    [SerializeField] private string currentSceneName = \"\";\r\n-    [SerializeField] private int sceneCount = 0;\r\n-    [SerializeField] private int loadedSceneCount = 0;\r\n+    [SerializeField] private int currentSceneIndex = 0;//当前场景索引\r\n+    [SerializeField] private string currentSceneName = \"\";//当前场景名称\r\n+    [SerializeField] private int sceneCount = 0;//场景数量\r\n+    [SerializeField] private int loadedSceneCount = 0;//已加载场景数量\r\n     \r\n     // 场景加载操作\r\n-    private AsyncOperation currentLoadOperation;\r\n-    private List<Scene> loadedScenes = new List<Scene>();\r\n+    private AsyncOperation currentLoadOperation;//当前加载操作\r\n+    private List<Scene> loadedScenes = new List<Scene>();//已加载场景列表\r\n     \r\n     private void Start()\r\n     {\r\n         InitializeSceneManagement();\r\n"
                },
                {
                    "date": 1750929571614,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,502 +1,502 @@\n-using UnityEngine;\r\n-using UnityEngine.SceneManagement;\r\n-using System.Collections.Generic;\r\n-\r\n-/// <summary>\r\n-/// UnityEngine.SceneManagement 命名空间案例演示\r\n-/// 展示场景管理系统的核心功能\r\n-/// </summary>\r\n-public class SceneManagementExample : MonoBehaviour\r\n-{\r\n-    [Header(\"场景设置\")]\r\n-    [SerializeField] private string[] sceneNames;//场景名称\r\n-    [SerializeField] private int[] sceneBuildIndexes;//场景索引\r\n-    [SerializeField] private LoadSceneMode loadMode = LoadSceneMode.Single;//加载模式\r\n-    [SerializeField] private bool allowSceneActivation = true;//是否允许场景激活\r\n-    \r\n-    [Header(\"场景加载设置\")]\r\n-    [SerializeField] private float loadingProgress = 0f;//加载进度\r\n-    [SerializeField] private bool isLoading = false;//是否正在加载\r\n-    [SerializeField] private string currentLoadingScene = \"\";//当前加载场景\r\n-    \r\n-    [Header(\"场景信息\")]\r\n-    [SerializeField] private int currentSceneIndex = 0;//当前场景索引\r\n-    [SerializeField] private string currentSceneName = \"\";//当前场景名称\r\n-    [SerializeField] private int sceneCount = 0;//场景数量\r\n-    [SerializeField] private int loadedSceneCount = 0;//已加载场景数量\r\n-    \r\n-    // 场景加载操作\r\n-    private AsyncOperation currentLoadOperation;//当前加载操作\r\n-    private List<Scene> loadedScenes = new List<Scene>();//已加载场景列表\r\n-    \r\n-    private void Start()\r\n-    {\r\n-        InitializeSceneManagement();\r\n-        UpdateSceneInfo();\r\n-    }\r\n-    \r\n-    /// <summary>\r\n-    /// 初始化场景管理系统\r\n-    /// </summary>\r\n-    private void InitializeSceneManagement()\r\n-    {\r\n-        // 获取场景信息\r\n-        sceneCount = SceneManager.sceneCountInBuildSettings;\r\n-        currentSceneIndex = SceneManager.GetActiveScene().buildIndex;\r\n-        currentSceneName = SceneManager.GetActiveScene().name;\r\n-        \r\n-        // 获取已加载的场景\r\n-        UpdateLoadedScenes();\r\n-        \r\n-        // 注册场景事件\r\n-        SceneManager.sceneLoaded += OnSceneLoaded;\r\n-        SceneManager.sceneUnloaded += OnSceneUnloaded;\r\n-        SceneManager.activeSceneChanged += OnActiveSceneChanged;\r\n-        \r\n-        Debug.Log($\"场景管理系统初始化完成 - 当前场景: {currentSceneName} (索引: {currentSceneIndex})\");\r\n-    }\r\n-    \r\n-    /// <summary>\r\n-    /// 更新场景信息\r\n-    /// </summary>\r\n-    private void UpdateSceneInfo()\r\n-    {\r\n-        currentSceneIndex = SceneManager.GetActiveScene().buildIndex;\r\n-        currentSceneName = SceneManager.GetActiveScene().name;\r\n-        loadedSceneCount = SceneManager.sceneCount;\r\n-        UpdateLoadedScenes();\r\n-    }\r\n-    \r\n-    /// <summary>\r\n-    /// 更新已加载场景列表\r\n-    /// </summary>\r\n-    private void UpdateLoadedScenes()\r\n-    {\r\n-        loadedScenes.Clear();\r\n-        for (int i = 0; i < SceneManager.sceneCount; i++)\r\n-        {\r\n-            loadedScenes.Add(SceneManager.GetSceneAt(i));\r\n-        }\r\n-    }\r\n-    \r\n-    /// <summary>\r\n-    /// 加载场景（按名称）\r\n-    /// </summary>\r\n-    /// <param name=\"sceneName\">场景名称</param>\r\n-    public void LoadSceneByName(string sceneName)\r\n-    {\r\n-        if (string.IsNullOrEmpty(sceneName))\r\n-        {\r\n-            Debug.LogWarning(\"场景名称为空\");\r\n-            return;\r\n-        }\r\n-        \r\n-        if (isLoading)\r\n-        {\r\n-            Debug.LogWarning(\"正在加载场景，请等待当前加载完成\");\r\n-            return;\r\n-        }\r\n-        \r\n-        Debug.Log($\"开始加载场景: {sceneName}\");\r\n-        SceneManager.LoadScene(sceneName, loadMode);\r\n-    }\r\n-    \r\n-    /// <summary>\r\n-    /// 加载场景（按索引）\r\n-    /// </summary>\r\n-    /// <param name=\"sceneIndex\">场景索引</param>\r\n-    public void LoadSceneByIndex(int sceneIndex)\r\n-    {\r\n-        if (sceneIndex < 0 || sceneIndex >= SceneManager.sceneCountInBuildSettings)\r\n-        {\r\n-            Debug.LogWarning($\"场景索引无效: {sceneIndex}\");\r\n-            return;\r\n-        }\r\n-        \r\n-        if (isLoading)\r\n-        {\r\n-            Debug.LogWarning(\"正在加载场景，请等待当前加载完成\");\r\n-            return;\r\n-        }\r\n-        \r\n-        Debug.Log($\"开始加载场景索引: {sceneIndex}\");\r\n-        SceneManager.LoadScene(sceneIndex, loadMode);\r\n-    }\r\n-    \r\n-    /// <summary>\r\n-    /// 异步加载场景（按名称）\r\n-    /// </summary>\r\n-    /// <param name=\"sceneName\">场景名称</param>\r\n-    public void LoadSceneAsyncByName(string sceneName)\r\n-    {\r\n-        if (string.IsNullOrEmpty(sceneName))\r\n-        {\r\n-            Debug.LogWarning(\"场景名称为空\");\r\n-            return;\r\n-        }\r\n-        \r\n-        if (isLoading)\r\n-        {\r\n-            Debug.LogWarning(\"正在加载场景，请等待当前加载完成\");\r\n-            return;\r\n-        }\r\n-        \r\n-        StartCoroutine(LoadSceneAsyncCoroutine(sceneName));\r\n-    }\r\n-    \r\n-    /// <summary>\r\n-    /// 异步加载场景（按索引）\r\n-    /// </summary>\r\n-    /// <param name=\"sceneIndex\">场景索引</param>\r\n-    public void LoadSceneAsyncByIndex(int sceneIndex)\r\n-    {\r\n-        if (sceneIndex < 0 || sceneIndex >= SceneManager.sceneCountInBuildSettings)\r\n-        {\r\n-            Debug.LogWarning($\"场景索引无效: {sceneIndex}\");\r\n-            return;\r\n-        }\r\n-        \r\n-        if (isLoading)\r\n-        {\r\n-            Debug.LogWarning(\"正在加载场景，请等待当前加载完成\");\r\n-            return;\r\n-        }\r\n-        \r\n-        StartCoroutine(LoadSceneAsyncCoroutine(sceneIndex));\r\n-    }\r\n-    \r\n-    /// <summary>\r\n-    /// 异步加载场景协程\r\n-    /// </summary>\r\n-    /// <param name=\"sceneNameOrIndex\">场景名称或索引</param>\r\n-    private System.Collections.IEnumerator LoadSceneAsyncCoroutine(object sceneNameOrIndex)\r\n-    {\r\n-        isLoading = true;\r\n-        currentLoadingScene = sceneNameOrIndex.ToString();\r\n-        \r\n-        // 开始异步加载\r\n-        if (sceneNameOrIndex is string sceneName)\r\n-        {\r\n-            currentLoadOperation = SceneManager.LoadSceneAsync(sceneName, loadMode);\r\n-        }\r\n-        else if (sceneNameOrIndex is int sceneIndex)\r\n-        {\r\n-            currentLoadOperation = SceneManager.LoadSceneAsync(sceneIndex, loadMode);\r\n-        }\r\n-        \r\n-        if (currentLoadOperation != null)\r\n-        {\r\n-            currentLoadOperation.allowSceneActivation = allowSceneActivation;\r\n-            \r\n-            // 等待加载完成\r\n-            while (!currentLoadOperation.isDone)\r\n-            {\r\n-                loadingProgress = currentLoadOperation.progress;\r\n-                Debug.Log($\"加载进度: {loadingProgress:P0}\");\r\n-                yield return null;\r\n-            }\r\n-            \r\n-            loadingProgress = 1.0f;\r\n-            Debug.Log(\"场景加载完成\");\r\n-        }\r\n-        \r\n-        isLoading = false;\r\n-        currentLoadingScene = \"\";\r\n-        currentLoadOperation = null;\r\n-        \r\n-        // 更新场景信息\r\n-        UpdateSceneInfo();\r\n-    }\r\n-    \r\n-    /// <summary>\r\n-    /// 卸载场景\r\n-    /// </summary>\r\n-    /// <param name=\"sceneName\">场景名称</param>\r\n-    public void UnloadScene(string sceneName)\r\n-    {\r\n-        if (string.IsNullOrEmpty(sceneName))\r\n-        {\r\n-            Debug.LogWarning(\"场景名称为空\");\r\n-            return;\r\n-        }\r\n-        \r\n-        Scene scene = SceneManager.GetSceneByName(sceneName);\r\n-        if (!scene.isLoaded)\r\n-        {\r\n-            Debug.LogWarning($\"场景未加载: {sceneName}\");\r\n-            return;\r\n-        }\r\n-        \r\n-        Debug.Log($\"卸载场景: {sceneName}\");\r\n-        SceneManager.UnloadSceneAsync(sceneName);\r\n-    }\r\n-    \r\n-    /// <summary>\r\n-    /// 卸载场景（按索引）\r\n-    /// </summary>\r\n-    /// <param name=\"sceneIndex\">场景索引</param>\r\n-    public void UnloadScene(int sceneIndex)\r\n-    {\r\n-        if (sceneIndex < 0 || sceneIndex >= SceneManager.sceneCountInBuildSettings)\r\n-        {\r\n-            Debug.LogWarning($\"场景索引无效: {sceneIndex}\");\r\n-            return;\r\n-        }\r\n-        \r\n-        Scene scene = SceneManager.GetSceneByBuildIndex(sceneIndex);\r\n-        if (!scene.isLoaded)\r\n-        {\r\n-            Debug.LogWarning($\"场景未加载: {sceneIndex}\");\r\n-            return;\r\n-        }\r\n-        \r\n-        Debug.Log($\"卸载场景索引: {sceneIndex}\");\r\n-        SceneManager.UnloadSceneAsync(sceneIndex);\r\n-    }\r\n-    \r\n-    /// <summary>\r\n-    /// 重新加载当前场景\r\n-    /// </summary>\r\n-    public void ReloadCurrentScene()\r\n-    {\r\n-        Debug.Log(\"重新加载当前场景\");\r\n-        SceneManager.LoadScene(currentSceneIndex);\r\n-    }\r\n-    \r\n-    /// <summary>\r\n-    /// 异步重新加载当前场景\r\n-    /// </summary>\r\n-    public void ReloadCurrentSceneAsync()\r\n-    {\r\n-        Debug.Log(\"异步重新加载当前场景\");\r\n-        LoadSceneAsyncByIndex(currentSceneIndex);\r\n-    }\r\n-    \r\n-    /// <summary>\r\n-    /// 获取场景信息\r\n-    /// </summary>\r\n-    public void GetSceneInfo()\r\n-    {\r\n-        Debug.Log(\"=== 场景信息 ===\");\r\n-        Debug.Log($\"构建设置中的场景数量: {SceneManager.sceneCountInBuildSettings}\");\r\n-        Debug.Log($\"当前加载的场景数量: {SceneManager.sceneCount}\");\r\n-        Debug.Log($\"当前活动场景: {SceneManager.GetActiveScene().name} (索引: {SceneManager.GetActiveScene().buildIndex})\");\r\n-        \r\n-        Debug.Log(\"已加载的场景:\");\r\n-        for (int i = 0; i < SceneManager.sceneCount; i++)\r\n-        {\r\n-            Scene scene = SceneManager.GetSceneAt(i);\r\n-            Debug.Log($\"  [{i}] {scene.name} (索引: {scene.buildIndex}, 路径: {scene.path})\");\r\n-        }\r\n-        \r\n-        Debug.Log(\"构建设置中的场景:\");\r\n-        for (int i = 0; i < SceneManager.sceneCountInBuildSettings; i++)\r\n-        {\r\n-            string scenePath = SceneUtility.GetScenePathByBuildIndex(i);\r\n-            string sceneName = System.IO.Path.GetFileNameWithoutExtension(scenePath);\r\n-            Debug.Log($\"  [{i}] {sceneName} (路径: {scenePath})\");\r\n-        }\r\n-    }\r\n-    \r\n-    /// <summary>\r\n-    /// 检查场景是否已加载\r\n-    /// </summary>\r\n-    /// <param name=\"sceneName\">场景名称</param>\r\n-    /// <returns>是否已加载</returns>\r\n-    public bool IsSceneLoaded(string sceneName)\r\n-    {\r\n-        Scene scene = SceneManager.GetSceneByName(sceneName);\r\n-        return scene.isLoaded;\r\n-    }\r\n-    \r\n-    /// <summary>\r\n-    /// 检查场景是否已加载（按索引）\r\n-    /// </summary>\r\n-    /// <param name=\"sceneIndex\">场景索引</param>\r\n-    /// <returns>是否已加载</returns>\r\n-    public bool IsSceneLoaded(int sceneIndex)\r\n-    {\r\n-        Scene scene = SceneManager.GetSceneByBuildIndex(sceneIndex);\r\n-        return scene.isLoaded;\r\n-    }\r\n-    \r\n-    /// <summary>\r\n-    /// 设置活动场景\r\n-    /// </summary>\r\n-    /// <param name=\"sceneName\">场景名称</param>\r\n-    public void SetActiveScene(string sceneName)\r\n-    {\r\n-        Scene scene = SceneManager.GetSceneByName(sceneName);\r\n-        if (!scene.isLoaded)\r\n-        {\r\n-            Debug.LogWarning($\"场景未加载: {sceneName}\");\r\n-            return;\r\n-        }\r\n-        \r\n-        SceneManager.SetActiveScene(scene);\r\n-        Debug.Log($\"设置活动场景: {sceneName}\");\r\n-    }\r\n-    \r\n-    /// <summary>\r\n-    /// 合并场景\r\n-    /// </summary>\r\n-    /// <param name=\"sourceSceneName\">源场景名称</param>\r\n-    /// <param name=\"destinationSceneName\">目标场景名称</param>\r\n-    public void MergeScenes(string sourceSceneName, string destinationSceneName)\r\n-    {\r\n-        Scene sourceScene = SceneManager.GetSceneByName(sourceSceneName);\r\n-        Scene destinationScene = SceneManager.GetSceneByName(destinationSceneName);\r\n-        \r\n-        if (!sourceScene.isLoaded || !destinationScene.isLoaded)\r\n-        {\r\n-            Debug.LogWarning(\"源场景或目标场景未加载\");\r\n-            return;\r\n-        }\r\n-        \r\n-        SceneManager.MergeScenes(sourceScene, destinationScene);\r\n-        Debug.Log($\"合并场景 {sourceSceneName} 到 {destinationSceneName}\");\r\n-    }\r\n-    \r\n-    /// <summary>\r\n-    /// 移动游戏对象到场景\r\n-    /// </summary>\r\n-    /// <param name=\"gameObject\">游戏对象</param>\r\n-    /// <param name=\"sceneName\">目标场景名称</param>\r\n-    public void MoveGameObjectToScene(GameObject gameObject, string sceneName)\r\n-    {\r\n-        Scene scene = SceneManager.GetSceneByName(sceneName);\r\n-        if (!scene.isLoaded)\r\n-        {\r\n-            Debug.LogWarning($\"目标场景未加载: {sceneName}\");\r\n-            return;\r\n-        }\r\n-        \r\n-        SceneManager.MoveGameObjectToScene(gameObject, scene);\r\n-        Debug.Log($\"移动游戏对象 {gameObject.name} 到场景 {sceneName}\");\r\n-    }\r\n-    \r\n-    // 场景事件回调\r\n-    private void OnSceneLoaded(Scene scene, LoadSceneMode mode)\r\n-    {\r\n-        Debug.Log($\"场景已加载: {scene.name} (模式: {mode})\");\r\n-        UpdateSceneInfo();\r\n-    }\r\n-    \r\n-    private void OnSceneUnloaded(Scene scene)\r\n-    {\r\n-        Debug.Log($\"场景已卸载: {scene.name}\");\r\n-        UpdateSceneInfo();\r\n-    }\r\n-    \r\n-    private void OnActiveSceneChanged(Scene oldScene, Scene newScene)\r\n-    {\r\n-        Debug.Log($\"活动场景已改变: {oldScene.name} -> {newScene.name}\");\r\n-        UpdateSceneInfo();\r\n-    }\r\n-    \r\n-    private void Update()\r\n-    {\r\n-        // 更新加载进度\r\n-        if (currentLoadOperation != null && !currentLoadOperation.isDone)\r\n-        {\r\n-            loadingProgress = currentLoadOperation.progress;\r\n-        }\r\n-    }\r\n-    \r\n-    private void OnDestroy()\r\n-    {\r\n-        // 取消注册场景事件\r\n-        SceneManager.sceneLoaded -= OnSceneLoaded;\r\n-        SceneManager.sceneUnloaded -= OnSceneUnloaded;\r\n-        SceneManager.activeSceneChanged -= OnActiveSceneChanged;\r\n-    }\r\n-    \r\n-    private void OnGUI()\r\n-    {\r\n-        // 简单的GUI界面用于测试\r\n-        GUILayout.BeginArea(new Rect(10, 10, 400, 600));\r\n-        GUILayout.Label(\"场景管理系统\", EditorStyles.boldLabel);\r\n-        \r\n-        GUILayout.Space(10);\r\n-        \r\n-        // 当前场景信息\r\n-        GUILayout.Label($\"当前场景: {currentSceneName} (索引: {currentSceneIndex})\");\r\n-        GUILayout.Label($\"已加载场景数: {loadedSceneCount}\");\r\n-        GUILayout.Label($\"构建设置场景数: {sceneCount}\");\r\n-        \r\n-        GUILayout.Space(10);\r\n-        \r\n-        // 加载模式设置\r\n-        GUILayout.Label(\"加载模式:\");\r\n-        loadMode = (LoadSceneMode)GUILayout.SelectionGrid((int)loadMode, \r\n-            new string[] { \"Single\", \"Additive\" }, 2);\r\n-        \r\n-        allowSceneActivation = GUILayout.Toggle(allowSceneActivation, \"允许场景激活\");\r\n-        \r\n-        GUILayout.Space(10);\r\n-        \r\n-        // 加载进度\r\n-        if (isLoading)\r\n-        {\r\n-            GUILayout.Label($\"正在加载: {currentLoadingScene}\");\r\n-            GUILayout.Label($\"进度: {loadingProgress:P0}\");\r\n-        }\r\n-        \r\n-        GUILayout.Space(10);\r\n-        \r\n-        // 场景操作按钮\r\n-        if (GUILayout.Button(\"获取场景信息\"))\r\n-        {\r\n-            GetSceneInfo();\r\n-        }\r\n-        \r\n-        if (GUILayout.Button(\"重新加载当前场景\"))\r\n-        {\r\n-            ReloadCurrentScene();\r\n-        }\r\n-        \r\n-        if (GUILayout.Button(\"异步重新加载当前场景\"))\r\n-        {\r\n-            ReloadCurrentSceneAsync();\r\n-        }\r\n-        \r\n-        GUILayout.Space(10);\r\n-        \r\n-        // 测试场景加载\r\n-        if (sceneNames != null && sceneNames.Length > 0)\r\n-        {\r\n-            GUILayout.Label(\"测试场景加载:\");\r\n-            foreach (string sceneName in sceneNames)\r\n-            {\r\n-                if (GUILayout.Button($\"加载 {sceneName}\"))\r\n-                {\r\n-                    LoadSceneByName(sceneName);\r\n-                }\r\n-                \r\n-                if (GUILayout.Button($\"异步加载 {sceneName}\"))\r\n-                {\r\n-                    LoadSceneAsyncByName(sceneName);\r\n-                }\r\n-            }\r\n-        }\r\n-        \r\n-        if (sceneBuildIndexes != null && sceneBuildIndexes.Length > 0)\r\n-        {\r\n-            GUILayout.Label(\"按索引加载场景:\");\r\n-            foreach (int sceneIndex in sceneBuildIndexes)\r\n-            {\r\n-                if (GUILayout.Button($\"加载场景 {sceneIndex}\"))\r\n-                {\r\n-                    LoadSceneByIndex(sceneIndex);\r\n-                }\r\n-                \r\n-                if (GUILayout.Button($\"异步加载场景 {sceneIndex}\"))\r\n-                {\r\n-                    LoadSceneAsyncByIndex(sceneIndex);\r\n-                }\r\n-            }\r\n-        }\r\n-        \r\n-        GUILayout.EndArea();\r\n-    }\r\n+using UnityEngine;\n+using UnityEngine.SceneManagement;\n+using System.Collections.Generic;\n+\n+/// <summary>\n+/// UnityEngine.SceneManagement 命名空间案例演示\n+/// 展示场景管理系统的核心功能\n+/// </summary>\n+public class SceneManagementExample : MonoBehaviour\n+{\n+    [Header(\"场景设置\")]\n+    [SerializeField] private string[] sceneNames;//场景名称\n+    [SerializeField] private int[] sceneBuildIndexes;//场景索引\n+    [SerializeField] private LoadSceneMode loadMode = LoadSceneMode.Single;//加载模式\n+    [SerializeField] private bool allowSceneActivation = true;//是否允许场景激活\n+    \n+    [Header(\"场景加载设置\")]\n+    [SerializeField] private float loadingProgress = 0f;\n+    [SerializeField] private bool isLoading = false;\n+    [SerializeField] private string currentLoadingScene = \"\";\n+    \n+    [Header(\"场景信息\")]\n+    [SerializeField] private int currentSceneIndex = 0;\n+    [SerializeField] private string currentSceneName = \"\";\n+    [SerializeField] private int sceneCount = 0;\n+    [SerializeField] private int loadedSceneCount = 0;\n+    \n+    // 场景加载操作\n+    private AsyncOperation currentLoadOperation;\n+    private List<Scene> loadedScenes = new List<Scene>();\n+    \n+    private void Start()\n+    {\n+        InitializeSceneManagement();\n+        UpdateSceneInfo();\n+    }\n+    \n+    /// <summary>\n+    /// 初始化场景管理系统\n+    /// </summary>\n+    private void InitializeSceneManagement()\n+    {\n+        // 获取场景信息\n+        sceneCount = SceneManager.sceneCountInBuildSettings;\n+        currentSceneIndex = SceneManager.GetActiveScene().buildIndex;\n+        currentSceneName = SceneManager.GetActiveScene().name;\n+        \n+        // 获取已加载的场景\n+        UpdateLoadedScenes();\n+        \n+        // 注册场景事件\n+        SceneManager.sceneLoaded += OnSceneLoaded;\n+        SceneManager.sceneUnloaded += OnSceneUnloaded;\n+        SceneManager.activeSceneChanged += OnActiveSceneChanged;\n+        \n+        Debug.Log($\"场景管理系统初始化完成 - 当前场景: {currentSceneName} (索引: {currentSceneIndex})\");\n+    }\n+    \n+    /// <summary>\n+    /// 更新场景信息\n+    /// </summary>\n+    private void UpdateSceneInfo()\n+    {\n+        currentSceneIndex = SceneManager.GetActiveScene().buildIndex;\n+        currentSceneName = SceneManager.GetActiveScene().name;\n+        loadedSceneCount = SceneManager.sceneCount;\n+        UpdateLoadedScenes();\n+    }\n+    \n+    /// <summary>\n+    /// 更新已加载场景列表\n+    /// </summary>\n+    private void UpdateLoadedScenes()\n+    {\n+        loadedScenes.Clear();\n+        for (int i = 0; i < SceneManager.sceneCount; i++)\n+        {\n+            loadedScenes.Add(SceneManager.GetSceneAt(i));\n+        }\n+    }\n+    \n+    /// <summary>\n+    /// 加载场景（按名称）\n+    /// </summary>\n+    /// <param name=\"sceneName\">场景名称</param>\n+    public void LoadSceneByName(string sceneName)\n+    {\n+        if (string.IsNullOrEmpty(sceneName))\n+        {\n+            Debug.LogWarning(\"场景名称为空\");\n+            return;\n+        }\n+        \n+        if (isLoading)\n+        {\n+            Debug.LogWarning(\"正在加载场景，请等待当前加载完成\");\n+            return;\n+        }\n+        \n+        Debug.Log($\"开始加载场景: {sceneName}\");\n+        SceneManager.LoadScene(sceneName, loadMode);\n+    }\n+    \n+    /// <summary>\n+    /// 加载场景（按索引）\n+    /// </summary>\n+    /// <param name=\"sceneIndex\">场景索引</param>\n+    public void LoadSceneByIndex(int sceneIndex)\n+    {\n+        if (sceneIndex < 0 || sceneIndex >= SceneManager.sceneCountInBuildSettings)\n+        {\n+            Debug.LogWarning($\"场景索引无效: {sceneIndex}\");\n+            return;\n+        }\n+        \n+        if (isLoading)\n+        {\n+            Debug.LogWarning(\"正在加载场景，请等待当前加载完成\");\n+            return;\n+        }\n+        \n+        Debug.Log($\"开始加载场景索引: {sceneIndex}\");\n+        SceneManager.LoadScene(sceneIndex, loadMode);\n+    }\n+    \n+    /// <summary>\n+    /// 异步加载场景（按名称）\n+    /// </summary>\n+    /// <param name=\"sceneName\">场景名称</param>\n+    public void LoadSceneAsyncByName(string sceneName)\n+    {\n+        if (string.IsNullOrEmpty(sceneName))\n+        {\n+            Debug.LogWarning(\"场景名称为空\");\n+            return;\n+        }\n+        \n+        if (isLoading)\n+        {\n+            Debug.LogWarning(\"正在加载场景，请等待当前加载完成\");\n+            return;\n+        }\n+        \n+        StartCoroutine(LoadSceneAsyncCoroutine(sceneName));\n+    }\n+    \n+    /// <summary>\n+    /// 异步加载场景（按索引）\n+    /// </summary>\n+    /// <param name=\"sceneIndex\">场景索引</param>\n+    public void LoadSceneAsyncByIndex(int sceneIndex)\n+    {\n+        if (sceneIndex < 0 || sceneIndex >= SceneManager.sceneCountInBuildSettings)\n+        {\n+            Debug.LogWarning($\"场景索引无效: {sceneIndex}\");\n+            return;\n+        }\n+        \n+        if (isLoading)\n+        {\n+            Debug.LogWarning(\"正在加载场景，请等待当前加载完成\");\n+            return;\n+        }\n+        \n+        StartCoroutine(LoadSceneAsyncCoroutine(sceneIndex));\n+    }\n+    \n+    /// <summary>\n+    /// 异步加载场景协程\n+    /// </summary>\n+    /// <param name=\"sceneNameOrIndex\">场景名称或索引</param>\n+    private System.Collections.IEnumerator LoadSceneAsyncCoroutine(object sceneNameOrIndex)\n+    {\n+        isLoading = true;\n+        currentLoadingScene = sceneNameOrIndex.ToString();\n+        \n+        // 开始异步加载\n+        if (sceneNameOrIndex is string sceneName)\n+        {\n+            currentLoadOperation = SceneManager.LoadSceneAsync(sceneName, loadMode);\n+        }\n+        else if (sceneNameOrIndex is int sceneIndex)\n+        {\n+            currentLoadOperation = SceneManager.LoadSceneAsync(sceneIndex, loadMode);\n+        }\n+        \n+        if (currentLoadOperation != null)\n+        {\n+            currentLoadOperation.allowSceneActivation = allowSceneActivation;\n+            \n+            // 等待加载完成\n+            while (!currentLoadOperation.isDone)\n+            {\n+                loadingProgress = currentLoadOperation.progress;\n+                Debug.Log($\"加载进度: {loadingProgress:P0}\");\n+                yield return null;\n+            }\n+            \n+            loadingProgress = 1.0f;\n+            Debug.Log(\"场景加载完成\");\n+        }\n+        \n+        isLoading = false;\n+        currentLoadingScene = \"\";\n+        currentLoadOperation = null;\n+        \n+        // 更新场景信息\n+        UpdateSceneInfo();\n+    }\n+    \n+    /// <summary>\n+    /// 卸载场景\n+    /// </summary>\n+    /// <param name=\"sceneName\">场景名称</param>\n+    public void UnloadScene(string sceneName)\n+    {\n+        if (string.IsNullOrEmpty(sceneName))\n+        {\n+            Debug.LogWarning(\"场景名称为空\");\n+            return;\n+        }\n+        \n+        Scene scene = SceneManager.GetSceneByName(sceneName);\n+        if (!scene.isLoaded)\n+        {\n+            Debug.LogWarning($\"场景未加载: {sceneName}\");\n+            return;\n+        }\n+        \n+        Debug.Log($\"卸载场景: {sceneName}\");\n+        SceneManager.UnloadSceneAsync(sceneName);\n+    }\n+    \n+    /// <summary>\n+    /// 卸载场景（按索引）\n+    /// </summary>\n+    /// <param name=\"sceneIndex\">场景索引</param>\n+    public void UnloadScene(int sceneIndex)\n+    {\n+        if (sceneIndex < 0 || sceneIndex >= SceneManager.sceneCountInBuildSettings)\n+        {\n+            Debug.LogWarning($\"场景索引无效: {sceneIndex}\");\n+            return;\n+        }\n+        \n+        Scene scene = SceneManager.GetSceneByBuildIndex(sceneIndex);\n+        if (!scene.isLoaded)\n+        {\n+            Debug.LogWarning($\"场景未加载: {sceneIndex}\");\n+            return;\n+        }\n+        \n+        Debug.Log($\"卸载场景索引: {sceneIndex}\");\n+        SceneManager.UnloadSceneAsync(sceneIndex);\n+    }\n+    \n+    /// <summary>\n+    /// 重新加载当前场景\n+    /// </summary>\n+    public void ReloadCurrentScene()\n+    {\n+        Debug.Log(\"重新加载当前场景\");\n+        SceneManager.LoadScene(currentSceneIndex);\n+    }\n+    \n+    /// <summary>\n+    /// 异步重新加载当前场景\n+    /// </summary>\n+    public void ReloadCurrentSceneAsync()\n+    {\n+        Debug.Log(\"异步重新加载当前场景\");\n+        LoadSceneAsyncByIndex(currentSceneIndex);\n+    }\n+    \n+    /// <summary>\n+    /// 获取场景信息\n+    /// </summary>\n+    public void GetSceneInfo()\n+    {\n+        Debug.Log(\"=== 场景信息 ===\");\n+        Debug.Log($\"构建设置中的场景数量: {SceneManager.sceneCountInBuildSettings}\");\n+        Debug.Log($\"当前加载的场景数量: {SceneManager.sceneCount}\");\n+        Debug.Log($\"当前活动场景: {SceneManager.GetActiveScene().name} (索引: {SceneManager.GetActiveScene().buildIndex})\");\n+        \n+        Debug.Log(\"已加载的场景:\");\n+        for (int i = 0; i < SceneManager.sceneCount; i++)\n+        {\n+            Scene scene = SceneManager.GetSceneAt(i);\n+            Debug.Log($\"  [{i}] {scene.name} (索引: {scene.buildIndex}, 路径: {scene.path})\");\n+        }\n+        \n+        Debug.Log(\"构建设置中的场景:\");\n+        for (int i = 0; i < SceneManager.sceneCountInBuildSettings; i++)\n+        {\n+            string scenePath = SceneUtility.GetScenePathByBuildIndex(i);\n+            string sceneName = System.IO.Path.GetFileNameWithoutExtension(scenePath);\n+            Debug.Log($\"  [{i}] {sceneName} (路径: {scenePath})\");\n+        }\n+    }\n+    \n+    /// <summary>\n+    /// 检查场景是否已加载\n+    /// </summary>\n+    /// <param name=\"sceneName\">场景名称</param>\n+    /// <returns>是否已加载</returns>\n+    public bool IsSceneLoaded(string sceneName)\n+    {\n+        Scene scene = SceneManager.GetSceneByName(sceneName);\n+        return scene.isLoaded;\n+    }\n+    \n+    /// <summary>\n+    /// 检查场景是否已加载（按索引）\n+    /// </summary>\n+    /// <param name=\"sceneIndex\">场景索引</param>\n+    /// <returns>是否已加载</returns>\n+    public bool IsSceneLoaded(int sceneIndex)\n+    {\n+        Scene scene = SceneManager.GetSceneByBuildIndex(sceneIndex);\n+        return scene.isLoaded;\n+    }\n+    \n+    /// <summary>\n+    /// 设置活动场景\n+    /// </summary>\n+    /// <param name=\"sceneName\">场景名称</param>\n+    public void SetActiveScene(string sceneName)\n+    {\n+        Scene scene = SceneManager.GetSceneByName(sceneName);\n+        if (!scene.isLoaded)\n+        {\n+            Debug.LogWarning($\"场景未加载: {sceneName}\");\n+            return;\n+        }\n+        \n+        SceneManager.SetActiveScene(scene);\n+        Debug.Log($\"设置活动场景: {sceneName}\");\n+    }\n+    \n+    /// <summary>\n+    /// 合并场景\n+    /// </summary>\n+    /// <param name=\"sourceSceneName\">源场景名称</param>\n+    /// <param name=\"destinationSceneName\">目标场景名称</param>\n+    public void MergeScenes(string sourceSceneName, string destinationSceneName)\n+    {\n+        Scene sourceScene = SceneManager.GetSceneByName(sourceSceneName);\n+        Scene destinationScene = SceneManager.GetSceneByName(destinationSceneName);\n+        \n+        if (!sourceScene.isLoaded || !destinationScene.isLoaded)\n+        {\n+            Debug.LogWarning(\"源场景或目标场景未加载\");\n+            return;\n+        }\n+        \n+        SceneManager.MergeScenes(sourceScene, destinationScene);\n+        Debug.Log($\"合并场景 {sourceSceneName} 到 {destinationSceneName}\");\n+    }\n+    \n+    /// <summary>\n+    /// 移动游戏对象到场景\n+    /// </summary>\n+    /// <param name=\"gameObject\">游戏对象</param>\n+    /// <param name=\"sceneName\">目标场景名称</param>\n+    public void MoveGameObjectToScene(GameObject gameObject, string sceneName)\n+    {\n+        Scene scene = SceneManager.GetSceneByName(sceneName);\n+        if (!scene.isLoaded)\n+        {\n+            Debug.LogWarning($\"目标场景未加载: {sceneName}\");\n+            return;\n+        }\n+        \n+        SceneManager.MoveGameObjectToScene(gameObject, scene);\n+        Debug.Log($\"移动游戏对象 {gameObject.name} 到场景 {sceneName}\");\n+    }\n+    \n+    // 场景事件回调\n+    private void OnSceneLoaded(Scene scene, LoadSceneMode mode)\n+    {\n+        Debug.Log($\"场景已加载: {scene.name} (模式: {mode})\");\n+        UpdateSceneInfo();\n+    }\n+    \n+    private void OnSceneUnloaded(Scene scene)\n+    {\n+        Debug.Log($\"场景已卸载: {scene.name}\");\n+        UpdateSceneInfo();\n+    }\n+    \n+    private void OnActiveSceneChanged(Scene oldScene, Scene newScene)\n+    {\n+        Debug.Log($\"活动场景已改变: {oldScene.name} -> {newScene.name}\");\n+        UpdateSceneInfo();\n+    }\n+    \n+    private void Update()\n+    {\n+        // 更新加载进度\n+        if (currentLoadOperation != null && !currentLoadOperation.isDone)\n+        {\n+            loadingProgress = currentLoadOperation.progress;\n+        }\n+    }\n+    \n+    private void OnDestroy()\n+    {\n+        // 取消注册场景事件\n+        SceneManager.sceneLoaded -= OnSceneLoaded;\n+        SceneManager.sceneUnloaded -= OnSceneUnloaded;\n+        SceneManager.activeSceneChanged -= OnActiveSceneChanged;\n+    }\n+    \n+    private void OnGUI()\n+    {\n+        // 简单的GUI界面用于测试\n+        GUILayout.BeginArea(new Rect(10, 10, 400, 600));\n+        GUILayout.Label(\"场景管理系统\", EditorStyles.boldLabel);\n+        \n+        GUILayout.Space(10);\n+        \n+        // 当前场景信息\n+        GUILayout.Label($\"当前场景: {currentSceneName} (索引: {currentSceneIndex})\");\n+        GUILayout.Label($\"已加载场景数: {loadedSceneCount}\");\n+        GUILayout.Label($\"构建设置场景数: {sceneCount}\");\n+        \n+        GUILayout.Space(10);\n+        \n+        // 加载模式设置\n+        GUILayout.Label(\"加载模式:\");\n+        loadMode = (LoadSceneMode)GUILayout.SelectionGrid((int)loadMode, \n+            new string[] { \"Single\", \"Additive\" }, 2);\n+        \n+        allowSceneActivation = GUILayout.Toggle(allowSceneActivation, \"允许场景激活\");\n+        \n+        GUILayout.Space(10);\n+        \n+        // 加载进度\n+        if (isLoading)\n+        {\n+            GUILayout.Label($\"正在加载: {currentLoadingScene}\");\n+            GUILayout.Label($\"进度: {loadingProgress:P0}\");\n+        }\n+        \n+        GUILayout.Space(10);\n+        \n+        // 场景操作按钮\n+        if (GUILayout.Button(\"获取场景信息\"))\n+        {\n+            GetSceneInfo();\n+        }\n+        \n+        if (GUILayout.Button(\"重新加载当前场景\"))\n+        {\n+            ReloadCurrentScene();\n+        }\n+        \n+        if (GUILayout.Button(\"异步重新加载当前场景\"))\n+        {\n+            ReloadCurrentSceneAsync();\n+        }\n+        \n+        GUILayout.Space(10);\n+        \n+        // 测试场景加载\n+        if (sceneNames != null && sceneNames.Length > 0)\n+        {\n+            GUILayout.Label(\"测试场景加载:\");\n+            foreach (string sceneName in sceneNames)\n+            {\n+                if (GUILayout.Button($\"加载 {sceneName}\"))\n+                {\n+                    LoadSceneByName(sceneName);\n+                }\n+                \n+                if (GUILayout.Button($\"异步加载 {sceneName}\"))\n+                {\n+                    LoadSceneAsyncByName(sceneName);\n+                }\n+            }\n+        }\n+        \n+        if (sceneBuildIndexes != null && sceneBuildIndexes.Length > 0)\n+        {\n+            GUILayout.Label(\"按索引加载场景:\");\n+            foreach (int sceneIndex in sceneBuildIndexes)\n+            {\n+                if (GUILayout.Button($\"加载场景 {sceneIndex}\"))\n+                {\n+                    LoadSceneByIndex(sceneIndex);\n+                }\n+                \n+                if (GUILayout.Button($\"异步加载场景 {sceneIndex}\"))\n+                {\n+                    LoadSceneAsyncByIndex(sceneIndex);\n+                }\n+            }\n+        }\n+        \n+        GUILayout.EndArea();\n+    }\n } \n\\ No newline at end of file\n"
                },
                {
                    "date": 1750931558756,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,210 +3,296 @@\n using System.Collections.Generic;\n \n /// <summary>\n /// UnityEngine.SceneManagement 命名空间案例演示\n-/// 展示场景管理系统的核心功能\n+/// 展示场景管理的核心功能\n /// </summary>\n public class SceneManagementExample : MonoBehaviour\n {\n-    [Header(\"场景设置\")]\n-    [SerializeField] private string[] sceneNames;//场景名称\n-    [SerializeField] private int[] sceneBuildIndexes;//场景索引\n-    [SerializeField] private LoadSceneMode loadMode = LoadSceneMode.Single;//加载模式\n-    [SerializeField] private bool allowSceneActivation = true;//是否允许场景激活\n+    [Header(\"场景管理设置\")]\n+    [SerializeField] private bool enableSceneManagement = true;\n+    [SerializeField] private bool autoLoadScenes = false;\n+    [SerializeField] private string[] sceneNames;\n+    [SerializeField] private int currentSceneIndex = 0;\n+    [SerializeField] private LoadSceneMode loadMode = LoadSceneMode.Single;\n     \n-    [Header(\"场景加载设置\")]\n-    [SerializeField] private float loadingProgress = 0f;\n+    [Header(\"场景状态\")]\n     [SerializeField] private bool isLoading = false;\n-    [SerializeField] private string currentLoadingScene = \"\";\n+    [SerializeField] private float loadProgress = 0f;\n+    [SerializeField] private string currentSceneName = \"\";\n+    [SerializeField] private int totalScenes = 0;\n+    [SerializeField] private List<string> loadedScenes = new List<string>();\n     \n+    [Header(\"场景操作\")]\n+    [SerializeField] private bool enableSceneAdditive = false;\n+    [SerializeField] private bool enableSceneUnload = false;\n+    [SerializeField] private bool enableSceneReload = false;\n+    [SerializeField] private float sceneTransitionTime = 1f;\n+    \n     [Header(\"场景信息\")]\n-    [SerializeField] private int currentSceneIndex = 0;\n-    [SerializeField] private string currentSceneName = \"\";\n-    [SerializeField] private int sceneCount = 0;\n-    [SerializeField] private int loadedSceneCount = 0;\n+    [SerializeField] private int activeSceneIndex = 0;\n+    [SerializeField] private string activeSceneName = \"\";\n+    [SerializeField] private bool isSceneLoaded = false;\n+    [SerializeField] private bool isSceneValid = false;\n     \n-    // 场景加载操作\n-    private AsyncOperation currentLoadOperation;\n-    private List<Scene> loadedScenes = new List<Scene>();\n+    // 场景管理事件\n+    private System.Action<string> onSceneLoaded;\n+    private System.Action<string> onSceneUnloaded;\n+    private System.Action<string> onSceneActivated;\n+    private System.Action<float> onLoadProgress;\n     \n     private void Start()\n     {\n         InitializeSceneManagement();\n-        UpdateSceneInfo();\n     }\n     \n     /// <summary>\n-    /// 初始化场景管理系统\n+    /// 初始化场景管理\n     /// </summary>\n     private void InitializeSceneManagement()\n     {\n         // 获取场景信息\n-        sceneCount = SceneManager.sceneCountInBuildSettings;\n-        currentSceneIndex = SceneManager.GetActiveScene().buildIndex;\n-        currentSceneName = SceneManager.GetActiveScene().name;\n+        GetSceneInformation();\n         \n-        // 获取已加载的场景\n-        UpdateLoadedScenes();\n+        // 设置场景管理事件\n+        SetupSceneManagementEvents();\n         \n-        // 注册场景事件\n-        SceneManager.sceneLoaded += OnSceneLoaded;\n-        SceneManager.sceneUnloaded += OnSceneUnloaded;\n-        SceneManager.activeSceneChanged += OnActiveSceneChanged;\n+        // 初始化场景列表\n+        InitializeSceneList();\n         \n-        Debug.Log($\"场景管理系统初始化完成 - 当前场景: {currentSceneName} (索引: {currentSceneIndex})\");\n+        Debug.Log(\"场景管理系统初始化完成\");\n     }\n     \n     /// <summary>\n-    /// 更新场景信息\n+    /// 获取场景信息\n     /// </summary>\n-    private void UpdateSceneInfo()\n+    private void GetSceneInformation()\n     {\n+        totalScenes = SceneManager.sceneCountInBuildSettings;\n         currentSceneIndex = SceneManager.GetActiveScene().buildIndex;\n         currentSceneName = SceneManager.GetActiveScene().name;\n-        loadedSceneCount = SceneManager.sceneCount;\n-        UpdateLoadedScenes();\n+        activeSceneIndex = SceneManager.GetActiveScene().buildIndex;\n+        activeSceneName = SceneManager.GetActiveScene().name;\n+        isSceneLoaded = SceneManager.GetActiveScene().isLoaded;\n+        isSceneValid = SceneManager.GetActiveScene().IsValid();\n+        \n+        Debug.Log($\"当前场景: {currentSceneName} (索引: {currentSceneIndex})\");\n+        Debug.Log($\"总场景数: {totalScenes}\");\n     }\n     \n     /// <summary>\n-    /// 更新已加载场景列表\n+    /// 设置场景管理事件\n     /// </summary>\n-    private void UpdateLoadedScenes()\n+    private void SetupSceneManagementEvents()\n     {\n-        loadedScenes.Clear();\n-        for (int i = 0; i < SceneManager.sceneCount; i++)\n+        // 注册场景管理事件\n+        SceneManager.sceneLoaded += OnSceneLoaded;\n+        SceneManager.sceneUnloaded += OnSceneUnloaded;\n+        SceneManager.activeSceneChanged += OnActiveSceneChanged;\n+        \n+        Debug.Log(\"场景管理事件设置完成\");\n+    }\n+    \n+    /// <summary>\n+    /// 初始化场景列表\n+    /// </summary>\n+    private void InitializeSceneList()\n+    {\n+        if (sceneNames == null || sceneNames.Length == 0)\n         {\n-            loadedScenes.Add(SceneManager.GetSceneAt(i));\n+            // 获取所有场景名称\n+            sceneNames = new string[totalScenes];\n+            for (int i = 0; i < totalScenes; i++)\n+            {\n+                sceneNames[i] = GetSceneNameByBuildIndex(i);\n+            }\n         }\n+        \n+        // 更新已加载场景列表\n+        UpdateLoadedScenesList();\n+        \n+        Debug.Log($\"初始化了 {sceneNames.Length} 个场景\");\n     }\n     \n     /// <summary>\n-    /// 加载场景（按名称）\n+    /// 根据构建索引获取场景名称\n     /// </summary>\n+    /// <param name=\"buildIndex\">构建索引</param>\n+    /// <returns>场景名称</returns>\n+    private string GetSceneNameByBuildIndex(int buildIndex)\n+    {\n+        string scenePath = SceneUtility.GetScenePathByBuildIndex(buildIndex);\n+        return System.IO.Path.GetFileNameWithoutExtension(scenePath);\n+    }\n+    \n+    /// <summary>\n+    /// 加载场景\n+    /// </summary>\n     /// <param name=\"sceneName\">场景名称</param>\n-    public void LoadSceneByName(string sceneName)\n+    public void LoadScene(string sceneName)\n     {\n         if (string.IsNullOrEmpty(sceneName))\n         {\n-            Debug.LogWarning(\"场景名称为空\");\n+            Debug.LogError(\"场景名称不能为空\");\n             return;\n         }\n         \n         if (isLoading)\n         {\n-            Debug.LogWarning(\"正在加载场景，请等待当前加载完成\");\n+            Debug.LogWarning(\"正在加载场景，请稍后再试\");\n             return;\n         }\n         \n+        isLoading = true;\n+        loadProgress = 0f;\n+        \n         Debug.Log($\"开始加载场景: {sceneName}\");\n-        SceneManager.LoadScene(sceneName, loadMode);\n+        \n+        // 异步加载场景\n+        StartCoroutine(LoadSceneAsync(sceneName));\n     }\n     \n     /// <summary>\n-    /// 加载场景（按索引）\n+    /// 异步加载场景\n     /// </summary>\n-    /// <param name=\"sceneIndex\">场景索引</param>\n-    public void LoadSceneByIndex(int sceneIndex)\n+    /// <param name=\"sceneName\">场景名称</param>\n+    private System.Collections.IEnumerator LoadSceneAsync(string sceneName)\n     {\n-        if (sceneIndex < 0 || sceneIndex >= SceneManager.sceneCountInBuildSettings)\n+        AsyncOperation asyncLoad = SceneManager.LoadSceneAsync(sceneName, loadMode);\n+        \n+        if (asyncLoad == null)\n         {\n-            Debug.LogWarning($\"场景索引无效: {sceneIndex}\");\n-            return;\n+            Debug.LogError($\"无法加载场景: {sceneName}\");\n+            isLoading = false;\n+            yield break;\n         }\n         \n-        if (isLoading)\n+        // 设置加载完成后的回调\n+        asyncLoad.completed += (op) =>\n         {\n-            Debug.LogWarning(\"正在加载场景，请等待当前加载完成\");\n-            return;\n+            isLoading = false;\n+            loadProgress = 1f;\n+            Debug.Log($\"场景加载完成: {sceneName}\");\n+        };\n+        \n+        // 监控加载进度\n+        while (!asyncLoad.isDone)\n+        {\n+            loadProgress = asyncLoad.progress;\n+            onLoadProgress?.Invoke(loadProgress);\n+            yield return null;\n         }\n-        \n-        Debug.Log($\"开始加载场景索引: {sceneIndex}\");\n-        SceneManager.LoadScene(sceneIndex, loadMode);\n     }\n     \n     /// <summary>\n-    /// 异步加载场景（按名称）\n+    /// 加载场景（按索引）\n     /// </summary>\n-    /// <param name=\"sceneName\">场景名称</param>\n-    public void LoadSceneAsyncByName(string sceneName)\n+    /// <param name=\"sceneIndex\">场景索引</param>\n+    public void LoadScene(int sceneIndex)\n     {\n-        if (string.IsNullOrEmpty(sceneName))\n+        if (sceneIndex < 0 || sceneIndex >= totalScenes)\n         {\n-            Debug.LogWarning(\"场景名称为空\");\n+            Debug.LogError($\"无效的场景索引: {sceneIndex}\");\n             return;\n         }\n         \n+        string sceneName = GetSceneNameByBuildIndex(sceneIndex);\n+        LoadScene(sceneName);\n+    }\n+    \n+    /// <summary>\n+    /// 加载下一个场景\n+    /// </summary>\n+    public void LoadNextScene()\n+    {\n+        int nextIndex = (currentSceneIndex + 1) % totalScenes;\n+        LoadScene(nextIndex);\n+    }\n+    \n+    /// <summary>\n+    /// 加载上一个场景\n+    /// </summary>\n+    public void LoadPreviousScene()\n+    {\n+        int prevIndex = (currentSceneIndex - 1 + totalScenes) % totalScenes;\n+        LoadScene(prevIndex);\n+    }\n+    \n+    /// <summary>\n+    /// 重新加载当前场景\n+    /// </summary>\n+    public void ReloadCurrentScene()\n+    {\n         if (isLoading)\n         {\n-            Debug.LogWarning(\"正在加载场景，请等待当前加载完成\");\n+            Debug.LogWarning(\"正在加载场景，请稍后再试\");\n             return;\n         }\n         \n-        StartCoroutine(LoadSceneAsyncCoroutine(sceneName));\n+        string currentScene = SceneManager.GetActiveScene().name;\n+        Debug.Log($\"重新加载场景: {currentScene}\");\n+        \n+        SceneManager.LoadScene(currentScene);\n     }\n     \n     /// <summary>\n-    /// 异步加载场景（按索引）\n+    /// 添加场景（叠加模式）\n     /// </summary>\n-    /// <param name=\"sceneIndex\">场景索引</param>\n-    public void LoadSceneAsyncByIndex(int sceneIndex)\n+    /// <param name=\"sceneName\">场景名称</param>\n+    public void AddScene(string sceneName)\n     {\n-        if (sceneIndex < 0 || sceneIndex >= SceneManager.sceneCountInBuildSettings)\n+        if (string.IsNullOrEmpty(sceneName))\n         {\n-            Debug.LogWarning($\"场景索引无效: {sceneIndex}\");\n+            Debug.LogError(\"场景名称不能为空\");\n             return;\n         }\n         \n         if (isLoading)\n         {\n-            Debug.LogWarning(\"正在加载场景，请等待当前加载完成\");\n+            Debug.LogWarning(\"正在加载场景，请稍后再试\");\n             return;\n         }\n         \n-        StartCoroutine(LoadSceneAsyncCoroutine(sceneIndex));\n+        isLoading = true;\n+        loadProgress = 0f;\n+        \n+        Debug.Log($\"开始添加场景: {sceneName}\");\n+        \n+        // 异步添加场景\n+        StartCoroutine(AddSceneAsync(sceneName));\n     }\n     \n     /// <summary>\n-    /// 异步加载场景协程\n+    /// 异步添加场景\n     /// </summary>\n-    /// <param name=\"sceneNameOrIndex\">场景名称或索引</param>\n-    private System.Collections.IEnumerator LoadSceneAsyncCoroutine(object sceneNameOrIndex)\n+    /// <param name=\"sceneName\">场景名称</param>\n+    private System.Collections.IEnumerator AddSceneAsync(string sceneName)\n     {\n-        isLoading = true;\n-        currentLoadingScene = sceneNameOrIndex.ToString();\n+        AsyncOperation asyncLoad = SceneManager.LoadSceneAsync(sceneName, LoadSceneMode.Additive);\n         \n-        // 开始异步加载\n-        if (sceneNameOrIndex is string sceneName)\n+        if (asyncLoad == null)\n         {\n-            currentLoadOperation = SceneManager.LoadSceneAsync(sceneName, loadMode);\n+            Debug.LogError($\"无法添加场景: {sceneName}\");\n+            isLoading = false;\n+            yield break;\n         }\n-        else if (sceneNameOrIndex is int sceneIndex)\n+        \n+        // 设置加载完成后的回调\n+        asyncLoad.completed += (op) =>\n         {\n-            currentLoadOperation = SceneManager.LoadSceneAsync(sceneIndex, loadMode);\n-        }\n+            isLoading = false;\n+            loadProgress = 1f;\n+            UpdateLoadedScenesList();\n+            Debug.Log($\"场景添加完成: {sceneName}\");\n+        };\n         \n-        if (currentLoadOperation != null)\n+        // 监控加载进度\n+        while (!asyncLoad.isDone)\n         {\n-            currentLoadOperation.allowSceneActivation = allowSceneActivation;\n-            \n-            // 等待加载完成\n-            while (!currentLoadOperation.isDone)\n-            {\n-                loadingProgress = currentLoadOperation.progress;\n-                Debug.Log($\"加载进度: {loadingProgress:P0}\");\n-                yield return null;\n-            }\n-            \n-            loadingProgress = 1.0f;\n-            Debug.Log(\"场景加载完成\");\n+            loadProgress = asyncLoad.progress;\n+            onLoadProgress?.Invoke(loadProgress);\n+            yield return null;\n         }\n-        \n-        isLoading = false;\n-        currentLoadingScene = \"\";\n-        currentLoadOperation = null;\n-        \n-        // 更新场景信息\n-        UpdateSceneInfo();\n     }\n     \n     /// <summary>\n     /// 卸载场景\n@@ -215,147 +301,129 @@\n     public void UnloadScene(string sceneName)\n     {\n         if (string.IsNullOrEmpty(sceneName))\n         {\n-            Debug.LogWarning(\"场景名称为空\");\n+            Debug.LogError(\"场景名称不能为空\");\n             return;\n         }\n         \n-        Scene scene = SceneManager.GetSceneByName(sceneName);\n-        if (!scene.isLoaded)\n+        if (isLoading)\n         {\n-            Debug.LogWarning($\"场景未加载: {sceneName}\");\n+            Debug.LogWarning(\"正在加载场景，请稍后再试\");\n             return;\n         }\n         \n-        Debug.Log($\"卸载场景: {sceneName}\");\n-        SceneManager.UnloadSceneAsync(sceneName);\n+        Debug.Log($\"开始卸载场景: {sceneName}\");\n+        \n+        // 异步卸载场景\n+        StartCoroutine(UnloadSceneAsync(sceneName));\n     }\n     \n     /// <summary>\n-    /// 卸载场景（按索引）\n+    /// 异步卸载场景\n     /// </summary>\n-    /// <param name=\"sceneIndex\">场景索引</param>\n-    public void UnloadScene(int sceneIndex)\n+    /// <param name=\"sceneName\">场景名称</param>\n+    private System.Collections.IEnumerator UnloadSceneAsync(string sceneName)\n     {\n-        if (sceneIndex < 0 || sceneIndex >= SceneManager.sceneCountInBuildSettings)\n+        AsyncOperation asyncUnload = SceneManager.UnloadSceneAsync(sceneName);\n+        \n+        if (asyncUnload == null)\n         {\n-            Debug.LogWarning($\"场景索引无效: {sceneIndex}\");\n-            return;\n+            Debug.LogError($\"无法卸载场景: {sceneName}\");\n+            yield break;\n         }\n         \n-        Scene scene = SceneManager.GetSceneByBuildIndex(sceneIndex);\n-        if (!scene.isLoaded)\n+        // 监控卸载进度\n+        while (!asyncUnload.isDone)\n         {\n-            Debug.LogWarning($\"场景未加载: {sceneIndex}\");\n-            return;\n+            yield return null;\n         }\n         \n-        Debug.Log($\"卸载场景索引: {sceneIndex}\");\n-        SceneManager.UnloadSceneAsync(sceneIndex);\n+        UpdateLoadedScenesList();\n+        Debug.Log($\"场景卸载完成: {sceneName}\");\n     }\n     \n     /// <summary>\n-    /// 重新加载当前场景\n+    /// 设置活动场景\n     /// </summary>\n-    public void ReloadCurrentScene()\n+    /// <param name=\"sceneName\">场景名称</param>\n+    public void SetActiveScene(string sceneName)\n     {\n-        Debug.Log(\"重新加载当前场景\");\n-        SceneManager.LoadScene(currentSceneIndex);\n-    }\n-    \n-    /// <summary>\n-    /// 异步重新加载当前场景\n-    /// </summary>\n-    public void ReloadCurrentSceneAsync()\n-    {\n-        Debug.Log(\"异步重新加载当前场景\");\n-        LoadSceneAsyncByIndex(currentSceneIndex);\n-    }\n-    \n-    /// <summary>\n-    /// 获取场景信息\n-    /// </summary>\n-    public void GetSceneInfo()\n-    {\n-        Debug.Log(\"=== 场景信息 ===\");\n-        Debug.Log($\"构建设置中的场景数量: {SceneManager.sceneCountInBuildSettings}\");\n-        Debug.Log($\"当前加载的场景数量: {SceneManager.sceneCount}\");\n-        Debug.Log($\"当前活动场景: {SceneManager.GetActiveScene().name} (索引: {SceneManager.GetActiveScene().buildIndex})\");\n+        if (string.IsNullOrEmpty(sceneName))\n+        {\n+            Debug.LogError(\"场景名称不能为空\");\n+            return;\n+        }\n         \n-        Debug.Log(\"已加载的场景:\");\n-        for (int i = 0; i < SceneManager.sceneCount; i++)\n+        Scene scene = SceneManager.GetSceneByName(sceneName);\n+        if (!scene.IsValid())\n         {\n-            Scene scene = SceneManager.GetSceneAt(i);\n-            Debug.Log($\"  [{i}] {scene.name} (索引: {scene.buildIndex}, 路径: {scene.path})\");\n+            Debug.LogError($\"场景不存在: {sceneName}\");\n+            return;\n         }\n         \n-        Debug.Log(\"构建设置中的场景:\");\n-        for (int i = 0; i < SceneManager.sceneCountInBuildSettings; i++)\n+        if (!scene.isLoaded)\n         {\n-            string scenePath = SceneUtility.GetScenePathByBuildIndex(i);\n-            string sceneName = System.IO.Path.GetFileNameWithoutExtension(scenePath);\n-            Debug.Log($\"  [{i}] {sceneName} (路径: {scenePath})\");\n+            Debug.LogError($\"场景未加载: {sceneName}\");\n+            return;\n         }\n+        \n+        SceneManager.SetActiveScene(scene);\n+        Debug.Log($\"设置活动场景: {sceneName}\");\n     }\n     \n     /// <summary>\n-    /// 检查场景是否已加载\n+    /// 获取场景信息\n     /// </summary>\n     /// <param name=\"sceneName\">场景名称</param>\n-    /// <returns>是否已加载</returns>\n-    public bool IsSceneLoaded(string sceneName)\n+    /// <returns>场景信息</returns>\n+    public Scene GetSceneInfo(string sceneName)\n     {\n-        Scene scene = SceneManager.GetSceneByName(sceneName);\n-        return scene.isLoaded;\n+        return SceneManager.GetSceneByName(sceneName);\n     }\n     \n     /// <summary>\n-    /// 检查场景是否已加载（按索引）\n+    /// 检查场景是否已加载\n     /// </summary>\n-    /// <param name=\"sceneIndex\">场景索引</param>\n+    /// <param name=\"sceneName\">场景名称</param>\n     /// <returns>是否已加载</returns>\n-    public bool IsSceneLoaded(int sceneIndex)\n+    public bool IsSceneLoaded(string sceneName)\n     {\n-        Scene scene = SceneManager.GetSceneByBuildIndex(sceneIndex);\n-        return scene.isLoaded;\n+        Scene scene = SceneManager.GetSceneByName(sceneName);\n+        return scene.IsValid() && scene.isLoaded;\n     }\n     \n     /// <summary>\n-    /// 设置活动场景\n+    /// 更新已加载场景列表\n     /// </summary>\n-    /// <param name=\"sceneName\">场景名称</param>\n-    public void SetActiveScene(string sceneName)\n+    private void UpdateLoadedScenesList()\n     {\n-        Scene scene = SceneManager.GetSceneByName(sceneName);\n-        if (!scene.isLoaded)\n+        loadedScenes.Clear();\n+        \n+        for (int i = 0; i < SceneManager.sceneCount; i++)\n         {\n-            Debug.LogWarning($\"场景未加载: {sceneName}\");\n-            return;\n+            Scene scene = SceneManager.GetSceneAt(i);\n+            if (scene.isLoaded)\n+            {\n+                loadedScenes.Add(scene.name);\n+            }\n         }\n-        \n-        SceneManager.SetActiveScene(scene);\n-        Debug.Log($\"设置活动场景: {sceneName}\");\n     }\n     \n     /// <summary>\n-    /// 合并场景\n+    /// 获取所有根游戏对象\n     /// </summary>\n-    /// <param name=\"sourceSceneName\">源场景名称</param>\n-    /// <param name=\"destinationSceneName\">目标场景名称</param>\n-    public void MergeScenes(string sourceSceneName, string destinationSceneName)\n+    /// <param name=\"sceneName\">场景名称</param>\n+    /// <returns>根游戏对象数组</returns>\n+    public GameObject[] GetRootGameObjects(string sceneName)\n     {\n-        Scene sourceScene = SceneManager.GetSceneByName(sourceSceneName);\n-        Scene destinationScene = SceneManager.GetSceneByName(destinationSceneName);\n-        \n-        if (!sourceScene.isLoaded || !destinationScene.isLoaded)\n+        Scene scene = SceneManager.GetSceneByName(sceneName);\n+        if (scene.IsValid() && scene.isLoaded)\n         {\n-            Debug.LogWarning(\"源场景或目标场景未加载\");\n-            return;\n+            return scene.GetRootGameObjects();\n         }\n         \n-        SceneManager.MergeScenes(sourceScene, destinationScene);\n-        Debug.Log($\"合并场景 {sourceSceneName} 到 {destinationSceneName}\");\n+        return new GameObject[0];\n     }\n     \n     /// <summary>\n     /// 移动游戏对象到场景\n@@ -363,140 +431,225 @@\n     /// <param name=\"gameObject\">游戏对象</param>\n     /// <param name=\"sceneName\">目标场景名称</param>\n     public void MoveGameObjectToScene(GameObject gameObject, string sceneName)\n     {\n+        if (gameObject == null)\n+        {\n+            Debug.LogError(\"游戏对象不能为空\");\n+            return;\n+        }\n+        \n+        if (string.IsNullOrEmpty(sceneName))\n+        {\n+            Debug.LogError(\"场景名称不能为空\");\n+            return;\n+        }\n+        \n         Scene scene = SceneManager.GetSceneByName(sceneName);\n-        if (!scene.isLoaded)\n+        if (!scene.IsValid())\n         {\n-            Debug.LogWarning($\"目标场景未加载: {sceneName}\");\n+            Debug.LogError($\"场景不存在: {sceneName}\");\n             return;\n         }\n         \n         SceneManager.MoveGameObjectToScene(gameObject, scene);\n         Debug.Log($\"移动游戏对象 {gameObject.name} 到场景 {sceneName}\");\n     }\n     \n-    // 场景事件回调\n+    // 场景管理事件处理器\n     private void OnSceneLoaded(Scene scene, LoadSceneMode mode)\n     {\n         Debug.Log($\"场景已加载: {scene.name} (模式: {mode})\");\n-        UpdateSceneInfo();\n+        onSceneLoaded?.Invoke(scene.name);\n+        \n+        // 更新状态\n+        currentSceneName = scene.name;\n+        currentSceneIndex = scene.buildIndex;\n+        UpdateLoadedScenesList();\n     }\n     \n     private void OnSceneUnloaded(Scene scene)\n     {\n         Debug.Log($\"场景已卸载: {scene.name}\");\n-        UpdateSceneInfo();\n+        onSceneUnloaded?.Invoke(scene.name);\n+        \n+        UpdateLoadedScenesList();\n     }\n     \n     private void OnActiveSceneChanged(Scene oldScene, Scene newScene)\n     {\n-        Debug.Log($\"活动场景已改变: {oldScene.name} -> {newScene.name}\");\n-        UpdateSceneInfo();\n+        Debug.Log($\"活动场景已更改: {oldScene.name} -> {newScene.name}\");\n+        onSceneActivated?.Invoke(newScene.name);\n+        \n+        // 更新状态\n+        activeSceneName = newScene.name;\n+        activeSceneIndex = newScene.buildIndex;\n     }\n     \n-    private void Update()\n+    /// <summary>\n+    /// 获取场景管理信息\n+    /// </summary>\n+    public void GetSceneManagementInfo()\n     {\n-        // 更新加载进度\n-        if (currentLoadOperation != null && !currentLoadOperation.isDone)\n+        Debug.Log(\"=== 场景管理信息 ===\");\n+        Debug.Log($\"场景管理启用: {enableSceneManagement}\");\n+        Debug.Log($\"自动加载场景: {autoLoadScenes}\");\n+        Debug.Log($\"加载模式: {loadMode}\");\n+        Debug.Log($\"场景转换时间: {sceneTransitionTime}s\");\n+        \n+        Debug.Log($\"当前场景: {currentSceneName} (索引: {currentSceneIndex})\");\n+        Debug.Log($\"活动场景: {activeSceneName} (索引: {activeSceneIndex})\");\n+        Debug.Log($\"总场景数: {totalScenes}\");\n+        Debug.Log($\"已加载场景数: {loadedScenes.Count}\");\n+        Debug.Log($\"正在加载: {isLoading}\");\n+        Debug.Log($\"加载进度: {loadProgress:P1}\");\n+        \n+        Debug.Log(\"场景列表:\");\n+        for (int i = 0; i < sceneNames.Length; i++)\n         {\n-            loadingProgress = currentLoadOperation.progress;\n+            bool isLoaded = IsSceneLoaded(sceneNames[i]);\n+            bool isActive = sceneNames[i] == activeSceneName;\n+            string status = isActive ? \"活动\" : (isLoaded ? \"已加载\" : \"未加载\");\n+            Debug.Log($\"  {i}: {sceneNames[i]} - {status}\");\n         }\n+        \n+        Debug.Log(\"已加载的场景:\");\n+        foreach (string sceneName in loadedScenes)\n+        {\n+            Scene scene = GetSceneInfo(sceneName);\n+            Debug.Log($\"  {sceneName} (根对象数: {scene.GetRootGameObjects().Length})\");\n+        }\n     }\n     \n-    private void OnDestroy()\n+    /// <summary>\n+    /// 重置场景管理设置\n+    /// </summary>\n+    public void ResetSceneManagementSettings()\n     {\n-        // 取消注册场景事件\n-        SceneManager.sceneLoaded -= OnSceneLoaded;\n-        SceneManager.sceneUnloaded -= OnSceneUnloaded;\n-        SceneManager.activeSceneChanged -= OnActiveSceneChanged;\n+        // 重置设置\n+        enableSceneManagement = true;\n+        autoLoadScenes = false;\n+        loadMode = LoadSceneMode.Single;\n+        sceneTransitionTime = 1f;\n+        \n+        // 重置状态\n+        isLoading = false;\n+        loadProgress = 0f;\n+        \n+        Debug.Log(\"场景管理设置已重置\");\n     }\n     \n+    private void Update()\n+    {\n+        // 更新场景状态\n+        if (SceneManager.GetActiveScene().IsValid())\n+        {\n+            isSceneLoaded = SceneManager.GetActiveScene().isLoaded;\n+            isSceneValid = SceneManager.GetActiveScene().IsValid();\n+        }\n+    }\n+    \n     private void OnGUI()\n     {\n         // 简单的GUI界面用于测试\n-        GUILayout.BeginArea(new Rect(10, 10, 400, 600));\n-        GUILayout.Label(\"场景管理系统\", EditorStyles.boldLabel);\n+        GUILayout.BeginArea(new Rect(10, 10, 400, 800));\n+        GUILayout.Label(\"场景管理演示\", EditorStyles.boldLabel);\n         \n         GUILayout.Space(10);\n         \n-        // 当前场景信息\n-        GUILayout.Label($\"当前场景: {currentSceneName} (索引: {currentSceneIndex})\");\n-        GUILayout.Label($\"已加载场景数: {loadedSceneCount}\");\n-        GUILayout.Label($\"构建设置场景数: {sceneCount}\");\n+        // 场景状态\n+        GUILayout.Label($\"当前场景: {currentSceneName}\");\n+        GUILayout.Label($\"活动场景: {activeSceneName}\");\n+        GUILayout.Label($\"总场景数: {totalScenes}\");\n+        GUILayout.Label($\"已加载场景数: {loadedScenes.Count}\");\n+        GUILayout.Label($\"正在加载: {isLoading}\");\n+        GUILayout.Label($\"加载进度: {loadProgress:P1}\");\n         \n         GUILayout.Space(10);\n         \n-        // 加载模式设置\n-        GUILayout.Label(\"加载模式:\");\n-        loadMode = (LoadSceneMode)GUILayout.SelectionGrid((int)loadMode, \n-            new string[] { \"Single\", \"Additive\" }, 2);\n+        // 场景操作\n+        GUILayout.Label(\"场景操作:\", EditorStyles.boldLabel);\n         \n-        allowSceneActivation = GUILayout.Toggle(allowSceneActivation, \"允许场景激活\");\n-        \n-        GUILayout.Space(10);\n-        \n-        // 加载进度\n-        if (isLoading)\n+        GUILayout.BeginHorizontal();\n+        if (GUILayout.Button(\"上一个场景\"))\n         {\n-            GUILayout.Label($\"正在加载: {currentLoadingScene}\");\n-            GUILayout.Label($\"进度: {loadingProgress:P0}\");\n+            LoadPreviousScene();\n         }\n-        \n-        GUILayout.Space(10);\n-        \n-        // 场景操作按钮\n-        if (GUILayout.Button(\"获取场景信息\"))\n+        if (GUILayout.Button(\"下一个场景\"))\n         {\n-            GetSceneInfo();\n+            LoadNextScene();\n         }\n+        GUILayout.EndHorizontal();\n         \n         if (GUILayout.Button(\"重新加载当前场景\"))\n         {\n             ReloadCurrentScene();\n         }\n         \n-        if (GUILayout.Button(\"异步重新加载当前场景\"))\n-        {\n-            ReloadCurrentSceneAsync();\n-        }\n-        \n         GUILayout.Space(10);\n         \n-        // 测试场景加载\n-        if (sceneNames != null && sceneNames.Length > 0)\n+        // 场景选择\n+        GUILayout.Label(\"场景选择:\", EditorStyles.boldLabel);\n+        \n+        for (int i = 0; i < sceneNames.Length; i++)\n         {\n-            GUILayout.Label(\"测试场景加载:\");\n-            foreach (string sceneName in sceneNames)\n+            bool isLoaded = IsSceneLoaded(sceneNames[i]);\n+            bool isActive = sceneNames[i] == activeSceneName;\n+            string buttonText = $\"{i}: {sceneNames[i]}\";\n+            \n+            if (isActive)\n             {\n-                if (GUILayout.Button($\"加载 {sceneName}\"))\n+                buttonText += \" [活动]\";\n+            }\n+            else if (isLoaded)\n+            {\n+                buttonText += \" [已加载]\";\n+            }\n+            \n+            if (GUILayout.Button(buttonText))\n+            {\n+                if (isLoaded)\n                 {\n-                    LoadSceneByName(sceneName);\n+                    SetActiveScene(sceneNames[i]);\n                 }\n-                \n-                if (GUILayout.Button($\"异步加载 {sceneName}\"))\n+                else\n                 {\n-                    LoadSceneAsyncByName(sceneName);\n+                    LoadScene(i);\n                 }\n             }\n         }\n         \n-        if (sceneBuildIndexes != null && sceneBuildIndexes.Length > 0)\n+        GUILayout.Space(10);\n+        \n+        // 加载模式设置\n+        GUILayout.Label(\"加载模式:\", EditorStyles.boldLabel);\n+        \n+        loadMode = (LoadSceneMode)EditorGUILayout.EnumPopup(\"加载模式\", loadMode);\n+        \n+        if (GUILayout.Button(\"设置加载模式\"))\n         {\n-            GUILayout.Label(\"按索引加载场景:\");\n-            foreach (int sceneIndex in sceneBuildIndexes)\n-            {\n-                if (GUILayout.Button($\"加载场景 {sceneIndex}\"))\n-                {\n-                    LoadSceneByIndex(sceneIndex);\n-                }\n-                \n-                if (GUILayout.Button($\"异步加载场景 {sceneIndex}\"))\n-                {\n-                    LoadSceneAsyncByIndex(sceneIndex);\n-                }\n-            }\n+            Debug.Log($\"加载模式已设置为: {loadMode}\");\n         }\n         \n+        GUILayout.Space(10);\n+        \n+        if (GUILayout.Button(\"获取场景管理信息\"))\n+        {\n+            GetSceneManagementInfo();\n+        }\n+        \n+        if (GUILayout.Button(\"重置设置\"))\n+        {\n+            ResetSceneManagementSettings();\n+        }\n+        \n         GUILayout.EndArea();\n     }\n+    \n+    private void OnDestroy()\n+    {\n+        // 移除事件监听器\n+        SceneManager.sceneLoaded -= OnSceneLoaded;\n+        SceneManager.sceneUnloaded -= OnSceneUnloaded;\n+        SceneManager.activeSceneChanged -= OnActiveSceneChanged;\n+    }\n } \n\\ No newline at end of file\n"
                }
            ],
            "date": 1750929149016,
            "name": "Commit-0",
            "content": "using UnityEngine;\r\nusing UnityEngine.SceneManagement;\r\nusing System.Collections.Generic;\r\n\r\n/// <summary>\r\n/// UnityEngine.SceneManagement 命名空间案例演示\r\n/// 展示场景管理系统的核心功能\r\n/// </summary>\r\npublic class SceneManagementExample : MonoBehaviour\r\n{\r\n    [Header(\"场景设置\")]\r\n    [SerializeField] private string[] sceneNames;\r\n    [SerializeField] private int[] sceneBuildIndexes;\r\n    [SerializeField] private LoadSceneMode loadMode = LoadSceneMode.Single;\r\n    [SerializeField] private bool allowSceneActivation = true;\r\n    \r\n    [Header(\"场景加载设置\")]\r\n    [SerializeField] private float loadingProgress = 0f;\r\n    [SerializeField] private bool isLoading = false;\r\n    [SerializeField] private string currentLoadingScene = \"\";\r\n    \r\n    [Header(\"场景信息\")]\r\n    [SerializeField] private int currentSceneIndex = 0;\r\n    [SerializeField] private string currentSceneName = \"\";\r\n    [SerializeField] private int sceneCount = 0;\r\n    [SerializeField] private int loadedSceneCount = 0;\r\n    \r\n    // 场景加载操作\r\n    private AsyncOperation currentLoadOperation;\r\n    private List<Scene> loadedScenes = new List<Scene>();\r\n    \r\n    private void Start()\r\n    {\r\n        InitializeSceneManagement();\r\n        UpdateSceneInfo();\r\n    }\r\n    \r\n    /// <summary>\r\n    /// 初始化场景管理系统\r\n    /// </summary>\r\n    private void InitializeSceneManagement()\r\n    {\r\n        // 获取场景信息\r\n        sceneCount = SceneManager.sceneCountInBuildSettings;\r\n        currentSceneIndex = SceneManager.GetActiveScene().buildIndex;\r\n        currentSceneName = SceneManager.GetActiveScene().name;\r\n        \r\n        // 获取已加载的场景\r\n        UpdateLoadedScenes();\r\n        \r\n        // 注册场景事件\r\n        SceneManager.sceneLoaded += OnSceneLoaded;\r\n        SceneManager.sceneUnloaded += OnSceneUnloaded;\r\n        SceneManager.activeSceneChanged += OnActiveSceneChanged;\r\n        \r\n        Debug.Log($\"场景管理系统初始化完成 - 当前场景: {currentSceneName} (索引: {currentSceneIndex})\");\r\n    }\r\n    \r\n    /// <summary>\r\n    /// 更新场景信息\r\n    /// </summary>\r\n    private void UpdateSceneInfo()\r\n    {\r\n        currentSceneIndex = SceneManager.GetActiveScene().buildIndex;\r\n        currentSceneName = SceneManager.GetActiveScene().name;\r\n        loadedSceneCount = SceneManager.sceneCount;\r\n        UpdateLoadedScenes();\r\n    }\r\n    \r\n    /// <summary>\r\n    /// 更新已加载场景列表\r\n    /// </summary>\r\n    private void UpdateLoadedScenes()\r\n    {\r\n        loadedScenes.Clear();\r\n        for (int i = 0; i < SceneManager.sceneCount; i++)\r\n        {\r\n            loadedScenes.Add(SceneManager.GetSceneAt(i));\r\n        }\r\n    }\r\n    \r\n    /// <summary>\r\n    /// 加载场景（按名称）\r\n    /// </summary>\r\n    /// <param name=\"sceneName\">场景名称</param>\r\n    public void LoadSceneByName(string sceneName)\r\n    {\r\n        if (string.IsNullOrEmpty(sceneName))\r\n        {\r\n            Debug.LogWarning(\"场景名称为空\");\r\n            return;\r\n        }\r\n        \r\n        if (isLoading)\r\n        {\r\n            Debug.LogWarning(\"正在加载场景，请等待当前加载完成\");\r\n            return;\r\n        }\r\n        \r\n        Debug.Log($\"开始加载场景: {sceneName}\");\r\n        SceneManager.LoadScene(sceneName, loadMode);\r\n    }\r\n    \r\n    /// <summary>\r\n    /// 加载场景（按索引）\r\n    /// </summary>\r\n    /// <param name=\"sceneIndex\">场景索引</param>\r\n    public void LoadSceneByIndex(int sceneIndex)\r\n    {\r\n        if (sceneIndex < 0 || sceneIndex >= SceneManager.sceneCountInBuildSettings)\r\n        {\r\n            Debug.LogWarning($\"场景索引无效: {sceneIndex}\");\r\n            return;\r\n        }\r\n        \r\n        if (isLoading)\r\n        {\r\n            Debug.LogWarning(\"正在加载场景，请等待当前加载完成\");\r\n            return;\r\n        }\r\n        \r\n        Debug.Log($\"开始加载场景索引: {sceneIndex}\");\r\n        SceneManager.LoadScene(sceneIndex, loadMode);\r\n    }\r\n    \r\n    /// <summary>\r\n    /// 异步加载场景（按名称）\r\n    /// </summary>\r\n    /// <param name=\"sceneName\">场景名称</param>\r\n    public void LoadSceneAsyncByName(string sceneName)\r\n    {\r\n        if (string.IsNullOrEmpty(sceneName))\r\n        {\r\n            Debug.LogWarning(\"场景名称为空\");\r\n            return;\r\n        }\r\n        \r\n        if (isLoading)\r\n        {\r\n            Debug.LogWarning(\"正在加载场景，请等待当前加载完成\");\r\n            return;\r\n        }\r\n        \r\n        StartCoroutine(LoadSceneAsyncCoroutine(sceneName));\r\n    }\r\n    \r\n    /// <summary>\r\n    /// 异步加载场景（按索引）\r\n    /// </summary>\r\n    /// <param name=\"sceneIndex\">场景索引</param>\r\n    public void LoadSceneAsyncByIndex(int sceneIndex)\r\n    {\r\n        if (sceneIndex < 0 || sceneIndex >= SceneManager.sceneCountInBuildSettings)\r\n        {\r\n            Debug.LogWarning($\"场景索引无效: {sceneIndex}\");\r\n            return;\r\n        }\r\n        \r\n        if (isLoading)\r\n        {\r\n            Debug.LogWarning(\"正在加载场景，请等待当前加载完成\");\r\n            return;\r\n        }\r\n        \r\n        StartCoroutine(LoadSceneAsyncCoroutine(sceneIndex));\r\n    }\r\n    \r\n    /// <summary>\r\n    /// 异步加载场景协程\r\n    /// </summary>\r\n    /// <param name=\"sceneNameOrIndex\">场景名称或索引</param>\r\n    private System.Collections.IEnumerator LoadSceneAsyncCoroutine(object sceneNameOrIndex)\r\n    {\r\n        isLoading = true;\r\n        currentLoadingScene = sceneNameOrIndex.ToString();\r\n        \r\n        // 开始异步加载\r\n        if (sceneNameOrIndex is string sceneName)\r\n        {\r\n            currentLoadOperation = SceneManager.LoadSceneAsync(sceneName, loadMode);\r\n        }\r\n        else if (sceneNameOrIndex is int sceneIndex)\r\n        {\r\n            currentLoadOperation = SceneManager.LoadSceneAsync(sceneIndex, loadMode);\r\n        }\r\n        \r\n        if (currentLoadOperation != null)\r\n        {\r\n            currentLoadOperation.allowSceneActivation = allowSceneActivation;\r\n            \r\n            // 等待加载完成\r\n            while (!currentLoadOperation.isDone)\r\n            {\r\n                loadingProgress = currentLoadOperation.progress;\r\n                Debug.Log($\"加载进度: {loadingProgress:P0}\");\r\n                yield return null;\r\n            }\r\n            \r\n            loadingProgress = 1.0f;\r\n            Debug.Log(\"场景加载完成\");\r\n        }\r\n        \r\n        isLoading = false;\r\n        currentLoadingScene = \"\";\r\n        currentLoadOperation = null;\r\n        \r\n        // 更新场景信息\r\n        UpdateSceneInfo();\r\n    }\r\n    \r\n    /// <summary>\r\n    /// 卸载场景\r\n    /// </summary>\r\n    /// <param name=\"sceneName\">场景名称</param>\r\n    public void UnloadScene(string sceneName)\r\n    {\r\n        if (string.IsNullOrEmpty(sceneName))\r\n        {\r\n            Debug.LogWarning(\"场景名称为空\");\r\n            return;\r\n        }\r\n        \r\n        Scene scene = SceneManager.GetSceneByName(sceneName);\r\n        if (!scene.isLoaded)\r\n        {\r\n            Debug.LogWarning($\"场景未加载: {sceneName}\");\r\n            return;\r\n        }\r\n        \r\n        Debug.Log($\"卸载场景: {sceneName}\");\r\n        SceneManager.UnloadSceneAsync(sceneName);\r\n    }\r\n    \r\n    /// <summary>\r\n    /// 卸载场景（按索引）\r\n    /// </summary>\r\n    /// <param name=\"sceneIndex\">场景索引</param>\r\n    public void UnloadScene(int sceneIndex)\r\n    {\r\n        if (sceneIndex < 0 || sceneIndex >= SceneManager.sceneCountInBuildSettings)\r\n        {\r\n            Debug.LogWarning($\"场景索引无效: {sceneIndex}\");\r\n            return;\r\n        }\r\n        \r\n        Scene scene = SceneManager.GetSceneByBuildIndex(sceneIndex);\r\n        if (!scene.isLoaded)\r\n        {\r\n            Debug.LogWarning($\"场景未加载: {sceneIndex}\");\r\n            return;\r\n        }\r\n        \r\n        Debug.Log($\"卸载场景索引: {sceneIndex}\");\r\n        SceneManager.UnloadSceneAsync(sceneIndex);\r\n    }\r\n    \r\n    /// <summary>\r\n    /// 重新加载当前场景\r\n    /// </summary>\r\n    public void ReloadCurrentScene()\r\n    {\r\n        Debug.Log(\"重新加载当前场景\");\r\n        SceneManager.LoadScene(currentSceneIndex);\r\n    }\r\n    \r\n    /// <summary>\r\n    /// 异步重新加载当前场景\r\n    /// </summary>\r\n    public void ReloadCurrentSceneAsync()\r\n    {\r\n        Debug.Log(\"异步重新加载当前场景\");\r\n        LoadSceneAsyncByIndex(currentSceneIndex);\r\n    }\r\n    \r\n    /// <summary>\r\n    /// 获取场景信息\r\n    /// </summary>\r\n    public void GetSceneInfo()\r\n    {\r\n        Debug.Log(\"=== 场景信息 ===\");\r\n        Debug.Log($\"构建设置中的场景数量: {SceneManager.sceneCountInBuildSettings}\");\r\n        Debug.Log($\"当前加载的场景数量: {SceneManager.sceneCount}\");\r\n        Debug.Log($\"当前活动场景: {SceneManager.GetActiveScene().name} (索引: {SceneManager.GetActiveScene().buildIndex})\");\r\n        \r\n        Debug.Log(\"已加载的场景:\");\r\n        for (int i = 0; i < SceneManager.sceneCount; i++)\r\n        {\r\n            Scene scene = SceneManager.GetSceneAt(i);\r\n            Debug.Log($\"  [{i}] {scene.name} (索引: {scene.buildIndex}, 路径: {scene.path})\");\r\n        }\r\n        \r\n        Debug.Log(\"构建设置中的场景:\");\r\n        for (int i = 0; i < SceneManager.sceneCountInBuildSettings; i++)\r\n        {\r\n            string scenePath = SceneUtility.GetScenePathByBuildIndex(i);\r\n            string sceneName = System.IO.Path.GetFileNameWithoutExtension(scenePath);\r\n            Debug.Log($\"  [{i}] {sceneName} (路径: {scenePath})\");\r\n        }\r\n    }\r\n    \r\n    /// <summary>\r\n    /// 检查场景是否已加载\r\n    /// </summary>\r\n    /// <param name=\"sceneName\">场景名称</param>\r\n    /// <returns>是否已加载</returns>\r\n    public bool IsSceneLoaded(string sceneName)\r\n    {\r\n        Scene scene = SceneManager.GetSceneByName(sceneName);\r\n        return scene.isLoaded;\r\n    }\r\n    \r\n    /// <summary>\r\n    /// 检查场景是否已加载（按索引）\r\n    /// </summary>\r\n    /// <param name=\"sceneIndex\">场景索引</param>\r\n    /// <returns>是否已加载</returns>\r\n    public bool IsSceneLoaded(int sceneIndex)\r\n    {\r\n        Scene scene = SceneManager.GetSceneByBuildIndex(sceneIndex);\r\n        return scene.isLoaded;\r\n    }\r\n    \r\n    /// <summary>\r\n    /// 设置活动场景\r\n    /// </summary>\r\n    /// <param name=\"sceneName\">场景名称</param>\r\n    public void SetActiveScene(string sceneName)\r\n    {\r\n        Scene scene = SceneManager.GetSceneByName(sceneName);\r\n        if (!scene.isLoaded)\r\n        {\r\n            Debug.LogWarning($\"场景未加载: {sceneName}\");\r\n            return;\r\n        }\r\n        \r\n        SceneManager.SetActiveScene(scene);\r\n        Debug.Log($\"设置活动场景: {sceneName}\");\r\n    }\r\n    \r\n    /// <summary>\r\n    /// 合并场景\r\n    /// </summary>\r\n    /// <param name=\"sourceSceneName\">源场景名称</param>\r\n    /// <param name=\"destinationSceneName\">目标场景名称</param>\r\n    public void MergeScenes(string sourceSceneName, string destinationSceneName)\r\n    {\r\n        Scene sourceScene = SceneManager.GetSceneByName(sourceSceneName);\r\n        Scene destinationScene = SceneManager.GetSceneByName(destinationSceneName);\r\n        \r\n        if (!sourceScene.isLoaded || !destinationScene.isLoaded)\r\n        {\r\n            Debug.LogWarning(\"源场景或目标场景未加载\");\r\n            return;\r\n        }\r\n        \r\n        SceneManager.MergeScenes(sourceScene, destinationScene);\r\n        Debug.Log($\"合并场景 {sourceSceneName} 到 {destinationSceneName}\");\r\n    }\r\n    \r\n    /// <summary>\r\n    /// 移动游戏对象到场景\r\n    /// </summary>\r\n    /// <param name=\"gameObject\">游戏对象</param>\r\n    /// <param name=\"sceneName\">目标场景名称</param>\r\n    public void MoveGameObjectToScene(GameObject gameObject, string sceneName)\r\n    {\r\n        Scene scene = SceneManager.GetSceneByName(sceneName);\r\n        if (!scene.isLoaded)\r\n        {\r\n            Debug.LogWarning($\"目标场景未加载: {sceneName}\");\r\n            return;\r\n        }\r\n        \r\n        SceneManager.MoveGameObjectToScene(gameObject, scene);\r\n        Debug.Log($\"移动游戏对象 {gameObject.name} 到场景 {sceneName}\");\r\n    }\r\n    \r\n    // 场景事件回调\r\n    private void OnSceneLoaded(Scene scene, LoadSceneMode mode)\r\n    {\r\n        Debug.Log($\"场景已加载: {scene.name} (模式: {mode})\");\r\n        UpdateSceneInfo();\r\n    }\r\n    \r\n    private void OnSceneUnloaded(Scene scene)\r\n    {\r\n        Debug.Log($\"场景已卸载: {scene.name}\");\r\n        UpdateSceneInfo();\r\n    }\r\n    \r\n    private void OnActiveSceneChanged(Scene oldScene, Scene newScene)\r\n    {\r\n        Debug.Log($\"活动场景已改变: {oldScene.name} -> {newScene.name}\");\r\n        UpdateSceneInfo();\r\n    }\r\n    \r\n    private void Update()\r\n    {\r\n        // 更新加载进度\r\n        if (currentLoadOperation != null && !currentLoadOperation.isDone)\r\n        {\r\n            loadingProgress = currentLoadOperation.progress;\r\n        }\r\n    }\r\n    \r\n    private void OnDestroy()\r\n    {\r\n        // 取消注册场景事件\r\n        SceneManager.sceneLoaded -= OnSceneLoaded;\r\n        SceneManager.sceneUnloaded -= OnSceneUnloaded;\r\n        SceneManager.activeSceneChanged -= OnActiveSceneChanged;\r\n    }\r\n    \r\n    private void OnGUI()\r\n    {\r\n        // 简单的GUI界面用于测试\r\n        GUILayout.BeginArea(new Rect(10, 10, 400, 600));\r\n        GUILayout.Label(\"场景管理系统\", EditorStyles.boldLabel);\r\n        \r\n        GUILayout.Space(10);\r\n        \r\n        // 当前场景信息\r\n        GUILayout.Label($\"当前场景: {currentSceneName} (索引: {currentSceneIndex})\");\r\n        GUILayout.Label($\"已加载场景数: {loadedSceneCount}\");\r\n        GUILayout.Label($\"构建设置场景数: {sceneCount}\");\r\n        \r\n        GUILayout.Space(10);\r\n        \r\n        // 加载模式设置\r\n        GUILayout.Label(\"加载模式:\");\r\n        loadMode = (LoadSceneMode)GUILayout.SelectionGrid((int)loadMode, \r\n            new string[] { \"Single\", \"Additive\" }, 2);\r\n        \r\n        allowSceneActivation = GUILayout.Toggle(allowSceneActivation, \"允许场景激活\");\r\n        \r\n        GUILayout.Space(10);\r\n        \r\n        // 加载进度\r\n        if (isLoading)\r\n        {\r\n            GUILayout.Label($\"正在加载: {currentLoadingScene}\");\r\n            GUILayout.Label($\"进度: {loadingProgress:P0}\");\r\n        }\r\n        \r\n        GUILayout.Space(10);\r\n        \r\n        // 场景操作按钮\r\n        if (GUILayout.Button(\"获取场景信息\"))\r\n        {\r\n            GetSceneInfo();\r\n        }\r\n        \r\n        if (GUILayout.Button(\"重新加载当前场景\"))\r\n        {\r\n            ReloadCurrentScene();\r\n        }\r\n        \r\n        if (GUILayout.Button(\"异步重新加载当前场景\"))\r\n        {\r\n            ReloadCurrentSceneAsync();\r\n        }\r\n        \r\n        GUILayout.Space(10);\r\n        \r\n        // 测试场景加载\r\n        if (sceneNames != null && sceneNames.Length > 0)\r\n        {\r\n            GUILayout.Label(\"测试场景加载:\");\r\n            foreach (string sceneName in sceneNames)\r\n            {\r\n                if (GUILayout.Button($\"加载 {sceneName}\"))\r\n                {\r\n                    LoadSceneByName(sceneName);\r\n                }\r\n                \r\n                if (GUILayout.Button($\"异步加载 {sceneName}\"))\r\n                {\r\n                    LoadSceneAsyncByName(sceneName);\r\n                }\r\n            }\r\n        }\r\n        \r\n        if (sceneBuildIndexes != null && sceneBuildIndexes.Length > 0)\r\n        {\r\n            GUILayout.Label(\"按索引加载场景:\");\r\n            foreach (int sceneIndex in sceneBuildIndexes)\r\n            {\r\n                if (GUILayout.Button($\"加载场景 {sceneIndex}\"))\r\n                {\r\n                    LoadSceneByIndex(sceneIndex);\r\n                }\r\n                \r\n                if (GUILayout.Button($\"异步加载场景 {sceneIndex}\"))\r\n                {\r\n                    LoadSceneAsyncByIndex(sceneIndex);\r\n                }\r\n            }\r\n        }\r\n        \r\n        GUILayout.EndArea();\r\n    }\r\n} "
        }
    ]
}