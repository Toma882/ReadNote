{
    "sourceFile": "Assets/UnityEditor/Chapter 8 UnityAPI/UnityEditor/PackageManager/PackageManagerExample.cs",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1750938484604,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1750938484604,
            "name": "Commit-0",
            "content": "using UnityEngine;\r\nusing UnityEditor;\r\nusing UnityEditor.PackageManager;\r\nusing UnityEditor.PackageManager.Requests;\r\nusing System.Collections.Generic;\r\n\r\n/// <summary>\r\n/// UnityEditor.PackageManager 命名空间案例演示\r\n/// 展示包管理系统的使用，包括包的安装、卸载、更新和查询\r\n/// </summary>\r\npublic class PackageManagerExample : MonoBehaviour\r\n{\r\n    [Header(\"包管理系统配置\")]\r\n    [SerializeField] private bool enablePackageManager = true; //启用包管理系统\r\n    [SerializeField] private bool enablePackageLogging = true; //启用包管理日志\r\n    [SerializeField] private bool enablePackageValidation = true; //启用包管理验证\r\n    [SerializeField] private bool enablePackageCache = true; //启用包管理缓存\r\n    [SerializeField] private bool enablePackageAutoUpdate = false; //启用包自动更新\r\n    \r\n    [Header(\"包操作\")]\r\n    [SerializeField] private PackageOperation currentOperation = PackageOperation.None; //当前包操作\r\n    [SerializeField] private string targetPackageName = \"\"; //目标包名称\r\n    [SerializeField] private string targetPackageVersion = \"\"; //目标包版本\r\n    [SerializeField] private PackageSource packageSource = PackageSource.Registry; //包源\r\n    [SerializeField] private bool includePrerelease = false; //包含预发布版本\r\n    [SerializeField] private bool includeHidden = false; //包含隐藏包\r\n    \r\n    [Header(\"包状态\")]\r\n    [SerializeField] private string packageManagerState = \"未初始化\"; //包管理器状态\r\n    [SerializeField] private bool isOperationInProgress = false; //是否有操作正在进行\r\n    [SerializeField] private float operationProgress = 0f; //操作进度\r\n    [SerializeField] private string operationMessage = \"\"; //操作消息\r\n    [SerializeField] private PackageOperationResult lastOperationResult = PackageOperationResult.None; //最后操作结果\r\n    [SerializeField] private string lastOperationError = \"\"; //最后操作错误\r\n    \r\n    [Header(\"包列表\")]\r\n    [SerializeField] private PackageInfo[] installedPackages = new PackageInfo[0]; //已安装的包\r\n    [SerializeField] private PackageInfo[] availablePackages = new PackageInfo[0]; //可用的包\r\n    [SerializeField] private PackageInfo[] outdatedPackages = new PackageInfo[0]; //过时的包\r\n    [SerializeField] private int totalInstalledPackages = 0; //总已安装包数\r\n    [SerializeField] private int totalAvailablePackages = 0; //总可用包数\r\n    [SerializeField] private int totalOutdatedPackages = 0; //总过时包数\r\n    \r\n    [Header(\"包历史\")]\r\n    [SerializeField] private PackageHistoryEntry[] packageHistory = new PackageHistoryEntry[10]; //包操作历史\r\n    [SerializeField] private int packageHistoryIndex = 0; //包历史索引\r\n    [SerializeField] private bool enablePackageHistory = true; //启用包历史\r\n    \r\n    [Header(\"性能监控\")]\r\n    [SerializeField] private bool enablePerformanceMonitoring = true; //启用性能监控\r\n    [SerializeField] private float[] operationTimeHistory = new float[100]; //操作时间历史\r\n    [SerializeField] private int operationTimeIndex = 0; //操作时间索引\r\n    [SerializeField] private float averageOperationTime = 0f; //平均操作时间\r\n    [SerializeField] private float maxOperationTime = 0f; //最大操作时间\r\n    [SerializeField] private float totalOperationTime = 0f; //总操作时间\r\n    [SerializeField] private int totalOperationCount = 0; //总操作次数\r\n    \r\n    [Header(\"包统计\")]\r\n    [SerializeField] private long totalPackageSize = 0; //总包大小\r\n    [SerializeField] private int totalPackageDependencies = 0; //总包依赖数\r\n    [SerializeField] private string[] packageCategories = new string[0]; //包分类\r\n    [SerializeField] private Dictionary<string, int> packageCategoryCount = new Dictionary<string, int>(); //包分类统计\r\n    \r\n    private bool isInitialized = false;\r\n    private float operationStartTime = 0f;\r\n    private ListRequest listRequest;\r\n    private SearchRequest searchRequest;\r\n    private AddRequest addRequest;\r\n    private RemoveRequest removeRequest;\r\n    private UpdateRequest updateRequest;\r\n\r\n    private void Start()\r\n    {\r\n        InitializePackageManager();\r\n    }\r\n\r\n    /// <summary>\r\n    /// 初始化包管理系统\r\n    /// </summary>\r\n    private void InitializePackageManager()\r\n    {\r\n        if (!enablePackageManager) return;\r\n        \r\n        // 初始化包管理状态\r\n        InitializePackageState();\r\n        \r\n        // 初始化性能监控\r\n        InitializePerformanceMonitoring();\r\n        \r\n        // 初始化包统计\r\n        InitializePackageStatistics();\r\n        \r\n        // 刷新包列表\r\n        RefreshPackageList();\r\n        \r\n        isInitialized = true;\r\n        packageManagerState = \"已初始化\";\r\n        Debug.Log(\"包管理系统初始化完成\");\r\n    }\r\n\r\n    /// <summary>\r\n    /// 初始化包管理状态\r\n    /// </summary>\r\n    private void InitializePackageState()\r\n    {\r\n        currentOperation = PackageOperation.None;\r\n        isOperationInProgress = false;\r\n        operationProgress = 0f;\r\n        operationMessage = \"就绪\";\r\n        lastOperationResult = PackageOperationResult.None;\r\n        lastOperationError = \"\";\r\n        \r\n        Debug.Log(\"包管理状态已初始化\");\r\n    }\r\n\r\n    /// <summary>\r\n    /// 初始化性能监控\r\n    /// </summary>\r\n    private void InitializePerformanceMonitoring()\r\n    {\r\n        if (enablePerformanceMonitoring)\r\n        {\r\n            operationTimeHistory = new float[100];\r\n            operationTimeIndex = 0;\r\n            averageOperationTime = 0f;\r\n            maxOperationTime = 0f;\r\n            totalOperationTime = 0f;\r\n            totalOperationCount = 0;\r\n            \r\n            Debug.Log(\"性能监控初始化完成\");\r\n        }\r\n    }\r\n\r\n    /// <summary>\r\n    /// 初始化包统计\r\n    /// </summary>\r\n    private void InitializePackageStatistics()\r\n    {\r\n        totalPackageSize = 0;\r\n        totalPackageDependencies = 0;\r\n        packageCategories = new string[0];\r\n        packageCategoryCount.Clear();\r\n        \r\n        Debug.Log(\"包统计初始化完成\");\r\n    }\r\n\r\n    private void Update()\r\n    {\r\n        if (!isInitialized) return;\r\n        \r\n        // 更新包管理状态\r\n        UpdatePackageManagerStatus();\r\n        \r\n        // 处理包管理请求\r\n        ProcessPackageRequests();\r\n        \r\n        // 性能监控\r\n        if (enablePerformanceMonitoring)\r\n        {\r\n            UpdatePerformanceMonitoring();\r\n        }\r\n    }\r\n\r\n    /// <summary>\r\n    /// 更新包管理状态\r\n    /// </summary>\r\n    private void UpdatePackageManagerStatus()\r\n    {\r\n        if (isOperationInProgress)\r\n        {\r\n            packageManagerState = \"操作中\";\r\n        }\r\n        else\r\n        {\r\n            packageManagerState = \"空闲\";\r\n        }\r\n    }\r\n\r\n    /// <summary>\r\n    /// 处理包管理请求\r\n    /// </summary>\r\n    private void ProcessPackageRequests()\r\n    {\r\n        // 处理列表请求\r\n        if (listRequest != null && listRequest.IsCompleted)\r\n        {\r\n            ProcessListRequest();\r\n        }\r\n        \r\n        // 处理搜索请求\r\n        if (searchRequest != null && searchRequest.IsCompleted)\r\n        {\r\n            ProcessSearchRequest();\r\n        }\r\n        \r\n        // 处理添加请求\r\n        if (addRequest != null && addRequest.IsCompleted)\r\n        {\r\n            ProcessAddRequest();\r\n        }\r\n        \r\n        // 处理移除请求\r\n        if (removeRequest != null && removeRequest.IsCompleted)\r\n        {\r\n            ProcessRemoveRequest();\r\n        }\r\n        \r\n        // 处理更新请求\r\n        if (updateRequest != null && updateRequest.IsCompleted)\r\n        {\r\n            ProcessUpdateRequest();\r\n        }\r\n    }\r\n\r\n    /// <summary>\r\n    /// 处理列表请求\r\n    /// </summary>\r\n    private void ProcessListRequest()\r\n    {\r\n        if (listRequest.Status == StatusCode.Success)\r\n        {\r\n            installedPackages = listRequest.Result.ToArray();\r\n            totalInstalledPackages = installedPackages.Length;\r\n            \r\n            // 更新包统计\r\n            UpdatePackageStatistics();\r\n            \r\n            operationMessage = $\"已加载 {totalInstalledPackages} 个已安装包\";\r\n            lastOperationResult = PackageOperationResult.Success;\r\n            \r\n            if (enablePackageLogging)\r\n            {\r\n                Debug.Log($\"包列表加载成功: {totalInstalledPackages} 个包\");\r\n            }\r\n        }\r\n        else\r\n        {\r\n            operationMessage = $\"包列表加载失败: {listRequest.Error?.message}\";\r\n            lastOperationResult = PackageOperationResult.Failed;\r\n            lastOperationError = listRequest.Error?.message ?? \"未知错误\";\r\n            \r\n            Debug.LogError($\"包列表加载失败: {listRequest.Error?.message}\");\r\n        }\r\n        \r\n        listRequest = null;\r\n        isOperationInProgress = false;\r\n        operationProgress = 1f;\r\n        \r\n        // 更新性能数据\r\n        UpdateOperationPerformance();\r\n    }\r\n\r\n    /// <summary>\r\n    /// 处理搜索请求\r\n    /// </summary>\r\n    private void ProcessSearchRequest()\r\n    {\r\n        if (searchRequest.Status == StatusCode.Success)\r\n        {\r\n            availablePackages = searchRequest.Result.ToArray();\r\n            totalAvailablePackages = availablePackages.Length;\r\n            \r\n            operationMessage = $\"搜索完成: 找到 {totalAvailablePackages} 个可用包\";\r\n            lastOperationResult = PackageOperationResult.Success;\r\n            \r\n            if (enablePackageLogging)\r\n            {\r\n                Debug.Log($\"包搜索成功: {totalAvailablePackages} 个包\");\r\n            }\r\n        }\r\n        else\r\n        {\r\n            operationMessage = $\"包搜索失败: {searchRequest.Error?.message}\";\r\n            lastOperationResult = PackageOperationResult.Failed;\r\n            lastOperationError = searchRequest.Error?.message ?? \"未知错误\";\r\n            \r\n            Debug.LogError($\"包搜索失败: {searchRequest.Error?.message}\");\r\n        }\r\n        \r\n        searchRequest = null;\r\n        isOperationInProgress = false;\r\n        operationProgress = 1f;\r\n        \r\n        // 更新性能数据\r\n        UpdateOperationPerformance();\r\n    }\r\n\r\n    /// <summary>\r\n    /// 处理添加请求\r\n    /// </summary>\r\n    private void ProcessAddRequest()\r\n    {\r\n        if (addRequest.Status == StatusCode.Success)\r\n        {\r\n            operationMessage = $\"包安装成功: {addRequest.Result.name}\";\r\n            lastOperationResult = PackageOperationResult.Success;\r\n            \r\n            // 记录到历史\r\n            if (enablePackageHistory)\r\n            {\r\n                AddPackageHistoryEntry(PackageOperation.Install, addRequest.Result.name, addRequest.Result.version);\r\n            }\r\n            \r\n            // 刷新包列表\r\n            RefreshPackageList();\r\n            \r\n            if (enablePackageLogging)\r\n            {\r\n                Debug.Log($\"包安装成功: {addRequest.Result.name} v{addRequest.Result.version}\");\r\n            }\r\n        }\r\n        else\r\n        {\r\n            operationMessage = $\"包安装失败: {addRequest.Error?.message}\";\r\n            lastOperationResult = PackageOperationResult.Failed;\r\n            lastOperationError = addRequest.Error?.message ?? \"未知错误\";\r\n            \r\n            Debug.LogError($\"包安装失败: {addRequest.Error?.message}\");\r\n        }\r\n        \r\n        addRequest = null;\r\n        isOperationInProgress = false;\r\n        operationProgress = 1f;\r\n        \r\n        // 更新性能数据\r\n        UpdateOperationPerformance();\r\n    }\r\n\r\n    /// <summary>\r\n    /// 处理移除请求\r\n    /// </summary>\r\n    private void ProcessRemoveRequest()\r\n    {\r\n        if (removeRequest.Status == StatusCode.Success)\r\n        {\r\n            operationMessage = $\"包卸载成功: {targetPackageName}\";\r\n            lastOperationResult = PackageOperationResult.Success;\r\n            \r\n            // 记录到历史\r\n            if (enablePackageHistory)\r\n            {\r\n                AddPackageHistoryEntry(PackageOperation.Uninstall, targetPackageName, \"\");\r\n            }\r\n            \r\n            // 刷新包列表\r\n            RefreshPackageList();\r\n            \r\n            if (enablePackageLogging)\r\n            {\r\n                Debug.Log($\"包卸载成功: {targetPackageName}\");\r\n            }\r\n        }\r\n        else\r\n        {\r\n            operationMessage = $\"包卸载失败: {removeRequest.Error?.message}\";\r\n            lastOperationResult = PackageOperationResult.Failed;\r\n            lastOperationError = removeRequest.Error?.message ?? \"未知错误\";\r\n            \r\n            Debug.LogError($\"包卸载失败: {removeRequest.Error?.message}\");\r\n        }\r\n        \r\n        removeRequest = null;\r\n        isOperationInProgress = false;\r\n        operationProgress = 1f;\r\n        \r\n        // 更新性能数据\r\n        UpdateOperationPerformance();\r\n    }\r\n\r\n    /// <summary>\r\n    /// 处理更新请求\r\n    /// </summary>\r\n    private void ProcessUpdateRequest()\r\n    {\r\n        if (updateRequest.Status == StatusCode.Success)\r\n        {\r\n            operationMessage = $\"包更新成功: {updateRequest.Result.name}\";\r\n            lastOperationResult = PackageOperationResult.Success;\r\n            \r\n            // 记录到历史\r\n            if (enablePackageHistory)\r\n            {\r\n                AddPackageHistoryEntry(PackageOperation.Update, updateRequest.Result.name, updateRequest.Result.version);\r\n            }\r\n            \r\n            // 刷新包列表\r\n            RefreshPackageList();\r\n            \r\n            if (enablePackageLogging)\r\n            {\r\n                Debug.Log($\"包更新成功: {updateRequest.Result.name} v{updateRequest.Result.version}\");\r\n            }\r\n        }\r\n        else\r\n        {\r\n            operationMessage = $\"包更新失败: {updateRequest.Error?.message}\";\r\n            lastOperationResult = PackageOperationResult.Failed;\r\n            lastOperationError = updateRequest.Error?.message ?? \"未知错误\";\r\n            \r\n            Debug.LogError($\"包更新失败: {updateRequest.Error?.message}\");\r\n        }\r\n        \r\n        updateRequest = null;\r\n        isOperationInProgress = false;\r\n        operationProgress = 1f;\r\n        \r\n        // 更新性能数据\r\n        UpdateOperationPerformance();\r\n    }\r\n\r\n    /// <summary>\r\n    /// 更新包统计\r\n    /// </summary>\r\n    private void UpdatePackageStatistics()\r\n    {\r\n        totalPackageSize = 0;\r\n        totalPackageDependencies = 0;\r\n        packageCategoryCount.Clear();\r\n        \r\n        foreach (var package in installedPackages)\r\n        {\r\n            // 统计包大小（这里只是示例，实际需要从包信息中获取）\r\n            totalPackageSize += 1024 * 1024; // 假设每个包1MB\r\n            \r\n            // 统计依赖数\r\n            if (package.dependencies != null)\r\n            {\r\n                totalPackageDependencies += package.dependencies.Length;\r\n            }\r\n            \r\n            // 统计分类\r\n            string category = GetPackageCategory(package.name);\r\n            if (!packageCategoryCount.ContainsKey(category))\r\n            {\r\n                packageCategoryCount[category] = 0;\r\n            }\r\n            packageCategoryCount[category]++;\r\n        }\r\n        \r\n        packageCategories = new string[packageCategoryCount.Count];\r\n        packageCategoryCount.Keys.CopyTo(packageCategories, 0);\r\n    }\r\n\r\n    /// <summary>\r\n    /// 获取包分类\r\n    /// </summary>\r\n    /// <param name=\"packageName\">包名称</param>\r\n    /// <returns>包分类</returns>\r\n    private string GetPackageCategory(string packageName)\r\n    {\r\n        if (packageName.StartsWith(\"com.unity.\"))\r\n        {\r\n            return \"Unity官方包\";\r\n        }\r\n        else if (packageName.StartsWith(\"com.unity.render-pipelines.\"))\r\n        {\r\n            return \"渲染管线\";\r\n        }\r\n        else if (packageName.StartsWith(\"com.unity.textmeshpro\"))\r\n        {\r\n            return \"文本系统\";\r\n        }\r\n        else if (packageName.StartsWith(\"com.unity.inputsystem\"))\r\n        {\r\n            return \"输入系统\";\r\n        }\r\n        else\r\n        {\r\n            return \"第三方包\";\r\n        }\r\n    }\r\n\r\n    /// <summary>\r\n    /// 更新操作性能数据\r\n    /// </summary>\r\n    private void UpdateOperationPerformance()\r\n    {\r\n        if (enablePerformanceMonitoring)\r\n        {\r\n            float operationTime = Time.realtimeSinceStartup - operationStartTime;\r\n            \r\n            operationTimeHistory[operationTimeIndex] = operationTime;\r\n            operationTimeIndex = (operationTimeIndex + 1) % 100;\r\n            \r\n            totalOperationTime += operationTime;\r\n            totalOperationCount++;\r\n            \r\n            if (operationTime > maxOperationTime)\r\n            {\r\n                maxOperationTime = operationTime;\r\n            }\r\n        }\r\n    }\r\n\r\n    /// <summary>\r\n    /// 更新性能监控\r\n    /// </summary>\r\n    private void UpdatePerformanceMonitoring()\r\n    {\r\n        // 计算平均操作时间\r\n        if (totalOperationCount > 0)\r\n        {\r\n            averageOperationTime = totalOperationTime / totalOperationCount;\r\n        }\r\n    }\r\n\r\n    /// <summary>\r\n    /// 刷新包列表\r\n    /// </summary>\r\n    public void RefreshPackageList()\r\n    {\r\n        if (isOperationInProgress)\r\n        {\r\n            Debug.LogWarning(\"有操作正在进行中，请等待完成\");\r\n            return;\r\n        }\r\n        \r\n        isOperationInProgress = true;\r\n        operationStartTime = Time.realtimeSinceStartup;\r\n        currentOperation = PackageOperation.List;\r\n        operationProgress = 0f;\r\n        operationMessage = \"正在加载包列表...\";\r\n        \r\n        listRequest = Client.List();\r\n        \r\n        Debug.Log(\"开始刷新包列表\");\r\n    }\r\n\r\n    /// <summary>\r\n    /// 搜索包\r\n    /// </summary>\r\n    /// <param name=\"searchTerm\">搜索词</param>\r\n    public void SearchPackages(string searchTerm)\r\n    {\r\n        if (isOperationInProgress)\r\n        {\r\n            Debug.LogWarning(\"有操作正在进行中，请等待完成\");\r\n            return;\r\n        }\r\n        \r\n        if (string.IsNullOrEmpty(searchTerm))\r\n        {\r\n            Debug.LogWarning(\"搜索词不能为空\");\r\n            return;\r\n        }\r\n        \r\n        isOperationInProgress = true;\r\n        operationStartTime = Time.realtimeSinceStartup;\r\n        currentOperation = PackageOperation.Search;\r\n        operationProgress = 0f;\r\n        operationMessage = $\"正在搜索包: {searchTerm}\";\r\n        \r\n        searchRequest = Client.Search(searchTerm);\r\n        \r\n        Debug.Log($\"开始搜索包: {searchTerm}\");\r\n    }\r\n\r\n    /// <summary>\r\n    /// 安装包\r\n    /// </summary>\r\n    /// <param name=\"packageName\">包名称</param>\r\n    /// <param name=\"version\">版本（可选）</param>\r\n    public void InstallPackage(string packageName, string version = \"\")\r\n    {\r\n        if (isOperationInProgress)\r\n        {\r\n            Debug.LogWarning(\"有操作正在进行中，请等待完成\");\r\n            return;\r\n        }\r\n        \r\n        if (string.IsNullOrEmpty(packageName))\r\n        {\r\n            Debug.LogWarning(\"包名称不能为空\");\r\n            return;\r\n        }\r\n        \r\n        isOperationInProgress = true;\r\n        operationStartTime = Time.realtimeSinceStartup;\r\n        currentOperation = PackageOperation.Install;\r\n        operationProgress = 0f;\r\n        operationMessage = $\"正在安装包: {packageName}\";\r\n        \r\n        targetPackageName = packageName;\r\n        targetPackageVersion = version;\r\n        \r\n        if (string.IsNullOrEmpty(version))\r\n        {\r\n            addRequest = Client.Add(packageName);\r\n        }\r\n        else\r\n        {\r\n            addRequest = Client.Add($\"{packageName}@{version}\");\r\n        }\r\n        \r\n        Debug.Log($\"开始安装包: {packageName} {version}\");\r\n    }\r\n\r\n    /// <summary>\r\n    /// 卸载包\r\n    /// </summary>\r\n    /// <param name=\"packageName\">包名称</param>\r\n    public void UninstallPackage(string packageName)\r\n    {\r\n        if (isOperationInProgress)\r\n        {\r\n            Debug.LogWarning(\"有操作正在进行中，请等待完成\");\r\n            return;\r\n        }\r\n        \r\n        if (string.IsNullOrEmpty(packageName))\r\n        {\r\n            Debug.LogWarning(\"包名称不能为空\");\r\n            return;\r\n        }\r\n        \r\n        isOperationInProgress = true;\r\n        operationStartTime = Time.realtimeSinceStartup;\r\n        currentOperation = PackageOperation.Uninstall;\r\n        operationProgress = 0f;\r\n        operationMessage = $\"正在卸载包: {packageName}\";\r\n        \r\n        targetPackageName = packageName;\r\n        \r\n        removeRequest = Client.Remove(packageName);\r\n        \r\n        Debug.Log($\"开始卸载包: {packageName}\");\r\n    }\r\n\r\n    /// <summary>\r\n    /// 更新包\r\n    /// </summary>\r\n    /// <param name=\"packageName\">包名称</param>\r\n    public void UpdatePackage(string packageName)\r\n    {\r\n        if (isOperationInProgress)\r\n        {\r\n            Debug.LogWarning(\"有操作正在进行中，请等待完成\");\r\n            return;\r\n        }\r\n        \r\n        if (string.IsNullOrEmpty(packageName))\r\n        {\r\n            Debug.LogWarning(\"包名称不能为空\");\r\n            return;\r\n        }\r\n        \r\n        isOperationInProgress = true;\r\n        operationStartTime = Time.realtimeSinceStartup;\r\n        currentOperation = PackageOperation.Update;\r\n        operationProgress = 0f;\r\n        operationMessage = $\"正在更新包: {packageName}\";\r\n        \r\n        targetPackageName = packageName;\r\n        \r\n        updateRequest = Client.Update(packageName);\r\n        \r\n        Debug.Log($\"开始更新包: {packageName}\");\r\n    }\r\n\r\n    /// <summary>\r\n    /// 检查过时的包\r\n    /// </summary>\r\n    public void CheckOutdatedPackages()\r\n    {\r\n        // 这里应该实现检查过时包的逻辑\r\n        // 由于Unity的包管理器API限制，这里只是示例\r\n        outdatedPackages = new PackageInfo[0];\r\n        totalOutdatedPackages = 0;\r\n        \r\n        Debug.Log(\"过时包检查完成\");\r\n    }\r\n\r\n    /// <summary>\r\n    /// 添加包历史条目\r\n    /// </summary>\r\n    /// <param name=\"operation\">操作类型</param>\r\n    /// <param name=\"packageName\">包名称</param>\r\n    /// <param name=\"version\">版本</param>\r\n    private void AddPackageHistoryEntry(PackageOperation operation, string packageName, string version)\r\n    {\r\n        var entry = new PackageHistoryEntry\r\n        {\r\n            timestamp = System.DateTime.Now.ToString(),\r\n            operation = operation.ToString(),\r\n            packageName = packageName,\r\n            version = version,\r\n            result = lastOperationResult.ToString()\r\n        };\r\n        \r\n        packageHistory[packageHistoryIndex] = entry;\r\n        packageHistoryIndex = (packageHistoryIndex + 1) % packageHistory.Length;\r\n    }\r\n\r\n    /// <summary>\r\n    /// 生成包管理报告\r\n    /// </summary>\r\n    public void GeneratePackageReport()\r\n    {\r\n        Debug.Log(\"=== 包管理系统报告 ===\");\r\n        Debug.Log($\"包管理系统状态: {packageManagerState}\");\r\n        Debug.Log($\"当前操作: {currentOperation}\");\r\n        Debug.Log($\"最后操作结果: {lastOperationResult}\");\r\n        Debug.Log($\"总已安装包数: {totalInstalledPackages}\");\r\n        Debug.Log($\"总可用包数: {totalAvailablePackages}\");\r\n        Debug.Log($\"总过时包数: {totalOutdatedPackages}\");\r\n        Debug.Log($\"总包大小: {FormatFileSize(totalPackageSize)}\");\r\n        Debug.Log($\"总包依赖数: {totalPackageDependencies}\");\r\n        Debug.Log($\"总操作次数: {totalOperationCount}\");\r\n        Debug.Log($\"平均操作时间: {averageOperationTime:F2}秒\");\r\n        Debug.Log($\"最大操作时间: {maxOperationTime:F2}秒\");\r\n        Debug.Log($\"总操作时间: {totalOperationTime:F2}秒\");\r\n        \r\n        Debug.Log(\"=== 包分类统计 ===\");\r\n        foreach (var category in packageCategories)\r\n        {\r\n            Debug.Log($\"{category}: {packageCategoryCount[category]} 个包\");\r\n        }\r\n    }\r\n\r\n    /// <summary>\r\n    /// 格式化文件大小\r\n    /// </summary>\r\n    /// <param name=\"bytes\">字节数</param>\r\n    /// <returns>格式化的文件大小字符串</returns>\r\n    private string FormatFileSize(long bytes)\r\n    {\r\n        string[] sizes = { \"B\", \"KB\", \"MB\", \"GB\" };\r\n        double len = bytes;\r\n        int order = 0;\r\n        \r\n        while (len >= 1024 && order < sizes.Length - 1)\r\n        {\r\n            order++;\r\n            len = len / 1024;\r\n        }\r\n        \r\n        return $\"{len:0.##} {sizes[order]}\";\r\n    }\r\n\r\n    /// <summary>\r\n    /// 清除包历史\r\n    /// </summary>\r\n    public void ClearPackageHistory()\r\n    {\r\n        packageHistory = new PackageHistoryEntry[10];\r\n        packageHistoryIndex = 0;\r\n        Debug.Log(\"包历史已清除\");\r\n    }\r\n\r\n    private void OnGUI()\r\n    {\r\n        GUILayout.BeginArea(new Rect(10, 10, 400, 800));\r\n        GUILayout.Label(\"PackageManager 包管理系统演示\", UnityEditor.EditorStyles.boldLabel);\r\n        \r\n        GUILayout.Space(10);\r\n        GUILayout.Label(\"包管理系统配置:\");\r\n        enablePackageManager = GUILayout.Toggle(enablePackageManager, \"启用包管理系统\");\r\n        enablePackageLogging = GUILayout.Toggle(enablePackageLogging, \"启用包管理日志\");\r\n        enablePackageValidation = GUILayout.Toggle(enablePackageValidation, \"启用包管理验证\");\r\n        enablePackageCache = GUILayout.Toggle(enablePackageCache, \"启用包管理缓存\");\r\n        enablePackageAutoUpdate = GUILayout.Toggle(enablePackageAutoUpdate, \"启用包自动更新\");\r\n        \r\n        GUILayout.Space(10);\r\n        GUILayout.Label(\"包操作:\");\r\n        targetPackageName = GUILayout.TextField(\"目标包名称\", targetPackageName);\r\n        targetPackageVersion = GUILayout.TextField(\"目标包版本\", targetPackageVersion);\r\n        packageSource = (PackageSource)System.Enum.Parse(typeof(PackageSource), GUILayout.TextField(\"包源\", packageSource.ToString()));\r\n        includePrerelease = GUILayout.Toggle(includePrerelease, \"包含预发布版本\");\r\n        includeHidden = GUILayout.Toggle(includeHidden, \"包含隐藏包\");\r\n        \r\n        GUILayout.Space(10);\r\n        GUILayout.Label(\"包状态:\");\r\n        GUILayout.Label($\"包管理器状态: {packageManagerState}\");\r\n        GUILayout.Label($\"当前操作: {currentOperation}\");\r\n        GUILayout.Label($\"操作进度: {operationProgress * 100:F1}%\");\r\n        GUILayout.Label($\"操作消息: {operationMessage}\");\r\n        GUILayout.Label($\"最后结果: {lastOperationResult}\");\r\n        GUILayout.Label($\"总已安装包数: {totalInstalledPackages}\");\r\n        GUILayout.Label($\"总可用包数: {totalAvailablePackages}\");\r\n        GUILayout.Label($\"总过时包数: {totalOutdatedPackages}\");\r\n        GUILayout.Label($\"总操作次数: {totalOperationCount}\");\r\n        GUILayout.Label($\"平均操作时间: {averageOperationTime:F2}秒\");\r\n        \r\n        GUILayout.Space(10);\r\n        \r\n        if (GUILayout.Button(\"刷新包列表\"))\r\n        {\r\n            RefreshPackageList();\r\n        }\r\n        \r\n        if (GUILayout.Button(\"搜索包\"))\r\n        {\r\n            SearchPackages(targetPackageName);\r\n        }\r\n        \r\n        if (GUILayout.Button(\"安装包\"))\r\n        {\r\n            InstallPackage(targetPackageName, targetPackageVersion);\r\n        }\r\n        \r\n        if (GUILayout.Button(\"卸载包\"))\r\n        {\r\n            UninstallPackage(targetPackageName);\r\n        }\r\n        \r\n        if (GUILayout.Button(\"更新包\"))\r\n        {\r\n            UpdatePackage(targetPackageName);\r\n        }\r\n        \r\n        if (GUILayout.Button(\"检查过时包\"))\r\n        {\r\n            CheckOutdatedPackages();\r\n        }\r\n        \r\n        if (GUILayout.Button(\"生成包管理报告\"))\r\n        {\r\n            GeneratePackageReport();\r\n        }\r\n        \r\n        if (GUILayout.Button(\"清除包历史\"))\r\n        {\r\n            ClearPackageHistory();\r\n        }\r\n        \r\n        GUILayout.Space(10);\r\n        GUILayout.Label(\"包操作历史:\");\r\n        for (int i = 0; i < packageHistory.Length; i++)\r\n        {\r\n            if (packageHistory[i] != null && !string.IsNullOrEmpty(packageHistory[i].timestamp))\r\n            {\r\n                GUILayout.Label($\"{packageHistory[i].timestamp} - {packageHistory[i].operation} - {packageHistory[i].packageName}\");\r\n            }\r\n        }\r\n        \r\n        GUILayout.EndArea();\r\n    }\r\n}\r\n\r\n/// <summary>\r\n/// 包操作类型\r\n/// </summary>\r\npublic enum PackageOperation\r\n{\r\n    None,\r\n    List,\r\n    Search,\r\n    Install,\r\n    Uninstall,\r\n    Update\r\n}\r\n\r\n/// <summary>\r\n/// 包操作结果\r\n/// </summary>\r\npublic enum PackageOperationResult\r\n{\r\n    None,\r\n    Success,\r\n    Failed,\r\n    Cancelled\r\n}\r\n\r\n/// <summary>\r\n/// 包源\r\n/// </summary>\r\npublic enum PackageSource\r\n{\r\n    Registry,\r\n    Git,\r\n    Local,\r\n    Embedded\r\n}\r\n\r\n/// <summary>\r\n/// 包历史条目\r\n/// </summary>\r\n[System.Serializable]\r\npublic class PackageHistoryEntry\r\n{\r\n    public string timestamp;\r\n    public string operation;\r\n    public string packageName;\r\n    public string version;\r\n    public string result;\r\n} "
        }
    ]
}