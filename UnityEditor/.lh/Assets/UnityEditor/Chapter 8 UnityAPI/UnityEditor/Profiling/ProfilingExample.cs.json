{
    "sourceFile": "Assets/UnityEditor/Chapter 8 UnityAPI/UnityEditor/Profiling/ProfilingExample.cs",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 5,
            "patches": [
                {
                    "date": 1750939578207,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1750939584516,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -11,9 +11,9 @@\n /// </summary>\r\n public class ProfilingExample : MonoBehaviour\r\n {\r\n     [Header(\"性能分析系统配置\")]\r\n-    [SerializeField] private bool enableProfiling = true;\r\n+    [SerializeField] private bool enableProfiling = true; // 是否启用性能分析系统\r\n     [SerializeField] private bool enableMemoryProfiling = true;\r\n     [SerializeField] private bool enableCPUProfiling = true;\r\n     [SerializeField] private bool enableGPUProfiling = true;\r\n     [SerializeField] private bool enableNetworkProfiling = true;\r\n"
                },
                {
                    "date": 1750939590347,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -12,23 +12,23 @@\n public class ProfilingExample : MonoBehaviour\r\n {\r\n     [Header(\"性能分析系统配置\")]\r\n     [SerializeField] private bool enableProfiling = true; // 是否启用性能分析系统\r\n-    [SerializeField] private bool enableMemoryProfiling = true;\r\n-    [SerializeField] private bool enableCPUProfiling = true;\r\n-    [SerializeField] private bool enableGPUProfiling = true;\r\n-    [SerializeField] private bool enableNetworkProfiling = true;\r\n-    [SerializeField] private bool enableAudioProfiling = true;\r\n-    [SerializeField] private bool enablePhysicsProfiling = true;\r\n-    [SerializeField] private bool enableRenderingProfiling = true;\r\n-    [SerializeField] private bool enableScriptingProfiling = true;\r\n-    [SerializeField] private bool enableUIProfiling = true;\r\n+    [SerializeField] private bool enableMemoryProfiling = true; // 是否启用内存分析\r\n+    [SerializeField] private bool enableCPUProfiling = true; // 是否启用CPU分析\r\n+    [SerializeField] private bool enableGPUProfiling = true; // 是否启用GPU分析\r\n+    [SerializeField] private bool enableNetworkProfiling = true; // 是否启用网络分析\r\n+    [SerializeField] private bool enableAudioProfiling = true; // 是否启用音频分析\r\n+    [SerializeField] private bool enablePhysicsProfiling = true; // 是否启用物理分析\r\n+    [SerializeField] private bool enableRenderingProfiling = true; // 是否启用渲染分析\r\n+    [SerializeField] private bool enableScriptingProfiling = true; // 是否启用脚本分析\r\n+    [SerializeField] private bool enableUIProfiling = true; // 是否启用UI分析\r\n     \r\n     [Header(\"性能监控配置\")]\r\n-    [SerializeField] private bool enableRealTimeMonitoring = true;\r\n-    [SerializeField] private bool enableFrameRateMonitoring = true;\r\n-    [SerializeField] private bool enableMemoryMonitoring = true;\r\n-    [SerializeField] private bool enablePerformanceMonitoring = true;\r\n+    [SerializeField] private bool enableRealTimeMonitoring = true; // 是否启用实时监控\r\n+    [SerializeField] private bool enableFrameRateMonitoring = true; // 是否启用帧率监控\r\n+    [SerializeField] private bool enableMemoryMonitoring = true; // 是否启用内存监控\r\n+    [SerializeField] private bool enablePerformanceMonitoring = true; // 是否启用性能监控\r\n     [SerializeField] private bool enableProfilerSampling = true;\r\n     [SerializeField] private float monitoringInterval = 0.1f; // 100ms\r\n     [SerializeField] private int maxDataPoints = 1000;\r\n     [SerializeField] private bool enableDataExport = true;\r\n"
                },
                {
                    "date": 1750939598262,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -27,19 +27,19 @@\n     [SerializeField] private bool enableRealTimeMonitoring = true; // 是否启用实时监控\r\n     [SerializeField] private bool enableFrameRateMonitoring = true; // 是否启用帧率监控\r\n     [SerializeField] private bool enableMemoryMonitoring = true; // 是否启用内存监控\r\n     [SerializeField] private bool enablePerformanceMonitoring = true; // 是否启用性能监控\r\n-    [SerializeField] private bool enableProfilerSampling = true;\r\n+    [SerializeField] private bool enableProfilerSampling = true; // 是否启用性能分析器采样\r\n     [SerializeField] private float monitoringInterval = 0.1f; // 100ms\r\n-    [SerializeField] private int maxDataPoints = 1000;\r\n-    [SerializeField] private bool enableDataExport = true;\r\n-    [SerializeField] private string exportPath = \"ProfilingData/\";\r\n+    [SerializeField] private int maxDataPoints = 1000; // 最大数据点数\r\n+    [SerializeField] private bool enableDataExport = true; // 是否启用数据导出\r\n+    [SerializeField] private string exportPath = \"ProfilingData/\"; // 数据导出路径\r\n     \r\n     [Header(\"性能状态\")]\r\n-    [SerializeField] private ProfilingStatus profilingStatus = ProfilingStatus.Idle;\r\n-    [SerializeField] private bool isProfilingActive = false;\r\n-    [SerializeField] private bool isRecording = false;\r\n-    [SerializeField] private float profilingDuration = 0f;\r\n+    [SerializeField] private ProfilingStatus profilingStatus = ProfilingStatus.Idle; // 性能分析状态\r\n+    [SerializeField] private bool isProfilingActive = false; // 是否正在性能分析\r\n+    [SerializeField] private bool isRecording = false; // 是否正在录制\r\n+    [SerializeField] private float profilingDuration = 0f; // 性能分析持续时间\r\n     [SerializeField] private int frameCount = 0;\r\n     [SerializeField] private float averageFrameTime = 0f;\r\n     [SerializeField] private float minFrameTime = float.MaxValue;\r\n     [SerializeField] private float maxFrameTime = 0f;\r\n"
                },
                {
                    "date": 1750939605827,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -38,17 +38,17 @@\n     [SerializeField] private ProfilingStatus profilingStatus = ProfilingStatus.Idle; // 性能分析状态\r\n     [SerializeField] private bool isProfilingActive = false; // 是否正在性能分析\r\n     [SerializeField] private bool isRecording = false; // 是否正在录制\r\n     [SerializeField] private float profilingDuration = 0f; // 性能分析持续时间\r\n-    [SerializeField] private int frameCount = 0;\r\n-    [SerializeField] private float averageFrameTime = 0f;\r\n-    [SerializeField] private float minFrameTime = float.MaxValue;\r\n-    [SerializeField] private float maxFrameTime = 0f;\r\n-    [SerializeField] private float targetFrameRate = 60f;\r\n-    [SerializeField] private float currentFrameRate = 0f;\r\n+    [SerializeField] private int frameCount = 0; // 帧数\r\n+    [SerializeField] private float averageFrameTime = 0f; // 平均帧时间\r\n+    [SerializeField] private float minFrameTime = float.MaxValue; // 最小帧时间\r\n+    [SerializeField] private float maxFrameTime = 0f; // 最大帧时间\r\n+    [SerializeField] private float targetFrameRate = 60f; // 目标帧率\r\n+    [SerializeField] private float currentFrameRate = 0f; // 当前帧率\r\n     \r\n     [Header(\"内存分析\")]\r\n-    [SerializeField] private MemoryInfo memoryInfo = new MemoryInfo();\r\n+    [SerializeField] private MemoryInfo memoryInfo = new MemoryInfo();//\r\n     [SerializeField] private long totalMemory = 0;\r\n     [SerializeField] private long usedMemory = 0;\r\n     [SerializeField] private long freeMemory = 0;\r\n     [SerializeField] private long reservedMemory = 0;\r\n"
                },
                {
                    "date": 1750939613380,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -46,20 +46,20 @@\n     [SerializeField] private float targetFrameRate = 60f; // 目标帧率\r\n     [SerializeField] private float currentFrameRate = 0f; // 当前帧率\r\n     \r\n     [Header(\"内存分析\")]\r\n-    [SerializeField] private MemoryInfo memoryInfo = new MemoryInfo();//\r\n-    [SerializeField] private long totalMemory = 0;\r\n-    [SerializeField] private long usedMemory = 0;\r\n-    [SerializeField] private long freeMemory = 0;\r\n-    [SerializeField] private long reservedMemory = 0;\r\n-    [SerializeField] private long systemMemory = 0;\r\n-    [SerializeField] private long graphicsMemory = 0;\r\n-    [SerializeField] private long audioMemory = 0;\r\n-    [SerializeField] private long physicsMemory = 0;\r\n-    [SerializeField] private long renderingMemory = 0;\r\n-    [SerializeField] private long scriptingMemory = 0;\r\n-    [SerializeField] private long uiMemory = 0;\r\n+    [SerializeField] private MemoryInfo memoryInfo = new MemoryInfo();//内存信息\r\n+    [SerializeField] private long totalMemory = 0; // 总内存\r\n+    [SerializeField] private long usedMemory = 0; // 已使用内存\r\n+    [SerializeField] private long freeMemory = 0; // 空闲内存\r\n+    [SerializeField] private long reservedMemory = 0; // 保留内存\r\n+    [SerializeField] private long systemMemory = 0; // 系统内存\r\n+    [SerializeField] private long graphicsMemory = 0; // 图形内存\r\n+    [SerializeField] private long audioMemory = 0; // 音频内存\r\n+    [SerializeField] private long physicsMemory = 0; // 物理内存\r\n+    [SerializeField] private long renderingMemory = 0; // 渲染内存\r\n+    [SerializeField] private long scriptingMemory = 0; // 脚本内存\r\n+    [SerializeField] private long uiMemory = 0; // UI内存\r\n     \r\n     [Header(\"CPU分析\")]\r\n     [SerializeField] private CPUInfo cpuInfo = new CPUInfo();\r\n     [SerializeField] private float cpuUsage = 0f;\r\n"
                }
            ],
            "date": 1750939578207,
            "name": "Commit-0",
            "content": "using UnityEngine;\r\nusing UnityEditor;\r\nusing UnityEditor.Profiling;\r\nusing Unity.Profiling;\r\nusing System.Collections.Generic;\r\nusing System.Text;\r\n\r\n/// <summary>\r\n/// UnityEditor.Profiling 命名空间案例演示\r\n/// 展示性能分析系统的使用，包括性能监控、分析器、内存分析等\r\n/// </summary>\r\npublic class ProfilingExample : MonoBehaviour\r\n{\r\n    [Header(\"性能分析系统配置\")]\r\n    [SerializeField] private bool enableProfiling = true;\r\n    [SerializeField] private bool enableMemoryProfiling = true;\r\n    [SerializeField] private bool enableCPUProfiling = true;\r\n    [SerializeField] private bool enableGPUProfiling = true;\r\n    [SerializeField] private bool enableNetworkProfiling = true;\r\n    [SerializeField] private bool enableAudioProfiling = true;\r\n    [SerializeField] private bool enablePhysicsProfiling = true;\r\n    [SerializeField] private bool enableRenderingProfiling = true;\r\n    [SerializeField] private bool enableScriptingProfiling = true;\r\n    [SerializeField] private bool enableUIProfiling = true;\r\n    \r\n    [Header(\"性能监控配置\")]\r\n    [SerializeField] private bool enableRealTimeMonitoring = true;\r\n    [SerializeField] private bool enableFrameRateMonitoring = true;\r\n    [SerializeField] private bool enableMemoryMonitoring = true;\r\n    [SerializeField] private bool enablePerformanceMonitoring = true;\r\n    [SerializeField] private bool enableProfilerSampling = true;\r\n    [SerializeField] private float monitoringInterval = 0.1f; // 100ms\r\n    [SerializeField] private int maxDataPoints = 1000;\r\n    [SerializeField] private bool enableDataExport = true;\r\n    [SerializeField] private string exportPath = \"ProfilingData/\";\r\n    \r\n    [Header(\"性能状态\")]\r\n    [SerializeField] private ProfilingStatus profilingStatus = ProfilingStatus.Idle;\r\n    [SerializeField] private bool isProfilingActive = false;\r\n    [SerializeField] private bool isRecording = false;\r\n    [SerializeField] private float profilingDuration = 0f;\r\n    [SerializeField] private int frameCount = 0;\r\n    [SerializeField] private float averageFrameTime = 0f;\r\n    [SerializeField] private float minFrameTime = float.MaxValue;\r\n    [SerializeField] private float maxFrameTime = 0f;\r\n    [SerializeField] private float targetFrameRate = 60f;\r\n    [SerializeField] private float currentFrameRate = 0f;\r\n    \r\n    [Header(\"内存分析\")]\r\n    [SerializeField] private MemoryInfo memoryInfo = new MemoryInfo();\r\n    [SerializeField] private long totalMemory = 0;\r\n    [SerializeField] private long usedMemory = 0;\r\n    [SerializeField] private long freeMemory = 0;\r\n    [SerializeField] private long reservedMemory = 0;\r\n    [SerializeField] private long systemMemory = 0;\r\n    [SerializeField] private long graphicsMemory = 0;\r\n    [SerializeField] private long audioMemory = 0;\r\n    [SerializeField] private long physicsMemory = 0;\r\n    [SerializeField] private long renderingMemory = 0;\r\n    [SerializeField] private long scriptingMemory = 0;\r\n    [SerializeField] private long uiMemory = 0;\r\n    \r\n    [Header(\"CPU分析\")]\r\n    [SerializeField] private CPUInfo cpuInfo = new CPUInfo();\r\n    [SerializeField] private float cpuUsage = 0f;\r\n    [SerializeField] private float mainThreadTime = 0f;\r\n    [SerializeField] private float renderThreadTime = 0f;\r\n    [SerializeField] private float physicsThreadTime = 0f;\r\n    [SerializeField] private float audioThreadTime = 0f;\r\n    [SerializeField] private float networkThreadTime = 0f;\r\n    [SerializeField] private float uiThreadTime = 0f;\r\n    [SerializeField] private float scriptingTime = 0f;\r\n    [SerializeField] private float renderingTime = 0f;\r\n    [SerializeField] private float physicsTime = 0f;\r\n    [SerializeField] private float audioTime = 0f;\r\n    \r\n    [Header(\"GPU分析\")]\r\n    [SerializeField] private GPUInfo gpuInfo = new GPUInfo();\r\n    [SerializeField] private float gpuUsage = 0f;\r\n    [SerializeField] private float gpuMemoryUsage = 0f;\r\n    [SerializeField] private int drawCalls = 0;\r\n    [SerializeField] private int triangles = 0;\r\n    [SerializeField] private int vertices = 0;\r\n    [SerializeField] private int batches = 0;\r\n    [SerializeField] private float fillRate = 0f;\r\n    [SerializeField] private float pixelFillRate = 0f;\r\n    [SerializeField] private float vertexFillRate = 0f;\r\n    \r\n    [Header(\"性能数据\")]\r\n    [SerializeField] private PerformanceData[] performanceHistory = new PerformanceData[1000];\r\n    [SerializeField] private int dataIndex = 0;\r\n    [SerializeField] private bool enableDataCollection = true;\r\n    [SerializeField] private float[] frameTimeHistory = new float[1000];\r\n    [SerializeField] private float[] memoryHistory = new float[1000];\r\n    [SerializeField] private float[] cpuHistory = new float[1000];\r\n    [SerializeField] private float[] gpuHistory = new float[1000];\r\n    \r\n    [Header(\"性能统计\")]\r\n    [SerializeField] private PerformanceStatistics statistics = new PerformanceStatistics();\r\n    [SerializeField] private Dictionary<string, float> functionTimings = new Dictionary<string, float>();\r\n    [SerializeField] private Dictionary<string, int> functionCallCounts = new Dictionary<string, int>();\r\n    [SerializeField] private List<PerformanceIssue> performanceIssues = new List<PerformanceIssue>();\r\n    [SerializeField] private List<PerformanceRecommendation> recommendations = new List<PerformanceRecommendation>();\r\n    \r\n    [Header(\"分析器配置\")]\r\n    [SerializeField] private bool enableProfilerWindow = true;\r\n    [SerializeField] private bool enableDeepProfiling = false;\r\n    [SerializeField] private bool enableCallstackSampling = false;\r\n    [SerializeField] private bool enableMemoryProfiler = true;\r\n    [SerializeField] private bool enableFrameDebugger = true;\r\n    [SerializeField] private bool enableAudioProfiler = true;\r\n    [SerializeField] private bool enablePhysicsProfiler = true;\r\n    [SerializeField] private bool enableNetworkProfiler = true;\r\n    \r\n    [Header(\"性能阈值\")]\r\n    [SerializeField] private float frameTimeThreshold = 16.67f; // 60 FPS\r\n    [SerializeField] private float memoryThreshold = 1024f; // 1GB\r\n    [SerializeField] private float cpuThreshold = 80f; // 80%\r\n    [SerializeField] private float gpuThreshold = 80f; // 80%\r\n    [SerializeField] private int drawCallThreshold = 1000;\r\n    [SerializeField] private int triangleThreshold = 100000;\r\n    \r\n    private bool isInitialized = false;\r\n    private float lastMonitoringTime = 0f;\r\n    private float profilingStartTime = 0f;\r\n    private ProfilerRecorder[] profilerRecorders;\r\n    private StringBuilder reportBuilder = new StringBuilder();\r\n\r\n    private void Start()\r\n    {\r\n        InitializeProfiling();\r\n    }\r\n\r\n    private void InitializeProfiling()\r\n    {\r\n        if (!enableProfiling) return;\r\n        \r\n        InitializeProfilerRecorders();\r\n        InitializePerformanceData();\r\n        InitializeStatistics();\r\n        SetupProfilerCallbacks();\r\n        \r\n        isInitialized = true;\r\n        profilingStatus = ProfilingStatus.Idle;\r\n        Debug.Log(\"性能分析系统初始化完成\");\r\n    }\r\n\r\n    private void InitializeProfilerRecorders()\r\n    {\r\n        if (enableProfilerSampling)\r\n        {\r\n            profilerRecorders = new ProfilerRecorder[]\r\n            {\r\n                ProfilerRecorder.StartNew(ProfilerCategory.Render, \"Total\"),\r\n                ProfilerRecorder.StartNew(ProfilerCategory.Scripts, \"Total\"),\r\n                ProfilerRecorder.StartNew(ProfilerCategory.Physics, \"Total\"),\r\n                ProfilerRecorder.StartNew(ProfilerCategory.Audio, \"Total\"),\r\n                ProfilerRecorder.StartNew(ProfilerCategory.UI, \"Total\"),\r\n                ProfilerRecorder.StartNew(ProfilerCategory.GC, \"Total\"),\r\n                ProfilerRecorder.StartNew(ProfilerCategory.Memory, \"Total\"),\r\n                ProfilerRecorder.StartNew(ProfilerCategory.Internal, \"Total\")\r\n            };\r\n            \r\n            Debug.Log(\"性能分析器记录器初始化完成\");\r\n        }\r\n    }\r\n\r\n    private void InitializePerformanceData()\r\n    {\r\n        performanceHistory = new PerformanceData[maxDataPoints];\r\n        frameTimeHistory = new float[maxDataPoints];\r\n        memoryHistory = new float[maxDataPoints];\r\n        cpuHistory = new float[maxDataPoints];\r\n        gpuHistory = new float[maxDataPoints];\r\n        \r\n        dataIndex = 0;\r\n        frameCount = 0;\r\n        averageFrameTime = 0f;\r\n        minFrameTime = float.MaxValue;\r\n        maxFrameTime = 0f;\r\n        currentFrameRate = 0f;\r\n        \r\n        Debug.Log(\"性能数据初始化完成\");\r\n    }\r\n\r\n    private void InitializeStatistics()\r\n    {\r\n        statistics = new PerformanceStatistics();\r\n        functionTimings.Clear();\r\n        functionCallCounts.Clear();\r\n        performanceIssues.Clear();\r\n        recommendations.Clear();\r\n        \r\n        Debug.Log(\"性能统计初始化完成\");\r\n    }\r\n\r\n    private void SetupProfilerCallbacks()\r\n    {\r\n        // 设置性能分析器回调\r\n        if (enableProfilerWindow)\r\n        {\r\n            Profiler.enabled = true;\r\n        }\r\n        \r\n        Debug.Log(\"性能分析器回调设置完成\");\r\n    }\r\n\r\n    private void Update()\r\n    {\r\n        if (!isInitialized) return;\r\n        \r\n        UpdateProfilingStatus();\r\n        UpdatePerformanceData();\r\n        UpdateMemoryInfo();\r\n        UpdateCPUInfo();\r\n        UpdateGPUInfo();\r\n        \r\n        if (enableRealTimeMonitoring && Time.time - lastMonitoringTime > monitoringInterval)\r\n        {\r\n            CollectPerformanceData();\r\n            lastMonitoringTime = Time.time;\r\n        }\r\n        \r\n        if (isRecording)\r\n        {\r\n            UpdateRecording();\r\n        }\r\n        \r\n        CheckPerformanceThresholds();\r\n    }\r\n\r\n    private void UpdateProfilingStatus()\r\n    {\r\n        if (isRecording)\r\n        {\r\n            profilingStatus = ProfilingStatus.Recording;\r\n            profilingDuration = Time.time - profilingStartTime;\r\n        }\r\n        else if (isProfilingActive)\r\n        {\r\n            profilingStatus = ProfilingStatus.Active;\r\n        }\r\n        else\r\n        {\r\n            profilingStatus = ProfilingStatus.Idle;\r\n        }\r\n    }\r\n\r\n    private void UpdatePerformanceData()\r\n    {\r\n        frameCount++;\r\n        \r\n        float frameTime = Time.unscaledDeltaTime * 1000f; // 转换为毫秒\r\n        averageFrameTime = (averageFrameTime * (frameCount - 1) + frameTime) / frameCount;\r\n        \r\n        if (frameTime < minFrameTime)\r\n        {\r\n            minFrameTime = frameTime;\r\n        }\r\n        \r\n        if (frameTime > maxFrameTime)\r\n        {\r\n            maxFrameTime = frameTime;\r\n        }\r\n        \r\n        currentFrameRate = 1f / Time.unscaledDeltaTime;\r\n        \r\n        // 更新帧时间历史\r\n        if (enableDataCollection)\r\n        {\r\n            frameTimeHistory[dataIndex] = frameTime;\r\n        }\r\n    }\r\n\r\n    private void UpdateMemoryInfo()\r\n    {\r\n        if (enableMemoryProfiling)\r\n        {\r\n            memoryInfo.totalMemory = SystemInfo.systemMemorySize * 1024L * 1024L;\r\n            memoryInfo.usedMemory = SystemInfo.systemMemorySize * 1024L * 1024L - SystemInfo.systemMemorySize * 1024L * 1024L;\r\n            memoryInfo.freeMemory = SystemInfo.systemMemorySize * 1024L * 1024L;\r\n            memoryInfo.reservedMemory = Profiler.GetTotalReservedMemoryLong();\r\n            memoryInfo.systemMemory = SystemInfo.systemMemorySize * 1024L * 1024L;\r\n            memoryInfo.graphicsMemory = SystemInfo.graphicsMemorySize * 1024L * 1024L;\r\n            \r\n            totalMemory = memoryInfo.totalMemory;\r\n            usedMemory = memoryInfo.usedMemory;\r\n            freeMemory = memoryInfo.freeMemory;\r\n            reservedMemory = memoryInfo.reservedMemory;\r\n            systemMemory = memoryInfo.systemMemory;\r\n            graphicsMemory = memoryInfo.graphicsMemory;\r\n            \r\n            // 估算其他内存使用\r\n            audioMemory = Profiler.GetMonoUsedSizeLong() / 4;\r\n            physicsMemory = Profiler.GetMonoUsedSizeLong() / 8;\r\n            renderingMemory = graphicsMemory / 2;\r\n            scriptingMemory = Profiler.GetMonoUsedSizeLong();\r\n            uiMemory = Profiler.GetMonoUsedSizeLong() / 6;\r\n        }\r\n    }\r\n\r\n    private void UpdateCPUInfo()\r\n    {\r\n        if (enableCPUProfiling)\r\n        {\r\n            // 获取CPU使用情况\r\n            cpuUsage = SystemInfo.processorCount > 0 ? \r\n                (float)SystemInfo.processorCount / 100f : 0f;\r\n            \r\n            // 获取各线程时间（估算）\r\n            mainThreadTime = Time.unscaledDeltaTime * 1000f;\r\n            renderThreadTime = mainThreadTime * 0.3f;\r\n            physicsThreadTime = mainThreadTime * 0.2f;\r\n            audioThreadTime = mainThreadTime * 0.1f;\r\n            networkThreadTime = mainThreadTime * 0.05f;\r\n            uiThreadTime = mainThreadTime * 0.1f;\r\n            \r\n            // 更新CPU信息\r\n            cpuInfo.usage = cpuUsage;\r\n            cpuInfo.mainThreadTime = mainThreadTime;\r\n            cpuInfo.renderThreadTime = renderThreadTime;\r\n            cpuInfo.physicsThreadTime = physicsThreadTime;\r\n            cpuInfo.audioThreadTime = audioThreadTime;\r\n            cpuInfo.networkThreadTime = networkThreadTime;\r\n            cpuInfo.uiThreadTime = uiThreadTime;\r\n            \r\n            // 从性能分析器获取更精确的数据\r\n            if (profilerRecorders != null && profilerRecorders.Length > 0)\r\n            {\r\n                scriptingTime = profilerRecorders[1].GetValue(0) / 1000000f; // 转换为毫秒\r\n                renderingTime = profilerRecorders[0].GetValue(0) / 1000000f;\r\n                physicsTime = profilerRecorders[2].GetValue(0) / 1000000f;\r\n                audioTime = profilerRecorders[3].GetValue(0) / 1000000f;\r\n                uiTime = profilerRecorders[4].GetValue(0) / 1000000f;\r\n            }\r\n        }\r\n    }\r\n\r\n    private void UpdateGPUInfo()\r\n    {\r\n        if (enableGPUProfiling)\r\n        {\r\n            // 获取GPU信息\r\n            gpuInfo.name = SystemInfo.graphicsDeviceName;\r\n            gpuInfo.memorySize = SystemInfo.graphicsMemorySize * 1024L * 1024L;\r\n            gpuInfo.api = SystemInfo.graphicsDeviceType.ToString();\r\n            gpuInfo.version = SystemInfo.graphicsDeviceVersion;\r\n            \r\n            // 估算GPU使用情况\r\n            gpuUsage = (renderingTime / mainThreadTime) * 100f;\r\n            gpuMemoryUsage = (float)graphicsMemory / gpuInfo.memorySize * 100f;\r\n            \r\n            // 获取渲染统计\r\n            drawCalls = UnityEngine.Rendering.Universal.UniversalRenderPipeline.asset != null ? \r\n                UnityEngine.Rendering.Universal.UniversalRenderPipeline.asset.supportsCameraOpaqueTexture ? 100 : 50 : 0;\r\n            triangles = drawCalls * 1000; // 估算\r\n            vertices = triangles * 3;\r\n            batches = drawCalls;\r\n            \r\n            // 计算填充率\r\n            fillRate = drawCalls / 60f; // 每帧绘制调用\r\n            pixelFillRate = (Screen.width * Screen.height) / 1000000f; // 百万像素\r\n            vertexFillRate = vertices / 1000f; // 千顶点\r\n            \r\n            gpuInfo.usage = gpuUsage;\r\n            gpuInfo.memoryUsage = gpuMemoryUsage;\r\n            gpuInfo.drawCalls = drawCalls;\r\n            gpuInfo.triangles = triangles;\r\n            gpuInfo.vertices = vertices;\r\n            gpuInfo.batches = batches;\r\n            gpuInfo.fillRate = fillRate;\r\n            gpuInfo.pixelFillRate = pixelFillRate;\r\n            gpuInfo.vertexFillRate = vertexFillRate;\r\n        }\r\n    }\r\n\r\n    private void CollectPerformanceData()\r\n    {\r\n        if (!enableDataCollection) return;\r\n        \r\n        var data = new PerformanceData\r\n        {\r\n            timestamp = Time.time,\r\n            frameTime = Time.unscaledDeltaTime * 1000f,\r\n            frameRate = currentFrameRate,\r\n            memoryUsage = usedMemory,\r\n            cpuUsage = cpuUsage,\r\n            gpuUsage = gpuUsage,\r\n            drawCalls = drawCalls,\r\n            triangles = triangles,\r\n            vertices = vertices\r\n        };\r\n        \r\n        performanceHistory[dataIndex] = data;\r\n        memoryHistory[dataIndex] = usedMemory / (1024f * 1024f); // 转换为MB\r\n        cpuHistory[dataIndex] = cpuUsage;\r\n        gpuHistory[dataIndex] = gpuUsage;\r\n        \r\n        dataIndex = (dataIndex + 1) % maxDataPoints;\r\n        \r\n        // 更新统计信息\r\n        UpdateStatistics(data);\r\n    }\r\n\r\n    private void UpdateStatistics(PerformanceData data)\r\n    {\r\n        statistics.totalFrames++;\r\n        statistics.totalFrameTime += data.frameTime;\r\n        statistics.totalMemoryUsage += data.memoryUsage;\r\n        statistics.totalCPUUsage += data.cpuUsage;\r\n        statistics.totalGPUUsage += data.gpuUsage;\r\n        statistics.totalDrawCalls += data.drawCalls;\r\n        statistics.totalTriangles += data.triangles;\r\n        statistics.totalVertices += data.vertices;\r\n        \r\n        if (data.frameTime > statistics.maxFrameTime)\r\n        {\r\n            statistics.maxFrameTime = data.frameTime;\r\n        }\r\n        \r\n        if (data.frameTime < statistics.minFrameTime)\r\n        {\r\n            statistics.minFrameTime = data.frameTime;\r\n        }\r\n        \r\n        if (data.memoryUsage > statistics.maxMemoryUsage)\r\n        {\r\n            statistics.maxMemoryUsage = data.memoryUsage;\r\n        }\r\n        \r\n        if (data.cpuUsage > statistics.maxCPUUsage)\r\n        {\r\n            statistics.maxCPUUsage = data.cpuUsage;\r\n        }\r\n        \r\n        if (data.gpuUsage > statistics.maxGPUUsage)\r\n        {\r\n            statistics.maxGPUUsage = data.gpuUsage;\r\n        }\r\n        \r\n        // 计算平均值\r\n        statistics.averageFrameTime = statistics.totalFrameTime / statistics.totalFrames;\r\n        statistics.averageMemoryUsage = statistics.totalMemoryUsage / statistics.totalFrames;\r\n        statistics.averageCPUUsage = statistics.totalCPUUsage / statistics.totalFrames;\r\n        statistics.averageGPUUsage = statistics.totalGPUUsage / statistics.totalFrames;\r\n        statistics.averageDrawCalls = statistics.totalDrawCalls / statistics.totalFrames;\r\n        statistics.averageTriangles = statistics.totalTriangles / statistics.totalFrames;\r\n        statistics.averageVertices = statistics.totalVertices / statistics.totalFrames;\r\n    }\r\n\r\n    private void UpdateRecording()\r\n    {\r\n        if (isRecording)\r\n        {\r\n            // 记录性能数据\r\n            CollectPerformanceData();\r\n            \r\n            // 检查是否达到记录时间限制\r\n            if (profilingDuration > 300f) // 5分钟\r\n            {\r\n                StopRecording();\r\n            }\r\n        }\r\n    }\r\n\r\n    private void CheckPerformanceThresholds()\r\n    {\r\n        performanceIssues.Clear();\r\n        \r\n        // 检查帧时间\r\n        if (averageFrameTime > frameTimeThreshold)\r\n        {\r\n            performanceIssues.Add(new PerformanceIssue\r\n            {\r\n                type = PerformanceIssueType.FrameTime,\r\n                severity = PerformanceIssueSeverity.Warning,\r\n                message = $\"帧时间过高: {averageFrameTime:F2}ms (阈值: {frameTimeThreshold}ms)\",\r\n                recommendation = \"优化渲染管线或减少绘制调用\"\r\n            });\r\n        }\r\n        \r\n        // 检查内存使用\r\n        if (usedMemory > memoryThreshold * 1024 * 1024)\r\n        {\r\n            performanceIssues.Add(new PerformanceIssue\r\n            {\r\n                type = PerformanceIssueType.Memory,\r\n                severity = PerformanceIssueSeverity.Warning,\r\n                message = $\"内存使用过高: {usedMemory / (1024 * 1024):F1}MB (阈值: {memoryThreshold}MB)\",\r\n                recommendation = \"检查内存泄漏或优化资源管理\"\r\n            });\r\n        }\r\n        \r\n        // 检查CPU使用\r\n        if (cpuUsage > cpuThreshold)\r\n        {\r\n            performanceIssues.Add(new PerformanceIssue\r\n            {\r\n                type = PerformanceIssueType.CPU,\r\n                severity = PerformanceIssueSeverity.Warning,\r\n                message = $\"CPU使用过高: {cpuUsage:F1}% (阈值: {cpuThreshold}%)\",\r\n                recommendation = \"优化脚本性能或减少计算量\"\r\n            });\r\n        }\r\n        \r\n        // 检查GPU使用\r\n        if (gpuUsage > gpuThreshold)\r\n        {\r\n            performanceIssues.Add(new PerformanceIssue\r\n            {\r\n                type = PerformanceIssueType.GPU,\r\n                severity = PerformanceIssueSeverity.Warning,\r\n                message = $\"GPU使用过高: {gpuUsage:F1}% (阈值: {gpuThreshold}%)\",\r\n                recommendation = \"优化渲染或减少图形复杂度\"\r\n            });\r\n        }\r\n        \r\n        // 检查绘制调用\r\n        if (drawCalls > drawCallThreshold)\r\n        {\r\n            performanceIssues.Add(new PerformanceIssue\r\n            {\r\n                type = PerformanceIssueType.DrawCalls,\r\n                severity = PerformanceIssueSeverity.Warning,\r\n                message = $\"绘制调用过多: {drawCalls} (阈值: {drawCallThreshold})\",\r\n                recommendation = \"合并网格或使用批处理\"\r\n            });\r\n        }\r\n        \r\n        // 检查三角形数量\r\n        if (triangles > triangleThreshold)\r\n        {\r\n            performanceIssues.Add(new PerformanceIssue\r\n            {\r\n                type = PerformanceIssueType.Triangles,\r\n                severity = PerformanceIssueSeverity.Warning,\r\n                message = $\"三角形数量过多: {triangles} (阈值: {triangleThreshold})\",\r\n                recommendation = \"简化网格或使用LOD\"\r\n            });\r\n        }\r\n    }\r\n\r\n    public void StartProfiling()\r\n    {\r\n        if (isProfilingActive)\r\n        {\r\n            Debug.LogWarning(\"性能分析已在进行中\");\r\n            return;\r\n        }\r\n        \r\n        isProfilingActive = true;\r\n        profilingStatus = ProfilingStatus.Active;\r\n        \r\n        Debug.Log(\"性能分析已开始\");\r\n    }\r\n\r\n    public void StopProfiling()\r\n    {\r\n        if (!isProfilingActive)\r\n        {\r\n            Debug.LogWarning(\"性能分析未在进行中\");\r\n            return;\r\n        }\r\n        \r\n        isProfilingActive = false;\r\n        profilingStatus = ProfilingStatus.Idle;\r\n        \r\n        Debug.Log(\"性能分析已停止\");\r\n    }\r\n\r\n    public void StartRecording()\r\n    {\r\n        if (isRecording)\r\n        {\r\n            Debug.LogWarning(\"性能记录已在进行中\");\r\n            return;\r\n        }\r\n        \r\n        isRecording = true;\r\n        profilingStartTime = Time.time;\r\n        profilingDuration = 0f;\r\n        profilingStatus = ProfilingStatus.Recording;\r\n        \r\n        Debug.Log(\"性能记录已开始\");\r\n    }\r\n\r\n    public void StopRecording()\r\n    {\r\n        if (!isRecording)\r\n        {\r\n            Debug.LogWarning(\"性能记录未在进行中\");\r\n            return;\r\n        }\r\n        \r\n        isRecording = false;\r\n        profilingStatus = ProfilingStatus.Idle;\r\n        \r\n        Debug.Log($\"性能记录已停止，持续时间: {profilingDuration:F2}秒\");\r\n    }\r\n\r\n    public void GeneratePerformanceReport()\r\n    {\r\n        reportBuilder.Clear();\r\n        reportBuilder.AppendLine(\"=== 性能分析报告 ===\");\r\n        reportBuilder.AppendLine($\"生成时间: {System.DateTime.Now}\");\r\n        reportBuilder.AppendLine($\"分析持续时间: {profilingDuration:F2}秒\");\r\n        reportBuilder.AppendLine($\"总帧数: {frameCount}\");\r\n        reportBuilder.AppendLine();\r\n        \r\n        reportBuilder.AppendLine(\"=== 性能统计 ===\");\r\n        reportBuilder.AppendLine($\"平均帧时间: {averageFrameTime:F2}ms\");\r\n        reportBuilder.AppendLine($\"最小帧时间: {minFrameTime:F2}ms\");\r\n        reportBuilder.AppendLine($\"最大帧时间: {maxFrameTime:F2}ms\");\r\n        reportBuilder.AppendLine($\"当前帧率: {currentFrameRate:F1} FPS\");\r\n        reportBuilder.AppendLine($\"目标帧率: {targetFrameRate} FPS\");\r\n        reportBuilder.AppendLine();\r\n        \r\n        reportBuilder.AppendLine(\"=== 内存使用 ===\");\r\n        reportBuilder.AppendLine($\"总内存: {FormatFileSize(totalMemory)}\");\r\n        reportBuilder.AppendLine($\"已用内存: {FormatFileSize(usedMemory)}\");\r\n        reportBuilder.AppendLine($\"空闲内存: {FormatFileSize(freeMemory)}\");\r\n        reportBuilder.AppendLine($\"保留内存: {FormatFileSize(reservedMemory)}\");\r\n        reportBuilder.AppendLine($\"系统内存: {FormatFileSize(systemMemory)}\");\r\n        reportBuilder.AppendLine($\"图形内存: {FormatFileSize(graphicsMemory)}\");\r\n        reportBuilder.AppendLine();\r\n        \r\n        reportBuilder.AppendLine(\"=== CPU使用 ===\");\r\n        reportBuilder.AppendLine($\"CPU使用率: {cpuUsage:F1}%\");\r\n        reportBuilder.AppendLine($\"主线程时间: {mainThreadTime:F2}ms\");\r\n        reportBuilder.AppendLine($\"渲染线程时间: {renderThreadTime:F2}ms\");\r\n        reportBuilder.AppendLine($\"物理线程时间: {physicsThreadTime:F2}ms\");\r\n        reportBuilder.AppendLine($\"音频线程时间: {audioThreadTime:F2}ms\");\r\n        reportBuilder.AppendLine($\"脚本时间: {scriptingTime:F2}ms\");\r\n        reportBuilder.AppendLine($\"渲染时间: {renderingTime:F2}ms\");\r\n        reportBuilder.AppendLine();\r\n        \r\n        reportBuilder.AppendLine(\"=== GPU使用 ===\");\r\n        reportBuilder.AppendLine($\"GPU名称: {gpuInfo.name}\");\r\n        reportBuilder.AppendLine($\"GPU内存: {FormatFileSize(gpuInfo.memorySize)}\");\r\n        reportBuilder.AppendLine($\"GPU使用率: {gpuUsage:F1}%\");\r\n        reportBuilder.AppendLine($\"GPU内存使用率: {gpuMemoryUsage:F1}%\");\r\n        reportBuilder.AppendLine($\"绘制调用: {drawCalls}\");\r\n        reportBuilder.AppendLine($\"三角形数量: {triangles}\");\r\n        reportBuilder.AppendLine($\"顶点数量: {vertices}\");\r\n        reportBuilder.AppendLine($\"批处理数量: {batches}\");\r\n        reportBuilder.AppendLine();\r\n        \r\n        reportBuilder.AppendLine(\"=== 性能问题 ===\");\r\n        if (performanceIssues.Count > 0)\r\n        {\r\n            foreach (var issue in performanceIssues)\r\n            {\r\n                reportBuilder.AppendLine($\"[{issue.severity}] {issue.message}\");\r\n                reportBuilder.AppendLine($\"建议: {issue.recommendation}\");\r\n                reportBuilder.AppendLine();\r\n            }\r\n        }\r\n        else\r\n        {\r\n            reportBuilder.AppendLine(\"未发现性能问题\");\r\n            reportBuilder.AppendLine();\r\n        }\r\n        \r\n        reportBuilder.AppendLine(\"=== 性能建议 ===\");\r\n        GenerateRecommendations();\r\n        foreach (var recommendation in recommendations)\r\n        {\r\n            reportBuilder.AppendLine($\"[{recommendation.priority}] {recommendation.description}\");\r\n        }\r\n        \r\n        string report = reportBuilder.ToString();\r\n        Debug.Log(report);\r\n        \r\n        if (enableDataExport)\r\n        {\r\n            ExportReport(report);\r\n        }\r\n    }\r\n\r\n    private void GenerateRecommendations()\r\n    {\r\n        recommendations.Clear();\r\n        \r\n        if (averageFrameTime > 16.67f)\r\n        {\r\n            recommendations.Add(new PerformanceRecommendation\r\n            {\r\n                priority = RecommendationPriority.High,\r\n                description = \"帧时间超过16.67ms，建议优化渲染性能\"\r\n            });\r\n        }\r\n        \r\n        if (drawCalls > 1000)\r\n        {\r\n            recommendations.Add(new PerformanceRecommendation\r\n            {\r\n                priority = RecommendationPriority.Medium,\r\n                description = \"绘制调用过多，建议使用批处理或合并网格\"\r\n            });\r\n        }\r\n        \r\n        if (usedMemory > 1024 * 1024 * 1024) // 1GB\r\n        {\r\n            recommendations.Add(new PerformanceRecommendation\r\n            {\r\n                priority = RecommendationPriority.High,\r\n                description = \"内存使用过高，建议检查内存泄漏\"\r\n            });\r\n        }\r\n        \r\n        if (cpuUsage > 80f)\r\n        {\r\n            recommendations.Add(new PerformanceRecommendation\r\n            {\r\n                priority = RecommendationPriority.Medium,\r\n                description = \"CPU使用率过高，建议优化脚本性能\"\r\n            });\r\n        }\r\n        \r\n        if (gpuUsage > 80f)\r\n        {\r\n            recommendations.Add(new PerformanceRecommendation\r\n            {\r\n                priority = RecommendationPriority.Medium,\r\n                description = \"GPU使用率过高，建议优化渲染设置\"\r\n            });\r\n        }\r\n    }\r\n\r\n    private void ExportReport(string report)\r\n    {\r\n        try\r\n        {\r\n            string fileName = $\"PerformanceReport_{System.DateTime.Now:yyyyMMdd_HHmmss}.txt\";\r\n            string filePath = System.IO.Path.Combine(exportPath, fileName);\r\n            \r\n            System.IO.Directory.CreateDirectory(exportPath);\r\n            System.IO.File.WriteAllText(filePath, report);\r\n            \r\n            Debug.Log($\"性能报告已导出: {filePath}\");\r\n        }\r\n        catch (System.Exception e)\r\n        {\r\n            Debug.LogError($\"导出性能报告失败: {e.Message}\");\r\n        }\r\n    }\r\n\r\n    public void OpenProfilerWindow()\r\n    {\r\n        if (enableProfilerWindow)\r\n        {\r\n            EditorWindow.GetWindow<UnityEditor.ProfilerWindow>();\r\n            Debug.Log(\"性能分析器窗口已打开\");\r\n        }\r\n    }\r\n\r\n    public void OpenMemoryProfiler()\r\n    {\r\n        if (enableMemoryProfiler)\r\n        {\r\n            EditorWindow.GetWindow<UnityEditor.MemoryProfilerWindow>();\r\n            Debug.Log(\"内存分析器窗口已打开\");\r\n        }\r\n    }\r\n\r\n    public void OpenFrameDebugger()\r\n    {\r\n        if (enableFrameDebugger)\r\n        {\r\n            EditorWindow.GetWindow<UnityEditor.FrameDebuggerWindow>();\r\n            Debug.Log(\"帧调试器窗口已打开\");\r\n        }\r\n    }\r\n\r\n    public void ResetProfilingData()\r\n    {\r\n        InitializePerformanceData();\r\n        InitializeStatistics();\r\n        performanceIssues.Clear();\r\n        recommendations.Clear();\r\n        \r\n        Debug.Log(\"性能分析数据已重置\");\r\n    }\r\n\r\n    private string FormatFileSize(long bytes)\r\n    {\r\n        string[] sizes = { \"B\", \"KB\", \"MB\", \"GB\" };\r\n        double len = bytes;\r\n        int order = 0;\r\n        \r\n        while (len >= 1024 && order < sizes.Length - 1)\r\n        {\r\n            order++;\r\n            len = len / 1024;\r\n        }\r\n        \r\n        return $\"{len:0.##} {sizes[order]}\";\r\n    }\r\n\r\n    private void OnDestroy()\r\n    {\r\n        if (profilerRecorders != null)\r\n        {\r\n            foreach (var recorder in profilerRecorders)\r\n            {\r\n                recorder.Dispose();\r\n            }\r\n        }\r\n        \r\n        Debug.Log(\"性能分析器记录器已清理\");\r\n    }\r\n\r\n    private void OnGUI()\r\n    {\r\n        GUILayout.BeginArea(new Rect(10, 10, 400, 800));\r\n        GUILayout.Label(\"Profiling 性能分析系统演示\", UnityEditor.EditorStyles.boldLabel);\r\n        \r\n        GUILayout.Space(10);\r\n        GUILayout.Label(\"性能分析系统配置:\");\r\n        enableProfiling = GUILayout.Toggle(enableProfiling, \"启用性能分析\");\r\n        enableMemoryProfiling = GUILayout.Toggle(enableMemoryProfiling, \"启用内存分析\");\r\n        enableCPUProfiling = GUILayout.Toggle(enableCPUProfiling, \"启用CPU分析\");\r\n        enableGPUProfiling = GUILayout.Toggle(enableGPUProfiling, \"启用GPU分析\");\r\n        enableRealTimeMonitoring = GUILayout.Toggle(enableRealTimeMonitoring, \"启用实时监控\");\r\n        enableDataCollection = GUILayout.Toggle(enableDataCollection, \"启用数据收集\");\r\n        \r\n        GUILayout.Space(10);\r\n        GUILayout.Label(\"性能状态:\");\r\n        GUILayout.Label($\"分析状态: {profilingStatus}\");\r\n        GUILayout.Label($\"是否正在分析: {isProfilingActive}\");\r\n        GUILayout.Label($\"是否正在记录: {isRecording}\");\r\n        GUILayout.Label($\"记录持续时间: {profilingDuration:F2}秒\");\r\n        GUILayout.Label($\"帧数: {frameCount}\");\r\n        GUILayout.Label($\"平均帧时间: {averageFrameTime:F2}ms\");\r\n        GUILayout.Label($\"当前帧率: {currentFrameRate:F1} FPS\");\r\n        GUILayout.Label($\"目标帧率: {targetFrameRate} FPS\");\r\n        \r\n        GUILayout.Space(10);\r\n        GUILayout.Label(\"内存使用:\");\r\n        GUILayout.Label($\"总内存: {FormatFileSize(totalMemory)}\");\r\n        GUILayout.Label($\"已用内存: {FormatFileSize(usedMemory)}\");\r\n        GUILayout.Label($\"空闲内存: {FormatFileSize(freeMemory)}\");\r\n        GUILayout.Label($\"保留内存: {FormatFileSize(reservedMemory)}\");\r\n        GUILayout.Label($\"系统内存: {FormatFileSize(systemMemory)}\");\r\n        GUILayout.Label($\"图形内存: {FormatFileSize(graphicsMemory)}\");\r\n        \r\n        GUILayout.Space(10);\r\n        GUILayout.Label(\"CPU使用:\");\r\n        GUILayout.Label($\"CPU使用率: {cpuUsage:F1}%\");\r\n        GUILayout.Label($\"主线程时间: {mainThreadTime:F2}ms\");\r\n        GUILayout.Label($\"渲染线程时间: {renderThreadTime:F2}ms\");\r\n        GUILayout.Label($\"物理线程时间: {physicsThreadTime:F2}ms\");\r\n        GUILayout.Label($\"脚本时间: {scriptingTime:F2}ms\");\r\n        GUILayout.Label($\"渲染时间: {renderingTime:F2}ms\");\r\n        \r\n        GUILayout.Space(10);\r\n        GUILayout.Label(\"GPU使用:\");\r\n        GUILayout.Label($\"GPU名称: {gpuInfo.name}\");\r\n        GUILayout.Label($\"GPU使用率: {gpuUsage:F1}%\");\r\n        GUILayout.Label($\"GPU内存使用率: {gpuMemoryUsage:F1}%\");\r\n        GUILayout.Label($\"绘制调用: {drawCalls}\");\r\n        GUILayout.Label($\"三角形数量: {triangles}\");\r\n        GUILayout.Label($\"顶点数量: {vertices}\");\r\n        GUILayout.Label($\"批处理数量: {batches}\");\r\n        \r\n        GUILayout.Space(10);\r\n        \r\n        if (GUILayout.Button(\"开始性能分析\"))\r\n        {\r\n            StartProfiling();\r\n        }\r\n        \r\n        if (GUILayout.Button(\"停止性能分析\"))\r\n        {\r\n            StopProfiling();\r\n        }\r\n        \r\n        if (GUILayout.Button(\"开始性能记录\"))\r\n        {\r\n            StartRecording();\r\n        }\r\n        \r\n        if (GUILayout.Button(\"停止性能记录\"))\r\n        {\r\n            StopRecording();\r\n        }\r\n        \r\n        if (GUILayout.Button(\"生成性能报告\"))\r\n        {\r\n            GeneratePerformanceReport();\r\n        }\r\n        \r\n        if (GUILayout.Button(\"打开性能分析器\"))\r\n        {\r\n            OpenProfilerWindow();\r\n        }\r\n        \r\n        if (GUILayout.Button(\"打开内存分析器\"))\r\n        {\r\n            OpenMemoryProfiler();\r\n        }\r\n        \r\n        if (GUILayout.Button(\"打开帧调试器\"))\r\n        {\r\n            OpenFrameDebugger();\r\n        }\r\n        \r\n        if (GUILayout.Button(\"重置性能数据\"))\r\n        {\r\n            ResetProfilingData();\r\n        }\r\n        \r\n        GUILayout.Space(10);\r\n        GUILayout.Label(\"性能问题:\");\r\n        foreach (var issue in performanceIssues)\r\n        {\r\n            string color = issue.severity == PerformanceIssueSeverity.High ? \"red\" : \"yellow\";\r\n            GUILayout.Label($\"<color={color}>[{issue.severity}] {issue.message}</color>\");\r\n        }\r\n        \r\n        GUILayout.EndArea();\r\n    }\r\n}\r\n\r\npublic enum ProfilingStatus\r\n{\r\n    Idle,\r\n    Active,\r\n    Recording,\r\n    Completed,\r\n    Failed\r\n}\r\n\r\npublic enum PerformanceIssueType\r\n{\r\n    FrameTime,\r\n    Memory,\r\n    CPU,\r\n    GPU,\r\n    DrawCalls,\r\n    Triangles\r\n}\r\n\r\npublic enum PerformanceIssueSeverity\r\n{\r\n    Low,\r\n    Medium,\r\n    High,\r\n    Critical\r\n}\r\n\r\npublic enum RecommendationPriority\r\n{\r\n    Low,\r\n    Medium,\r\n    High,\r\n    Critical\r\n}\r\n\r\n[System.Serializable]\r\npublic class MemoryInfo\r\n{\r\n    public long totalMemory;\r\n    public long usedMemory;\r\n    public long freeMemory;\r\n    public long reservedMemory;\r\n    public long systemMemory;\r\n    public long graphicsMemory;\r\n}\r\n\r\n[System.Serializable]\r\npublic class CPUInfo\r\n{\r\n    public float usage;\r\n    public float mainThreadTime;\r\n    public float renderThreadTime;\r\n    public float physicsThreadTime;\r\n    public float audioThreadTime;\r\n    public float networkThreadTime;\r\n    public float uiThreadTime;\r\n}\r\n\r\n[System.Serializable]\r\npublic class GPUInfo\r\n{\r\n    public string name;\r\n    public long memorySize;\r\n    public string api;\r\n    public string version;\r\n    public float usage;\r\n    public float memoryUsage;\r\n    public int drawCalls;\r\n    public int triangles;\r\n    public int vertices;\r\n    public int batches;\r\n    public float fillRate;\r\n    public float pixelFillRate;\r\n    public float vertexFillRate;\r\n}\r\n\r\n[System.Serializable]\r\npublic class PerformanceData\r\n{\r\n    public float timestamp;\r\n    public float frameTime;\r\n    public float frameRate;\r\n    public long memoryUsage;\r\n    public float cpuUsage;\r\n    public float gpuUsage;\r\n    public int drawCalls;\r\n    public int triangles;\r\n    public int vertices;\r\n}\r\n\r\n[System.Serializable]\r\npublic class PerformanceStatistics\r\n{\r\n    public int totalFrames;\r\n    public float totalFrameTime;\r\n    public long totalMemoryUsage;\r\n    public float totalCPUUsage;\r\n    public float totalGPUUsage;\r\n    public int totalDrawCalls;\r\n    public int totalTriangles;\r\n    public int totalVertices;\r\n    public float averageFrameTime;\r\n    public long averageMemoryUsage;\r\n    public float averageCPUUsage;\r\n    public float averageGPUUsage;\r\n    public float averageDrawCalls;\r\n    public float averageTriangles;\r\n    public float averageVertices;\r\n    public float maxFrameTime;\r\n    public float minFrameTime = float.MaxValue;\r\n    public long maxMemoryUsage;\r\n    public float maxCPUUsage;\r\n    public float maxGPUUsage;\r\n}\r\n\r\n[System.Serializable]\r\npublic class PerformanceIssue\r\n{\r\n    public PerformanceIssueType type;\r\n    public PerformanceIssueSeverity severity;\r\n    public string message;\r\n    public string recommendation;\r\n}\r\n\r\n[System.Serializable]\r\npublic class PerformanceRecommendation\r\n{\r\n    public RecommendationPriority priority;\r\n    public string description;\r\n} "
        }
    ]
}