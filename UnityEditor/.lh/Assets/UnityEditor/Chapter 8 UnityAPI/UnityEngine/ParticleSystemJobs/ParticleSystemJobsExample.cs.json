{
    "sourceFile": "Assets/UnityEditor/Chapter 8 UnityAPI/UnityEngine/ParticleSystemJobs/ParticleSystemJobsExample.cs",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1750935588385,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1750935588385,
            "name": "Commit-0",
            "content": "using UnityEngine;\r\nusing Unity.Collections;\r\nusing Unity.Jobs;\r\nusing Unity.Burst;\r\nusing Unity.Mathematics;\r\n\r\n/// <summary>\r\n/// UnityEngine.ParticleSystemJobs 命名空间案例演示\r\n/// 展示粒子系统作业、批量粒子处理、性能优化等核心功能\r\n/// </summary>\r\npublic class ParticleSystemJobsExample : MonoBehaviour\r\n{\r\n    [Header(\"粒子系统配置\")]\r\n    [SerializeField] private bool enableParticleJobs = true; //启用粒子作业\r\n    [SerializeField] private bool enableBurstCompilation = true; //启用Burst编译\r\n    [SerializeField] private bool enableJobScheduling = true; //启用作业调度\r\n    [SerializeField] private bool enablePerformanceOptimization = true; //启用性能优化\r\n    [SerializeField] private bool enableParticleProfiling = true; //启用粒子分析\r\n    \r\n    [Header(\"粒子参数\")]\r\n    [SerializeField] private int particleCount = 10000; //粒子数量\r\n    [SerializeField] private int jobBatchSize = 64; //作业批处理大小\r\n    [SerializeField] private float particleLifetime = 5f; //粒子生命周期\r\n    [SerializeField] private float particleSpeed = 10f; //粒子速度\r\n    [SerializeField] private Vector3 particleGravity = new Vector3(0, -9.81f, 0); //粒子重力\r\n    [SerializeField] private bool enableParticleCollision = true; //启用粒子碰撞\r\n    \r\n    [Header(\"粒子数据\")]\r\n    [SerializeField] private NativeArray<float3> particlePositions; //粒子位置\r\n    [SerializeField] private NativeArray<float3> particleVelocities; //粒子速度\r\n    [SerializeField] private NativeArray<float> particleLifetimes; //粒子生命周期\r\n    [SerializeField] private NativeArray<float> particleSizes; //粒子大小\r\n    [SerializeField] private NativeArray<float4> particleColors; //粒子颜色\r\n    [SerializeField] private NativeArray<bool> particleAlive; //粒子存活状态\r\n    \r\n    [Header(\"性能监控\")]\r\n    [SerializeField] private bool enableParticleMonitoring = true; //启用粒子监控\r\n    [SerializeField] private float monitoringInterval = 1f; //监控间隔\r\n    [SerializeField] private bool logParticleData = false; //记录粒子数据\r\n    [SerializeField] private int activeParticles = 0; //活跃粒子数\r\n    [SerializeField] private float particleUpdateTime = 0f; //粒子更新时间\r\n    [SerializeField] private int completedJobs = 0; //完成作业数\r\n    \r\n    [Header(\"粒子状态\")]\r\n    [SerializeField] private string particleSystemState = \"未初始化\"; //粒子系统状态\r\n    [SerializeField] private float systemUptime = 0f; //系统运行时间\r\n    [SerializeField] private float averageParticleLifetime = 0f; //平均粒子生命周期\r\n    [SerializeField] private float particleEmissionRate = 0f; //粒子发射率\r\n    [SerializeField] private float particleDeathRate = 0f; //粒子死亡率\r\n    \r\n    [Header(\"性能数据\")]\r\n    [SerializeField] private float[] performanceHistory = new float[100]; //性能历史\r\n    [SerializeField] private int performanceIndex = 0; //性能索引\r\n    [SerializeField] private float averagePerformance = 0f; //平均性能\r\n    [SerializeField] private float minPerformance = 0f; //最低性能\r\n    [SerializeField] private float maxPerformance = 0f; //最高性能\r\n    \r\n    private JobHandle[] particleJobHandles;\r\n    private System.Collections.Generic.List<JobHandle> activeParticleJobs = new System.Collections.Generic.List<JobHandle>();\r\n    private float lastMonitoringTime = 0f;\r\n    private float systemStartTime = 0f;\r\n    private bool isInitialized = false;\r\n    private ParticleSystem particleSystem;\r\n\r\n    private void Start()\r\n    {\r\n        InitializeParticleSystemJobs();\r\n    }\r\n\r\n    /// <summary>\r\n    /// 初始化粒子系统作业\r\n    /// </summary>\r\n    private void InitializeParticleSystemJobs()\r\n    {\r\n        // 获取粒子系统组件\r\n        particleSystem = GetComponent<ParticleSystem>();\r\n        if (particleSystem == null)\r\n        {\r\n            particleSystem = gameObject.AddComponent<ParticleSystem>();\r\n        }\r\n        \r\n        // 初始化粒子数据\r\n        InitializeParticleData();\r\n        \r\n        // 初始化粒子作业\r\n        InitializeParticleJobs();\r\n        \r\n        // 初始化性能监控\r\n        InitializePerformanceMonitoring();\r\n        \r\n        // 配置粒子系统\r\n        ConfigureParticleSystem();\r\n        \r\n        isInitialized = true;\r\n        systemStartTime = Time.time;\r\n        particleSystemState = \"已初始化\";\r\n        Debug.Log(\"粒子系统作业初始化完成\");\r\n    }\r\n\r\n    /// <summary>\r\n    /// 初始化粒子数据\r\n    /// </summary>\r\n    private void InitializeParticleData()\r\n    {\r\n        // 创建粒子数据数组\r\n        particlePositions = new NativeArray<float3>(particleCount, Allocator.Persistent);\r\n        particleVelocities = new NativeArray<float3>(particleCount, Allocator.Persistent);\r\n        particleLifetimes = new NativeArray<float>(particleCount, Allocator.Persistent);\r\n        particleSizes = new NativeArray<float>(particleCount, Allocator.Persistent);\r\n        particleColors = new NativeArray<float4>(particleCount, Allocator.Persistent);\r\n        particleAlive = new NativeArray<bool>(particleCount, Allocator.Persistent);\r\n        \r\n        // 初始化粒子\r\n        for (int i = 0; i < particleCount; i++)\r\n        {\r\n            particlePositions[i] = new float3(\r\n                Random.Range(-10f, 10f),\r\n                Random.Range(0f, 20f),\r\n                Random.Range(-10f, 10f)\r\n            );\r\n            \r\n            particleVelocities[i] = new float3(\r\n                Random.Range(-5f, 5f),\r\n                Random.Range(-2f, 10f),\r\n                Random.Range(-5f, 5f)\r\n            );\r\n            \r\n            particleLifetimes[i] = Random.Range(0f, particleLifetime);\r\n            particleSizes[i] = Random.Range(0.1f, 2f);\r\n            particleColors[i] = new float4(\r\n                Random.Range(0f, 1f),\r\n                Random.Range(0f, 1f),\r\n                Random.Range(0f, 1f),\r\n                Random.Range(0.5f, 1f)\r\n            );\r\n            particleAlive[i] = true;\r\n        }\r\n        \r\n        activeParticles = particleCount;\r\n        Debug.Log($\"粒子数据初始化完成: 粒子数量={particleCount}\");\r\n    }\r\n\r\n    /// <summary>\r\n    /// 初始化粒子作业\r\n    /// </summary>\r\n    private void InitializeParticleJobs()\r\n    {\r\n        if (enableParticleJobs)\r\n        {\r\n            particleJobHandles = new JobHandle[10]; // 最多10个并发粒子作业\r\n            Debug.Log(\"粒子作业系统初始化完成\");\r\n        }\r\n    }\r\n\r\n    /// <summary>\r\n    /// 初始化性能监控\r\n    /// </summary>\r\n    private void InitializePerformanceMonitoring()\r\n    {\r\n        if (enableParticleMonitoring)\r\n        {\r\n            performanceHistory = new float[100];\r\n            performanceIndex = 0;\r\n            averagePerformance = 0f;\r\n            minPerformance = 0f;\r\n            maxPerformance = 0f;\r\n            \r\n            Debug.Log(\"性能监控初始化完成\");\r\n        }\r\n    }\r\n\r\n    /// <summary>\r\n    /// 配置粒子系统\r\n    /// </summary>\r\n    private void ConfigureParticleSystem()\r\n    {\r\n        if (particleSystem != null)\r\n        {\r\n            var main = particleSystem.main;\r\n            main.maxParticles = particleCount;\r\n            main.startLifetime = particleLifetime;\r\n            main.startSpeed = particleSpeed;\r\n            main.gravityModifier = 1f;\r\n            \r\n            var emission = particleSystem.emission;\r\n            emission.rateOverTime = particleCount / particleLifetime;\r\n            \r\n            Debug.Log(\"粒子系统配置完成\");\r\n        }\r\n    }\r\n\r\n    private void Update()\r\n    {\r\n        if (!isInitialized) return;\r\n        \r\n        // 更新系统运行时间\r\n        systemUptime = Time.time - systemStartTime;\r\n        \r\n        // 更新粒子系统\r\n        UpdateParticleSystem();\r\n        \r\n        // 执行粒子作业\r\n        ExecuteParticleJobs();\r\n        \r\n        // 粒子监控\r\n        if (enableParticleMonitoring && Time.time - lastMonitoringTime > monitoringInterval)\r\n        {\r\n            MonitorParticlePerformance();\r\n            lastMonitoringTime = Time.time;\r\n        }\r\n    }\r\n\r\n    /// <summary>\r\n    /// 更新粒子系统\r\n    /// </summary>\r\n    private void UpdateParticleSystem()\r\n    {\r\n        float startTime = Time.realtimeSinceStartup;\r\n        \r\n        // 更新粒子状态\r\n        UpdateParticleStates();\r\n        \r\n        // 更新粒子统计\r\n        UpdateParticleStatistics();\r\n        \r\n        particleUpdateTime = Time.realtimeSinceStartup - startTime;\r\n    }\r\n\r\n    /// <summary>\r\n    /// 更新粒子状态\r\n    /// </summary>\r\n    private void UpdateParticleStates()\r\n    {\r\n        activeParticles = 0;\r\n        \r\n        for (int i = 0; i < particleCount; i++)\r\n        {\r\n            if (particleAlive[i])\r\n            {\r\n                activeParticles++;\r\n                \r\n                // 更新生命周期\r\n                particleLifetimes[i] -= Time.deltaTime;\r\n                \r\n                // 检查粒子是否死亡\r\n                if (particleLifetimes[i] <= 0f)\r\n                {\r\n                    particleAlive[i] = false;\r\n                    continue;\r\n                }\r\n                \r\n                // 更新颜色透明度\r\n                float alpha = particleLifetimes[i] / particleLifetime;\r\n                particleColors[i] = new float4(particleColors[i].xyz, alpha);\r\n            }\r\n        }\r\n    }\r\n\r\n    /// <summary>\r\n    /// 更新粒子统计\r\n    /// </summary>\r\n    private void UpdateParticleStatistics()\r\n    {\r\n        // 计算平均生命周期\r\n        float totalLifetime = 0f;\r\n        int aliveCount = 0;\r\n        \r\n        for (int i = 0; i < particleCount; i++)\r\n        {\r\n            if (particleAlive[i])\r\n            {\r\n                totalLifetime += particleLifetimes[i];\r\n                aliveCount++;\r\n            }\r\n        }\r\n        \r\n        if (aliveCount > 0)\r\n        {\r\n            averageParticleLifetime = totalLifetime / aliveCount;\r\n        }\r\n        \r\n        // 计算发射率和死亡率\r\n        particleEmissionRate = particleCount / particleLifetime;\r\n        particleDeathRate = (particleCount - activeParticles) / particleLifetime;\r\n    }\r\n\r\n    /// <summary>\r\n    /// 执行粒子作业\r\n    /// </summary>\r\n    private void ExecuteParticleJobs()\r\n    {\r\n        if (!enableParticleJobs) return;\r\n        \r\n        // 清理完成的作业\r\n        CleanupCompletedParticleJobs();\r\n        \r\n        // 执行新作业\r\n        if (activeParticleJobs.Count < particleJobHandles.Length)\r\n        {\r\n            ExecuteParticleJob();\r\n        }\r\n    }\r\n\r\n    /// <summary>\r\n    /// 执行粒子作业\r\n    /// </summary>\r\n    private void ExecuteParticleJob()\r\n    {\r\n        if (enableBurstCompilation)\r\n        {\r\n            var job = new ParticleBurstJob\r\n            {\r\n                positions = particlePositions,\r\n                velocities = particleVelocities,\r\n                lifetimes = particleLifetimes,\r\n                sizes = particleSizes,\r\n                colors = particleColors,\r\n                alive = particleAlive,\r\n                deltaTime = Time.deltaTime,\r\n                gravity = new float3(particleGravity.x, particleGravity.y, particleGravity.z),\r\n                particleLifetime = particleLifetime\r\n            };\r\n            \r\n            var jobHandle = job.Schedule(particleCount, jobBatchSize);\r\n            activeParticleJobs.Add(jobHandle);\r\n            \r\n            if (logParticleData)\r\n            {\r\n                Debug.Log($\"Burst粒子作业已调度: 粒子数={particleCount}, 批处理={jobBatchSize}\");\r\n            }\r\n        }\r\n        else\r\n        {\r\n            var job = new ParticleJob\r\n            {\r\n                positions = particlePositions,\r\n                velocities = particleVelocities,\r\n                lifetimes = particleLifetimes,\r\n                sizes = particleSizes,\r\n                colors = particleColors,\r\n                alive = particleAlive,\r\n                deltaTime = Time.deltaTime,\r\n                gravity = new float3(particleGravity.x, particleGravity.y, particleGravity.z),\r\n                particleLifetime = particleLifetime\r\n            };\r\n            \r\n            var jobHandle = job.Schedule(particleCount, jobBatchSize);\r\n            activeParticleJobs.Add(jobHandle);\r\n            \r\n            if (logParticleData)\r\n            {\r\n                Debug.Log($\"普通粒子作业已调度: 粒子数={particleCount}, 批处理={jobBatchSize}\");\r\n            }\r\n        }\r\n    }\r\n\r\n    /// <summary>\r\n    /// 清理完成的粒子作业\r\n    /// </summary>\r\n    private void CleanupCompletedParticleJobs()\r\n    {\r\n        for (int i = activeParticleJobs.Count - 1; i >= 0; i--)\r\n        {\r\n            if (activeParticleJobs[i].IsCompleted)\r\n            {\r\n                activeParticleJobs[i].Complete();\r\n                activeParticleJobs.RemoveAt(i);\r\n                completedJobs++;\r\n            }\r\n        }\r\n    }\r\n\r\n    /// <summary>\r\n    /// 监控粒子性能\r\n    /// </summary>\r\n    private void MonitorParticlePerformance()\r\n    {\r\n        float currentPerformance = 1f / particleUpdateTime;\r\n        \r\n        // 更新性能历史\r\n        performanceHistory[performanceIndex] = currentPerformance;\r\n        performanceIndex = (performanceIndex + 1) % 100;\r\n        \r\n        // 计算性能统计\r\n        CalculatePerformanceStats();\r\n        \r\n        if (logParticleData)\r\n        {\r\n            Debug.Log($\"粒子性能监控: 性能={currentPerformance:F1}, 活跃粒子={activeParticles}, 更新时间={particleUpdateTime * 1000:F2}ms\");\r\n        }\r\n    }\r\n\r\n    /// <summary>\r\n    /// 计算性能统计\r\n    /// </summary>\r\n    private void CalculatePerformanceStats()\r\n    {\r\n        float sum = 0f;\r\n        minPerformance = float.MaxValue;\r\n        maxPerformance = 0f;\r\n        \r\n        for (int i = 0; i < 100; i++)\r\n        {\r\n            float value = performanceHistory[i];\r\n            sum += value;\r\n            \r\n            if (value < minPerformance) minPerformance = value;\r\n            if (value > maxPerformance) maxPerformance = value;\r\n        }\r\n        \r\n        averagePerformance = sum / 100;\r\n    }\r\n\r\n    /// <summary>\r\n    /// 执行粒子碰撞检测\r\n    /// </summary>\r\n    public void ExecuteParticleCollision()\r\n    {\r\n        if (!enableParticleCollision) return;\r\n        \r\n        var job = new ParticleCollisionJob\r\n        {\r\n            positions = particlePositions,\r\n            velocities = particleVelocities,\r\n            alive = particleAlive,\r\n            collisionRadius = 1f,\r\n            bounceFactor = 0.8f\r\n        };\r\n        \r\n        var jobHandle = job.Schedule(particleCount, jobBatchSize);\r\n        activeParticleJobs.Add(jobHandle);\r\n        \r\n        Debug.Log(\"粒子碰撞检测作业已调度\");\r\n    }\r\n\r\n    /// <summary>\r\n    /// 执行粒子力场模拟\r\n    /// </summary>\r\n    public void ExecuteParticleForceField()\r\n    {\r\n        var job = new ParticleForceFieldJob\r\n        {\r\n            positions = particlePositions,\r\n            velocities = particleVelocities,\r\n            alive = particleAlive,\r\n            forceFieldCenter = new float3(0, 0, 0),\r\n            forceFieldStrength = 10f,\r\n            forceFieldRadius = 5f\r\n        };\r\n        \r\n        var jobHandle = job.Schedule(particleCount, jobBatchSize);\r\n        activeParticleJobs.Add(jobHandle);\r\n        \r\n        Debug.Log(\"粒子力场模拟作业已调度\");\r\n    }\r\n\r\n    /// <summary>\r\n    /// 重置粒子系统\r\n    /// </summary>\r\n    public void ResetParticleSystem()\r\n    {\r\n        Debug.Log(\"重置粒子系统...\");\r\n        \r\n        // 清理粒子作业\r\n        CleanupCompletedParticleJobs();\r\n        JobHandle.CompleteAll(activeParticleJobs.ToArray());\r\n        activeParticleJobs.Clear();\r\n        \r\n        // 重新初始化粒子\r\n        for (int i = 0; i < particleCount; i++)\r\n        {\r\n            particlePositions[i] = new float3(\r\n                Random.Range(-10f, 10f),\r\n                Random.Range(0f, 20f),\r\n                Random.Range(-10f, 10f)\r\n            );\r\n            \r\n            particleVelocities[i] = new float3(\r\n                Random.Range(-5f, 5f),\r\n                Random.Range(-2f, 10f),\r\n                Random.Range(-5f, 5f)\r\n            );\r\n            \r\n            particleLifetimes[i] = particleLifetime;\r\n            particleSizes[i] = Random.Range(0.1f, 2f);\r\n            particleColors[i] = new float4(\r\n                Random.Range(0f, 1f),\r\n                Random.Range(0f, 1f),\r\n                Random.Range(0f, 1f),\r\n                1f\r\n            );\r\n            particleAlive[i] = true;\r\n        }\r\n        \r\n        activeParticles = particleCount;\r\n        completedJobs = 0;\r\n        \r\n        Debug.Log(\"粒子系统重置完成\");\r\n    }\r\n\r\n    /// <summary>\r\n    /// 生成粒子报告\r\n    /// </summary>\r\n    public void GenerateParticleReport()\r\n    {\r\n        Debug.Log(\"=== 粒子系统作业报告 ===\");\r\n        Debug.Log($\"粒子系统状态: {particleSystemState}\");\r\n        Debug.Log($\"系统运行时间: {systemUptime:F1}秒\");\r\n        Debug.Log($\"活跃粒子数: {activeParticles}/{particleCount}\");\r\n        Debug.Log($\"平均粒子生命周期: {averageParticleLifetime:F2}秒\");\r\n        Debug.Log($\"粒子发射率: {particleEmissionRate:F1}/秒\");\r\n        Debug.Log($\"粒子死亡率: {particleDeathRate:F1}/秒\");\r\n        Debug.Log($\"粒子更新时间: {particleUpdateTime * 1000:F2}ms\");\r\n        Debug.Log($\"完成作业数: {completedJobs}\");\r\n        Debug.Log($\"平均性能: {averagePerformance:F1}\");\r\n        Debug.Log($\"最低性能: {minPerformance:F1}\");\r\n        Debug.Log($\"最高性能: {maxPerformance:F1}\");\r\n    }\r\n\r\n    /// <summary>\r\n    /// 导出粒子数据\r\n    /// </summary>\r\n    public void ExportParticleData()\r\n    {\r\n        var data = new ParticleSystemData\r\n        {\r\n            timestamp = System.DateTime.Now.ToString(),\r\n            particleSystemState = particleSystemState,\r\n            systemUptime = systemUptime,\r\n            activeParticles = activeParticles,\r\n            particleCount = particleCount,\r\n            averageParticleLifetime = averageParticleLifetime,\r\n            particleEmissionRate = particleEmissionRate,\r\n            particleDeathRate = particleDeathRate,\r\n            particleUpdateTime = particleUpdateTime,\r\n            completedJobs = completedJobs,\r\n            averagePerformance = averagePerformance,\r\n            minPerformance = minPerformance,\r\n            maxPerformance = maxPerformance,\r\n            performanceHistory = performanceHistory\r\n        };\r\n        \r\n        string json = JsonUtility.ToJson(data, true);\r\n        string filename = $\"particlesystem_{System.DateTime.Now:yyyyMMdd_HHmmss}.json\";\r\n        \r\n        System.IO.File.WriteAllText(filename, json);\r\n        Debug.Log($\"粒子数据已导出: {filename}\");\r\n    }\r\n\r\n    private void OnGUI()\r\n    {\r\n        GUILayout.BeginArea(new Rect(10, 10, 400, 800));\r\n        GUILayout.Label(\"ParticleSystemJobs 粒子系统作业演示\", UnityEditor.EditorStyles.boldLabel);\r\n        \r\n        GUILayout.Space(10);\r\n        GUILayout.Label(\"粒子系统配置:\");\r\n        enableParticleJobs = GUILayout.Toggle(enableParticleJobs, \"启用粒子作业\");\r\n        enableBurstCompilation = GUILayout.Toggle(enableBurstCompilation, \"启用Burst编译\");\r\n        enableJobScheduling = GUILayout.Toggle(enableJobScheduling, \"启用作业调度\");\r\n        enablePerformanceOptimization = GUILayout.Toggle(enablePerformanceOptimization, \"启用性能优化\");\r\n        enableParticleProfiling = GUILayout.Toggle(enableParticleProfiling, \"启用粒子分析\");\r\n        \r\n        GUILayout.Space(10);\r\n        GUILayout.Label(\"粒子参数:\");\r\n        particleCount = int.TryParse(GUILayout.TextField(\"粒子数量\", particleCount.ToString()), out var count) ? count : particleCount;\r\n        jobBatchSize = int.TryParse(GUILayout.TextField(\"作业批处理大小\", jobBatchSize.ToString()), out var batchSize) ? batchSize : jobBatchSize;\r\n        particleLifetime = float.TryParse(GUILayout.TextField(\"粒子生命周期\", particleLifetime.ToString()), out var lifetime) ? lifetime : particleLifetime;\r\n        particleSpeed = float.TryParse(GUILayout.TextField(\"粒子速度\", particleSpeed.ToString()), out var speed) ? speed : particleSpeed;\r\n        enableParticleCollision = GUILayout.Toggle(enableParticleCollision, \"启用粒子碰撞\");\r\n        \r\n        GUILayout.Space(10);\r\n        GUILayout.Label(\"粒子状态:\");\r\n        GUILayout.Label($\"状态: {particleSystemState}\");\r\n        GUILayout.Label($\"运行时间: {systemUptime:F1}秒\");\r\n        GUILayout.Label($\"活跃粒子: {activeParticles}/{particleCount}\");\r\n        GUILayout.Label($\"平均生命周期: {averageParticleLifetime:F2}秒\");\r\n        GUILayout.Label($\"发射率: {particleEmissionRate:F1}/秒\");\r\n        GUILayout.Label($\"死亡率: {particleDeathRate:F1}/秒\");\r\n        GUILayout.Label($\"更新时间: {particleUpdateTime * 1000:F2}ms\");\r\n        GUILayout.Label($\"完成作业数: {completedJobs}\");\r\n        \r\n        GUILayout.Space(10);\r\n        GUILayout.Label(\"性能数据:\");\r\n        GUILayout.Label($\"平均性能: {averagePerformance:F1}\");\r\n        GUILayout.Label($\"最低性能: {minPerformance:F1}\");\r\n        GUILayout.Label($\"最高性能: {maxPerformance:F1}\");\r\n        \r\n        GUILayout.Space(10);\r\n        \r\n        if (GUILayout.Button(\"执行粒子碰撞检测\"))\r\n        {\r\n            ExecuteParticleCollision();\r\n        }\r\n        \r\n        if (GUILayout.Button(\"执行粒子力场模拟\"))\r\n        {\r\n            ExecuteParticleForceField();\r\n        }\r\n        \r\n        if (GUILayout.Button(\"重置粒子系统\"))\r\n        {\r\n            ResetParticleSystem();\r\n        }\r\n        \r\n        if (GUILayout.Button(\"生成粒子报告\"))\r\n        {\r\n            GenerateParticleReport();\r\n        }\r\n        \r\n        if (GUILayout.Button(\"导出粒子数据\"))\r\n        {\r\n            ExportParticleData();\r\n        }\r\n        \r\n        GUILayout.EndArea();\r\n    }\r\n\r\n    private void OnDestroy()\r\n    {\r\n        // 清理粒子数据\r\n        if (particlePositions.IsCreated)\r\n            particlePositions.Dispose();\r\n        if (particleVelocities.IsCreated)\r\n            particleVelocities.Dispose();\r\n        if (particleLifetimes.IsCreated)\r\n            particleLifetimes.Dispose();\r\n        if (particleSizes.IsCreated)\r\n            particleSizes.Dispose();\r\n        if (particleColors.IsCreated)\r\n            particleColors.Dispose();\r\n        if (particleAlive.IsCreated)\r\n            particleAlive.Dispose();\r\n        \r\n        // 清理粒子作业\r\n        CleanupCompletedParticleJobs();\r\n        JobHandle.CompleteAll(activeParticleJobs.ToArray());\r\n    }\r\n}\r\n\r\n/// <summary>\r\n/// Burst粒子作业\r\n/// </summary>\r\n[BurstCompile]\r\npublic struct ParticleBurstJob : IJobParallelFor\r\n{\r\n    [NativeDisableParallelForRestriction] public NativeArray<float3> positions;\r\n    [NativeDisableParallelForRestriction] public NativeArray<float3> velocities;\r\n    [NativeDisableParallelForRestriction] public NativeArray<float> lifetimes;\r\n    [NativeDisableParallelForRestriction] public NativeArray<float> sizes;\r\n    [NativeDisableParallelForRestriction] public NativeArray<float4> colors;\r\n    [NativeDisableParallelForRestriction] public NativeArray<bool> alive;\r\n    public float deltaTime;\r\n    public float3 gravity;\r\n    public float particleLifetime;\r\n    \r\n    public void Execute(int index)\r\n    {\r\n        if (!alive[index]) return;\r\n        \r\n        // 更新位置\r\n        positions[index] += velocities[index] * deltaTime;\r\n        \r\n        // 应用重力\r\n        velocities[index] += gravity * deltaTime;\r\n        \r\n        // 更新生命周期\r\n        lifetimes[index] -= deltaTime;\r\n        \r\n        // 检查粒子是否死亡\r\n        if (lifetimes[index] <= 0f)\r\n        {\r\n            alive[index] = false;\r\n            return;\r\n        }\r\n        \r\n        // 更新颜色透明度\r\n        float alpha = lifetimes[index] / particleLifetime;\r\n        colors[index] = new float4(colors[index].xyz, alpha);\r\n    }\r\n}\r\n\r\n/// <summary>\r\n/// 普通粒子作业\r\n/// </summary>\r\npublic struct ParticleJob : IJobParallelFor\r\n{\r\n    [NativeDisableParallelForRestriction] public NativeArray<float3> positions;\r\n    [NativeDisableParallelForRestriction] public NativeArray<float3> velocities;\r\n    [NativeDisableParallelForRestriction] public NativeArray<float> lifetimes;\r\n    [NativeDisableParallelForRestriction] public NativeArray<float> sizes;\r\n    [NativeDisableParallelForRestriction] public NativeArray<float4> colors;\r\n    [NativeDisableParallelForRestriction] public NativeArray<bool> alive;\r\n    public float deltaTime;\r\n    public float3 gravity;\r\n    public float particleLifetime;\r\n    \r\n    public void Execute(int index)\r\n    {\r\n        if (!alive[index]) return;\r\n        \r\n        // 更新位置\r\n        positions[index] += velocities[index] * deltaTime;\r\n        \r\n        // 应用重力\r\n        velocities[index] += gravity * deltaTime;\r\n        \r\n        // 更新生命周期\r\n        lifetimes[index] -= deltaTime;\r\n        \r\n        // 检查粒子是否死亡\r\n        if (lifetimes[index] <= 0f)\r\n        {\r\n            alive[index] = false;\r\n            return;\r\n        }\r\n        \r\n        // 更新颜色透明度\r\n        float alpha = lifetimes[index] / particleLifetime;\r\n        colors[index] = new float4(colors[index].xyz, alpha);\r\n    }\r\n}\r\n\r\n/// <summary>\r\n/// 粒子碰撞作业\r\n/// </summary>\r\n[BurstCompile]\r\npublic struct ParticleCollisionJob : IJobParallelFor\r\n{\r\n    [NativeDisableParallelForRestriction] public NativeArray<float3> positions;\r\n    [NativeDisableParallelForRestriction] public NativeArray<float3> velocities;\r\n    [NativeDisableParallelForRestriction] public NativeArray<bool> alive;\r\n    public float collisionRadius;\r\n    public float bounceFactor;\r\n    \r\n    public void Execute(int index)\r\n    {\r\n        if (!alive[index]) return;\r\n        \r\n        // 简单的边界碰撞检测\r\n        float3 pos = positions[index];\r\n        \r\n        // 地面碰撞\r\n        if (pos.y < 0f)\r\n        {\r\n            pos.y = 0f;\r\n            velocities[index].y = -velocities[index].y * bounceFactor;\r\n        }\r\n        \r\n        // 边界碰撞\r\n        if (math.abs(pos.x) > 10f)\r\n        {\r\n            pos.x = math.sign(pos.x) * 10f;\r\n            velocities[index].x = -velocities[index].x * bounceFactor;\r\n        }\r\n        \r\n        if (math.abs(pos.z) > 10f)\r\n        {\r\n            pos.z = math.sign(pos.z) * 10f;\r\n            velocities[index].z = -velocities[index].z * bounceFactor;\r\n        }\r\n        \r\n        positions[index] = pos;\r\n    }\r\n}\r\n\r\n/// <summary>\r\n/// 粒子力场作业\r\n/// </summary>\r\n[BurstCompile]\r\npublic struct ParticleForceFieldJob : IJobParallelFor\r\n{\r\n    [NativeDisableParallelForRestriction] public NativeArray<float3> positions;\r\n    [NativeDisableParallelForRestriction] public NativeArray<float3> velocities;\r\n    [NativeDisableParallelForRestriction] public NativeArray<bool> alive;\r\n    public float3 forceFieldCenter;\r\n    public float forceFieldStrength;\r\n    public float forceFieldRadius;\r\n    \r\n    public void Execute(int index)\r\n    {\r\n        if (!alive[index]) return;\r\n        \r\n        float3 direction = forceFieldCenter - positions[index];\r\n        float distance = math.length(direction);\r\n        \r\n        if (distance < forceFieldRadius && distance > 0f)\r\n        {\r\n            direction = math.normalize(direction);\r\n            float force = forceFieldStrength * (1f - distance / forceFieldRadius);\r\n            velocities[index] += direction * force * 0.016f; // 假设60FPS\r\n        }\r\n    }\r\n}\r\n\r\n/// <summary>\r\n/// 粒子系统数据类\r\n/// </summary>\r\n[System.Serializable]\r\npublic class ParticleSystemData\r\n{\r\n    public string timestamp;\r\n    public string particleSystemState;\r\n    public float systemUptime;\r\n    public int activeParticles;\r\n    public int particleCount;\r\n    public float averageParticleLifetime;\r\n    public float particleEmissionRate;\r\n    public float particleDeathRate;\r\n    public float particleUpdateTime;\r\n    public int completedJobs;\r\n    public float averagePerformance;\r\n    public float minPerformance;\r\n    public float maxPerformance;\r\n    public float[] performanceHistory;\r\n} "
        }
    ]
}