{
    "sourceFile": "Assets/UnityEditor/Chapter 8 UnityAPI/UnityEditor/UIElements/UIElementsExample.cs",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1750930180081,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1750930180081,
            "name": "Commit-0",
            "content": "using UnityEngine;\r\nusing UnityEditor;\r\nusing UnityEditor.UIElements;\r\nusing UnityEngine.UIElements;\r\nusing System.Collections.Generic;\r\n\r\n/// <summary>\r\n/// UnityEditor.UIElements 命名空间案例演示\r\n/// 展示UIElements编辑器扩展的核心功能\r\n/// </summary>\r\npublic class UIElementsExample : EditorWindow\r\n{\r\n    [Header(\"UIElements设置\")]\r\n    [SerializeField] private string windowTitle = \"UIElements演示\";\r\n    [SerializeField] private Vector2 windowSize = new Vector2(800, 600);\r\n    [SerializeField] private bool enableDarkTheme = true;\r\n    \r\n    [Header(\"UIElements组件\")]\r\n    private VisualElement rootElement;\r\n    private VisualElement mainContainer;\r\n    private VisualElement leftPanel;\r\n    private VisualElement rightPanel;\r\n    private VisualElement toolbar;\r\n    private VisualElement statusBar;\r\n    \r\n    [Header(\"UIElements状态\")]\r\n    private bool isInitialized = false;\r\n    private int currentTab = 0;\r\n    private string currentStatus = \"就绪\";\r\n    \r\n    // UI元素引用\r\n    private TextField titleField;\r\n    private Slider sizeSlider;\r\n    private Toggle themeToggle;\r\n    private Button[] tabButtons;\r\n    private Label statusLabel;\r\n    private ListView itemListView;\r\n    private ObjectField objectField;\r\n    private ColorField colorField;\r\n    private Vector3Field vector3Field;\r\n    private CurveField curveField;\r\n    private GradientField gradientField;\r\n    private EnumField enumField;\r\n    private LayerMaskField layerMaskField;\r\n    private TagField tagField;\r\n    \r\n    [MenuItem(\"Window/UIElements演示\")]\r\n    public static void ShowWindow()\r\n    {\r\n        UIElementsExample window = GetWindow<UIElementsExample>();\r\n        window.titleContent = new GUIContent(\"UIElements演示\");\r\n        window.minSize = new Vector2(600, 400);\r\n        window.Show();\r\n    }\r\n    \r\n    private void CreateGUI()\r\n    {\r\n        InitializeUIElements();\r\n    }\r\n    \r\n    /// <summary>\r\n    /// 初始化UIElements\r\n    /// </summary>\r\n    private void InitializeUIElements()\r\n    {\r\n        if (isInitialized) return;\r\n        \r\n        // 获取根元素\r\n        rootElement = rootVisualElement;\r\n        \r\n        // 设置样式\r\n        SetupStyles();\r\n        \r\n        // 创建主布局\r\n        CreateMainLayout();\r\n        \r\n        // 创建工具栏\r\n        CreateToolbar();\r\n        \r\n        // 创建主容器\r\n        CreateMainContainer();\r\n        \r\n        // 创建状态栏\r\n        CreateStatusBar();\r\n        \r\n        // 初始化标签页\r\n        InitializeTabs();\r\n        \r\n        isInitialized = true;\r\n        UpdateStatus(\"UIElements初始化完成\");\r\n        \r\n        Debug.Log(\"UIElements系统初始化完成\");\r\n    }\r\n    \r\n    /// <summary>\r\n    /// 设置样式\r\n    /// </summary>\r\n    private void SetupStyles()\r\n    {\r\n        // 加载样式表\r\n        var styleSheet = AssetDatabase.LoadAssetAtPath<StyleSheet>(\"Assets/Editor Default Resources/UIElementsExample.uss\");\r\n        if (styleSheet != null)\r\n        {\r\n            rootElement.styleSheets.Add(styleSheet);\r\n        }\r\n        \r\n        // 应用主题\r\n        if (enableDarkTheme)\r\n        {\r\n            rootElement.AddToClassList(\"dark-theme\");\r\n        }\r\n        else\r\n        {\r\n            rootElement.AddToClassList(\"light-theme\");\r\n        }\r\n    }\r\n    \r\n    /// <summary>\r\n    /// 创建主布局\r\n    /// </summary>\r\n    private void CreateMainLayout()\r\n    {\r\n        // 创建主容器\r\n        mainContainer = new VisualElement();\r\n        mainContainer.name = \"main-container\";\r\n        mainContainer.AddToClassList(\"main-container\");\r\n        rootElement.Add(mainContainer);\r\n    }\r\n    \r\n    /// <summary>\r\n    /// 创建工具栏\r\n    /// </summary>\r\n    private void CreateToolbar()\r\n    {\r\n        toolbar = new VisualElement();\r\n        toolbar.name = \"toolbar\";\r\n        toolbar.AddToClassList(\"toolbar\");\r\n        mainContainer.Add(toolbar);\r\n        \r\n        // 标题字段\r\n        titleField = new TextField(\"窗口标题\");\r\n        titleField.value = windowTitle;\r\n        titleField.RegisterValueChangedCallback(evt =>\r\n        {\r\n            windowTitle = evt.newValue;\r\n            titleContent = new GUIContent(windowTitle);\r\n            UpdateStatus($\"标题已更改为: {windowTitle}\");\r\n        });\r\n        toolbar.Add(titleField);\r\n        \r\n        // 大小滑块\r\n        sizeSlider = new Slider(\"窗口大小\", 400, 1200);\r\n        sizeSlider.value = windowSize.x;\r\n        sizeSlider.RegisterValueChangedCallback(evt =>\r\n        {\r\n            windowSize = new Vector2(evt.newValue, evt.newValue * 0.75f);\r\n            minSize = windowSize;\r\n            UpdateStatus($\"窗口大小已设置为: {windowSize}\");\r\n        });\r\n        toolbar.Add(sizeSlider);\r\n        \r\n        // 主题切换\r\n        themeToggle = new Toggle(\"深色主题\");\r\n        themeToggle.value = enableDarkTheme;\r\n        themeToggle.RegisterValueChangedCallback(evt =>\r\n        {\r\n            enableDarkTheme = evt.newValue;\r\n            ApplyTheme();\r\n            UpdateStatus($\"主题已切换为: {(enableDarkTheme ? \"深色\" : \"浅色\")}\");\r\n        });\r\n        toolbar.Add(themeToggle);\r\n        \r\n        // 刷新按钮\r\n        var refreshButton = new Button(() =>\r\n        {\r\n            RefreshUI();\r\n            UpdateStatus(\"UI已刷新\");\r\n        })\r\n        {\r\n            text = \"刷新\"\r\n        };\r\n        refreshButton.AddToClassList(\"toolbar-button\");\r\n        toolbar.Add(refreshButton);\r\n    }\r\n    \r\n    /// <summary>\r\n    /// 创建主容器\r\n    /// </summary>\r\n    private void CreateMainContainer()\r\n    {\r\n        // 创建水平布局\r\n        var horizontalLayout = new VisualElement();\r\n        horizontalLayout.AddToClassList(\"horizontal-layout\");\r\n        mainContainer.Add(horizontalLayout);\r\n        \r\n        // 创建左侧面板\r\n        CreateLeftPanel(horizontalLayout);\r\n        \r\n        // 创建右侧面板\r\n        CreateRightPanel(horizontalLayout);\r\n    }\r\n    \r\n    /// <summary>\r\n    /// 创建左侧面板\r\n    /// </summary>\r\n    /// <param name=\"parent\">父元素</param>\r\n    private void CreateLeftPanel(VisualElement parent)\r\n    {\r\n        leftPanel = new VisualElement();\r\n        leftPanel.name = \"left-panel\";\r\n        leftPanel.AddToClassList(\"left-panel\");\r\n        parent.Add(leftPanel);\r\n        \r\n        // 标签页按钮\r\n        CreateTabButtons();\r\n        \r\n        // 内容区域\r\n        CreateContentArea();\r\n    }\r\n    \r\n    /// <summary>\r\n    /// 创建标签页按钮\r\n    /// </summary>\r\n    private void CreateTabButtons()\r\n    {\r\n        var tabContainer = new VisualElement();\r\n        tabContainer.AddToClassList(\"tab-container\");\r\n        leftPanel.Add(tabContainer);\r\n        \r\n        string[] tabNames = { \"基础控件\", \"高级控件\", \"布局\", \"样式\", \"事件\" };\r\n        tabButtons = new Button[tabNames.Length];\r\n        \r\n        for (int i = 0; i < tabNames.Length; i++)\r\n        {\r\n            int index = i; // 闭包变量\r\n            tabButtons[i] = new Button(() =>\r\n            {\r\n                SwitchTab(index);\r\n            })\r\n            {\r\n                text = tabNames[i]\r\n            };\r\n            tabButtons[i].AddToClassList(\"tab-button\");\r\n            tabContainer.Add(tabButtons[i]);\r\n        }\r\n    }\r\n    \r\n    /// <summary>\r\n    /// 创建内容区域\r\n    /// </summary>\r\n    private void CreateContentArea()\r\n    {\r\n        var contentArea = new VisualElement();\r\n        contentArea.name = \"content-area\";\r\n        contentArea.AddToClassList(\"content-area\");\r\n        leftPanel.Add(contentArea);\r\n        \r\n        // 创建不同标签页的内容\r\n        CreateBasicControlsContent(contentArea);\r\n        CreateAdvancedControlsContent(contentArea);\r\n        CreateLayoutContent(contentArea);\r\n        CreateStyleContent(contentArea);\r\n        CreateEventContent(contentArea);\r\n    }\r\n    \r\n    /// <summary>\r\n    /// 创建基础控件内容\r\n    /// </summary>\r\n    /// <param name=\"parent\">父元素</param>\r\n    private void CreateBasicControlsContent(VisualElement parent)\r\n    {\r\n        var container = new VisualElement();\r\n        container.name = \"basic-controls\";\r\n        container.AddToClassList(\"tab-content\");\r\n        parent.Add(container);\r\n        \r\n        // 标签\r\n        var label = new Label(\"这是一个标签\");\r\n        container.Add(label);\r\n        \r\n        // 按钮\r\n        var button = new Button(() =>\r\n        {\r\n            UpdateStatus(\"按钮被点击\");\r\n        })\r\n        {\r\n            text = \"点击我\"\r\n        };\r\n        container.Add(button);\r\n        \r\n        // 文本字段\r\n        var textField = new TextField(\"文本字段\");\r\n        textField.RegisterValueChangedCallback(evt =>\r\n        {\r\n            UpdateStatus($\"文本已更改: {evt.newValue}\");\r\n        });\r\n        container.Add(textField);\r\n        \r\n        // 滑块\r\n        var slider = new Slider(\"滑块\", 0, 100);\r\n        slider.RegisterValueChangedCallback(evt =>\r\n        {\r\n            UpdateStatus($\"滑块值: {evt.newValue}\");\r\n        });\r\n        container.Add(slider);\r\n        \r\n        // 切换开关\r\n        var toggle = new Toggle(\"切换开关\");\r\n        toggle.RegisterValueChangedCallback(evt =>\r\n        {\r\n            UpdateStatus($\"切换状态: {evt.newValue}\");\r\n        });\r\n        container.Add(toggle);\r\n    }\r\n    \r\n    /// <summary>\r\n    /// 创建高级控件内容\r\n    /// </summary>\r\n    /// <param name=\"parent\">父元素</param>\r\n    private void CreateAdvancedControlsContent(VisualElement parent)\r\n    {\r\n        var container = new VisualElement();\r\n        container.name = \"advanced-controls\";\r\n        container.AddToClassList(\"tab-content\");\r\n        container.style.display = DisplayStyle.None;\r\n        parent.Add(container);\r\n        \r\n        // 对象字段\r\n        objectField = new ObjectField(\"对象字段\");\r\n        objectField.objectType = typeof(GameObject);\r\n        objectField.RegisterValueChangedCallback(evt =>\r\n        {\r\n            UpdateStatus($\"对象已选择: {(evt.newValue != null ? evt.newValue.name : \"无\")}\");\r\n        });\r\n        container.Add(objectField);\r\n        \r\n        // 颜色字段\r\n        colorField = new ColorField(\"颜色字段\");\r\n        colorField.RegisterValueChangedCallback(evt =>\r\n        {\r\n            UpdateStatus($\"颜色已更改: {evt.newValue}\");\r\n        });\r\n        container.Add(colorField);\r\n        \r\n        // 向量3字段\r\n        vector3Field = new Vector3Field(\"向量3字段\");\r\n        vector3Field.RegisterValueChangedCallback(evt =>\r\n        {\r\n            UpdateStatus($\"向量3已更改: {evt.newValue}\");\r\n        });\r\n        container.Add(vector3Field);\r\n        \r\n        // 曲线字段\r\n        curveField = new CurveField(\"曲线字段\");\r\n        curveField.RegisterValueChangedCallback(evt =>\r\n        {\r\n            UpdateStatus(\"曲线已更改\");\r\n        });\r\n        container.Add(curveField);\r\n        \r\n        // 渐变字段\r\n        gradientField = new GradientField(\"渐变字段\");\r\n        gradientField.RegisterValueChangedCallback(evt =>\r\n        {\r\n            UpdateStatus(\"渐变已更改\");\r\n        });\r\n        container.Add(gradientField);\r\n        \r\n        // 枚举字段\r\n        enumField = new EnumField(\"枚举字段\", HideFlags.None);\r\n        enumField.RegisterValueChangedCallback(evt =>\r\n        {\r\n            UpdateStatus($\"枚举已更改: {evt.newValue}\");\r\n        });\r\n        container.Add(enumField);\r\n        \r\n        // 层遮罩字段\r\n        layerMaskField = new LayerMaskField(\"层遮罩字段\");\r\n        layerMaskField.RegisterValueChangedCallback(evt =>\r\n        {\r\n            UpdateStatus($\"层遮罩已更改: {evt.newValue}\");\r\n        });\r\n        container.Add(layerMaskField);\r\n        \r\n        // 标签字段\r\n        tagField = new TagField(\"标签字段\");\r\n        tagField.RegisterValueChangedCallback(evt =>\r\n        {\r\n            UpdateStatus($\"标签已更改: {evt.newValue}\");\r\n        });\r\n        container.Add(tagField);\r\n    }\r\n    \r\n    /// <summary>\r\n    /// 创建布局内容\r\n    /// </summary>\r\n    /// <param name=\"parent\">父元素</param>\r\n    private void CreateLayoutContent(VisualElement parent)\r\n    {\r\n        var container = new VisualElement();\r\n        container.name = \"layout-content\";\r\n        container.AddToClassList(\"tab-content\");\r\n        container.style.display = DisplayStyle.None;\r\n        parent.Add(container);\r\n        \r\n        // 水平布局示例\r\n        var horizontalBox = new Box();\r\n        horizontalBox.AddToClassList(\"layout-example\");\r\n        container.Add(horizontalBox);\r\n        \r\n        var horizontalLabel = new Label(\"水平布局:\");\r\n        horizontalBox.Add(horizontalLabel);\r\n        \r\n        var horizontalLayout = new VisualElement();\r\n        horizontalLayout.style.flexDirection = FlexDirection.Row;\r\n        horizontalLayout.style.justifyContent = Justify.SpaceBetween;\r\n        horizontalBox.Add(horizontalLayout);\r\n        \r\n        for (int i = 0; i < 3; i++)\r\n        {\r\n            var button = new Button() { text = $\"按钮{i + 1}\" };\r\n            horizontalLayout.Add(button);\r\n        }\r\n        \r\n        // 垂直布局示例\r\n        var verticalBox = new Box();\r\n        verticalBox.AddToClassList(\"layout-example\");\r\n        container.Add(verticalBox);\r\n        \r\n        var verticalLabel = new Label(\"垂直布局:\");\r\n        verticalBox.Add(verticalLabel);\r\n        \r\n        var verticalLayout = new VisualElement();\r\n        verticalLayout.style.flexDirection = FlexDirection.Column;\r\n        verticalLayout.style.alignItems = Align.Center;\r\n        verticalBox.Add(verticalLayout);\r\n        \r\n        for (int i = 0; i < 3; i++)\r\n        {\r\n            var button = new Button() { text = $\"按钮{i + 1}\" };\r\n            verticalLayout.Add(button);\r\n        }\r\n        \r\n        // 网格布局示例\r\n        var gridBox = new Box();\r\n        gridBox.AddToClassList(\"layout-example\");\r\n        container.Add(gridBox);\r\n        \r\n        var gridLabel = new Label(\"网格布局:\");\r\n        gridBox.Add(gridLabel);\r\n        \r\n        var gridLayout = new VisualElement();\r\n        gridLayout.style.flexDirection = FlexDirection.Row;\r\n        gridLayout.style.flexWrap = Wrap.Wrap;\r\n        gridBox.Add(gridLayout);\r\n        \r\n        for (int i = 0; i < 6; i++)\r\n        {\r\n            var button = new Button() { text = $\"网格{i + 1}\" };\r\n            button.style.width = 80;\r\n            button.style.height = 40;\r\n            button.style.marginRight = 5;\r\n            button.style.marginBottom = 5;\r\n            gridLayout.Add(button);\r\n        }\r\n    }\r\n    \r\n    /// <summary>\r\n    /// 创建样式内容\r\n    /// </summary>\r\n    /// <param name=\"parent\">父元素</param>\r\n    private void CreateStyleContent(VisualElement parent)\r\n    {\r\n        var container = new VisualElement();\r\n        container.name = \"style-content\";\r\n        container.AddToClassList(\"tab-content\");\r\n        container.style.display = DisplayStyle.None;\r\n        parent.Add(container);\r\n        \r\n        // 样式示例\r\n        var styleExamples = new[]\r\n        {\r\n            new { name = \"边框\", style = \"border-example\" },\r\n            new { name = \"背景\", style = \"background-example\" },\r\n            new { name = \"阴影\", style = \"shadow-example\" },\r\n            new { name = \"圆角\", style = \"rounded-example\" }\r\n        };\r\n        \r\n        foreach (var example in styleExamples)\r\n        {\r\n            var box = new Box();\r\n            box.AddToClassList(example.style);\r\n            box.AddToClassList(\"style-example\");\r\n            container.Add(box);\r\n            \r\n            var label = new Label(example.name);\r\n            box.Add(label);\r\n        }\r\n        \r\n        // 动态样式按钮\r\n        var dynamicButton = new Button(\"动态样式\");\r\n        dynamicButton.RegisterCallback<ClickEvent>(evt =>\r\n        {\r\n            if (dynamicButton.ClassListContains(\"dynamic-style\"))\r\n            {\r\n                dynamicButton.RemoveFromClassList(\"dynamic-style\");\r\n                UpdateStatus(\"动态样式已移除\");\r\n            }\r\n            else\r\n            {\r\n                dynamicButton.AddToClassList(\"dynamic-style\");\r\n                UpdateStatus(\"动态样式已应用\");\r\n            }\r\n        });\r\n        container.Add(dynamicButton);\r\n    }\r\n    \r\n    /// <summary>\r\n    /// 创建事件内容\r\n    /// </summary>\r\n    /// <param name=\"parent\">父元素</param>\r\n    private void CreateEventContent(VisualElement parent)\r\n    {\r\n        var container = new VisualElement();\r\n        container.name = \"event-content\";\r\n        container.AddToClassList(\"tab-content\");\r\n        container.style.display = DisplayStyle.None;\r\n        parent.Add(container);\r\n        \r\n        // 事件示例\r\n        var eventBox = new Box();\r\n        eventBox.AddToClassList(\"event-example\");\r\n        container.Add(eventBox);\r\n        \r\n        // 鼠标事件\r\n        eventBox.RegisterCallback<MouseEnterEvent>(evt =>\r\n        {\r\n            UpdateStatus(\"鼠标进入事件\");\r\n        });\r\n        \r\n        eventBox.RegisterCallback<MouseLeaveEvent>(evt =>\r\n        {\r\n            UpdateStatus(\"鼠标离开事件\");\r\n        });\r\n        \r\n        eventBox.RegisterCallback<MouseDownEvent>(evt =>\r\n        {\r\n            UpdateStatus($\"鼠标按下事件: {evt.mousePosition}\");\r\n        });\r\n        \r\n        eventBox.RegisterCallback<MouseUpEvent>(evt =>\r\n        {\r\n            UpdateStatus($\"鼠标释放事件: {evt.mousePosition}\");\r\n        });\r\n        \r\n        var eventLabel = new Label(\"鼠标事件区域 (移动鼠标到此区域)\");\r\n        eventBox.Add(eventLabel);\r\n        \r\n        // 键盘事件\r\n        var keyboardBox = new Box();\r\n        keyboardBox.AddToClassList(\"event-example\");\r\n        container.Add(keyboardBox);\r\n        \r\n        keyboardBox.focusable = true;\r\n        keyboardBox.RegisterCallback<KeyDownEvent>(evt =>\r\n        {\r\n            UpdateStatus($\"键盘按下: {evt.keyCode}\");\r\n        });\r\n        \r\n        var keyboardLabel = new Label(\"键盘事件区域 (点击后按键盘)\");\r\n        keyboardBox.Add(keyboardLabel);\r\n        \r\n        // 拖拽事件\r\n        var dragBox = new Box();\r\n        dragBox.AddToClassList(\"event-example\");\r\n        container.Add(dragBox);\r\n        \r\n        dragBox.RegisterCallback<DragEnterEvent>(evt =>\r\n        {\r\n            UpdateStatus(\"拖拽进入\");\r\n        });\r\n        \r\n        dragBox.RegisterCallback<DragLeaveEvent>(evt =>\r\n        {\r\n            UpdateStatus(\"拖拽离开\");\r\n        });\r\n        \r\n        dragBox.RegisterCallback<DragUpdatedEvent>(evt =>\r\n        {\r\n            UpdateStatus(\"拖拽更新\");\r\n        });\r\n        \r\n        var dragLabel = new Label(\"拖拽事件区域\");\r\n        dragBox.Add(dragLabel);\r\n    }\r\n    \r\n    /// <summary>\r\n    /// 创建右侧面板\r\n    /// </summary>\r\n    /// <param name=\"parent\">父元素</param>\r\n    private void CreateRightPanel(VisualElement parent)\r\n    {\r\n        rightPanel = new VisualElement();\r\n        rightPanel.name = \"right-panel\";\r\n        rightPanel.AddToClassList(\"right-panel\");\r\n        parent.Add(rightPanel);\r\n        \r\n        // 列表视图\r\n        CreateListView();\r\n        \r\n        // 属性面板\r\n        CreatePropertyPanel();\r\n    }\r\n    \r\n    /// <summary>\r\n    /// 创建列表视图\r\n    /// </summary>\r\n    private void CreateListView()\r\n    {\r\n        var listContainer = new VisualElement();\r\n        listContainer.AddToClassList(\"list-container\");\r\n        rightPanel.Add(listContainer);\r\n        \r\n        var listLabel = new Label(\"列表视图\");\r\n        listContainer.Add(listLabel);\r\n        \r\n        // 创建示例数据\r\n        var items = new List<string>();\r\n        for (int i = 1; i <= 20; i++)\r\n        {\r\n            items.Add($\"项目 {i}\");\r\n        }\r\n        \r\n        // 创建列表视图\r\n        itemListView = new ListView(items, 20, () => new Label(), (element, index) =>\r\n        {\r\n            ((Label)element).text = items[index];\r\n        });\r\n        \r\n        itemListView.selectionType = SelectionType.Multiple;\r\n        itemListView.onSelectionChange += (selectedItems) =>\r\n        {\r\n            UpdateStatus($\"选择了 {selectedItems.Count} 个项目\");\r\n        };\r\n        \r\n        listContainer.Add(itemListView);\r\n    }\r\n    \r\n    /// <summary>\r\n    /// 创建属性面板\r\n    /// </summary>\r\n    private void CreatePropertyPanel()\r\n    {\r\n        var propertyContainer = new VisualElement();\r\n        propertyContainer.AddToClassList(\"property-container\");\r\n        rightPanel.Add(propertyContainer);\r\n        \r\n        var propertyLabel = new Label(\"属性面板\");\r\n        propertyContainer.Add(propertyLabel);\r\n        \r\n        // 添加一些属性字段\r\n        var intField = new IntegerField(\"整数字段\");\r\n        intField.RegisterValueChangedCallback(evt =>\r\n        {\r\n            UpdateStatus($\"整数值: {evt.newValue}\");\r\n        });\r\n        propertyContainer.Add(intField);\r\n        \r\n        var floatField = new FloatField(\"浮点数字段\");\r\n        floatField.RegisterValueChangedCallback(evt =>\r\n        {\r\n            UpdateStatus($\"浮点数值: {evt.newValue}\");\r\n        });\r\n        propertyContainer.Add(floatField);\r\n        \r\n        var stringField = new TextField(\"字符串字段\");\r\n        stringField.RegisterValueChangedCallback(evt =>\r\n        {\r\n            UpdateStatus($\"字符串值: {evt.newValue}\");\r\n        });\r\n        propertyContainer.Add(stringField);\r\n        \r\n        var boolField = new Toggle(\"布尔字段\");\r\n        boolField.RegisterValueChangedCallback(evt =>\r\n        {\r\n            UpdateStatus($\"布尔值: {evt.newValue}\");\r\n        });\r\n        propertyContainer.Add(boolField);\r\n    }\r\n    \r\n    /// <summary>\r\n    /// 创建状态栏\r\n    /// </summary>\r\n    private void CreateStatusBar()\r\n    {\r\n        statusBar = new VisualElement();\r\n        statusBar.name = \"status-bar\";\r\n        statusBar.AddToClassList(\"status-bar\");\r\n        mainContainer.Add(statusBar);\r\n        \r\n        statusLabel = new Label(currentStatus);\r\n        statusBar.Add(statusLabel);\r\n    }\r\n    \r\n    /// <summary>\r\n    /// 初始化标签页\r\n    /// </summary>\r\n    private void InitializeTabs()\r\n    {\r\n        SwitchTab(0);\r\n    }\r\n    \r\n    /// <summary>\r\n    /// 切换标签页\r\n    /// </summary>\r\n    /// <param name=\"tabIndex\">标签页索引</param>\r\n    private void SwitchTab(int tabIndex)\r\n    {\r\n        currentTab = tabIndex;\r\n        \r\n        // 更新按钮状态\r\n        for (int i = 0; i < tabButtons.Length; i++)\r\n        {\r\n            if (i == tabIndex)\r\n            {\r\n                tabButtons[i].AddToClassList(\"active\");\r\n            }\r\n            else\r\n            {\r\n                tabButtons[i].RemoveFromClassList(\"active\");\r\n            }\r\n        }\r\n        \r\n        // 更新内容显示\r\n        var contentArea = leftPanel.Q(\"content-area\");\r\n        var tabContents = contentArea.Query<VisualElement>(className: \"tab-content\").ToList();\r\n        \r\n        for (int i = 0; i < tabContents.Count; i++)\r\n        {\r\n            if (i == tabIndex)\r\n            {\r\n                tabContents[i].style.display = DisplayStyle.Flex;\r\n            }\r\n            else\r\n            {\r\n                tabContents[i].style.display = DisplayStyle.None;\r\n            }\r\n        }\r\n        \r\n        UpdateStatus($\"切换到标签页: {tabIndex + 1}\");\r\n    }\r\n    \r\n    /// <summary>\r\n    /// 应用主题\r\n    /// </summary>\r\n    private void ApplyTheme()\r\n    {\r\n        if (enableDarkTheme)\r\n        {\r\n            rootElement.RemoveFromClassList(\"light-theme\");\r\n            rootElement.AddToClassList(\"dark-theme\");\r\n        }\r\n        else\r\n        {\r\n            rootElement.RemoveFromClassList(\"dark-theme\");\r\n            rootElement.AddToClassList(\"light-theme\");\r\n        }\r\n    }\r\n    \r\n    /// <summary>\r\n    /// 更新状态\r\n    /// </summary>\r\n    /// <param name=\"status\">状态信息</param>\r\n    private void UpdateStatus(string status)\r\n    {\r\n        currentStatus = status;\r\n        if (statusLabel != null)\r\n        {\r\n            statusLabel.text = status;\r\n        }\r\n        Debug.Log($\"UIElements状态: {status}\");\r\n    }\r\n    \r\n    /// <summary>\r\n    /// 刷新UI\r\n    /// </summary>\r\n    private void RefreshUI()\r\n    {\r\n        // 重新创建UI\r\n        rootElement.Clear();\r\n        isInitialized = false;\r\n        InitializeUIElements();\r\n    }\r\n    \r\n    /// <summary>\r\n    /// 获取UI信息\r\n    /// </summary>\r\n    public void GetUIElementsInfo()\r\n    {\r\n        Debug.Log(\"=== UIElements信息 ===\");\r\n        Debug.Log($\"窗口标题: {windowTitle}\");\r\n        Debug.Log($\"窗口大小: {windowSize}\");\r\n        Debug.Log($\"深色主题: {enableDarkTheme}\");\r\n        Debug.Log($\"当前标签页: {currentTab}\");\r\n        Debug.Log($\"当前状态: {currentStatus}\");\r\n        Debug.Log($\"UI初始化: {isInitialized}\");\r\n        \r\n        if (rootElement != null)\r\n        {\r\n            Debug.Log($\"根元素子元素数量: {rootElement.childCount}\");\r\n        }\r\n    }\r\n    \r\n    private void OnDestroy()\r\n    {\r\n        UpdateStatus(\"UIElements窗口已关闭\");\r\n    }\r\n} "
        }
    ]
}