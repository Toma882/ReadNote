{
    "sourceFile": "Assets/UnityEditor/Chapter 8 UnityAPI/UnityEditor/EditorTools/EditorToolsExample.cs",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1750941041979,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1750941041979,
            "name": "Commit-0",
            "content": "using UnityEngine;\r\nusing UnityEditor;\r\nusing UnityEditor.EditorTools;\r\nusing System.Collections.Generic;\r\n\r\nnamespace UnityEditor.EditorTools.Examples\r\n{\r\n    /// <summary>\r\n    /// UnityEditor.EditorTools 命名空间使用示例\r\n    /// 演示编辑器工具系统的创建、注册和管理功能\r\n    /// </summary>\r\n    public class EditorToolsExample : MonoBehaviour\r\n    {\r\n        [Header(\"编辑器工具配置\")]\r\n        [SerializeField] private bool enableEditorTools = true;\r\n        [SerializeField] private string toolName = \"CustomTool\";\r\n        [SerializeField] private string toolIconPath = \"\";\r\n        [SerializeField] private bool isToolActive = false;\r\n        \r\n        [Header(\"工具状态\")]\r\n        [SerializeField] private int toolCount = 0;\r\n        [SerializeField] private string currentTool = \"\";\r\n        [SerializeField] private bool isToolValid = false;\r\n        \r\n        [Header(\"目标对象\")]\r\n        [SerializeField] private GameObject targetObject;\r\n        [SerializeField] private Transform targetTransform;\r\n        \r\n        private List<EditorTool> availableTools = new List<EditorTool>();\r\n        private Dictionary<string, EditorTool> toolRegistry = new Dictionary<string, EditorTool>();\r\n        \r\n        /// <summary>\r\n        /// 初始化编辑器工具系统\r\n        /// </summary>\r\n        private void Start()\r\n        {\r\n            InitializeEditorToolsSystem();\r\n        }\r\n        \r\n        /// <summary>\r\n        /// 初始化编辑器工具系统\r\n        /// </summary>\r\n        private void InitializeEditorToolsSystem()\r\n        {\r\n            if (!enableEditorTools)\r\n            {\r\n                Debug.Log(\"编辑器工具系统已禁用\");\r\n                return;\r\n            }\r\n            \r\n            try\r\n            {\r\n                // 加载可用工具\r\n                LoadAvailableTools();\r\n                \r\n                // 注册默认工具\r\n                RegisterDefaultTools();\r\n                \r\n                Debug.Log(\"编辑器工具系统初始化完成\");\r\n            }\r\n            catch (System.Exception e)\r\n            {\r\n                Debug.LogError($\"编辑器工具系统初始化失败: {e.Message}\");\r\n            }\r\n        }\r\n        \r\n        /// <summary>\r\n        /// 加载可用工具\r\n        /// </summary>\r\n        private void LoadAvailableTools()\r\n        {\r\n            availableTools.Clear();\r\n            toolRegistry.Clear();\r\n            \r\n            // 获取所有已注册的编辑器工具\r\n            var tools = EditorToolManager.GetAvailableTools();\r\n            foreach (var tool in tools)\r\n            {\r\n                availableTools.Add(tool);\r\n                toolRegistry[tool.GetType().Name] = tool;\r\n            }\r\n            \r\n            toolCount = availableTools.Count;\r\n            Debug.Log($\"加载了 {toolCount} 个编辑器工具\");\r\n        }\r\n        \r\n        /// <summary>\r\n        /// 注册默认工具\r\n        /// </summary>\r\n        private void RegisterDefaultTools()\r\n        {\r\n            // 注册自定义工具\r\n            RegisterCustomTool<CustomTransformTool>(\"CustomTransformTool\");\r\n            RegisterCustomTool<CustomScaleTool>(\"CustomScaleTool\");\r\n            RegisterCustomTool<CustomRotationTool>(\"CustomRotationTool\");\r\n        }\r\n        \r\n        /// <summary>\r\n        /// 注册自定义工具\r\n        /// </summary>\r\n        public void RegisterCustomTool<T>(string toolName) where T : EditorTool, new()\r\n        {\r\n            try\r\n            {\r\n                var tool = new T();\r\n                availableTools.Add(tool);\r\n                toolRegistry[toolName] = tool;\r\n                toolCount = availableTools.Count;\r\n                \r\n                Debug.Log($\"自定义工具已注册: {toolName}\");\r\n            }\r\n            catch (System.Exception e)\r\n            {\r\n                Debug.LogError($\"注册自定义工具失败: {e.Message}\");\r\n            }\r\n        }\r\n        \r\n        /// <summary>\r\n        /// 激活工具\r\n        /// </summary>\r\n        public void ActivateTool(string toolName)\r\n        {\r\n            if (string.IsNullOrEmpty(toolName))\r\n            {\r\n                Debug.LogError(\"工具名称为空\");\r\n                return;\r\n            }\r\n            \r\n            if (toolRegistry.ContainsKey(toolName))\r\n            {\r\n                var tool = toolRegistry[toolName];\r\n                EditorToolManager.SetActiveTool(tool);\r\n                currentTool = toolName;\r\n                isToolActive = true;\r\n                \r\n                Debug.Log($\"工具已激活: {toolName}\");\r\n            }\r\n            else\r\n            {\r\n                Debug.LogWarning($\"工具不存在: {toolName}\");\r\n            }\r\n        }\r\n        \r\n        /// <summary>\r\n        /// 停用工具\r\n        /// </summary>\r\n        public void DeactivateTool()\r\n        {\r\n            EditorToolManager.SetActiveTool(null);\r\n            currentTool = \"\";\r\n            isToolActive = false;\r\n            \r\n            Debug.Log(\"工具已停用\");\r\n        }\r\n        \r\n        /// <summary>\r\n        /// 获取工具信息\r\n        /// </summary>\r\n        public string GetToolInfo(string toolName)\r\n        {\r\n            if (string.IsNullOrEmpty(toolName))\r\n                return \"工具名称为空\";\r\n            \r\n            if (toolRegistry.ContainsKey(toolName))\r\n            {\r\n                var tool = toolRegistry[toolName];\r\n                return $\"名称: {toolName}, 类型: {tool.GetType().Name}, 激活: {tool.IsActive}\";\r\n            }\r\n            \r\n            return $\"工具不存在: {toolName}\";\r\n        }\r\n        \r\n        /// <summary>\r\n        /// 获取所有工具名称\r\n        /// </summary>\r\n        public string[] GetAllToolNames()\r\n        {\r\n            return availableTools.Select(t => t.GetType().Name).ToArray();\r\n        }\r\n        \r\n        /// <summary>\r\n        /// 验证工具有效性\r\n        /// </summary>\r\n        public bool ValidateTool(string toolName)\r\n        {\r\n            return toolRegistry.ContainsKey(toolName);\r\n        }\r\n        \r\n        /// <summary>\r\n        /// 在编辑器中显示GUI\r\n        /// </summary>\r\n        private void OnGUI()\r\n        {\r\n            if (!Application.isPlaying) return;\r\n            \r\n            GUILayout.BeginArea(new Rect(10, 10, 500, 600));\r\n            GUILayout.Label(\"UnityEditor.EditorTools 示例\", EditorStyles.boldLabel);\r\n            \r\n            GUILayout.Space(10);\r\n            GUILayout.Label($\"状态: {(enableEditorTools ? \"启用\" : \"禁用\")}\");\r\n            GUILayout.Label($\"工具数量: {toolCount}\");\r\n            GUILayout.Label($\"当前工具: {currentTool}\");\r\n            GUILayout.Label($\"工具激活: {(isToolActive ? \"是\" : \"否\")}\");\r\n            \r\n            GUILayout.Space(10);\r\n            GUILayout.Label(\"工具管理\", EditorStyles.boldLabel);\r\n            \r\n            string[] toolNames = GetAllToolNames();\r\n            if (toolNames.Length > 0)\r\n            {\r\n                int selectedIndex = EditorGUILayout.Popup(\"选择工具\", 0, toolNames);\r\n                if (selectedIndex >= 0 && selectedIndex < availableTools.Count)\r\n                {\r\n                    var selectedTool = availableTools[selectedIndex];\r\n                    \r\n                    GUILayout.Label(GetToolInfo(selectedTool.GetType().Name));\r\n                    \r\n                    if (GUILayout.Button(\"激活工具\"))\r\n                    {\r\n                        ActivateTool(selectedTool.GetType().Name);\r\n                    }\r\n                }\r\n            }\r\n            \r\n            if (GUILayout.Button(\"停用工具\"))\r\n            {\r\n                DeactivateTool();\r\n            }\r\n            \r\n            GUILayout.Space(10);\r\n            GUILayout.Label(\"目标对象\", EditorStyles.boldLabel);\r\n            \r\n            targetObject = (GameObject)EditorGUILayout.ObjectField(\"目标对象\", targetObject, typeof(GameObject), true);\r\n            targetTransform = (Transform)EditorGUILayout.ObjectField(\"目标变换\", targetTransform, typeof(Transform), true);\r\n            \r\n            GUILayout.Space(10);\r\n            GUILayout.Label(\"配置\", EditorStyles.boldLabel);\r\n            \r\n            enableEditorTools = EditorGUILayout.Toggle(\"启用编辑器工具\", enableEditorTools);\r\n            toolName = EditorGUILayout.TextField(\"工具名称\", toolName);\r\n            toolIconPath = EditorGUILayout.TextField(\"工具图标路径\", toolIconPath);\r\n            \r\n            GUILayout.EndArea();\r\n        }\r\n    }\r\n    \r\n    /// <summary>\r\n    /// 自定义变换工具\r\n    /// </summary>\r\n    [EditorTool(\"Custom Transform Tool\")]\r\n    public class CustomTransformTool : EditorTool\r\n    {\r\n        private Vector3 originalPosition;\r\n        private bool isDragging = false;\r\n        \r\n        public override void OnToolGUI(EditorWindow window)\r\n        {\r\n            if (!(window is SceneView sceneView))\r\n                return;\r\n            \r\n            var selectedObjects = Selection.gameObjects;\r\n            if (selectedObjects.Length == 0)\r\n                return;\r\n            \r\n            foreach (var obj in selectedObjects)\r\n            {\r\n                if (obj == null) continue;\r\n                \r\n                var transform = obj.transform;\r\n                var position = transform.position;\r\n                \r\n                // 绘制位置手柄\r\n                EditorGUI.BeginChangeCheck();\r\n                var newPosition = Handles.PositionHandle(position, transform.rotation);\r\n                \r\n                if (EditorGUI.EndChangeCheck())\r\n                {\r\n                    Undo.RecordObject(transform, \"Move Object\");\r\n                    transform.position = newPosition;\r\n                }\r\n                \r\n                // 绘制选择框\r\n                Handles.color = Color.yellow;\r\n                Handles.DrawWireCube(position, Vector3.one);\r\n            }\r\n        }\r\n        \r\n        public override bool IsAvailable()\r\n        {\r\n            return Selection.gameObjects.Length > 0;\r\n        }\r\n    }\r\n    \r\n    /// <summary>\r\n    /// 自定义缩放工具\r\n    /// </summary>\r\n    [EditorTool(\"Custom Scale Tool\")]\r\n    public class CustomScaleTool : EditorTool\r\n    {\r\n        public override void OnToolGUI(EditorWindow window)\r\n        {\r\n            if (!(window is SceneView sceneView))\r\n                return;\r\n            \r\n            var selectedObjects = Selection.gameObjects;\r\n            if (selectedObjects.Length == 0)\r\n                return;\r\n            \r\n            foreach (var obj in selectedObjects)\r\n            {\r\n                if (obj == null) continue;\r\n                \r\n                var transform = obj.transform;\r\n                var position = transform.position;\r\n                var scale = transform.localScale;\r\n                \r\n                // 绘制缩放手柄\r\n                EditorGUI.BeginChangeCheck();\r\n                var newScale = Handles.ScaleHandle(scale, position, transform.rotation, 1f);\r\n                \r\n                if (EditorGUI.EndChangeCheck())\r\n                {\r\n                    Undo.RecordObject(transform, \"Scale Object\");\r\n                    transform.localScale = newScale;\r\n                }\r\n                \r\n                // 绘制选择框\r\n                Handles.color = Color.green;\r\n                Handles.DrawWireCube(position, scale);\r\n            }\r\n        }\r\n        \r\n        public override bool IsAvailable()\r\n        {\r\n            return Selection.gameObjects.Length > 0;\r\n        }\r\n    }\r\n    \r\n    /// <summary>\r\n    /// 自定义旋转工具\r\n    /// </summary>\r\n    [EditorTool(\"Custom Rotation Tool\")]\r\n    public class CustomRotationTool : EditorTool\r\n    {\r\n        public override void OnToolGUI(EditorWindow window)\r\n        {\r\n            if (!(window is SceneView sceneView))\r\n                return;\r\n            \r\n            var selectedObjects = Selection.gameObjects;\r\n            if (selectedObjects.Length == 0)\r\n                return;\r\n            \r\n            foreach (var obj in selectedObjects)\r\n            {\r\n                if (obj == null) continue;\r\n                \r\n                var transform = obj.transform;\r\n                var position = transform.position;\r\n                var rotation = transform.rotation;\r\n                \r\n                // 绘制旋转手柄\r\n                EditorGUI.BeginChangeCheck();\r\n                var newRotation = Handles.RotationHandle(rotation, position);\r\n                \r\n                if (EditorGUI.EndChangeCheck())\r\n                {\r\n                    Undo.RecordObject(transform, \"Rotate Object\");\r\n                    transform.rotation = newRotation;\r\n                }\r\n                \r\n                // 绘制选择框\r\n                Handles.color = Color.blue;\r\n                Handles.DrawWireCube(position, transform.localScale);\r\n            }\r\n        }\r\n        \r\n        public override bool IsAvailable()\r\n        {\r\n            return Selection.gameObjects.Length > 0;\r\n        }\r\n    }\r\n} "
        }
    ]
}