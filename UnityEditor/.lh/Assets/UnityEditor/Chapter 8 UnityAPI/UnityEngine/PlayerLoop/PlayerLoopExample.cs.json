{
    "sourceFile": "Assets/UnityEditor/Chapter 8 UnityAPI/UnityEngine/PlayerLoop/PlayerLoopExample.cs",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1750935396868,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1750935396868,
            "name": "Commit-0",
            "content": "using UnityEngine;\r\nusing UnityEngine.PlayerLoop;\r\n\r\n/// <summary>\r\n/// UnityEngine.PlayerLoop 命名空间案例演示\r\n/// 展示玩家循环系统、自定义更新循环、性能优化等核心功能\r\n/// </summary>\r\npublic class PlayerLoopExample : MonoBehaviour\r\n{\r\n    [Header(\"玩家循环配置\")]\r\n    [SerializeField] private bool enablePlayerLoop = true; //启用玩家循环\r\n    [SerializeField] private bool enableCustomUpdateLoop = true; //启用自定义更新循环\r\n    [SerializeField] private bool enablePerformanceOptimization = true; //启用性能优化\r\n    [SerializeField] private bool enableLoopProfiling = true; //启用循环分析\r\n    [SerializeField] private bool enableLoopDebugging = true; //启用循环调试\r\n    \r\n    [Header(\"循环参数\")]\r\n    [SerializeField] private float targetFrameRate = 60f; //目标帧率\r\n    [SerializeField] private float fixedTimeStep = 0.02f; //固定时间步长\r\n    [SerializeField] private int maxAllowedTimestep = 4; //最大允许时间步长\r\n    [SerializeField] private bool useFixedTimeStep = true; //使用固定时间步长\r\n    [SerializeField] private bool enableVSync = false; //启用垂直同步\r\n    \r\n    [Header(\"自定义循环\")]\r\n    [SerializeField] private bool enableCustomFixedUpdate = true; //启用自定义固定更新\r\n    [SerializeField] private bool enableCustomLateUpdate = true; //启用自定义延迟更新\r\n    [SerializeField] private bool enableCustomPreRender = true; //启用自定义预渲染\r\n    [SerializeField] private bool enableCustomPostRender = true; //启用自定义后渲染\r\n    [SerializeField] private bool enableCustomPreCull = true; //启用自定义预剔除\r\n    \r\n    [Header(\"性能监控\")]\r\n    [SerializeField] private bool enableLoopMonitoring = true; //启用循环监控\r\n    [SerializeField] private float monitoringInterval = 1f; //监控间隔\r\n    [SerializeField] private bool logLoopData = false; //记录循环数据\r\n    [SerializeField] private int loopIterations = 0; //循环迭代次数\r\n    [SerializeField] private float loopUpdateTime = 0f; //循环更新时间\r\n    \r\n    [Header(\"循环状态\")]\r\n    [SerializeField] private string currentLoopState = \"未初始化\"; //当前循环状态\r\n    [SerializeField] private float currentFrameRate = 0f; //当前帧率\r\n    [SerializeField] private float averageFrameRate = 0f; //平均帧率\r\n    [SerializeField] private float minFrameRate = 0f; //最低帧率\r\n    [SerializeField] private float maxFrameRate = 0f; //最高帧率\r\n    [SerializeField] private float deltaTime = 0f; //增量时间\r\n    [SerializeField] private float fixedDeltaTime = 0f; //固定增量时间\r\n    \r\n    [Header(\"性能数据\")]\r\n    [SerializeField] private float[] frameRateHistory = new float[100]; //帧率历史\r\n    [SerializeField] private int frameRateIndex = 0; //帧率索引\r\n    [SerializeField] private float[] updateTimeHistory = new float[100]; //更新时间历史\r\n    [SerializeField] private int updateTimeIndex = 0; //更新时间索引\r\n    \r\n    private float lastMonitoringTime = 0f;\r\n    private float frameRateSum = 0f;\r\n    private int frameRateCount = 0;\r\n    private bool isInitialized = false;\r\n    private System.Collections.Generic.List<CustomUpdateSystem> customUpdateSystems = new System.Collections.Generic.List<CustomUpdateSystem>();\r\n\r\n    private void Start()\r\n    {\r\n        InitializePlayerLoop();\r\n    }\r\n\r\n    /// <summary>\r\n    /// 初始化玩家循环\r\n    /// </summary>\r\n    private void InitializePlayerLoop()\r\n    {\r\n        // 配置玩家循环参数\r\n        ConfigurePlayerLoop();\r\n        \r\n        // 初始化自定义更新系统\r\n        InitializeCustomUpdateSystems();\r\n        \r\n        // 初始化性能监控\r\n        InitializePerformanceMonitoring();\r\n        \r\n        // 注册自定义循环\r\n        RegisterCustomLoops();\r\n        \r\n        isInitialized = true;\r\n        currentLoopState = \"已初始化\";\r\n        Debug.Log(\"玩家循环系统初始化完成\");\r\n    }\r\n\r\n    /// <summary>\r\n    /// 配置玩家循环参数\r\n    /// </summary>\r\n    private void ConfigurePlayerLoop()\r\n    {\r\n        // 设置目标帧率\r\n        Application.targetFrameRate = (int)targetFrameRate;\r\n        \r\n        // 设置垂直同步\r\n        QualitySettings.vSyncCount = enableVSync ? 1 : 0;\r\n        \r\n        // 设置固定时间步长\r\n        Time.fixedDeltaTime = fixedTimeStep;\r\n        \r\n        // 设置最大允许时间步长\r\n        Time.maximumDeltaTime = maxAllowedTimestep * fixedTimeStep;\r\n        \r\n        Debug.Log($\"玩家循环配置: 目标帧率={targetFrameRate}, 固定时间步长={fixedTimeStep}, 垂直同步={enableVSync}\");\r\n    }\r\n\r\n    /// <summary>\r\n    /// 初始化自定义更新系统\r\n    /// </summary>\r\n    private void InitializeCustomUpdateSystems()\r\n    {\r\n        if (enableCustomUpdateLoop)\r\n        {\r\n            // 创建自定义更新系统\r\n            customUpdateSystems.Add(new CustomUpdateSystem(\"Physics\", 0.02f));\r\n            customUpdateSystems.Add(new CustomUpdateSystem(\"AI\", 0.1f));\r\n            customUpdateSystems.Add(new CustomUpdateSystem(\"Audio\", 0.05f));\r\n            customUpdateSystems.Add(new CustomUpdateSystem(\"Network\", 0.033f));\r\n            \r\n            Debug.Log($\"自定义更新系统初始化完成: {customUpdateSystems.Count} 个系统\");\r\n        }\r\n    }\r\n\r\n    /// <summary>\r\n    /// 初始化性能监控\r\n    /// </summary>\r\n    private void InitializePerformanceMonitoring()\r\n    {\r\n        if (enableLoopMonitoring)\r\n        {\r\n            frameRateHistory = new float[100];\r\n            updateTimeHistory = new float[100];\r\n            frameRateIndex = 0;\r\n            updateTimeIndex = 0;\r\n            frameRateSum = 0f;\r\n            frameRateCount = 0;\r\n            \r\n            Debug.Log(\"性能监控初始化完成\");\r\n        }\r\n    }\r\n\r\n    /// <summary>\r\n    /// 注册自定义循环\r\n    /// </summary>\r\n    private void RegisterCustomLoops()\r\n    {\r\n        if (enableCustomUpdateLoop)\r\n        {\r\n            // 这里可以注册自定义的玩家循环阶段\r\n            Debug.Log(\"自定义循环注册完成\");\r\n        }\r\n    }\r\n\r\n    private void Update()\r\n    {\r\n        if (!isInitialized) return;\r\n        \r\n        float startTime = Time.realtimeSinceStartup;\r\n        \r\n        // 更新循环状态\r\n        UpdateLoopState();\r\n        \r\n        // 执行自定义更新\r\n        ExecuteCustomUpdates();\r\n        \r\n        // 更新性能数据\r\n        UpdatePerformanceData(startTime);\r\n        \r\n        // 循环监控\r\n        if (enableLoopMonitoring && Time.time - lastMonitoringTime > monitoringInterval)\r\n        {\r\n            MonitorLoopPerformance();\r\n            lastMonitoringTime = Time.time;\r\n        }\r\n    }\r\n\r\n    private void FixedUpdate()\r\n    {\r\n        if (!isInitialized) return;\r\n        \r\n        // 固定更新逻辑\r\n        if (enableCustomFixedUpdate)\r\n        {\r\n            ExecuteFixedUpdate();\r\n        }\r\n    }\r\n\r\n    private void LateUpdate()\r\n    {\r\n        if (!isInitialized) return;\r\n        \r\n        // 延迟更新逻辑\r\n        if (enableCustomLateUpdate)\r\n        {\r\n            ExecuteLateUpdate();\r\n        }\r\n    }\r\n\r\n    /// <summary>\r\n    /// 更新循环状态\r\n    /// </summary>\r\n    private void UpdateLoopState()\r\n    {\r\n        // 更新帧率\r\n        currentFrameRate = 1f / Time.deltaTime;\r\n        deltaTime = Time.deltaTime;\r\n        fixedDeltaTime = Time.fixedDeltaTime;\r\n        \r\n        // 更新循环迭代次数\r\n        loopIterations++;\r\n        \r\n        // 更新状态\r\n        currentLoopState = $\"运行中 (帧率: {currentFrameRate:F1} FPS)\";\r\n    }\r\n\r\n    /// <summary>\r\n    /// 执行自定义更新\r\n    /// </summary>\r\n    private void ExecuteCustomUpdates()\r\n    {\r\n        foreach (var system in customUpdateSystems)\r\n        {\r\n            if (system.ShouldUpdate())\r\n            {\r\n                system.Update();\r\n            }\r\n        }\r\n    }\r\n\r\n    /// <summary>\r\n    /// 执行固定更新\r\n    /// </summary>\r\n    private void ExecuteFixedUpdate()\r\n    {\r\n        // 固定更新逻辑\r\n        if (logLoopData)\r\n        {\r\n            Debug.Log($\"固定更新: 时间={Time.fixedTime:F2}s, 步长={Time.fixedDeltaTime:F3}s\");\r\n        }\r\n    }\r\n\r\n    /// <summary>\r\n    /// 执行延迟更新\r\n    /// </summary>\r\n    private void ExecuteLateUpdate()\r\n    {\r\n        // 延迟更新逻辑\r\n        if (logLoopData)\r\n        {\r\n            Debug.Log($\"延迟更新: 帧={Time.frameCount}\");\r\n        }\r\n    }\r\n\r\n    /// <summary>\r\n    /// 更新性能数据\r\n    /// </summary>\r\n    private void UpdatePerformanceData(float startTime)\r\n    {\r\n        loopUpdateTime = Time.realtimeSinceStartup - startTime;\r\n        \r\n        // 更新帧率历史\r\n        frameRateHistory[frameRateIndex] = currentFrameRate;\r\n        frameRateIndex = (frameRateIndex + 1) % 100;\r\n        \r\n        // 更新更新时间历史\r\n        updateTimeHistory[updateTimeIndex] = loopUpdateTime;\r\n        updateTimeIndex = (updateTimeIndex + 1) % 100;\r\n        \r\n        // 计算帧率统计\r\n        frameRateSum += currentFrameRate;\r\n        frameRateCount++;\r\n        \r\n        if (frameRateCount > 0)\r\n        {\r\n            averageFrameRate = frameRateSum / frameRateCount;\r\n        }\r\n        \r\n        // 更新最大最小帧率\r\n        if (currentFrameRate > maxFrameRate) maxFrameRate = currentFrameRate;\r\n        if (currentFrameRate < minFrameRate || minFrameRate == 0) minFrameRate = currentFrameRate;\r\n    }\r\n\r\n    /// <summary>\r\n    /// 监控循环性能\r\n    /// </summary>\r\n    private void MonitorLoopPerformance()\r\n    {\r\n        if (logLoopData)\r\n        {\r\n            Debug.Log($\"循环性能: 帧率={currentFrameRate:F1} FPS, 更新时间={loopUpdateTime * 1000:F2}ms, 迭代={loopIterations}\");\r\n        }\r\n    }\r\n\r\n    /// <summary>\r\n    /// 设置目标帧率\r\n    /// </summary>\r\n    /// <param name=\"frameRate\">目标帧率</param>\r\n    public void SetTargetFrameRate(float frameRate)\r\n    {\r\n        targetFrameRate = Mathf.Max(1f, frameRate);\r\n        Application.targetFrameRate = (int)targetFrameRate;\r\n        Debug.Log($\"目标帧率已设置为: {targetFrameRate} FPS\");\r\n    }\r\n\r\n    /// <summary>\r\n    /// 设置固定时间步长\r\n    /// </summary>\r\n    /// <param name=\"timeStep\">时间步长</param>\r\n    public void SetFixedTimeStep(float timeStep)\r\n    {\r\n        fixedTimeStep = Mathf.Max(0.001f, timeStep);\r\n        Time.fixedDeltaTime = fixedTimeStep;\r\n        Debug.Log($\"固定时间步长已设置为: {fixedTimeStep}s\");\r\n    }\r\n\r\n    /// <summary>\r\n    /// 设置垂直同步\r\n    /// </summary>\r\n    /// <param name=\"enabled\">是否启用</param>\r\n    public void SetVSync(bool enabled)\r\n    {\r\n        enableVSync = enabled;\r\n        QualitySettings.vSyncCount = enabled ? 1 : 0;\r\n        Debug.Log($\"垂直同步: {(enabled ? \"启用\" : \"禁用\")}\");\r\n    }\r\n\r\n    /// <summary>\r\n    /// 添加自定义更新系统\r\n    /// </summary>\r\n    /// <param name=\"name\">系统名称</param>\r\n    /// <param name=\"updateInterval\">更新间隔</param>\r\n    public void AddCustomUpdateSystem(string name, float updateInterval)\r\n    {\r\n        var system = new CustomUpdateSystem(name, updateInterval);\r\n        customUpdateSystems.Add(system);\r\n        Debug.Log($\"自定义更新系统已添加: {name} (间隔: {updateInterval}s)\");\r\n    }\r\n\r\n    /// <summary>\r\n    /// 移除自定义更新系统\r\n    /// </summary>\r\n    /// <param name=\"name\">系统名称</param>\r\n    public void RemoveCustomUpdateSystem(string name)\r\n    {\r\n        for (int i = customUpdateSystems.Count - 1; i >= 0; i--)\r\n        {\r\n            if (customUpdateSystems[i].Name == name)\r\n            {\r\n                customUpdateSystems.RemoveAt(i);\r\n                Debug.Log($\"自定义更新系统已移除: {name}\");\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    /// <summary>\r\n    /// 优化玩家循环\r\n    /// </summary>\r\n    public void OptimizePlayerLoop()\r\n    {\r\n        Debug.Log(\"开始优化玩家循环...\");\r\n        \r\n        // 调整目标帧率\r\n        if (currentFrameRate < targetFrameRate * 0.8f)\r\n        {\r\n            float newTargetFrameRate = targetFrameRate * 0.8f;\r\n            SetTargetFrameRate(newTargetFrameRate);\r\n        }\r\n        \r\n        // 调整固定时间步长\r\n        if (loopUpdateTime > 0.016f) // 如果更新时间超过16ms\r\n        {\r\n            float newTimeStep = fixedTimeStep * 1.2f;\r\n            SetFixedTimeStep(newTimeStep);\r\n        }\r\n        \r\n        // 优化自定义更新系统\r\n        foreach (var system in customUpdateSystems)\r\n        {\r\n            if (system.UpdateTime > 0.01f) // 如果系统更新时间超过10ms\r\n            {\r\n                system.IncreaseUpdateInterval();\r\n            }\r\n        }\r\n        \r\n        Debug.Log(\"玩家循环优化完成\");\r\n    }\r\n\r\n    /// <summary>\r\n    /// 生成循环报告\r\n    /// </summary>\r\n    public void GenerateLoopReport()\r\n    {\r\n        Debug.Log(\"=== 玩家循环报告 ===\");\r\n        Debug.Log($\"循环状态: {currentLoopState}\");\r\n        Debug.Log($\"当前帧率: {currentFrameRate:F1} FPS\");\r\n        Debug.Log($\"平均帧率: {averageFrameRate:F1} FPS\");\r\n        Debug.Log($\"最低帧率: {minFrameRate:F1} FPS\");\r\n        Debug.Log($\"最高帧率: {maxFrameRate:F1} FPS\");\r\n        Debug.Log($\"目标帧率: {targetFrameRate} FPS\");\r\n        Debug.Log($\"增量时间: {deltaTime * 1000:F2} ms\");\r\n        Debug.Log($\"固定增量时间: {fixedDeltaTime * 1000:F2} ms\");\r\n        Debug.Log($\"循环迭代次数: {loopIterations}\");\r\n        Debug.Log($\"循环更新时间: {loopUpdateTime * 1000:F2} ms\");\r\n        Debug.Log($\"自定义更新系统数: {customUpdateSystems.Count}\");\r\n        Debug.Log($\"垂直同步: {(enableVSync ? \"启用\" : \"禁用\")}\");\r\n        Debug.Log($\"使用固定时间步长: {(useFixedTimeStep ? \"是\" : \"否\")}\");\r\n    }\r\n\r\n    /// <summary>\r\n    /// 重置循环系统\r\n    /// </summary>\r\n    public void ResetLoopSystem()\r\n    {\r\n        Debug.Log(\"重置玩家循环系统...\");\r\n        \r\n        // 重置性能数据\r\n        frameRateSum = 0f;\r\n        frameRateCount = 0;\r\n        loopIterations = 0;\r\n        minFrameRate = 0f;\r\n        maxFrameRate = 0f;\r\n        \r\n        // 重置自定义更新系统\r\n        customUpdateSystems.Clear();\r\n        InitializeCustomUpdateSystems();\r\n        \r\n        // 重置状态\r\n        currentLoopState = \"已重置\";\r\n        \r\n        Debug.Log(\"玩家循环系统重置完成\");\r\n    }\r\n\r\n    /// <summary>\r\n    /// 导出循环数据\r\n    /// </summary>\r\n    public void ExportLoopData()\r\n    {\r\n        var data = new PlayerLoopData\r\n        {\r\n            timestamp = System.DateTime.Now.ToString(),\r\n            currentLoopState = currentLoopState,\r\n            currentFrameRate = currentFrameRate,\r\n            averageFrameRate = averageFrameRate,\r\n            minFrameRate = minFrameRate,\r\n            maxFrameRate = maxFrameRate,\r\n            targetFrameRate = targetFrameRate,\r\n            deltaTime = deltaTime,\r\n            fixedDeltaTime = fixedDeltaTime,\r\n            loopIterations = loopIterations,\r\n            loopUpdateTime = loopUpdateTime,\r\n            customUpdateSystemCount = customUpdateSystems.Count,\r\n            enableVSync = enableVSync,\r\n            useFixedTimeStep = useFixedTimeStep,\r\n            frameRateHistory = frameRateHistory,\r\n            updateTimeHistory = updateTimeHistory\r\n        };\r\n        \r\n        string json = JsonUtility.ToJson(data, true);\r\n        string filename = $\"playerloop_{System.DateTime.Now:yyyyMMdd_HHmmss}.json\";\r\n        \r\n        System.IO.File.WriteAllText(filename, json);\r\n        Debug.Log($\"循环数据已导出: {filename}\");\r\n    }\r\n\r\n    private void OnGUI()\r\n    {\r\n        GUILayout.BeginArea(new Rect(10, 10, 400, 800));\r\n        GUILayout.Label(\"PlayerLoop 玩家循环演示\", UnityEditor.EditorStyles.boldLabel);\r\n        \r\n        GUILayout.Space(10);\r\n        GUILayout.Label(\"循环配置:\");\r\n        enablePlayerLoop = GUILayout.Toggle(enablePlayerLoop, \"启用玩家循环\");\r\n        enableCustomUpdateLoop = GUILayout.Toggle(enableCustomUpdateLoop, \"启用自定义更新循环\");\r\n        enablePerformanceOptimization = GUILayout.Toggle(enablePerformanceOptimization, \"启用性能优化\");\r\n        enableLoopProfiling = GUILayout.Toggle(enableLoopProfiling, \"启用循环分析\");\r\n        enableLoopDebugging = GUILayout.Toggle(enableLoopDebugging, \"启用循环调试\");\r\n        \r\n        GUILayout.Space(10);\r\n        GUILayout.Label(\"循环参数:\");\r\n        targetFrameRate = float.TryParse(GUILayout.TextField(\"目标帧率\", targetFrameRate.ToString()), out var frameRate) ? frameRate : targetFrameRate;\r\n        fixedTimeStep = float.TryParse(GUILayout.TextField(\"固定时间步长\", fixedTimeStep.ToString()), out var timeStep) ? timeStep : fixedTimeStep;\r\n        maxAllowedTimestep = int.TryParse(GUILayout.TextField(\"最大允许时间步长\", maxAllowedTimestep.ToString()), out var maxTimeStep) ? maxTimeStep : maxAllowedTimestep;\r\n        useFixedTimeStep = GUILayout.Toggle(useFixedTimeStep, \"使用固定时间步长\");\r\n        enableVSync = GUILayout.Toggle(enableVSync, \"启用垂直同步\");\r\n        \r\n        GUILayout.Space(10);\r\n        GUILayout.Label(\"自定义循环:\");\r\n        enableCustomFixedUpdate = GUILayout.Toggle(enableCustomFixedUpdate, \"启用自定义固定更新\");\r\n        enableCustomLateUpdate = GUILayout.Toggle(enableCustomLateUpdate, \"启用自定义延迟更新\");\r\n        enableCustomPreRender = GUILayout.Toggle(enableCustomPreRender, \"启用自定义预渲染\");\r\n        enableCustomPostRender = GUILayout.Toggle(enableCustomPostRender, \"启用自定义后渲染\");\r\n        enableCustomPreCull = GUILayout.Toggle(enableCustomPreCull, \"启用自定义预剔除\");\r\n        \r\n        GUILayout.Space(10);\r\n        GUILayout.Label(\"循环状态:\");\r\n        GUILayout.Label($\"状态: {currentLoopState}\");\r\n        GUILayout.Label($\"当前帧率: {currentFrameRate:F1} FPS\");\r\n        GUILayout.Label($\"平均帧率: {averageFrameRate:F1} FPS\");\r\n        GUILayout.Label($\"最低帧率: {minFrameRate:F1} FPS\");\r\n        GUILayout.Label($\"最高帧率: {maxFrameRate:F1} FPS\");\r\n        GUILayout.Label($\"增量时间: {deltaTime * 1000:F2} ms\");\r\n        GUILayout.Label($\"固定增量时间: {fixedDeltaTime * 1000:F2} ms\");\r\n        GUILayout.Label($\"循环迭代次数: {loopIterations}\");\r\n        GUILayout.Label($\"循环更新时间: {loopUpdateTime * 1000:F2} ms\");\r\n        GUILayout.Label($\"自定义更新系统数: {customUpdateSystems.Count}\");\r\n        \r\n        GUILayout.Space(10);\r\n        \r\n        if (GUILayout.Button(\"设置目标帧率\"))\r\n        {\r\n            SetTargetFrameRate(targetFrameRate);\r\n        }\r\n        \r\n        if (GUILayout.Button(\"设置固定时间步长\"))\r\n        {\r\n            SetFixedTimeStep(fixedTimeStep);\r\n        }\r\n        \r\n        if (GUILayout.Button(\"设置垂直同步\"))\r\n        {\r\n            SetVSync(enableVSync);\r\n        }\r\n        \r\n        if (GUILayout.Button(\"添加自定义更新系统\"))\r\n        {\r\n            AddCustomUpdateSystem(\"CustomSystem\", 0.1f);\r\n        }\r\n        \r\n        if (GUILayout.Button(\"优化玩家循环\"))\r\n        {\r\n            OptimizePlayerLoop();\r\n        }\r\n        \r\n        if (GUILayout.Button(\"生成循环报告\"))\r\n        {\r\n            GenerateLoopReport();\r\n        }\r\n        \r\n        if (GUILayout.Button(\"重置循环系统\"))\r\n        {\r\n            ResetLoopSystem();\r\n        }\r\n        \r\n        if (GUILayout.Button(\"导出循环数据\"))\r\n        {\r\n            ExportLoopData();\r\n        }\r\n        \r\n        GUILayout.EndArea();\r\n    }\r\n}\r\n\r\n/// <summary>\r\n/// 自定义更新系统\r\n/// </summary>\r\n[System.Serializable]\r\npublic class CustomUpdateSystem\r\n{\r\n    public string Name { get; private set; }\r\n    public float UpdateInterval { get; private set; }\r\n    public float LastUpdateTime { get; private set; }\r\n    public float UpdateTime { get; private set; }\r\n    public int UpdateCount { get; private set; }\r\n    \r\n    public CustomUpdateSystem(string name, float updateInterval)\r\n    {\r\n        Name = name;\r\n        UpdateInterval = updateInterval;\r\n        LastUpdateTime = 0f;\r\n        UpdateTime = 0f;\r\n        UpdateCount = 0;\r\n    }\r\n    \r\n    public bool ShouldUpdate()\r\n    {\r\n        return Time.time - LastUpdateTime >= UpdateInterval;\r\n    }\r\n    \r\n    public void Update()\r\n    {\r\n        float startTime = Time.realtimeSinceStartup;\r\n        \r\n        // 执行更新逻辑\r\n        ExecuteUpdate();\r\n        \r\n        UpdateTime = Time.realtimeSinceStartup - startTime;\r\n        LastUpdateTime = Time.time;\r\n        UpdateCount++;\r\n    }\r\n    \r\n    private void ExecuteUpdate()\r\n    {\r\n        // 这里可以实现具体的更新逻辑\r\n        // 例如：物理模拟、AI计算、音频处理等\r\n    }\r\n    \r\n    public void IncreaseUpdateInterval()\r\n    {\r\n        UpdateInterval *= 1.2f;\r\n    }\r\n    \r\n    public void DecreaseUpdateInterval()\r\n    {\r\n        UpdateInterval *= 0.8f;\r\n    }\r\n}\r\n\r\n/// <summary>\r\n/// 玩家循环数据类\r\n/// </summary>\r\n[System.Serializable]\r\npublic class PlayerLoopData\r\n{\r\n    public string timestamp;\r\n    public string currentLoopState;\r\n    public float currentFrameRate;\r\n    public float averageFrameRate;\r\n    public float minFrameRate;\r\n    public float maxFrameRate;\r\n    public float targetFrameRate;\r\n    public float deltaTime;\r\n    public float fixedDeltaTime;\r\n    public int loopIterations;\r\n    public float loopUpdateTime;\r\n    public int customUpdateSystemCount;\r\n    public bool enableVSync;\r\n    public bool useFixedTimeStep;\r\n    public float[] frameRateHistory;\r\n    public float[] updateTimeHistory;\r\n} "
        }
    ]
}