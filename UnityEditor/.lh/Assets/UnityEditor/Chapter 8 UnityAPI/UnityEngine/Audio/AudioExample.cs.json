{
    "sourceFile": "Assets/UnityEditor/Chapter 8 UnityAPI/UnityEngine/Audio/AudioExample.cs",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1750930777938,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1750930777938,
            "name": "Commit-0",
            "content": "using UnityEngine;\r\nusing System.Collections.Generic;\r\n\r\n/// <summary>\r\n/// UnityEngine.Audio 命名空间案例演示\r\n/// 展示音频系统的核心功能\r\n/// </summary>\r\npublic class AudioExample : MonoBehaviour\r\n{\r\n    [Header(\"音频组件\")]\r\n    [SerializeField] private AudioSource mainAudioSource;\r\n    [SerializeField] private AudioSource[] additionalAudioSources;\r\n    [SerializeField] private AudioListener audioListener;\r\n    [SerializeField] private AudioClip[] audioClips;\r\n    \r\n    [Header(\"音频设置\")]\r\n    [SerializeField] private bool enableAudio = true;\r\n    [SerializeField] private float masterVolume = 1.0f;\r\n    [SerializeField] private float musicVolume = 0.8f;\r\n    [SerializeField] private float sfxVolume = 1.0f;\r\n    [SerializeField] private bool enable3DAudio = true;\r\n    [SerializeField] private float spatialBlend = 1.0f;\r\n    \r\n    [Header(\"音频播放\")]\r\n    [SerializeField] private bool isPlaying = false;\r\n    [SerializeField] private bool isPaused = false;\r\n    [SerializeField] private float currentTime = 0f;\r\n    [SerializeField] private float totalTime = 0f;\r\n    [SerializeField] private int currentClipIndex = 0;\r\n    [SerializeField] private AudioClip currentClip;\r\n    \r\n    [Header(\"音频效果\")]\r\n    [SerializeField] private bool enableReverb = false;\r\n    [SerializeField] private bool enableEcho = false;\r\n    [SerializeField] private bool enableChorus = false;\r\n    [SerializeField] private bool enableDistortion = false;\r\n    [SerializeField] private bool enableLowPass = false;\r\n    [SerializeField] private bool enableHighPass = false;\r\n    \r\n    [Header(\"音频分析\")]\r\n    [SerializeField] private float[] spectrumData = new float[256];\r\n    [SerializeField] private float[] samples = new float[256];\r\n    [SerializeField] private float averageVolume = 0f;\r\n    [SerializeField] private float peakVolume = 0f;\r\n    \r\n    // 音频事件\r\n    private System.Action<AudioClip> onAudioStart;\r\n    private System.Action<AudioClip> onAudioEnd;\r\n    private System.Action<AudioClip> onAudioPause;\r\n    private System.Action<float> onVolumeChanged;\r\n    \r\n    private void Start()\r\n    {\r\n        InitializeAudioSystem();\r\n    }\r\n    \r\n    /// <summary>\r\n    /// 初始化音频系统\r\n    /// </summary>\r\n    private void InitializeAudioSystem()\r\n    {\r\n        // 获取或创建主音频源\r\n        if (mainAudioSource == null)\r\n        {\r\n            mainAudioSource = GetComponent<AudioSource>();\r\n            if (mainAudioSource == null)\r\n            {\r\n                mainAudioSource = gameObject.AddComponent<AudioSource>();\r\n            }\r\n        }\r\n        \r\n        // 获取或创建音频监听器\r\n        if (audioListener == null)\r\n        {\r\n            audioListener = FindObjectOfType<AudioListener>();\r\n            if (audioListener == null)\r\n            {\r\n                audioListener = Camera.main?.GetComponent<AudioListener>();\r\n                if (audioListener == null)\r\n                {\r\n                    audioListener = Camera.main?.gameObject.AddComponent<AudioListener>();\r\n                }\r\n            }\r\n        }\r\n        \r\n        // 配置音频组件\r\n        ConfigureAudioComponents();\r\n        \r\n        // 设置音频事件\r\n        SetupAudioEvents();\r\n        \r\n        // 创建额外的音频源\r\n        CreateAdditionalAudioSources();\r\n        \r\n        Debug.Log(\"音频系统初始化完成\");\r\n    }\r\n    \r\n    /// <summary>\r\n    /// 配置音频组件\r\n    /// </summary>\r\n    private void ConfigureAudioComponents()\r\n    {\r\n        if (mainAudioSource != null)\r\n        {\r\n            // 设置主音频源参数\r\n            mainAudioSource.playOnAwake = false;\r\n            mainAudioSource.loop = false;\r\n            mainAudioSource.volume = musicVolume;\r\n            mainAudioSource.spatialBlend = spatialBlend;\r\n            mainAudioSource.dopplerLevel = 1f;\r\n            mainAudioSource.rolloffMode = AudioRolloffMode.Linear;\r\n            mainAudioSource.minDistance = 1f;\r\n            mainAudioSource.maxDistance = 500f;\r\n            \r\n            // 设置3D音频\r\n            if (enable3DAudio)\r\n            {\r\n                mainAudioSource.spatialBlend = 1f;\r\n            }\r\n            else\r\n            {\r\n                mainAudioSource.spatialBlend = 0f;\r\n            }\r\n        }\r\n        \r\n        Debug.Log(\"音频组件配置完成\");\r\n    }\r\n    \r\n    /// <summary>\r\n    /// 设置音频事件\r\n    /// </summary>\r\n    private void SetupAudioEvents()\r\n    {\r\n        if (mainAudioSource != null)\r\n        {\r\n            // 监听音频播放状态\r\n            StartCoroutine(MonitorAudioState());\r\n        }\r\n        \r\n        Debug.Log(\"音频事件设置完成\");\r\n    }\r\n    \r\n    /// <summary>\r\n    /// 监控音频状态\r\n    /// </summary>\r\n    private System.Collections.IEnumerator MonitorAudioState()\r\n    {\r\n        AudioClip previousClip = null;\r\n        \r\n        while (true)\r\n        {\r\n            if (mainAudioSource != null)\r\n            {\r\n                // 更新播放状态\r\n                isPlaying = mainAudioSource.isPlaying;\r\n                isPaused = mainAudioSource.time > 0 && !mainAudioSource.isPlaying;\r\n                \r\n                // 更新时间信息\r\n                if (mainAudioSource.clip != null)\r\n                {\r\n                    currentTime = mainAudioSource.time;\r\n                    totalTime = mainAudioSource.clip.length;\r\n                    currentClip = mainAudioSource.clip;\r\n                }\r\n                \r\n                // 检测音频开始\r\n                if (mainAudioSource.clip != previousClip && mainAudioSource.isPlaying)\r\n                {\r\n                    onAudioStart?.Invoke(mainAudioSource.clip);\r\n                    previousClip = mainAudioSource.clip;\r\n                }\r\n                \r\n                // 检测音频结束\r\n                if (previousClip != null && !mainAudioSource.isPlaying && mainAudioSource.time == 0)\r\n                {\r\n                    onAudioEnd?.Invoke(previousClip);\r\n                    previousClip = null;\r\n                }\r\n            }\r\n            \r\n            yield return new WaitForSeconds(0.1f);\r\n        }\r\n    }\r\n    \r\n    /// <summary>\r\n    /// 创建额外的音频源\r\n    /// </summary>\r\n    private void CreateAdditionalAudioSources()\r\n    {\r\n        if (additionalAudioSources == null || additionalAudioSources.Length == 0)\r\n        {\r\n            // 创建SFX音频源\r\n            GameObject sfxObj = new GameObject(\"SFXAudioSource\");\r\n            sfxObj.transform.SetParent(transform);\r\n            sfxObj.transform.localPosition = Vector3.zero;\r\n            \r\n            var sfxSource = sfxObj.AddComponent<AudioSource>();\r\n            sfxSource.playOnAwake = false;\r\n            sfxSource.loop = false;\r\n            sfxSource.volume = sfxVolume;\r\n            sfxSource.spatialBlend = 0f; // 2D音效\r\n            \r\n            // 创建环境音频源\r\n            GameObject ambientObj = new GameObject(\"AmbientAudioSource\");\r\n            ambientObj.transform.SetParent(transform);\r\n            ambientObj.transform.localPosition = Vector3.zero;\r\n            \r\n            var ambientSource = ambientObj.AddComponent<AudioSource>();\r\n            ambientSource.playOnAwake = false;\r\n            ambientSource.loop = true;\r\n            ambientSource.volume = 0.5f;\r\n            ambientSource.spatialBlend = 0f; // 2D环境音\r\n            \r\n            additionalAudioSources = new AudioSource[] { sfxSource, ambientSource };\r\n        }\r\n        \r\n        Debug.Log($\"创建了 {additionalAudioSources.Length} 个额外音频源\");\r\n    }\r\n    \r\n    /// <summary>\r\n    /// 播放音频\r\n    /// </summary>\r\n    /// <param name=\"clipIndex\">音频片段索引</param>\r\n    public void PlayAudio(int clipIndex)\r\n    {\r\n        if (audioClips == null || clipIndex < 0 || clipIndex >= audioClips.Length)\r\n        {\r\n            Debug.LogError(\"无效的音频片段索引\");\r\n            return;\r\n        }\r\n        \r\n        AudioClip clip = audioClips[clipIndex];\r\n        if (clip != null && mainAudioSource != null)\r\n        {\r\n            mainAudioSource.clip = clip;\r\n            mainAudioSource.Play();\r\n            currentClipIndex = clipIndex;\r\n            currentClip = clip;\r\n            isPlaying = true;\r\n            isPaused = false;\r\n            \r\n            Debug.Log($\"播放音频: {clip.name}\");\r\n        }\r\n    }\r\n    \r\n    /// <summary>\r\n    /// 播放音频片段\r\n    /// </summary>\r\n    /// <param name=\"clip\">音频片段</param>\r\n    public void PlayAudio(AudioClip clip)\r\n    {\r\n        if (clip != null && mainAudioSource != null)\r\n        {\r\n            mainAudioSource.clip = clip;\r\n            mainAudioSource.Play();\r\n            currentClip = clip;\r\n            isPlaying = true;\r\n            isPaused = false;\r\n            \r\n            Debug.Log($\"播放音频: {clip.name}\");\r\n        }\r\n    }\r\n    \r\n    /// <summary>\r\n    /// 播放音效\r\n    /// </summary>\r\n    /// <param name=\"clip\">音效片段</param>\r\n    public void PlaySFX(AudioClip clip)\r\n    {\r\n        if (clip != null && additionalAudioSources != null && additionalAudioSources.Length > 0)\r\n        {\r\n            additionalAudioSources[0].PlayOneShot(clip, sfxVolume);\r\n            Debug.Log($\"播放音效: {clip.name}\");\r\n        }\r\n    }\r\n    \r\n    /// <summary>\r\n    /// 播放环境音\r\n    /// </summary>\r\n    /// <param name=\"clip\">环境音片段</param>\r\n    public void PlayAmbient(AudioClip clip)\r\n    {\r\n        if (clip != null && additionalAudioSources != null && additionalAudioSources.Length > 1)\r\n        {\r\n            additionalAudioSources[1].clip = clip;\r\n            additionalAudioSources[1].Play();\r\n            Debug.Log($\"播放环境音: {clip.name}\");\r\n        }\r\n    }\r\n    \r\n    /// <summary>\r\n    /// 暂停音频\r\n    /// </summary>\r\n    public void PauseAudio()\r\n    {\r\n        if (mainAudioSource != null)\r\n        {\r\n            mainAudioSource.Pause();\r\n            isPaused = true;\r\n        }\r\n        \r\n        // 暂停所有音频源\r\n        foreach (var source in additionalAudioSources)\r\n        {\r\n            if (source != null)\r\n            {\r\n                source.Pause();\r\n            }\r\n        }\r\n        \r\n        Debug.Log(\"音频已暂停\");\r\n        onAudioPause?.Invoke(currentClip);\r\n    }\r\n    \r\n    /// <summary>\r\n    /// 恢复音频\r\n    /// </summary>\r\n    public void ResumeAudio()\r\n    {\r\n        if (mainAudioSource != null)\r\n        {\r\n            mainAudioSource.UnPause();\r\n            isPaused = false;\r\n        }\r\n        \r\n        // 恢复所有音频源\r\n        foreach (var source in additionalAudioSources)\r\n        {\r\n            if (source != null)\r\n            {\r\n                source.UnPause();\r\n            }\r\n        }\r\n        \r\n        Debug.Log(\"音频已恢复\");\r\n    }\r\n    \r\n    /// <summary>\r\n    /// 停止音频\r\n    /// </summary>\r\n    public void StopAudio()\r\n    {\r\n        if (mainAudioSource != null)\r\n        {\r\n            mainAudioSource.Stop();\r\n            isPlaying = false;\r\n            isPaused = false;\r\n            currentTime = 0f;\r\n        }\r\n        \r\n        // 停止所有音频源\r\n        foreach (var source in additionalAudioSources)\r\n        {\r\n            if (source != null)\r\n            {\r\n                source.Stop();\r\n            }\r\n        }\r\n        \r\n        Debug.Log(\"音频已停止\");\r\n    }\r\n    \r\n    /// <summary>\r\n    /// 设置主音量\r\n    /// </summary>\r\n    /// <param name=\"volume\">音量</param>\r\n    public void SetMasterVolume(float volume)\r\n    {\r\n        masterVolume = Mathf.Clamp01(volume);\r\n        AudioListener.volume = masterVolume;\r\n        \r\n        Debug.Log($\"主音量已设置为: {masterVolume}\");\r\n        onVolumeChanged?.Invoke(masterVolume);\r\n    }\r\n    \r\n    /// <summary>\r\n    /// 设置音乐音量\r\n    /// </summary>\r\n    /// <param name=\"volume\">音量</param>\r\n    public void SetMusicVolume(float volume)\r\n    {\r\n        musicVolume = Mathf.Clamp01(volume);\r\n        \r\n        if (mainAudioSource != null)\r\n        {\r\n            mainAudioSource.volume = musicVolume;\r\n        }\r\n        \r\n        Debug.Log($\"音乐音量已设置为: {musicVolume}\");\r\n    }\r\n    \r\n    /// <summary>\r\n    /// 设置音效音量\r\n    /// </summary>\r\n    /// <param name=\"volume\">音量</param>\r\n    public void SetSFXVolume(float volume)\r\n    {\r\n        sfxVolume = Mathf.Clamp01(volume);\r\n        \r\n        if (additionalAudioSources != null && additionalAudioSources.Length > 0)\r\n        {\r\n            additionalAudioSources[0].volume = sfxVolume;\r\n        }\r\n        \r\n        Debug.Log($\"音效音量已设置为: {sfxVolume}\");\r\n    }\r\n    \r\n    /// <summary>\r\n    /// 设置3D音频\r\n    /// </summary>\r\n    /// <param name=\"enable\">是否启用</param>\r\n    public void Set3DAudio(bool enable)\r\n    {\r\n        enable3DAudio = enable;\r\n        \r\n        if (mainAudioSource != null)\r\n        {\r\n            mainAudioSource.spatialBlend = enable ? 1f : 0f;\r\n        }\r\n        \r\n        Debug.Log($\"3D音频已设置为: {enable}\");\r\n    }\r\n    \r\n    /// <summary>\r\n    /// 设置音频位置\r\n    /// </summary>\r\n    /// <param name=\"position\">位置</param>\r\n    public void SetAudioPosition(Vector3 position)\r\n    {\r\n        if (mainAudioSource != null)\r\n        {\r\n            mainAudioSource.transform.position = position;\r\n        }\r\n        \r\n        Debug.Log($\"音频位置已设置为: {position}\");\r\n    }\r\n    \r\n    /// <summary>\r\n    /// 获取音频频谱数据\r\n    /// </summary>\r\n    /// <param name=\"channel\">声道</param>\r\n    /// <returns>频谱数据</returns>\r\n    public float[] GetSpectrumData(int channel = 0)\r\n    {\r\n        if (mainAudioSource != null)\r\n        {\r\n            mainAudioSource.GetSpectrumData(spectrumData, channel, FFTWindow.BlackmanHarris);\r\n        }\r\n        \r\n        return spectrumData;\r\n    }\r\n    \r\n    /// <summary>\r\n    /// 获取音频采样数据\r\n    /// </summary>\r\n    /// <param name=\"channel\">声道</param>\r\n    /// <returns>采样数据</returns>\r\n    public float[] GetOutputData(int channel = 0)\r\n    {\r\n        if (mainAudioSource != null)\r\n        {\r\n            mainAudioSource.GetOutputData(samples, channel);\r\n        }\r\n        \r\n        return samples;\r\n    }\r\n    \r\n    /// <summary>\r\n    /// 计算音频分析数据\r\n    /// </summary>\r\n    private void CalculateAudioAnalysis()\r\n    {\r\n        if (mainAudioSource != null && mainAudioSource.isPlaying)\r\n        {\r\n            // 获取频谱数据\r\n            GetSpectrumData();\r\n            \r\n            // 计算平均音量\r\n            float sum = 0f;\r\n            for (int i = 0; i < spectrumData.Length; i++)\r\n            {\r\n                sum += spectrumData[i];\r\n            }\r\n            averageVolume = sum / spectrumData.Length;\r\n            \r\n            // 计算峰值音量\r\n            peakVolume = 0f;\r\n            for (int i = 0; i < spectrumData.Length; i++)\r\n            {\r\n                if (spectrumData[i] > peakVolume)\r\n                {\r\n                    peakVolume = spectrumData[i];\r\n                }\r\n            }\r\n        }\r\n    }\r\n    \r\n    /// <summary>\r\n    /// 播放下一个音频\r\n    /// </summary>\r\n    public void PlayNextAudio()\r\n    {\r\n        if (audioClips != null && audioClips.Length > 0)\r\n        {\r\n            int nextIndex = (currentClipIndex + 1) % audioClips.Length;\r\n            PlayAudio(nextIndex);\r\n        }\r\n    }\r\n    \r\n    /// <summary>\r\n    /// 播放上一个音频\r\n    /// </summary>\r\n    public void PlayPreviousAudio()\r\n    {\r\n        if (audioClips != null && audioClips.Length > 0)\r\n        {\r\n            int prevIndex = (currentClipIndex - 1 + audioClips.Length) % audioClips.Length;\r\n            PlayAudio(prevIndex);\r\n        }\r\n    }\r\n    \r\n    /// <summary>\r\n    /// 获取音频信息\r\n    /// </summary>\r\n    public void GetAudioInfo()\r\n    {\r\n        Debug.Log(\"=== 音频系统信息 ===\");\r\n        Debug.Log($\"音频启用: {enableAudio}\");\r\n        Debug.Log($\"播放状态: {(isPlaying ? (isPaused ? \"暂停\" : \"播放中\") : \"停止\")}\");\r\n        Debug.Log($\"当前时间: {currentTime:F2}s / {totalTime:F2}s\");\r\n        Debug.Log($\"当前片段: {(currentClip != null ? currentClip.name : \"无\")}\");\r\n        Debug.Log($\"主音量: {masterVolume}\");\r\n        Debug.Log($\"音乐音量: {musicVolume}\");\r\n        Debug.Log($\"音效音量: {sfxVolume}\");\r\n        Debug.Log($\"3D音频: {enable3DAudio}\");\r\n        Debug.Log($\"空间混合: {spatialBlend}\");\r\n        \r\n        if (mainAudioSource != null)\r\n        {\r\n            Debug.Log($\"主音频源: 已配置\");\r\n            Debug.Log($\"  播放中: {mainAudioSource.isPlaying}\");\r\n            Debug.Log($\"  音量: {mainAudioSource.volume}\");\r\n            Debug.Log($\"  音调: {mainAudioSource.pitch}\");\r\n            Debug.Log($\"  循环: {mainAudioSource.loop}\");\r\n            Debug.Log($\"  空间混合: {mainAudioSource.spatialBlend}\");\r\n        }\r\n        \r\n        if (audioClips != null)\r\n        {\r\n            Debug.Log($\"音频片段数量: {audioClips.Length}\");\r\n            for (int i = 0; i < audioClips.Length; i++)\r\n            {\r\n                if (audioClips[i] != null)\r\n                {\r\n                    Debug.Log($\"  片段 {i}: {audioClips[i].name} ({audioClips[i].length:F2}s)\");\r\n                }\r\n            }\r\n        }\r\n        \r\n        Debug.Log($\"平均音量: {averageVolume:F4}\");\r\n        Debug.Log($\"峰值音量: {peakVolume:F4}\");\r\n    }\r\n    \r\n    /// <summary>\r\n    /// 重置音频设置\r\n    /// </summary>\r\n    public void ResetAudioSettings()\r\n    {\r\n        // 重置音量设置\r\n        masterVolume = 1.0f;\r\n        musicVolume = 0.8f;\r\n        sfxVolume = 1.0f;\r\n        \r\n        // 重置音频设置\r\n        enable3DAudio = true;\r\n        spatialBlend = 1.0f;\r\n        \r\n        // 应用设置\r\n        SetMasterVolume(masterVolume);\r\n        SetMusicVolume(musicVolume);\r\n        SetSFXVolume(sfxVolume);\r\n        Set3DAudio(enable3DAudio);\r\n        \r\n        Debug.Log(\"音频设置已重置\");\r\n    }\r\n    \r\n    private void Update()\r\n    {\r\n        // 计算音频分析数据\r\n        CalculateAudioAnalysis();\r\n    }\r\n    \r\n    private void OnGUI()\r\n    {\r\n        // 简单的GUI界面用于测试\r\n        GUILayout.BeginArea(new Rect(10, 10, 400, 700));\r\n        GUILayout.Label(\"音频系统演示\", EditorStyles.boldLabel);\r\n        \r\n        GUILayout.Space(10);\r\n        \r\n        // 音频状态\r\n        GUILayout.Label($\"播放状态: {(isPlaying ? (isPaused ? \"暂停\" : \"播放中\") : \"停止\")}\");\r\n        GUILayout.Label($\"当前时间: {currentTime:F2}s / {totalTime:F2}s\");\r\n        GUILayout.Label($\"当前片段: {(currentClip != null ? currentClip.name : \"无\")}\");\r\n        GUILayout.Label($\"平均音量: {averageVolume:F4}\");\r\n        GUILayout.Label($\"峰值音量: {peakVolume:F4}\");\r\n        \r\n        GUILayout.Space(10);\r\n        \r\n        // 播放控制\r\n        GUILayout.BeginHorizontal();\r\n        if (GUILayout.Button(\"播放\"))\r\n        {\r\n            if (audioClips != null && audioClips.Length > 0)\r\n            {\r\n                PlayAudio(currentClipIndex);\r\n            }\r\n        }\r\n        if (GUILayout.Button(\"暂停\"))\r\n        {\r\n            PauseAudio();\r\n        }\r\n        if (GUILayout.Button(\"停止\"))\r\n        {\r\n            StopAudio();\r\n        }\r\n        GUILayout.EndHorizontal();\r\n        \r\n        GUILayout.BeginHorizontal();\r\n        if (GUILayout.Button(\"上一个\"))\r\n        {\r\n            PlayPreviousAudio();\r\n        }\r\n        if (GUILayout.Button(\"下一个\"))\r\n        {\r\n            PlayNextAudio();\r\n        }\r\n        GUILayout.EndHorizontal();\r\n        \r\n        GUILayout.Space(10);\r\n        \r\n        // 音量控制\r\n        GUILayout.Label(\"主音量:\");\r\n        masterVolume = GUILayout.HorizontalSlider(masterVolume, 0f, 1f);\r\n        if (GUILayout.Button(\"设置主音量\"))\r\n        {\r\n            SetMasterVolume(masterVolume);\r\n        }\r\n        \r\n        GUILayout.Label(\"音乐音量:\");\r\n        musicVolume = GUILayout.HorizontalSlider(musicVolume, 0f, 1f);\r\n        if (GUILayout.Button(\"设置音乐音量\"))\r\n        {\r\n            SetMusicVolume(musicVolume);\r\n        }\r\n        \r\n        GUILayout.Label(\"音效音量:\");\r\n        sfxVolume = GUILayout.HorizontalSlider(sfxVolume, 0f, 1f);\r\n        if (GUILayout.Button(\"设置音效音量\"))\r\n        {\r\n            SetSFXVolume(sfxVolume);\r\n        }\r\n        \r\n        GUILayout.Space(10);\r\n        \r\n        // 3D音频设置\r\n        enable3DAudio = GUILayout.Toggle(enable3DAudio, \"3D音频\");\r\n        if (GUILayout.Button(\"设置3D音频\"))\r\n        {\r\n            Set3DAudio(enable3DAudio);\r\n        }\r\n        \r\n        GUILayout.Label(\"空间混合:\");\r\n        spatialBlend = GUILayout.HorizontalSlider(spatialBlend, 0f, 1f);\r\n        \r\n        GUILayout.Space(10);\r\n        \r\n        if (GUILayout.Button(\"获取音频信息\"))\r\n        {\r\n            GetAudioInfo();\r\n        }\r\n        \r\n        if (GUILayout.Button(\"重置设置\"))\r\n        {\r\n            ResetAudioSettings();\r\n        }\r\n        \r\n        GUILayout.EndArea();\r\n    }\r\n} "
        }
    ]
}