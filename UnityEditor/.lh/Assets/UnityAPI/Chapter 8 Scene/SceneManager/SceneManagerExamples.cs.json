{
    "sourceFile": "Assets/UnityAPI/Chapter 8 Scene/SceneManager/SceneManagerExamples.cs",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1750928374706,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1750928374706,
            "name": "Commit-0",
            "content": "using UnityEngine;\r\nusing UnityEngine.SceneManagement;\r\nusing System.Collections;\r\n\r\n/// <summary>\r\n/// SceneManager API使用案例\r\n/// 演示场景管理的各种功能\r\n/// </summary>\r\npublic class SceneManagerExamples : MonoBehaviour\r\n{\r\n    [Header(\"场景管理\")]\r\n    [SerializeField] private string[] sceneNames = { \"SampleScene\", \"Scene2\", \"Scene3\" };\r\n    [SerializeField] private int targetSceneIndex = 1;\r\n    [SerializeField] private string targetSceneName = \"SampleScene\";\r\n    \r\n    [Header(\"场景加载设置\")]\r\n    [SerializeField] private LoadSceneMode loadMode = LoadSceneMode.Single;\r\n    [SerializeField] private bool useLoadingScreen = false;\r\n    [SerializeField] private float minimumLoadTime = 1f;\r\n    \r\n    [Header(\"场景卸载\")]\r\n    [SerializeField] private bool unloadUnusedAssets = true;\r\n    [SerializeField] private bool allowSceneActivation = true;\r\n    \r\n    [Header(\"持久对象\")]\r\n    [SerializeField] private GameObject[] persistentObjects;\r\n    [SerializeField] private bool keepObjectsOnLoad = true;\r\n    \r\n    [Header(\"场景信息\")]\r\n    [SerializeField] private bool showSceneInfo = true;\r\n    [SerializeField] private bool logSceneEvents = true;\r\n    \r\n    private bool isInitialized = false;\r\n    private AsyncOperation currentLoadOperation;\r\n    private float loadStartTime;\r\n    \r\n    private void Start()\r\n    {\r\n        InitializeSceneManager();\r\n        DemonstrateSceneManagerBasics();\r\n        DemonstrateSceneLoading();\r\n        DemonstrateSceneUnloading();\r\n        DemonstratePersistentObjects();\r\n    }\r\n    \r\n    /// <summary>\r\n    /// 初始化场景管理器\r\n    /// </summary>\r\n    private void InitializeSceneManager()\r\n    {\r\n        // 设置持久对象\r\n        if (keepObjectsOnLoad && persistentObjects != null)\r\n        {\r\n            foreach (GameObject obj in persistentObjects)\r\n            {\r\n                if (obj != null)\r\n                {\r\n                    DontDestroyOnLoad(obj);\r\n                    Debug.Log($\"设置持久对象: {obj.name}\");\r\n                }\r\n            }\r\n        }\r\n        \r\n        // 注册场景事件\r\n        SceneManager.sceneLoaded += OnSceneLoaded;\r\n        SceneManager.sceneUnloaded += OnSceneUnloaded;\r\n        SceneManager.activeSceneChanged += OnActiveSceneChanged;\r\n        \r\n        isInitialized = true;\r\n    }\r\n    \r\n    /// <summary>\r\n    /// 演示场景管理器基础功能\r\n    /// </summary>\r\n    private void DemonstrateSceneManagerBasics()\r\n    {\r\n        Debug.Log(\"=== SceneManager基础功能示例 ===\");\r\n        \r\n        // 1. 当前场景信息\r\n        Scene currentScene = SceneManager.GetActiveScene();\r\n        Debug.Log($\"当前场景: {currentScene.name}\");\r\n        Debug.Log($\"场景索引: {currentScene.buildIndex}\");\r\n        Debug.Log($\"场景路径: {currentScene.path}\");\r\n        Debug.Log($\"场景是否已加载: {currentScene.isLoaded}\");\r\n        Debug.Log($\"场景是否有效: {currentScene.IsValid()}\");\r\n        \r\n        // 2. 场景数量\r\n        int sceneCount = SceneManager.sceneCount;\r\n        Debug.Log($\"已加载场景数量: {sceneCount}\");\r\n        \r\n        // 3. 场景列表\r\n        for (int i = 0; i < sceneCount; i++)\r\n        {\r\n            Scene scene = SceneManager.GetSceneAt(i);\r\n            Debug.Log($\"场景 {i}: {scene.name} (索引: {scene.buildIndex})\");\r\n        }\r\n        \r\n        // 4. 构建设置中的场景\r\n        int buildSceneCount = SceneManager.sceneCountInBuildSettings;\r\n        Debug.Log($\"构建设置中的场景数量: {buildSceneCount}\");\r\n        \r\n        for (int i = 0; i < buildSceneCount; i++)\r\n        {\r\n            string scenePath = SceneUtility.GetScenePathByBuildIndex(i);\r\n            Debug.Log($\"构建场景 {i}: {scenePath}\");\r\n        }\r\n        \r\n        // 5. 场景根对象\r\n        GameObject[] rootObjects = currentScene.GetRootGameObjects();\r\n        Debug.Log($\"场景根对象数量: {rootObjects.Length}\");\r\n        \r\n        foreach (GameObject root in rootObjects)\r\n        {\r\n            Debug.Log($\"根对象: {root.name}\");\r\n        }\r\n    }\r\n    \r\n    /// <summary>\r\n    /// 演示场景加载\r\n    /// </summary>\r\n    private void DemonstrateSceneLoading()\r\n    {\r\n        Debug.Log(\"=== SceneManager场景加载示例 ===\");\r\n        \r\n        // 1. 同步加载场景\r\n        // SceneManager.LoadScene(targetSceneName, LoadSceneMode.Single);\r\n        \r\n        // 2. 异步加载场景\r\n        // StartCoroutine(LoadSceneAsync(targetSceneName));\r\n        \r\n        // 3. 按索引加载场景\r\n        // SceneManager.LoadScene(targetSceneIndex, LoadSceneMode.Additive);\r\n        \r\n        // 4. 检查场景是否存在\r\n        bool sceneExists = SceneUtility.GetBuildIndexByScenePath($\"Assets/Scenes/{targetSceneName}.unity\") >= 0;\r\n        Debug.Log($\"场景 {targetSceneName} 是否存在: {sceneExists}\");\r\n        \r\n        // 5. 获取场景路径\r\n        string scenePath = SceneUtility.GetScenePathByBuildIndex(targetSceneIndex);\r\n        Debug.Log($\"场景 {targetSceneIndex} 的路径: {scenePath}\");\r\n    }\r\n    \r\n    /// <summary>\r\n    /// 演示场景卸载\r\n    /// </summary>\r\n    private void DemonstrateSceneUnloading()\r\n    {\r\n        Debug.Log(\"=== SceneManager场景卸载示例 ===\");\r\n        \r\n        // 1. 卸载当前场景\r\n        // SceneManager.UnloadSceneAsync(currentScene);\r\n        \r\n        // 2. 卸载未使用的资源\r\n        if (unloadUnusedAssets)\r\n        {\r\n            StartCoroutine(UnloadUnusedAssetsAsync());\r\n        }\r\n        \r\n        // 3. 检查场景是否已加载\r\n        Scene testScene = SceneManager.GetSceneByName(targetSceneName);\r\n        Debug.Log($\"场景 {targetSceneName} 是否已加载: {testScene.isLoaded}\");\r\n        \r\n        // 4. 获取场景加载状态\r\n        if (testScene.IsValid())\r\n        {\r\n            Debug.Log($\"场景 {targetSceneName} 的加载进度: {testScene.isLoaded ? \"100%\" : \"0%\"}\");\r\n        }\r\n    }\r\n    \r\n    /// <summary>\r\n    /// 演示持久对象\r\n    /// </summary>\r\n    private void DemonstratePersistentObjects()\r\n    {\r\n        Debug.Log(\"=== SceneManager持久对象示例 ===\");\r\n        \r\n        // 1. 创建持久对象\r\n        GameObject persistentObject = new GameObject(\"PersistentObject\");\r\n        DontDestroyOnLoad(persistentObject);\r\n        Debug.Log($\"创建持久对象: {persistentObject.name}\");\r\n        \r\n        // 2. 检查对象是否为持久对象\r\n        bool isPersistent = persistentObject.scene.name == \"DontDestroyOnLoad\";\r\n        Debug.Log($\"对象 {persistentObject.name} 是否为持久对象: {isPersistent}\");\r\n        \r\n        // 3. 获取持久对象场景\r\n        Scene dontDestroyScene = SceneManager.GetSceneByName(\"DontDestroyOnLoad\");\r\n        Debug.Log($\"持久对象场景: {dontDestroyScene.name}\");\r\n        \r\n        // 4. 获取持久对象场景中的根对象\r\n        GameObject[] persistentRoots = dontDestroyScene.GetRootGameObjects();\r\n        Debug.Log($\"持久对象场景中的根对象数量: {persistentRoots.Length}\");\r\n        \r\n        foreach (GameObject root in persistentRoots)\r\n        {\r\n            Debug.Log($\"持久根对象: {root.name}\");\r\n        }\r\n    }\r\n    \r\n    /// <summary>\r\n    /// 异步加载场景\r\n    /// </summary>\r\n    private IEnumerator LoadSceneAsync(string sceneName)\r\n    {\r\n        Debug.Log($\"开始异步加载场景: {sceneName}\");\r\n        \r\n        loadStartTime = Time.time;\r\n        \r\n        // 开始异步加载\r\n        currentLoadOperation = SceneManager.LoadSceneAsync(sceneName, loadMode);\r\n        currentLoadOperation.allowSceneActivation = allowSceneActivation;\r\n        \r\n        // 等待加载完成\r\n        while (!currentLoadOperation.isDone)\r\n        {\r\n            float progress = currentLoadOperation.progress;\r\n            Debug.Log($\"加载进度: {progress * 100:F1}%\");\r\n            \r\n            // 确保最小加载时间\r\n            if (useLoadingScreen && Time.time - loadStartTime < minimumLoadTime)\r\n            {\r\n                currentLoadOperation.allowSceneActivation = false;\r\n            }\r\n            else\r\n            {\r\n                currentLoadOperation.allowSceneActivation = true;\r\n            }\r\n            \r\n            yield return null;\r\n        }\r\n        \r\n        Debug.Log($\"场景 {sceneName} 加载完成\");\r\n        currentLoadOperation = null;\r\n    }\r\n    \r\n    /// <summary>\r\n    /// 异步加载场景（按索引）\r\n    /// </summary>\r\n    private IEnumerator LoadSceneAsync(int sceneIndex)\r\n    {\r\n        Debug.Log($\"开始异步加载场景索引: {sceneIndex}\");\r\n        \r\n        loadStartTime = Time.time;\r\n        \r\n        currentLoadOperation = SceneManager.LoadSceneAsync(sceneIndex, loadMode);\r\n        currentLoadOperation.allowSceneActivation = allowSceneActivation;\r\n        \r\n        while (!currentLoadOperation.isDone)\r\n        {\r\n            float progress = currentLoadOperation.progress;\r\n            Debug.Log($\"加载进度: {progress * 100:F1}%\");\r\n            \r\n            if (useLoadingScreen && Time.time - loadStartTime < minimumLoadTime)\r\n            {\r\n                currentLoadOperation.allowSceneActivation = false;\r\n            }\r\n            else\r\n            {\r\n                currentLoadOperation.allowSceneActivation = true;\r\n            }\r\n            \r\n            yield return null;\r\n        }\r\n        \r\n        Debug.Log($\"场景索引 {sceneIndex} 加载完成\");\r\n        currentLoadOperation = null;\r\n    }\r\n    \r\n    /// <summary>\r\n    /// 异步卸载场景\r\n    /// </summary>\r\n    private IEnumerator UnloadSceneAsync(string sceneName)\r\n    {\r\n        Debug.Log($\"开始异步卸载场景: {sceneName}\");\r\n        \r\n        Scene sceneToUnload = SceneManager.GetSceneByName(sceneName);\r\n        if (sceneToUnload.IsValid())\r\n        {\r\n            AsyncOperation unloadOperation = SceneManager.UnloadSceneAsync(sceneToUnload);\r\n            \r\n            while (!unloadOperation.isDone)\r\n            {\r\n                float progress = unloadOperation.progress;\r\n                Debug.Log($\"卸载进度: {progress * 100:F1}%\");\r\n                yield return null;\r\n            }\r\n            \r\n            Debug.Log($\"场景 {sceneName} 卸载完成\");\r\n        }\r\n        else\r\n        {\r\n            Debug.LogWarning($\"场景 {sceneName} 不存在或未加载\");\r\n        }\r\n    }\r\n    \r\n    /// <summary>\r\n    /// 异步卸载未使用的资源\r\n    /// </summary>\r\n    private IEnumerator UnloadUnusedAssetsAsync()\r\n    {\r\n        Debug.Log(\"开始卸载未使用的资源\");\r\n        \r\n        AsyncOperation unloadOperation = Resources.UnloadUnusedAssets();\r\n        \r\n        while (!unloadOperation.isDone)\r\n        {\r\n            float progress = unloadOperation.progress;\r\n            Debug.Log($\"资源卸载进度: {progress * 100:F1}%\");\r\n            yield return null;\r\n        }\r\n        \r\n        Debug.Log(\"未使用的资源卸载完成\");\r\n    }\r\n    \r\n    /// <summary>\r\n    /// 场景加载完成事件\r\n    /// </summary>\r\n    private void OnSceneLoaded(Scene scene, LoadSceneMode mode)\r\n    {\r\n        if (logSceneEvents)\r\n        {\r\n            Debug.Log($\"场景加载完成: {scene.name} (模式: {mode})\");\r\n        }\r\n        \r\n        // 可以在这里执行场景加载后的初始化\r\n        InitializeLoadedScene(scene);\r\n    }\r\n    \r\n    /// <summary>\r\n    /// 场景卸载完成事件\r\n    /// </summary>\r\n    private void OnSceneUnloaded(Scene scene)\r\n    {\r\n        if (logSceneEvents)\r\n        {\r\n            Debug.Log($\"场景卸载完成: {scene.name}\");\r\n        }\r\n    }\r\n    \r\n    /// <summary>\r\n    /// 活动场景改变事件\r\n    /// </summary>\r\n    private void OnSceneUnloaded(Scene oldScene, Scene newScene)\r\n    {\r\n        if (logSceneEvents)\r\n        {\r\n            Debug.Log($\"活动场景改变: {oldScene.name} -> {newScene.name}\");\r\n        }\r\n    }\r\n    \r\n    /// <summary>\r\n    /// 活动场景改变事件（修正）\r\n    /// </summary>\r\n    private void OnActiveSceneChanged(Scene oldScene, Scene newScene)\r\n    {\r\n        if (logSceneEvents)\r\n        {\r\n            Debug.Log($\"活动场景改变: {oldScene.name} -> {newScene.name}\");\r\n        }\r\n    }\r\n    \r\n    /// <summary>\r\n    /// 初始化加载的场景\r\n    /// </summary>\r\n    private void InitializeLoadedScene(Scene scene)\r\n    {\r\n        Debug.Log($\"初始化场景: {scene.name}\");\r\n        \r\n        // 获取场景中的所有根对象\r\n        GameObject[] rootObjects = scene.GetRootGameObjects();\r\n        \r\n        // 查找并初始化特定的对象\r\n        foreach (GameObject root in rootObjects)\r\n        {\r\n            // 查找场景管理器\r\n            SceneManagerExamples sceneManager = root.GetComponentInChildren<SceneManagerExamples>();\r\n            if (sceneManager != null && sceneManager != this)\r\n            {\r\n                Debug.Log($\"找到场景管理器: {sceneManager.name}\");\r\n            }\r\n            \r\n            // 查找玩家对象\r\n            GameObject player = root.transform.Find(\"Player\")?.gameObject;\r\n            if (player != null)\r\n            {\r\n                Debug.Log($\"找到玩家对象: {player.name}\");\r\n            }\r\n        }\r\n    }\r\n    \r\n    /// <summary>\r\n    /// 在Update中处理输入\r\n    /// </summary>\r\n    private void Update()\r\n    {\r\n        if (!isInitialized) return;\r\n        \r\n        HandleInput();\r\n        UpdateSceneInfo();\r\n    }\r\n    \r\n    /// <summary>\r\n    /// 处理输入\r\n    /// </summary>\r\n    private void HandleInput()\r\n    {\r\n        // 数字键加载场景\r\n        for (int i = 0; i < Mathf.Min(10, sceneNames.Length); i++)\r\n        {\r\n            if (Input.GetKeyDown(KeyCode.Alpha0 + i))\r\n            {\r\n                LoadSceneByIndex(i);\r\n            }\r\n        }\r\n        \r\n        // 特殊按键\r\n        if (Input.GetKeyDown(KeyCode.R))\r\n        {\r\n            ReloadCurrentScene();\r\n        }\r\n        \r\n        if (Input.GetKeyDown(KeyCode.N))\r\n        {\r\n            LoadNextScene();\r\n        }\r\n        \r\n        if (Input.GetKeyDown(KeyCode.P))\r\n        {\r\n            LoadPreviousScene();\r\n        }\r\n        \r\n        if (Input.GetKeyDown(KeyCode.U))\r\n        {\r\n            UnloadCurrentScene();\r\n        }\r\n        \r\n        if (Input.GetKeyDown(KeyCode.C))\r\n        {\r\n            CreatePersistentObject();\r\n        }\r\n        \r\n        if (Input.GetKeyDown(KeyCode.L))\r\n        {\r\n            LoadSceneAdditive();\r\n        }\r\n    }\r\n    \r\n    /// <summary>\r\n    /// 更新场景信息\r\n    /// </summary>\r\n    private void UpdateSceneInfo()\r\n    {\r\n        // 更新加载进度\r\n        if (currentLoadOperation != null)\r\n        {\r\n            float progress = currentLoadOperation.progress;\r\n            // 可以在这里更新UI显示加载进度\r\n        }\r\n    }\r\n    \r\n    /// <summary>\r\n    /// 按索引加载场景\r\n    /// </summary>\r\n    private void LoadSceneByIndex(int index)\r\n    {\r\n        if (index >= 0 && index < SceneManager.sceneCountInBuildSettings)\r\n        {\r\n            StartCoroutine(LoadSceneAsync(index));\r\n        }\r\n        else\r\n        {\r\n            Debug.LogWarning($\"场景索引 {index} 超出范围\");\r\n        }\r\n    }\r\n    \r\n    /// <summary>\r\n    /// 重新加载当前场景\r\n    /// </summary>\r\n    private void ReloadCurrentScene()\r\n    {\r\n        Scene currentScene = SceneManager.GetActiveScene();\r\n        SceneManager.LoadScene(currentScene.name);\r\n        Debug.Log($\"重新加载场景: {currentScene.name}\");\r\n    }\r\n    \r\n    /// <summary>\r\n    /// 加载下一个场景\r\n    /// </summary>\r\n    private void LoadNextScene()\r\n    {\r\n        Scene currentScene = SceneManager.GetActiveScene();\r\n        int nextIndex = (currentScene.buildIndex + 1) % SceneManager.sceneCountInBuildSettings;\r\n        SceneManager.LoadScene(nextIndex);\r\n        Debug.Log($\"加载下一个场景: 索引 {nextIndex}\");\r\n    }\r\n    \r\n    /// <summary>\r\n    /// 加载上一个场景\r\n    /// </summary>\r\n    private void LoadPreviousScene()\r\n    {\r\n        Scene currentScene = SceneManager.GetActiveScene();\r\n        int prevIndex = (currentScene.buildIndex - 1 + SceneManager.sceneCountInBuildSettings) % SceneManager.sceneCountInBuildSettings;\r\n        SceneManager.LoadScene(prevIndex);\r\n        Debug.Log($\"加载上一个场景: 索引 {prevIndex}\");\r\n    }\r\n    \r\n    /// <summary>\r\n    /// 卸载当前场景\r\n    /// </summary>\r\n    private void UnloadCurrentScene()\r\n    {\r\n        Scene currentScene = SceneManager.GetActiveScene();\r\n        if (currentScene.buildIndex != 0) // 不卸载第一个场景\r\n        {\r\n            StartCoroutine(UnloadSceneAsync(currentScene.name));\r\n        }\r\n        else\r\n        {\r\n            Debug.LogWarning(\"不能卸载第一个场景\");\r\n        }\r\n    }\r\n    \r\n    /// <summary>\r\n    /// 创建持久对象\r\n    /// </summary>\r\n    private void CreatePersistentObject()\r\n    {\r\n        GameObject persistentObj = new GameObject($\"PersistentObject_{Time.time:F2}\");\r\n        DontDestroyOnLoad(persistentObj);\r\n        Debug.Log($\"创建持久对象: {persistentObj.name}\");\r\n    }\r\n    \r\n    /// <summary>\r\n    /// 叠加加载场景\r\n    /// </summary>\r\n    private void LoadSceneAdditive()\r\n    {\r\n        if (sceneNames.Length > 0)\r\n        {\r\n            SceneManager.LoadScene(sceneNames[0], LoadSceneMode.Additive);\r\n            Debug.Log($\"叠加加载场景: {sceneNames[0]}\");\r\n        }\r\n    }\r\n    \r\n    /// <summary>\r\n    /// 获取场景信息\r\n    /// </summary>\r\n    public SceneInfo GetSceneInfo()\r\n    {\r\n        Scene currentScene = SceneManager.GetActiveScene();\r\n        return new SceneInfo\r\n        {\r\n            name = currentScene.name,\r\n            buildIndex = currentScene.buildIndex,\r\n            isLoaded = currentScene.isLoaded,\r\n            rootCount = currentScene.rootCount,\r\n            path = currentScene.path\r\n        };\r\n    }\r\n    \r\n    /// <summary>\r\n    /// 检查场景是否已加载\r\n    /// </summary>\r\n    public bool IsSceneLoaded(string sceneName)\r\n    {\r\n        Scene scene = SceneManager.GetSceneByName(sceneName);\r\n        return scene.IsValid() && scene.isLoaded;\r\n    }\r\n    \r\n    /// <summary>\r\n    /// 获取场景加载进度\r\n    /// </summary>\r\n    public float GetLoadProgress()\r\n    {\r\n        if (currentLoadOperation != null)\r\n        {\r\n            return currentLoadOperation.progress;\r\n        }\r\n        return 1f;\r\n    }\r\n    \r\n    /// <summary>\r\n    /// 在OnGUI中显示场景信息\r\n    /// </summary>\r\n    private void OnGUI()\r\n    {\r\n        if (!isInitialized || !showSceneInfo) return;\r\n        \r\n        GUILayout.BeginArea(new Rect(10, 10, 400, 500));\r\n        \r\n        GUILayout.Label(\"SceneManager信息\", EditorStyles.boldLabel);\r\n        GUILayout.Space(5);\r\n        \r\n        // 当前场景信息\r\n        Scene currentScene = SceneManager.GetActiveScene();\r\n        GUILayout.Label($\"当前场景: {currentScene.name}\");\r\n        GUILayout.Label($\"场景索引: {currentScene.buildIndex}\");\r\n        GUILayout.Label($\"场景路径: {currentScene.path}\");\r\n        GUILayout.Label($\"是否已加载: {currentScene.isLoaded}\");\r\n        GUILayout.Label($\"根对象数量: {currentScene.rootCount}\");\r\n        \r\n        GUILayout.Space(10);\r\n        \r\n        // 场景统计\r\n        GUILayout.Label(\"场景统计\", EditorStyles.boldLabel);\r\n        GUILayout.Label($\"已加载场景: {SceneManager.sceneCount}\");\r\n        GUILayout.Label($\"构建场景: {SceneManager.sceneCountInBuildSettings}\");\r\n        \r\n        GUILayout.Space(10);\r\n        \r\n        // 加载进度\r\n        if (currentLoadOperation != null)\r\n        {\r\n            GUILayout.Label(\"加载进度\", EditorStyles.boldLabel);\r\n            float progress = currentLoadOperation.progress;\r\n            GUILayout.Label($\"进度: {progress * 100:F1}%\");\r\n            GUILayout.Label($\"允许激活: {currentLoadOperation.allowSceneActivation}\");\r\n        }\r\n        \r\n        GUILayout.Space(10);\r\n        \r\n        // 控制说明\r\n        GUILayout.Label(\"控制说明:\", EditorStyles.boldLabel);\r\n        GUILayout.Label(\"数字键 - 加载场景\");\r\n        GUILayout.Label(\"R - 重新加载\");\r\n        GUILayout.Label(\"N - 下一个场景\");\r\n        GUILayout.Label(\"P - 上一个场景\");\r\n        GUILayout.Label(\"U - 卸载场景\");\r\n        GUILayout.Label(\"C - 创建持久对象\");\r\n        GUILayout.Label(\"L - 叠加加载\");\r\n        \r\n        GUILayout.EndArea();\r\n    }\r\n    \r\n    /// <summary>\r\n    /// 场景信息结构\r\n    /// </summary>\r\n    [System.Serializable]\r\n    public struct SceneInfo\r\n    {\r\n        public string name;\r\n        public int buildIndex;\r\n        public bool isLoaded;\r\n        public int rootCount;\r\n        public string path;\r\n    }\r\n} "
        }
    ]
}