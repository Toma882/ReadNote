{
    "sourceFile": "Assets/UnityEditor/Chapter 8 UnityAPI/UnityEditor/AssetImporters/AssetImportersExample.cs",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1750929618060,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1750929618060,
            "name": "Commit-0",
            "content": "using UnityEngine;\r\nusing UnityEditor;\r\nusing UnityEditor.AssetImporters;\r\nusing System.IO;\r\n\r\n/// <summary>\r\n/// UnityEditor.AssetImporters 命名空间案例演示\r\n/// 展示资产导入器的核心功能\r\n/// </summary>\r\npublic class AssetImportersExample : MonoBehaviour\r\n{\r\n    [Header(\"导入器设置\")]\r\n    [SerializeField] private string customFileExtension = \".custom\";\r\n    [SerializeField] private bool enableCustomImporter = true;\r\n    [SerializeField] private string importLogPath = \"Assets/ImportLog.txt\";\r\n    \r\n    [Header(\"导入统计\")]\r\n    [SerializeField] private int totalImportedFiles = 0;\r\n    [SerializeField] private int successfulImports = 0;\r\n    [SerializeField] private int failedImports = 0;\r\n    \r\n    private void Start()\r\n    {\r\n        InitializeAssetImporters();\r\n    }\r\n    \r\n    /// <summary>\r\n    /// 初始化资产导入器\r\n    /// </summary>\r\n    private void InitializeAssetImporters()\r\n    {\r\n        Debug.Log(\"资产导入器系统初始化完成\");\r\n        \r\n        // 注册自定义导入器\r\n        if (enableCustomImporter)\r\n        {\r\n            RegisterCustomImporter();\r\n        }\r\n    }\r\n    \r\n    /// <summary>\r\n    /// 注册自定义导入器\r\n    /// </summary>\r\n    private void RegisterCustomImporter()\r\n    {\r\n        Debug.Log($\"注册自定义导入器，文件扩展名: {customFileExtension}\");\r\n    }\r\n    \r\n    /// <summary>\r\n    /// 创建测试文件\r\n    /// </summary>\r\n    public void CreateTestFiles()\r\n    {\r\n        string testDirectory = \"Assets/TestFiles\";\r\n        \r\n        // 确保目录存在\r\n        if (!Directory.Exists(testDirectory))\r\n        {\r\n            Directory.CreateDirectory(testDirectory);\r\n        }\r\n        \r\n        // 创建自定义格式文件\r\n        for (int i = 0; i < 5; i++)\r\n        {\r\n            string fileName = $\"test_file_{i}{customFileExtension}\";\r\n            string filePath = Path.Combine(testDirectory, fileName);\r\n            \r\n            string content = $\"这是测试文件 {i} 的内容\\n创建时间: {System.DateTime.Now}\\n自定义数据: {Random.Range(1, 100)}\";\r\n            File.WriteAllText(filePath, content);\r\n            \r\n            Debug.Log($\"创建测试文件: {filePath}\");\r\n        }\r\n        \r\n        // 刷新资产数据库\r\n        AssetDatabase.Refresh();\r\n        \r\n        Debug.Log(\"测试文件创建完成\");\r\n    }\r\n    \r\n    /// <summary>\r\n    /// 清理测试文件\r\n    /// </summary>\r\n    public void CleanupTestFiles()\r\n    {\r\n        string testDirectory = \"Assets/TestFiles\";\r\n        \r\n        if (Directory.Exists(testDirectory))\r\n        {\r\n            Directory.Delete(testDirectory, true);\r\n            AssetDatabase.Refresh();\r\n            Debug.Log(\"测试文件已清理\");\r\n        }\r\n    }\r\n    \r\n    /// <summary>\r\n    /// 获取导入统计信息\r\n    /// </summary>\r\n    public void GetImportStatistics()\r\n    {\r\n        Debug.Log(\"=== 导入统计信息 ===\");\r\n        Debug.Log($\"总导入文件数: {totalImportedFiles}\");\r\n        Debug.Log($\"成功导入数: {successfulImports}\");\r\n        Debug.Log($\"失败导入数: {failedImports}\");\r\n        Debug.Log($\"成功率: {(totalImportedFiles > 0 ? (float)successfulImports / totalImportedFiles * 100 : 0):F1}%\");\r\n    }\r\n    \r\n    /// <summary>\r\n    /// 重置统计信息\r\n    /// </summary>\r\n    public void ResetStatistics()\r\n    {\r\n        totalImportedFiles = 0;\r\n        successfulImports = 0;\r\n        failedImports = 0;\r\n        Debug.Log(\"统计信息已重置\");\r\n    }\r\n    \r\n    private void OnGUI()\r\n    {\r\n        // 简单的GUI界面用于测试\r\n        GUILayout.BeginArea(new Rect(10, 10, 400, 300));\r\n        GUILayout.Label(\"资产导入器演示\", EditorStyles.boldLabel);\r\n        \r\n        GUILayout.Space(10);\r\n        \r\n        // 设置\r\n        GUILayout.Label($\"自定义文件扩展名: {customFileExtension}\");\r\n        enableCustomImporter = GUILayout.Toggle(enableCustomImporter, \"启用自定义导入器\");\r\n        \r\n        GUILayout.Space(10);\r\n        \r\n        // 操作按钮\r\n        if (GUILayout.Button(\"创建测试文件\"))\r\n        {\r\n            CreateTestFiles();\r\n        }\r\n        \r\n        if (GUILayout.Button(\"清理测试文件\"))\r\n        {\r\n            CleanupTestFiles();\r\n        }\r\n        \r\n        GUILayout.Space(10);\r\n        \r\n        if (GUILayout.Button(\"获取导入统计\"))\r\n        {\r\n            GetImportStatistics();\r\n        }\r\n        \r\n        if (GUILayout.Button(\"重置统计\"))\r\n        {\r\n            ResetStatistics();\r\n        }\r\n        \r\n        GUILayout.Space(10);\r\n        \r\n        // 统计信息显示\r\n        GUILayout.Label($\"总导入文件数: {totalImportedFiles}\");\r\n        GUILayout.Label($\"成功导入数: {successfulImports}\");\r\n        GUILayout.Label($\"失败导入数: {failedImports}\");\r\n        \r\n        GUILayout.EndArea();\r\n    }\r\n}\r\n\r\n/// <summary>\r\n/// 自定义资产导入器示例\r\n/// </summary>\r\n[ScriptedImporter(1, \"custom\")]\r\npublic class CustomAssetImporter : ScriptedImporter\r\n{\r\n    [Header(\"导入设置\")]\r\n    public bool enableLogging = true;\r\n    public string customData = \"\";\r\n    \r\n    public override void OnImportAsset(AssetImportContext ctx)\r\n    {\r\n        Debug.Log($\"开始导入自定义资产: {ctx.assetPath}\");\r\n        \r\n        // 读取文件内容\r\n        string fileContent = File.ReadAllText(ctx.assetPath);\r\n        \r\n        // 创建自定义资产\r\n        var customAsset = ScriptableObject.CreateInstance<CustomAsset>();\r\n        customAsset.fileContent = fileContent;\r\n        customAsset.importTime = System.DateTime.Now;\r\n        customAsset.customData = customData;\r\n        \r\n        // 设置资产名称\r\n        string assetName = Path.GetFileNameWithoutExtension(ctx.assetPath);\r\n        customAsset.name = assetName;\r\n        \r\n        // 添加资产到导入上下文\r\n        ctx.AddObjectToAsset(\"main\", customAsset);\r\n        ctx.SetMainObject(customAsset);\r\n        \r\n        Debug.Log($\"自定义资产导入完成: {assetName}\");\r\n    }\r\n}\r\n\r\n/// <summary>\r\n/// 自定义资产数据\r\n/// </summary>\r\npublic class CustomAsset : ScriptableObject\r\n{\r\n    [Header(\"文件内容\")]\r\n    [TextArea(5, 10)]\r\n    public string fileContent;\r\n    \r\n    [Header(\"导入信息\")]\r\n    public System.DateTime importTime;\r\n    public string customData;\r\n    \r\n    /// <summary>\r\n    /// 获取文件内容\r\n    /// </summary>\r\n    /// <returns>文件内容</returns>\r\n    public string GetContent()\r\n    {\r\n        return fileContent;\r\n    }\r\n    \r\n    /// <summary>\r\n    /// 设置文件内容\r\n    /// </summary>\r\n    /// <param name=\"content\">新内容</param>\r\n    public void SetContent(string content)\r\n    {\r\n        fileContent = content;\r\n        EditorUtility.SetDirty(this);\r\n    }\r\n    \r\n    /// <summary>\r\n    /// 获取导入时间\r\n    /// </summary>\r\n    /// <returns>导入时间</returns>\r\n    public System.DateTime GetImportTime()\r\n    {\r\n        return importTime;\r\n    }\r\n    \r\n    /// <summary>\r\n    /// 获取自定义数据\r\n    /// </summary>\r\n    /// <returns>自定义数据</returns>\r\n    public string GetCustomData()\r\n    {\r\n        return customData;\r\n    }\r\n    \r\n    /// <summary>\r\n    /// 设置自定义数据\r\n    /// </summary>\r\n    /// <param name=\"data\">新数据</param>\r\n    public void SetCustomData(string data)\r\n    {\r\n        customData = data;\r\n        EditorUtility.SetDirty(this);\r\n    }\r\n}\r\n\r\n/// <summary>\r\n/// 自定义资产编辑器\r\n/// </summary>\r\n[CustomEditor(typeof(CustomAsset))]\r\npublic class CustomAssetEditor : Editor\r\n{\r\n    private CustomAsset customAsset;\r\n    private bool showContent = true;\r\n    private bool showInfo = true;\r\n    \r\n    private void OnEnable()\r\n    {\r\n        customAsset = (CustomAsset)target;\r\n    }\r\n    \r\n    public override void OnInspectorGUI()\r\n    {\r\n        EditorGUILayout.LabelField(\"自定义资产编辑器\", EditorStyles.boldLabel);\r\n        \r\n        EditorGUILayout.Space();\r\n        \r\n        // 内容显示\r\n        showContent = EditorGUILayout.Foldout(showContent, \"文件内容\");\r\n        if (showContent)\r\n        {\r\n            EditorGUI.BeginChangeCheck();\r\n            string newContent = EditorGUILayout.TextArea(customAsset.fileContent, GUILayout.Height(100));\r\n            if (EditorGUI.EndChangeCheck())\r\n            {\r\n                Undo.RecordObject(customAsset, \"修改文件内容\");\r\n                customAsset.SetContent(newContent);\r\n            }\r\n        }\r\n        \r\n        EditorGUILayout.Space();\r\n        \r\n        // 信息显示\r\n        showInfo = EditorGUILayout.Foldout(showInfo, \"导入信息\");\r\n        if (showInfo)\r\n        {\r\n            EditorGUI.BeginDisabledGroup(true);\r\n            EditorGUILayout.TextField(\"导入时间\", customAsset.importTime.ToString());\r\n            EditorGUILayout.TextField(\"自定义数据\", customAsset.customData);\r\n            EditorGUI.EndDisabledGroup();\r\n        }\r\n        \r\n        EditorGUILayout.Space();\r\n        \r\n        // 操作按钮\r\n        if (GUILayout.Button(\"重新导入\"))\r\n        {\r\n            AssetDatabase.ImportAsset(AssetDatabase.GetAssetPath(customAsset));\r\n        }\r\n        \r\n        if (GUILayout.Button(\"导出内容\"))\r\n        {\r\n            ExportContent();\r\n        }\r\n        \r\n        if (GUILayout.Button(\"清空内容\"))\r\n        {\r\n            if (EditorUtility.DisplayDialog(\"确认\", \"确定要清空文件内容吗？\", \"确定\", \"取消\"))\r\n            {\r\n                Undo.RecordObject(customAsset, \"清空文件内容\");\r\n                customAsset.SetContent(\"\");\r\n            }\r\n        }\r\n    }\r\n    \r\n    /// <summary>\r\n    /// 导出内容\r\n    /// </summary>\r\n    private void ExportContent()\r\n    {\r\n        string path = EditorUtility.SaveFilePanel(\"导出内容\", \"\", customAsset.name, \"txt\");\r\n        if (!string.IsNullOrEmpty(path))\r\n        {\r\n            File.WriteAllText(path, customAsset.fileContent);\r\n            Debug.Log($\"内容已导出到: {path}\");\r\n        }\r\n    }\r\n}\r\n\r\n/// <summary>\r\n/// 批量导入处理器\r\n/// </summary>\r\npublic class BatchImportProcessor : AssetPostprocessor\r\n{\r\n    private static int processedFiles = 0;\r\n    private static int totalFiles = 0;\r\n    \r\n    /// <summary>\r\n    /// 导入前处理\r\n    /// </summary>\r\n    private static void OnPreprocessAsset()\r\n    {\r\n        totalFiles++;\r\n        Debug.Log($\"开始处理资产: {assetImporter.assetPath}\");\r\n    }\r\n    \r\n    /// <summary>\r\n    /// 导入后处理\r\n    /// </summary>\r\n    private static void OnPostprocessAsset()\r\n    {\r\n        processedFiles++;\r\n        Debug.Log($\"资产处理完成: {assetImporter.assetPath} ({processedFiles}/{totalFiles})\");\r\n    }\r\n    \r\n    /// <summary>\r\n    /// 处理自定义文件\r\n    /// </summary>\r\n    private static void OnPostprocessAllAssets(\r\n        string[] importedAssets,\r\n        string[] deletedAssets,\r\n        string[] movedAssets,\r\n        string[] movedFromAssetPaths)\r\n    {\r\n        Debug.Log($\"批量处理完成 - 导入: {importedAssets.Length}, 删除: {deletedAssets.Length}, 移动: {movedAssets.Length}\");\r\n        \r\n        // 重置计数器\r\n        processedFiles = 0;\r\n        totalFiles = 0;\r\n    }\r\n} "
        }
    ]
}