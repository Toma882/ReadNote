{
    "sourceFile": "Assets/UnityEditor/Chapter 8 UnityAPI/UnityEngine/Animations/AnimationsExample.cs",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 1,
            "patches": [
                {
                    "date": 1750929702777,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1750933514479,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,34 +4,49 @@\n using System.Collections.Generic;\r\n \r\n /// <summary>\r\n /// UnityEngine.Animations 命名空间案例演示\r\n-/// 展示动画系统的核心功能\r\n+/// 展示动画控制器、动画状态机、动画事件等核心功能\r\n /// </summary>\r\n public class AnimationsExample : MonoBehaviour\r\n {\r\n     [Header(\"动画组件\")]\r\n-    [SerializeField] private Animator animator;\r\n-    [SerializeField] private AnimationClip[] animationClips;\r\n-    [SerializeField] private RuntimeAnimatorController animatorController;\r\n+    [SerializeField] private Animator animator; //动画控制器\r\n+    [SerializeField] private AnimationClip[] animationClips; //动画片段\r\n+    [SerializeField] private RuntimeAnimatorController animatorController; //运行时动画控制器\r\n     \r\n     [Header(\"Playable系统\")]\r\n     [SerializeField] private PlayableGraph playableGraph;\r\n     [SerializeField] private AnimationMixerPlayable mixerPlayable;\r\n     [SerializeField] private AnimationClipPlayable[] clipPlayables;\r\n     [SerializeField] private bool usePlayableSystem = false;\r\n     \r\n-    [Header(\"动画设置\")]\r\n-    [SerializeField] private float playbackSpeed = 1.0f;\r\n-    [SerializeField] private bool loop = true;\r\n-    [SerializeField] private float blendTime = 0.25f;\r\n-    [SerializeField] private int currentClipIndex = 0;\r\n+    [Header(\"动画参数\")]\r\n+    [SerializeField] private float speed = 1f; //播放速度\r\n+    [SerializeField] private bool isPlaying = false; //是否正在播放\r\n+    [SerializeField] private string currentState = \"\"; //当前状态\r\n+    [SerializeField] private float normalizedTime = 0f; //标准化时间\r\n     \r\n+    [Header(\"动画控制\")]\r\n+    [SerializeField] private bool loop = true; //循环播放\r\n+    [SerializeField] private bool crossFade = true; //交叉淡入淡出\r\n+    [SerializeField] private float crossFadeDuration = 0.25f; //交叉淡入淡出时长\r\n+    [SerializeField] private bool enableIK = false; //启用IK\r\n+    \r\n+    [Header(\"动画事件\")]\r\n+    [SerializeField] private bool enableEvents = true; //启用事件\r\n+    [SerializeField] private string eventMessage = \"动画事件触发\"; //事件消息\r\n+    [SerializeField] private float eventTime = 0.5f; //事件时间\r\n+    \r\n+    [Header(\"动画层\")]\r\n+    [SerializeField] private int currentLayer = 0; //当前层\r\n+    [SerializeField] private float layerWeight = 1f; //层权重\r\n+    [SerializeField] private bool layerEnabled = true; //层启用\r\n+    \r\n     [Header(\"动画统计\")]\r\n     [SerializeField] private float currentTime = 0f;\r\n-    [SerializeField] private float normalizedTime = 0f;\r\n-    [SerializeField] private bool isPlaying = false;\r\n-    [SerializeField] private string currentStateName = \"\";\r\n+    [SerializeField] private float playbackSpeed = 1.0f;\r\n+    [SerializeField] private int currentClipIndex = 0;\r\n     \r\n     // 动画状态\r\n     private Dictionary<string, int> stateHashes = new Dictionary<string, int>();\r\n     private List<AnimationClip> loadedClips = new List<AnimationClip>();\r\n@@ -45,24 +60,39 @@\n     /// 初始化动画系统\r\n     /// </summary>\r\n     private void InitializeAnimationSystem()\r\n     {\r\n-        // 获取或创建Animator组件\r\n         if (animator == null)\r\n         {\r\n             animator = GetComponent<Animator>();\r\n-            if (animator == null)\r\n-            {\r\n-                animator = gameObject.AddComponent<Animator>();\r\n-            }\r\n         }\r\n         \r\n+        if (animator == null)\r\n+        {\r\n+            animator = gameObject.AddComponent<Animator>();\r\n+        }\r\n+        \r\n         // 设置动画控制器\r\n         if (animatorController != null)\r\n         {\r\n             animator.runtimeAnimatorController = animatorController;\r\n         }\r\n         \r\n+        // 设置动画参数\r\n+        animator.speed = speed;\r\n+        \r\n+        // 启用IK\r\n+        if (enableIK)\r\n+        {\r\n+            animator.applyRootMotion = true;\r\n+        }\r\n+        \r\n+        // 设置动画事件\r\n+        if (enableEvents)\r\n+        {\r\n+            SetupAnimationEvents();\r\n+        }\r\n+        \r\n         // 初始化Playable系统\r\n         if (usePlayableSystem)\r\n         {\r\n             InitializePlayableSystem();\r\n@@ -74,8 +104,41 @@\n         Debug.Log(\"动画系统初始化完成\");\r\n     }\r\n     \r\n     /// <summary>\r\n+    /// 设置动画事件\r\n+    /// </summary>\r\n+    private void SetupAnimationEvents()\r\n+    {\r\n+        if (animationClips != null && animationClips.Length > 0)\r\n+        {\r\n+            foreach (var clip in animationClips)\r\n+            {\r\n+                if (clip != null)\r\n+                {\r\n+                    // 创建动画事件\r\n+                    AnimationEvent animEvent = new AnimationEvent();\r\n+                    animEvent.functionName = \"OnAnimationEvent\";\r\n+                    animEvent.time = eventTime;\r\n+                    animEvent.stringParameter = eventMessage;\r\n+                    \r\n+                    // 添加事件到动画片段\r\n+                    clip.AddEvent(animEvent);\r\n+                }\r\n+            }\r\n+        }\r\n+    }\r\n+    \r\n+    /// <summary>\r\n+    /// 动画事件回调\r\n+    /// </summary>\r\n+    /// <param name=\"message\">事件消息</param>\r\n+    public void OnAnimationEvent(string message)\r\n+    {\r\n+        Debug.Log($\"动画事件: {message}\");\r\n+    }\r\n+    \r\n+    /// <summary>\r\n     /// 初始化Playable系统\r\n     /// </summary>\r\n     private void InitializePlayableSystem()\r\n     {\r\n@@ -134,60 +197,38 @@\n     \r\n     /// <summary>\r\n     /// 播放动画\r\n     /// </summary>\r\n-    /// <param name=\"clipIndex\">片段索引</param>\r\n-    public void PlayAnimation(int clipIndex)\r\n+    /// <param name=\"clipName\">动画片段名称</param>\r\n+    public void PlayAnimation(string clipName)\r\n     {\r\n-        if (clipIndex < 0 || clipIndex >= loadedClips.Count) return;\r\n-        \r\n-        currentClipIndex = clipIndex;\r\n-        \r\n-        if (usePlayableSystem)\r\n+        if (animator != null)\r\n         {\r\n-            PlayAnimationPlayable(clipIndex);\r\n+            animator.Play(clipName);\r\n+            isPlaying = true;\r\n+            currentState = clipName;\r\n+            Debug.Log($\"播放动画: {clipName}\");\r\n         }\r\n-        else\r\n-        {\r\n-            PlayAnimationTraditional(clipIndex);\r\n-        }\r\n-        \r\n-        Debug.Log($\"播放动画: {loadedClips[clipIndex].name}\");\r\n     }\r\n     \r\n     /// <summary>\r\n-    /// 使用传统方式播放动画\r\n+    /// 播放动画片段\r\n     /// </summary>\r\n-    /// <param name=\"clipIndex\">片段索引</param>\r\n-    private void PlayAnimationTraditional(int clipIndex)\r\n+    /// <param name=\"clipIndex\">动画片段索引</param>\r\n+    public void PlayAnimationClip(int clipIndex)\r\n     {\r\n-        if (animator == null || clipIndex >= loadedClips.Count) return;\r\n-        \r\n-        AnimationClip clip = loadedClips[clipIndex];\r\n-        animator.Play(clip.name);\r\n-        currentStateName = clip.name;\r\n-        isPlaying = true;\r\n-    }\r\n-    \r\n-    /// <summary>\r\n-    /// 使用Playable系统播放动画\r\n-    /// </summary>\r\n-    /// <param name=\"clipIndex\">片段索引</param>\r\n-    private void PlayAnimationPlayable(int clipIndex)\r\n-    {\r\n-        if (mixerPlayable.IsValid() && clipIndex < clipPlayables.Length)\r\n+        if (animationClips != null && clipIndex >= 0 && clipIndex < animationClips.Length)\r\n         {\r\n-            // 重置所有权重\r\n-            for (int i = 0; i < clipPlayables.Length; i++)\r\n+            currentClipIndex = clipIndex;\r\n+            AnimationClip clip = animationClips[clipIndex];\r\n+            \r\n+            if (clip != null)\r\n             {\r\n-                mixerPlayable.SetInputWeight(i, 0f);\r\n+                animator.Play(clip.name);\r\n+                isPlaying = true;\r\n+                currentState = clip.name;\r\n+                Debug.Log($\"播放动画片段: {clip.name}\");\r\n             }\r\n-            \r\n-            // 设置当前片段权重\r\n-            mixerPlayable.SetInputWeight(clipIndex, 1f);\r\n-            \r\n-            currentStateName = loadedClips[clipIndex].name;\r\n-            isPlaying = true;\r\n         }\r\n     }\r\n     \r\n     /// <summary>\r\n@@ -266,216 +307,207 @@\n     \r\n     /// <summary>\r\n     /// 设置播放速度\r\n     /// </summary>\r\n-    /// <param name=\"speed\">播放速度</param>\r\n-    public void SetPlaybackSpeed(float speed)\r\n+    /// <param name=\"newSpeed\">新的播放速度</param>\r\n+    public void SetAnimationSpeed(float newSpeed)\r\n     {\r\n-        playbackSpeed = Mathf.Clamp(speed, 0.1f, 10f);\r\n+        speed = Mathf.Clamp(newSpeed, 0.1f, 10f);\r\n         \r\n         if (usePlayableSystem)\r\n         {\r\n             if (playableGraph.IsValid())\r\n             {\r\n-                playableGraph.GetRootPlayable(0).SetSpeed(playbackSpeed);\r\n+                playableGraph.GetRootPlayable(0).SetSpeed(speed);\r\n             }\r\n         }\r\n         else\r\n         {\r\n             if (animator != null)\r\n             {\r\n-                animator.speed = playbackSpeed;\r\n+                animator.speed = speed;\r\n             }\r\n         }\r\n         \r\n-        Debug.Log($\"播放速度已设置为: {playbackSpeed}\");\r\n+        Debug.Log($\"播放速度已设置为: {speed}\");\r\n     }\r\n     \r\n     /// <summary>\r\n-    /// 设置动画时间\r\n+    /// 设置动画参数\r\n     /// </summary>\r\n-    /// <param name=\"time\">时间位置</param>\r\n-    public void SetAnimationTime(float time)\r\n+    /// <param name=\"paramName\">参数名称</param>\r\n+    /// <param name=\"value\">参数值</param>\r\n+    public void SetAnimationParameter(string paramName, float value)\r\n     {\r\n-        if (currentClipIndex >= loadedClips.Count) return;\r\n-        \r\n-        AnimationClip clip = loadedClips[currentClipIndex];\r\n-        time = Mathf.Clamp(time, 0f, clip.length);\r\n-        \r\n-        if (usePlayableSystem)\r\n+        if (animator != null)\r\n         {\r\n-            if (currentClipIndex < clipPlayables.Length && clipPlayables[currentClipIndex].IsValid())\r\n-            {\r\n-                clipPlayables[currentClipIndex].SetTime(time);\r\n-            }\r\n+            animator.SetFloat(paramName, value);\r\n         }\r\n-        else\r\n+    }\r\n+    \r\n+    /// <summary>\r\n+    /// 设置布尔参数\r\n+    /// </summary>\r\n+    /// <param name=\"paramName\">参数名称</param>\r\n+    /// <param name=\"value\">参数值</param>\r\n+    public void SetAnimationParameter(string paramName, bool value)\r\n+    {\r\n+        if (animator != null)\r\n         {\r\n-            if (animator != null)\r\n-            {\r\n-                animator.Play(currentStateName, 0, time / clip.length);\r\n-            }\r\n+            animator.SetBool(paramName, value);\r\n         }\r\n-        \r\n-        currentTime = time;\r\n-        normalizedTime = time / clip.length;\r\n-        \r\n-        Debug.Log($\"动画时间已设置为: {time:F2}s\");\r\n     }\r\n     \r\n     /// <summary>\r\n-    /// 混合动画\r\n+    /// 设置整数参数\r\n     /// </summary>\r\n-    /// <param name=\"fromClipIndex\">起始片段索引</param>\r\n-    /// <param name=\"toClipIndex\">目标片段索引</param>\r\n-    /// <param name=\"blendTime\">混合时间</param>\r\n-    public void BlendAnimation(int fromClipIndex, int toClipIndex, float blendTime)\r\n+    /// <param name=\"paramName\">参数名称</param>\r\n+    /// <param name=\"value\">参数值</param>\r\n+    public void SetAnimationParameter(string paramName, int value)\r\n     {\r\n-        if (fromClipIndex < 0 || fromClipIndex >= loadedClips.Count ||\r\n-            toClipIndex < 0 || toClipIndex >= loadedClips.Count) return;\r\n-        \r\n-        if (usePlayableSystem)\r\n+        if (animator != null)\r\n         {\r\n-            StartCoroutine(BlendAnimationCoroutine(fromClipIndex, toClipIndex, blendTime));\r\n+            animator.SetInteger(paramName, value);\r\n         }\r\n-        else\r\n+    }\r\n+    \r\n+    /// <summary>\r\n+    /// 设置触发器参数\r\n+    /// </summary>\r\n+    /// <param name=\"paramName\">参数名称</param>\r\n+    public void SetAnimationTrigger(string paramName)\r\n+    {\r\n+        if (animator != null)\r\n         {\r\n-            if (animator != null)\r\n-            {\r\n-                animator.CrossFade(loadedClips[toClipIndex].name, blendTime);\r\n-            }\r\n+            animator.SetTrigger(paramName);\r\n         }\r\n-        \r\n-        Debug.Log($\"开始混合动画: {loadedClips[fromClipIndex].name} -> {loadedClips[toClipIndex].name}\");\r\n     }\r\n     \r\n     /// <summary>\r\n-    /// 动画混合协程\r\n+    /// 设置动画层权重\r\n     /// </summary>\r\n-    private System.Collections.IEnumerator BlendAnimationCoroutine(int fromClipIndex, int toClipIndex, float blendTime)\r\n+    /// <param name=\"layerIndex\">层索引</param>\r\n+    /// <param name=\"weight\">权重</param>\r\n+    public void SetLayerWeight(int layerIndex, float weight)\r\n     {\r\n-        if (!mixerPlayable.IsValid()) yield break;\r\n-        \r\n-        float elapsedTime = 0f;\r\n-        \r\n-        while (elapsedTime < blendTime)\r\n+        if (animator != null)\r\n         {\r\n-            float t = elapsedTime / blendTime;\r\n-            float fromWeight = 1f - t;\r\n-            float toWeight = t;\r\n-            \r\n-            mixerPlayable.SetInputWeight(fromClipIndex, fromWeight);\r\n-            mixerPlayable.SetInputWeight(toClipIndex, toWeight);\r\n-            \r\n-            elapsedTime += Time.deltaTime;\r\n-            yield return null;\r\n+            animator.SetLayerWeight(layerIndex, weight);\r\n+            layerWeight = weight;\r\n         }\r\n-        \r\n-        // 完成混合\r\n-        mixerPlayable.SetInputWeight(fromClipIndex, 0f);\r\n-        mixerPlayable.SetInputWeight(toClipIndex, 1f);\r\n-        \r\n-        currentClipIndex = toClipIndex;\r\n-        currentStateName = loadedClips[toClipIndex].name;\r\n     }\r\n     \r\n     /// <summary>\r\n-    /// 获取动画信息\r\n+    /// 启用/禁用动画层\r\n     /// </summary>\r\n-    public void GetAnimationInfo()\r\n+    /// <param name=\"layerIndex\">层索引</param>\r\n+    /// <param name=\"enabled\">是否启用</param>\r\n+    public void SetLayerEnabled(int layerIndex, bool enabled)\r\n     {\r\n-        if (currentClipIndex >= loadedClips.Count) return;\r\n-        \r\n-        AnimationClip clip = loadedClips[currentClipIndex];\r\n-        \r\n-        Debug.Log(\"=== 动画信息 ===\");\r\n-        Debug.Log($\"当前动画: {clip.name}\");\r\n-        Debug.Log($\"动画长度: {clip.length:F2}s\");\r\n-        Debug.Log($\"当前时间: {currentTime:F2}s\");\r\n-        Debug.Log($\"标准化时间: {normalizedTime:F2}\");\r\n-        Debug.Log($\"播放速度: {playbackSpeed}\");\r\n-        Debug.Log($\"是否播放: {isPlaying}\");\r\n-        Debug.Log($\"是否循环: {clip.isLooping}\");\r\n-        Debug.Log($\"帧率: {clip.frameRate}\");\r\n-        Debug.Log($\"事件数量: {clip.events.Length}\");\r\n+        if (animator != null)\r\n+        {\r\n+            animator.SetLayerWeight(layerIndex, enabled ? 1f : 0f);\r\n+            layerEnabled = enabled;\r\n+        }\r\n     }\r\n     \r\n     /// <summary>\r\n-    /// 添加动画事件\r\n+    /// 获取动画信息\r\n     /// </summary>\r\n-    /// <param name=\"time\">事件时间</param>\r\n-    /// <param name=\"functionName\">函数名称</param>\r\n-    public void AddAnimationEvent(float time, string functionName)\r\n+    public void GetAnimationInfo()\r\n     {\r\n-        if (currentClipIndex >= loadedClips.Count) return;\r\n-        \r\n-        AnimationClip clip = loadedClips[currentClipIndex];\r\n-        time = Mathf.Clamp(time, 0f, clip.length);\r\n-        \r\n-        AnimationEvent animEvent = new AnimationEvent();\r\n-        animEvent.time = time;\r\n-        animEvent.functionName = functionName;\r\n-        \r\n-        clip.AddEvent(animEvent);\r\n-        \r\n-        Debug.Log($\"已添加动画事件: {functionName} at {time:F2}s\");\r\n+        if (animator != null)\r\n+        {\r\n+            Debug.Log(\"=== 动画信息 ===\");\r\n+            Debug.Log($\"动画控制器: {(animator.runtimeAnimatorController != null ? \"已设置\" : \"未设置\")}\");\r\n+            Debug.Log($\"当前状态: {currentState}\");\r\n+            Debug.Log($\"播放速度: {animator.speed}\");\r\n+            Debug.Log($\"是否播放: {isPlaying}\");\r\n+            Debug.Log($\"标准化时间: {normalizedTime}\");\r\n+            Debug.Log($\"当前层: {currentLayer}\");\r\n+            Debug.Log($\"层权重: {layerWeight}\");\r\n+            Debug.Log($\"层启用: {layerEnabled}\");\r\n+            Debug.Log($\"IK启用: {enableIK}\");\r\n+            Debug.Log($\"根运动: {animator.applyRootMotion}\");\r\n+        }\r\n     }\r\n     \r\n     /// <summary>\r\n-    /// 获取动画事件\r\n+    /// 获取动画片段信息\r\n     /// </summary>\r\n-    public void GetAnimationEvents()\r\n+    public void GetAnimationClipInfo()\r\n     {\r\n-        if (currentClipIndex >= loadedClips.Count) return;\r\n-        \r\n-        AnimationClip clip = loadedClips[currentClipIndex];\r\n-        \r\n-        Debug.Log($\"=== {clip.name} 的动画事件 ===\");\r\n-        foreach (var animEvent in clip.events)\r\n+        if (animationClips != null)\r\n         {\r\n-            Debug.Log($\"事件: {animEvent.functionName} at {animEvent.time:F2}s\");\r\n+            Debug.Log(\"=== 动画片段信息 ===\");\r\n+            for (int i = 0; i < animationClips.Length; i++)\r\n+            {\r\n+                if (animationClips[i] != null)\r\n+                {\r\n+                    Debug.Log($\"片段 {i}: {animationClips[i].name}\");\r\n+                    Debug.Log($\"  长度: {animationClips[i].length}秒\");\r\n+                    Debug.Log($\"  帧率: {animationClips[i].frameRate}\");\r\n+                    Debug.Log($\"  循环: {animationClips[i].isLooping}\");\r\n+                }\r\n+            }\r\n         }\r\n     }\r\n     \r\n     /// <summary>\r\n-    /// 设置动画循环\r\n+    /// 测试动画功能\r\n     /// </summary>\r\n-    /// <param name=\"loop\">是否循环</param>\r\n-    public void SetAnimationLoop(bool loop)\r\n+    public void TestAnimationFeatures()\r\n     {\r\n-        this.loop = loop;\r\n+        Debug.Log(\"开始测试动画功能\");\r\n         \r\n-        if (usePlayableSystem)\r\n+        // 测试播放动画\r\n+        if (animationClips != null && animationClips.Length > 0)\r\n         {\r\n-            if (currentClipIndex < clipPlayables.Length && clipPlayables[currentClipIndex].IsValid())\r\n-            {\r\n-                clipPlayables[currentClipIndex].SetApplyFootIK(loop);\r\n-            }\r\n+            PlayAnimationClip(currentClipIndex);\r\n         }\r\n         \r\n-        Debug.Log($\"动画循环已{(loop ? \"启用\" : \"禁用\")}\");\r\n+        // 测试设置参数\r\n+        SetAnimationParameter(\"Speed\", 1.5f);\r\n+        SetAnimationParameter(\"IsMoving\", true);\r\n+        \r\n+        // 测试层控制\r\n+        SetLayerWeight(0, 0.8f);\r\n+        \r\n+        Debug.Log(\"动画功能测试完成\");\r\n     }\r\n     \r\n     /// <summary>\r\n-    /// 切换Playable系统\r\n+    /// 重置动画设置\r\n     /// </summary>\r\n-    public void TogglePlayableSystem()\r\n+    public void ResetAnimationSettings()\r\n     {\r\n-        usePlayableSystem = !usePlayableSystem;\r\n+        speed = 1f;\r\n+        loop = true;\r\n+        crossFade = true;\r\n+        crossFadeDuration = 0.25f;\r\n+        enableIK = false;\r\n+        enableEvents = true;\r\n+        eventTime = 0.5f;\r\n+        currentLayer = 0;\r\n+        layerWeight = 1f;\r\n+        layerEnabled = true;\r\n         \r\n-        if (usePlayableSystem)\r\n+        if (animator != null)\r\n         {\r\n-            InitializePlayableSystem();\r\n+            animator.speed = speed;\r\n+            animator.applyRootMotion = enableIK;\r\n+            SetLayerWeight(currentLayer, layerWeight);\r\n         }\r\n-        else\r\n+        \r\n+        if (usePlayableSystem)\r\n         {\r\n             if (playableGraph.IsValid())\r\n             {\r\n                 playableGraph.Destroy();\r\n             }\r\n         }\r\n         \r\n-        Debug.Log($\"Playable系统已{(usePlayableSystem ? \"启用\" : \"禁用\")}\");\r\n+        Debug.Log(\"动画设置已重置\");\r\n     }\r\n     \r\n     private void Update()\r\n     {\r\n@@ -514,87 +546,93 @@\n     }\r\n     \r\n     private void OnGUI()\r\n     {\r\n-        // 简单的GUI界面用于测试\r\n-        GUILayout.BeginArea(new Rect(10, 10, 400, 600));\r\n-        GUILayout.Label(\"动画系统演示\", EditorStyles.boldLabel);\r\n+        GUILayout.BeginArea(new Rect(10, 10, 400, 700));\r\n+        GUILayout.Label(\"Animations 动画系统演示\", UnityEditor.EditorStyles.boldLabel);\r\n         \r\n         GUILayout.Space(10);\r\n+        GUILayout.Label(\"动画控制:\");\r\n         \r\n-        // 动画信息\r\n-        GUILayout.Label($\"当前动画: {currentStateName}\");\r\n-        GUILayout.Label($\"当前时间: {currentTime:F2}s\");\r\n-        GUILayout.Label($\"标准化时间: {normalizedTime:F2}\");\r\n-        GUILayout.Label($\"播放速度: {playbackSpeed}\");\r\n-        GUILayout.Label($\"是否播放: {isPlaying}\");\r\n-        \r\n-        GUILayout.Space(10);\r\n-        \r\n-        // 播放控制\r\n-        if (GUILayout.Button(\"播放动画\"))\r\n+        GUILayout.BeginHorizontal();\r\n+        if (GUILayout.Button(\"播放\"))\r\n         {\r\n-            PlayAnimation(currentClipIndex);\r\n+            if (animationClips != null && animationClips.Length > 0)\r\n+            {\r\n+                PlayAnimationClip(currentClipIndex);\r\n+            }\r\n         }\r\n-        \r\n-        if (GUILayout.Button(\"停止动画\"))\r\n+        if (GUILayout.Button(\"停止\"))\r\n         {\r\n             StopAnimation();\r\n         }\r\n-        \r\n-        if (GUILayout.Button(\"暂停动画\"))\r\n+        if (GUILayout.Button(\"暂停\"))\r\n         {\r\n             PauseAnimation();\r\n         }\r\n-        \r\n-        if (GUILayout.Button(\"恢复动画\"))\r\n+        if (GUILayout.Button(\"恢复\"))\r\n         {\r\n             ResumeAnimation();\r\n         }\r\n+        GUILayout.EndHorizontal();\r\n         \r\n+        GUILayout.Space(5);\r\n+        GUILayout.Label($\"状态: {(isPlaying ? \"播放中\" : \"已停止\")}\");\r\n+        GUILayout.Label($\"当前状态: {currentState}\");\r\n+        GUILayout.Label($\"标准化时间: {normalizedTime:F2}\");\r\n+        \r\n         GUILayout.Space(10);\r\n+        GUILayout.Label(\"动画设置:\");\r\n         \r\n-        // 片段选择\r\n-        if (loadedClips.Count > 0)\r\n+        speed = float.TryParse(GUILayout.TextField(\"播放速度\", speed.ToString()), out var spd) ? spd : speed;\r\n+        if (GUILayout.Button(\"设置速度\"))\r\n         {\r\n-            GUILayout.Label(\"选择动画片段:\");\r\n-            for (int i = 0; i < loadedClips.Count; i++)\r\n-            {\r\n-                if (GUILayout.Button($\"播放 {loadedClips[i].name}\"))\r\n-                {\r\n-                    PlayAnimation(i);\r\n-                }\r\n-            }\r\n+            SetAnimationSpeed(speed);\r\n         }\r\n         \r\n+        loop = GUILayout.Toggle(loop, \"循环播放\");\r\n+        crossFade = GUILayout.Toggle(crossFade, \"交叉淡入淡出\");\r\n+        enableIK = GUILayout.Toggle(enableIK, \"启用IK\");\r\n+        enableEvents = GUILayout.Toggle(enableEvents, \"启用事件\");\r\n+        \r\n         GUILayout.Space(10);\r\n+        GUILayout.Label(\"层控制:\");\r\n         \r\n-        // 设置\r\n-        GUILayout.Label($\"播放速度: {playbackSpeed:F1}\");\r\n-        playbackSpeed = GUILayout.HorizontalSlider(playbackSpeed, 0.1f, 5f);\r\n+        currentLayer = int.TryParse(GUILayout.TextField(\"当前层\", currentLayer.ToString()), out var layer) ? layer : currentLayer;\r\n+        layerWeight = float.TryParse(GUILayout.TextField(\"层权重\", layerWeight.ToString()), out var weight) ? weight : layerWeight;\r\n         \r\n+        if (GUILayout.Button(\"设置层权重\"))\r\n+        {\r\n+            SetLayerWeight(currentLayer, layerWeight);\r\n+        }\r\n+        \r\n+        layerEnabled = GUILayout.Toggle(layerEnabled, \"层启用\");\r\n+        if (GUILayout.Button(\"设置层状态\"))\r\n+        {\r\n+            SetLayerEnabled(currentLayer, layerEnabled);\r\n+        }\r\n+        \r\n         GUILayout.Space(10);\r\n         \r\n         if (GUILayout.Button(\"获取动画信息\"))\r\n         {\r\n             GetAnimationInfo();\r\n         }\r\n         \r\n-        if (GUILayout.Button(\"获取动画事件\"))\r\n+        if (GUILayout.Button(\"获取片段信息\"))\r\n         {\r\n-            GetAnimationEvents();\r\n+            GetAnimationClipInfo();\r\n         }\r\n         \r\n-        if (GUILayout.Button(\"切换Playable系统\"))\r\n+        if (GUILayout.Button(\"测试动画功能\"))\r\n         {\r\n-            TogglePlayableSystem();\r\n+            TestAnimationFeatures();\r\n         }\r\n         \r\n-        GUILayout.Space(10);\r\n+        if (GUILayout.Button(\"重置动画设置\"))\r\n+        {\r\n+            ResetAnimationSettings();\r\n+        }\r\n         \r\n-        // 设置选项\r\n-        usePlayableSystem = GUILayout.Toggle(usePlayableSystem, \"使用Playable系统\");\r\n-        loop = GUILayout.Toggle(loop, \"循环播放\");\r\n-        \r\n         GUILayout.EndArea();\r\n     }\r\n } \n\\ No newline at end of file\n"
                }
            ],
            "date": 1750929702777,
            "name": "Commit-0",
            "content": "using UnityEngine;\r\nusing UnityEngine.Animations;\r\nusing UnityEngine.Playables;\r\nusing System.Collections.Generic;\r\n\r\n/// <summary>\r\n/// UnityEngine.Animations 命名空间案例演示\r\n/// 展示动画系统的核心功能\r\n/// </summary>\r\npublic class AnimationsExample : MonoBehaviour\r\n{\r\n    [Header(\"动画组件\")]\r\n    [SerializeField] private Animator animator;\r\n    [SerializeField] private AnimationClip[] animationClips;\r\n    [SerializeField] private RuntimeAnimatorController animatorController;\r\n    \r\n    [Header(\"Playable系统\")]\r\n    [SerializeField] private PlayableGraph playableGraph;\r\n    [SerializeField] private AnimationMixerPlayable mixerPlayable;\r\n    [SerializeField] private AnimationClipPlayable[] clipPlayables;\r\n    [SerializeField] private bool usePlayableSystem = false;\r\n    \r\n    [Header(\"动画设置\")]\r\n    [SerializeField] private float playbackSpeed = 1.0f;\r\n    [SerializeField] private bool loop = true;\r\n    [SerializeField] private float blendTime = 0.25f;\r\n    [SerializeField] private int currentClipIndex = 0;\r\n    \r\n    [Header(\"动画统计\")]\r\n    [SerializeField] private float currentTime = 0f;\r\n    [SerializeField] private float normalizedTime = 0f;\r\n    [SerializeField] private bool isPlaying = false;\r\n    [SerializeField] private string currentStateName = \"\";\r\n    \r\n    // 动画状态\r\n    private Dictionary<string, int> stateHashes = new Dictionary<string, int>();\r\n    private List<AnimationClip> loadedClips = new List<AnimationClip>();\r\n    \r\n    private void Start()\r\n    {\r\n        InitializeAnimationSystem();\r\n    }\r\n    \r\n    /// <summary>\r\n    /// 初始化动画系统\r\n    /// </summary>\r\n    private void InitializeAnimationSystem()\r\n    {\r\n        // 获取或创建Animator组件\r\n        if (animator == null)\r\n        {\r\n            animator = GetComponent<Animator>();\r\n            if (animator == null)\r\n            {\r\n                animator = gameObject.AddComponent<Animator>();\r\n            }\r\n        }\r\n        \r\n        // 设置动画控制器\r\n        if (animatorController != null)\r\n        {\r\n            animator.runtimeAnimatorController = animatorController;\r\n        }\r\n        \r\n        // 初始化Playable系统\r\n        if (usePlayableSystem)\r\n        {\r\n            InitializePlayableSystem();\r\n        }\r\n        \r\n        // 加载动画片段\r\n        LoadAnimationClips();\r\n        \r\n        Debug.Log(\"动画系统初始化完成\");\r\n    }\r\n    \r\n    /// <summary>\r\n    /// 初始化Playable系统\r\n    /// </summary>\r\n    private void InitializePlayableSystem()\r\n    {\r\n        // 创建Playable图\r\n        playableGraph = PlayableGraph.Create(\"Custom Animation Graph\");\r\n        \r\n        // 创建混合器\r\n        mixerPlayable = AnimationMixerPlayable.Create(playableGraph, animationClips.Length);\r\n        \r\n        // 创建片段播放器\r\n        clipPlayables = new AnimationClipPlayable[animationClips.Length];\r\n        for (int i = 0; i < animationClips.Length; i++)\r\n        {\r\n            if (animationClips[i] != null)\r\n            {\r\n                clipPlayables[i] = AnimationClipPlayable.Create(playableGraph, animationClips[i]);\r\n                clipPlayables[i].SetApplyFootIK(false);\r\n                clipPlayables[i].SetApplyPlayableIK(false);\r\n                \r\n                // 连接到混合器\r\n                playableGraph.Connect(clipPlayables[i], 0, mixerPlayable, i);\r\n            }\r\n        }\r\n        \r\n        // 连接到输出\r\n        var output = AnimationPlayableOutput.Create(playableGraph, \"Animation\", animator);\r\n        output.SetSourcePlayable(mixerPlayable);\r\n        \r\n        // 播放图\r\n        playableGraph.Play();\r\n        \r\n        Debug.Log(\"Playable系统初始化完成\");\r\n    }\r\n    \r\n    /// <summary>\r\n    /// 加载动画片段\r\n    /// </summary>\r\n    private void LoadAnimationClips()\r\n    {\r\n        loadedClips.Clear();\r\n        \r\n        if (animationClips != null)\r\n        {\r\n            foreach (var clip in animationClips)\r\n            {\r\n                if (clip != null)\r\n                {\r\n                    loadedClips.Add(clip);\r\n                    stateHashes[clip.name] = Animator.StringToHash(clip.name);\r\n                }\r\n            }\r\n        }\r\n        \r\n        Debug.Log($\"已加载 {loadedClips.Count} 个动画片段\");\r\n    }\r\n    \r\n    /// <summary>\r\n    /// 播放动画\r\n    /// </summary>\r\n    /// <param name=\"clipIndex\">片段索引</param>\r\n    public void PlayAnimation(int clipIndex)\r\n    {\r\n        if (clipIndex < 0 || clipIndex >= loadedClips.Count) return;\r\n        \r\n        currentClipIndex = clipIndex;\r\n        \r\n        if (usePlayableSystem)\r\n        {\r\n            PlayAnimationPlayable(clipIndex);\r\n        }\r\n        else\r\n        {\r\n            PlayAnimationTraditional(clipIndex);\r\n        }\r\n        \r\n        Debug.Log($\"播放动画: {loadedClips[clipIndex].name}\");\r\n    }\r\n    \r\n    /// <summary>\r\n    /// 使用传统方式播放动画\r\n    /// </summary>\r\n    /// <param name=\"clipIndex\">片段索引</param>\r\n    private void PlayAnimationTraditional(int clipIndex)\r\n    {\r\n        if (animator == null || clipIndex >= loadedClips.Count) return;\r\n        \r\n        AnimationClip clip = loadedClips[clipIndex];\r\n        animator.Play(clip.name);\r\n        currentStateName = clip.name;\r\n        isPlaying = true;\r\n    }\r\n    \r\n    /// <summary>\r\n    /// 使用Playable系统播放动画\r\n    /// </summary>\r\n    /// <param name=\"clipIndex\">片段索引</param>\r\n    private void PlayAnimationPlayable(int clipIndex)\r\n    {\r\n        if (mixerPlayable.IsValid() && clipIndex < clipPlayables.Length)\r\n        {\r\n            // 重置所有权重\r\n            for (int i = 0; i < clipPlayables.Length; i++)\r\n            {\r\n                mixerPlayable.SetInputWeight(i, 0f);\r\n            }\r\n            \r\n            // 设置当前片段权重\r\n            mixerPlayable.SetInputWeight(clipIndex, 1f);\r\n            \r\n            currentStateName = loadedClips[clipIndex].name;\r\n            isPlaying = true;\r\n        }\r\n    }\r\n    \r\n    /// <summary>\r\n    /// 停止动画\r\n    /// </summary>\r\n    public void StopAnimation()\r\n    {\r\n        if (usePlayableSystem)\r\n        {\r\n            if (mixerPlayable.IsValid())\r\n            {\r\n                for (int i = 0; i < clipPlayables.Length; i++)\r\n                {\r\n                    mixerPlayable.SetInputWeight(i, 0f);\r\n                }\r\n            }\r\n        }\r\n        else\r\n        {\r\n            if (animator != null)\r\n            {\r\n                animator.enabled = false;\r\n                animator.enabled = true;\r\n            }\r\n        }\r\n        \r\n        isPlaying = false;\r\n        Debug.Log(\"动画已停止\");\r\n    }\r\n    \r\n    /// <summary>\r\n    /// 暂停动画\r\n    /// </summary>\r\n    public void PauseAnimation()\r\n    {\r\n        if (usePlayableSystem)\r\n        {\r\n            if (playableGraph.IsValid())\r\n            {\r\n                playableGraph.GetRootPlayable(0).SetSpeed(0);\r\n            }\r\n        }\r\n        else\r\n        {\r\n            if (animator != null)\r\n            {\r\n                animator.speed = 0;\r\n            }\r\n        }\r\n        \r\n        Debug.Log(\"动画已暂停\");\r\n    }\r\n    \r\n    /// <summary>\r\n    /// 恢复动画\r\n    /// </summary>\r\n    public void ResumeAnimation()\r\n    {\r\n        if (usePlayableSystem)\r\n        {\r\n            if (playableGraph.IsValid())\r\n            {\r\n                playableGraph.GetRootPlayable(0).SetSpeed(playbackSpeed);\r\n            }\r\n        }\r\n        else\r\n        {\r\n            if (animator != null)\r\n            {\r\n                animator.speed = playbackSpeed;\r\n            }\r\n        }\r\n        \r\n        Debug.Log(\"动画已恢复\");\r\n    }\r\n    \r\n    /// <summary>\r\n    /// 设置播放速度\r\n    /// </summary>\r\n    /// <param name=\"speed\">播放速度</param>\r\n    public void SetPlaybackSpeed(float speed)\r\n    {\r\n        playbackSpeed = Mathf.Clamp(speed, 0.1f, 10f);\r\n        \r\n        if (usePlayableSystem)\r\n        {\r\n            if (playableGraph.IsValid())\r\n            {\r\n                playableGraph.GetRootPlayable(0).SetSpeed(playbackSpeed);\r\n            }\r\n        }\r\n        else\r\n        {\r\n            if (animator != null)\r\n            {\r\n                animator.speed = playbackSpeed;\r\n            }\r\n        }\r\n        \r\n        Debug.Log($\"播放速度已设置为: {playbackSpeed}\");\r\n    }\r\n    \r\n    /// <summary>\r\n    /// 设置动画时间\r\n    /// </summary>\r\n    /// <param name=\"time\">时间位置</param>\r\n    public void SetAnimationTime(float time)\r\n    {\r\n        if (currentClipIndex >= loadedClips.Count) return;\r\n        \r\n        AnimationClip clip = loadedClips[currentClipIndex];\r\n        time = Mathf.Clamp(time, 0f, clip.length);\r\n        \r\n        if (usePlayableSystem)\r\n        {\r\n            if (currentClipIndex < clipPlayables.Length && clipPlayables[currentClipIndex].IsValid())\r\n            {\r\n                clipPlayables[currentClipIndex].SetTime(time);\r\n            }\r\n        }\r\n        else\r\n        {\r\n            if (animator != null)\r\n            {\r\n                animator.Play(currentStateName, 0, time / clip.length);\r\n            }\r\n        }\r\n        \r\n        currentTime = time;\r\n        normalizedTime = time / clip.length;\r\n        \r\n        Debug.Log($\"动画时间已设置为: {time:F2}s\");\r\n    }\r\n    \r\n    /// <summary>\r\n    /// 混合动画\r\n    /// </summary>\r\n    /// <param name=\"fromClipIndex\">起始片段索引</param>\r\n    /// <param name=\"toClipIndex\">目标片段索引</param>\r\n    /// <param name=\"blendTime\">混合时间</param>\r\n    public void BlendAnimation(int fromClipIndex, int toClipIndex, float blendTime)\r\n    {\r\n        if (fromClipIndex < 0 || fromClipIndex >= loadedClips.Count ||\r\n            toClipIndex < 0 || toClipIndex >= loadedClips.Count) return;\r\n        \r\n        if (usePlayableSystem)\r\n        {\r\n            StartCoroutine(BlendAnimationCoroutine(fromClipIndex, toClipIndex, blendTime));\r\n        }\r\n        else\r\n        {\r\n            if (animator != null)\r\n            {\r\n                animator.CrossFade(loadedClips[toClipIndex].name, blendTime);\r\n            }\r\n        }\r\n        \r\n        Debug.Log($\"开始混合动画: {loadedClips[fromClipIndex].name} -> {loadedClips[toClipIndex].name}\");\r\n    }\r\n    \r\n    /// <summary>\r\n    /// 动画混合协程\r\n    /// </summary>\r\n    private System.Collections.IEnumerator BlendAnimationCoroutine(int fromClipIndex, int toClipIndex, float blendTime)\r\n    {\r\n        if (!mixerPlayable.IsValid()) yield break;\r\n        \r\n        float elapsedTime = 0f;\r\n        \r\n        while (elapsedTime < blendTime)\r\n        {\r\n            float t = elapsedTime / blendTime;\r\n            float fromWeight = 1f - t;\r\n            float toWeight = t;\r\n            \r\n            mixerPlayable.SetInputWeight(fromClipIndex, fromWeight);\r\n            mixerPlayable.SetInputWeight(toClipIndex, toWeight);\r\n            \r\n            elapsedTime += Time.deltaTime;\r\n            yield return null;\r\n        }\r\n        \r\n        // 完成混合\r\n        mixerPlayable.SetInputWeight(fromClipIndex, 0f);\r\n        mixerPlayable.SetInputWeight(toClipIndex, 1f);\r\n        \r\n        currentClipIndex = toClipIndex;\r\n        currentStateName = loadedClips[toClipIndex].name;\r\n    }\r\n    \r\n    /// <summary>\r\n    /// 获取动画信息\r\n    /// </summary>\r\n    public void GetAnimationInfo()\r\n    {\r\n        if (currentClipIndex >= loadedClips.Count) return;\r\n        \r\n        AnimationClip clip = loadedClips[currentClipIndex];\r\n        \r\n        Debug.Log(\"=== 动画信息 ===\");\r\n        Debug.Log($\"当前动画: {clip.name}\");\r\n        Debug.Log($\"动画长度: {clip.length:F2}s\");\r\n        Debug.Log($\"当前时间: {currentTime:F2}s\");\r\n        Debug.Log($\"标准化时间: {normalizedTime:F2}\");\r\n        Debug.Log($\"播放速度: {playbackSpeed}\");\r\n        Debug.Log($\"是否播放: {isPlaying}\");\r\n        Debug.Log($\"是否循环: {clip.isLooping}\");\r\n        Debug.Log($\"帧率: {clip.frameRate}\");\r\n        Debug.Log($\"事件数量: {clip.events.Length}\");\r\n    }\r\n    \r\n    /// <summary>\r\n    /// 添加动画事件\r\n    /// </summary>\r\n    /// <param name=\"time\">事件时间</param>\r\n    /// <param name=\"functionName\">函数名称</param>\r\n    public void AddAnimationEvent(float time, string functionName)\r\n    {\r\n        if (currentClipIndex >= loadedClips.Count) return;\r\n        \r\n        AnimationClip clip = loadedClips[currentClipIndex];\r\n        time = Mathf.Clamp(time, 0f, clip.length);\r\n        \r\n        AnimationEvent animEvent = new AnimationEvent();\r\n        animEvent.time = time;\r\n        animEvent.functionName = functionName;\r\n        \r\n        clip.AddEvent(animEvent);\r\n        \r\n        Debug.Log($\"已添加动画事件: {functionName} at {time:F2}s\");\r\n    }\r\n    \r\n    /// <summary>\r\n    /// 获取动画事件\r\n    /// </summary>\r\n    public void GetAnimationEvents()\r\n    {\r\n        if (currentClipIndex >= loadedClips.Count) return;\r\n        \r\n        AnimationClip clip = loadedClips[currentClipIndex];\r\n        \r\n        Debug.Log($\"=== {clip.name} 的动画事件 ===\");\r\n        foreach (var animEvent in clip.events)\r\n        {\r\n            Debug.Log($\"事件: {animEvent.functionName} at {animEvent.time:F2}s\");\r\n        }\r\n    }\r\n    \r\n    /// <summary>\r\n    /// 设置动画循环\r\n    /// </summary>\r\n    /// <param name=\"loop\">是否循环</param>\r\n    public void SetAnimationLoop(bool loop)\r\n    {\r\n        this.loop = loop;\r\n        \r\n        if (usePlayableSystem)\r\n        {\r\n            if (currentClipIndex < clipPlayables.Length && clipPlayables[currentClipIndex].IsValid())\r\n            {\r\n                clipPlayables[currentClipIndex].SetApplyFootIK(loop);\r\n            }\r\n        }\r\n        \r\n        Debug.Log($\"动画循环已{(loop ? \"启用\" : \"禁用\")}\");\r\n    }\r\n    \r\n    /// <summary>\r\n    /// 切换Playable系统\r\n    /// </summary>\r\n    public void TogglePlayableSystem()\r\n    {\r\n        usePlayableSystem = !usePlayableSystem;\r\n        \r\n        if (usePlayableSystem)\r\n        {\r\n            InitializePlayableSystem();\r\n        }\r\n        else\r\n        {\r\n            if (playableGraph.IsValid())\r\n            {\r\n                playableGraph.Destroy();\r\n            }\r\n        }\r\n        \r\n        Debug.Log($\"Playable系统已{(usePlayableSystem ? \"启用\" : \"禁用\")}\");\r\n    }\r\n    \r\n    private void Update()\r\n    {\r\n        // 更新动画状态\r\n        if (isPlaying && currentClipIndex < loadedClips.Count)\r\n        {\r\n            AnimationClip clip = loadedClips[currentClipIndex];\r\n            \r\n            if (usePlayableSystem)\r\n            {\r\n                if (currentClipIndex < clipPlayables.Length && clipPlayables[currentClipIndex].IsValid())\r\n                {\r\n                    currentTime = (float)clipPlayables[currentClipIndex].GetTime();\r\n                    normalizedTime = currentTime / clip.length;\r\n                }\r\n            }\r\n            else\r\n            {\r\n                if (animator != null)\r\n                {\r\n                    AnimatorStateInfo stateInfo = animator.GetCurrentAnimatorStateInfo(0);\r\n                    currentTime = stateInfo.normalizedTime * clip.length;\r\n                    normalizedTime = stateInfo.normalizedTime;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    \r\n    private void OnDestroy()\r\n    {\r\n        // 清理Playable系统\r\n        if (playableGraph.IsValid())\r\n        {\r\n            playableGraph.Destroy();\r\n        }\r\n    }\r\n    \r\n    private void OnGUI()\r\n    {\r\n        // 简单的GUI界面用于测试\r\n        GUILayout.BeginArea(new Rect(10, 10, 400, 600));\r\n        GUILayout.Label(\"动画系统演示\", EditorStyles.boldLabel);\r\n        \r\n        GUILayout.Space(10);\r\n        \r\n        // 动画信息\r\n        GUILayout.Label($\"当前动画: {currentStateName}\");\r\n        GUILayout.Label($\"当前时间: {currentTime:F2}s\");\r\n        GUILayout.Label($\"标准化时间: {normalizedTime:F2}\");\r\n        GUILayout.Label($\"播放速度: {playbackSpeed}\");\r\n        GUILayout.Label($\"是否播放: {isPlaying}\");\r\n        \r\n        GUILayout.Space(10);\r\n        \r\n        // 播放控制\r\n        if (GUILayout.Button(\"播放动画\"))\r\n        {\r\n            PlayAnimation(currentClipIndex);\r\n        }\r\n        \r\n        if (GUILayout.Button(\"停止动画\"))\r\n        {\r\n            StopAnimation();\r\n        }\r\n        \r\n        if (GUILayout.Button(\"暂停动画\"))\r\n        {\r\n            PauseAnimation();\r\n        }\r\n        \r\n        if (GUILayout.Button(\"恢复动画\"))\r\n        {\r\n            ResumeAnimation();\r\n        }\r\n        \r\n        GUILayout.Space(10);\r\n        \r\n        // 片段选择\r\n        if (loadedClips.Count > 0)\r\n        {\r\n            GUILayout.Label(\"选择动画片段:\");\r\n            for (int i = 0; i < loadedClips.Count; i++)\r\n            {\r\n                if (GUILayout.Button($\"播放 {loadedClips[i].name}\"))\r\n                {\r\n                    PlayAnimation(i);\r\n                }\r\n            }\r\n        }\r\n        \r\n        GUILayout.Space(10);\r\n        \r\n        // 设置\r\n        GUILayout.Label($\"播放速度: {playbackSpeed:F1}\");\r\n        playbackSpeed = GUILayout.HorizontalSlider(playbackSpeed, 0.1f, 5f);\r\n        \r\n        GUILayout.Space(10);\r\n        \r\n        if (GUILayout.Button(\"获取动画信息\"))\r\n        {\r\n            GetAnimationInfo();\r\n        }\r\n        \r\n        if (GUILayout.Button(\"获取动画事件\"))\r\n        {\r\n            GetAnimationEvents();\r\n        }\r\n        \r\n        if (GUILayout.Button(\"切换Playable系统\"))\r\n        {\r\n            TogglePlayableSystem();\r\n        }\r\n        \r\n        GUILayout.Space(10);\r\n        \r\n        // 设置选项\r\n        usePlayableSystem = GUILayout.Toggle(usePlayableSystem, \"使用Playable系统\");\r\n        loop = GUILayout.Toggle(loop, \"循环播放\");\r\n        \r\n        GUILayout.EndArea();\r\n    }\r\n} "
        }
    ]
}