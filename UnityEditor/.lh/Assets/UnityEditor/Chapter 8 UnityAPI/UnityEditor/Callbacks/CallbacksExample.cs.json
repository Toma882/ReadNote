{
    "sourceFile": "Assets/UnityEditor/Chapter 8 UnityAPI/UnityEditor/Callbacks/CallbacksExample.cs",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 1,
            "patches": [
                {
                    "date": 1750938668139,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1750938786904,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -11,96 +11,82 @@\n /// </summary>\r\n public class CallbacksExample : MonoBehaviour, IPreprocessBuildWithReport, IPostprocessBuildWithReport\r\n {\r\n     [Header(\"回调系统配置\")]\r\n-    [SerializeField] private bool enableCallbackSystem = true; //启用回调系统\r\n-    [SerializeField] private bool enableCallbackLogging = true; //启用回调日志\r\n-    [SerializeField] private bool enableCallbackValidation = true; //启用回调验证\r\n-    [SerializeField] private bool enableCallbackPerformance = true; //启用回调性能监控\r\n-    [SerializeField] private bool enableCallbackHistory = true; //启用回调历史记录\r\n+    [SerializeField] private bool enableCallbackSystem = true;\r\n+    [SerializeField] private bool enableCallbackLogging = true;\r\n+    [SerializeField] private bool enableCallbackValidation = true;\r\n+    [SerializeField] private bool enableCallbackPerformance = true;\r\n+    [SerializeField] private bool enableCallbackHistory = true;\r\n     \r\n     [Header(\"回调类型\")]\r\n-    [SerializeField] private CallbackType currentCallbackType = CallbackType.None; //当前回调类型\r\n-    [SerializeField] private bool enableBuildCallbacks = true; //启用构建回调\r\n-    [SerializeField] private bool enableSceneCallbacks = true; //启用场景回调\r\n-    [SerializeField] private bool enableAssetCallbacks = true; //启用资产回调\r\n-    [SerializeField] private bool enableEditorCallbacks = true; //启用编辑器回调\r\n+    [SerializeField] private CallbackType currentCallbackType = CallbackType.None;\r\n+    [SerializeField] private bool enableBuildCallbacks = true;\r\n+    [SerializeField] private bool enableSceneCallbacks = true;\r\n+    [SerializeField] private bool enableAssetCallbacks = true;\r\n+    [SerializeField] private bool enableEditorCallbacks = true;\r\n     \r\n     [Header(\"回调状态\")]\r\n-    [SerializeField] private string callbackSystemState = \"未初始化\"; //回调系统状态\r\n-    [SerializeField] private bool isCallbackExecuting = false; //回调是否正在执行\r\n-    [SerializeField] private float callbackExecutionTime = 0f; //回调执行时间\r\n-    [SerializeField] private int callbackExecutionCount = 0; //回调执行次数\r\n-    [SerializeField] private string lastCallbackResult = \"\"; //最后回调结果\r\n+    [SerializeField] private string callbackSystemState = \"未初始化\";\r\n+    [SerializeField] private bool isCallbackExecuting = false;\r\n+    [SerializeField] private float callbackExecutionTime = 0f;\r\n+    [SerializeField] private int callbackExecutionCount = 0;\r\n+    [SerializeField] private string lastCallbackResult = \"\";\r\n     \r\n     [Header(\"回调历史\")]\r\n-    [SerializeField] private CallbackHistoryEntry[] callbackHistory = new CallbackHistoryEntry[20]; //回调历史\r\n-    [SerializeField] private int callbackHistoryIndex = 0; //回调历史索引\r\n-    [SerializeField] private bool enableCallbackHistory = true; //启用回调历史\r\n+    [SerializeField] private CallbackHistoryEntry[] callbackHistory = new CallbackHistoryEntry[20];\r\n+    [SerializeField] private int callbackHistoryIndex = 0;\r\n+    [SerializeField] private bool enableCallbackHistory = true;\r\n     \r\n     [Header(\"性能监控\")]\r\n-    [SerializeField] private bool enablePerformanceMonitoring = true; //启用性能监控\r\n-    [SerializeField] private float[] executionTimeHistory = new float[100]; //执行时间历史\r\n-    [SerializeField] private int executionTimeIndex = 0; //执行时间索引\r\n-    [SerializeField] private float averageExecutionTime = 0f; //平均执行时间\r\n-    [SerializeField] private float maxExecutionTime = 0f; //最大执行时间\r\n-    [SerializeField] private float totalExecutionTime = 0f; //总执行时间\r\n-    [SerializeField] private int totalExecutionCount = 0; //总执行次数\r\n+    [SerializeField] private bool enablePerformanceMonitoring = true;\r\n+    [SerializeField] private float[] executionTimeHistory = new float[100];\r\n+    [SerializeField] private int executionTimeIndex = 0;\r\n+    [SerializeField] private float averageExecutionTime = 0f;\r\n+    [SerializeField] private float maxExecutionTime = 0f;\r\n+    [SerializeField] private float totalExecutionTime = 0f;\r\n+    [SerializeField] private int totalExecutionCount = 0;\r\n     \r\n     [Header(\"回调统计\")]\r\n-    [SerializeField] private Dictionary<CallbackType, int> callbackTypeCount = new Dictionary<CallbackType, int>(); //回调类型统计\r\n-    [SerializeField] private Dictionary<string, int> callbackMethodCount = new Dictionary<string, int>(); //回调方法统计\r\n-    [SerializeField] private int totalBuildCallbacks = 0; //总构建回调数\r\n-    [SerializeField] private int totalSceneCallbacks = 0; //总场景回调数\r\n-    [SerializeField] private int totalAssetCallbacks = 0; //总资产回调数\r\n-    [SerializeField] private int totalEditorCallbacks = 0; //总编辑器回调数\r\n+    [SerializeField] private Dictionary<CallbackType, int> callbackTypeCount = new Dictionary<CallbackType, int>();\r\n+    [SerializeField] private Dictionary<string, int> callbackMethodCount = new Dictionary<string, int>();\r\n+    [SerializeField] private int totalBuildCallbacks = 0;\r\n+    [SerializeField] private int totalSceneCallbacks = 0;\r\n+    [SerializeField] private int totalAssetCallbacks = 0;\r\n+    [SerializeField] private int totalEditorCallbacks = 0;\r\n     \r\n     [Header(\"回调配置\")]\r\n-    [SerializeField] private int callbackOrder = 0; //回调顺序\r\n-    [SerializeField] private bool enableCallbackOrdering = true; //启用回调排序\r\n-    [SerializeField] private bool enableCallbackChaining = true; //启用回调链\r\n-    [SerializeField] private bool enableCallbackErrorHandling = true; //启用回调错误处理\r\n+    [SerializeField] private int callbackOrder = 0;\r\n+    [SerializeField] private bool enableCallbackOrdering = true;\r\n+    [SerializeField] private bool enableCallbackChaining = true;\r\n+    [SerializeField] private bool enableCallbackErrorHandling = true;\r\n     \r\n     private bool isInitialized = false;\r\n     private float callbackStartTime = 0f;\r\n     private List<System.Action> pendingCallbacks = new List<System.Action>();\r\n     private List<System.Action> completedCallbacks = new List<System.Action>();\r\n \r\n-    // IPreprocessBuildWithReport 接口实现\r\n     public int callbackOrder => this.callbackOrder;\r\n \r\n     private void Start()\r\n     {\r\n         InitializeCallbackSystem();\r\n     }\r\n \r\n-    /// <summary>\r\n-    /// 初始化回调系统\r\n-    /// </summary>\r\n     private void InitializeCallbackSystem()\r\n     {\r\n         if (!enableCallbackSystem) return;\r\n         \r\n-        // 初始化回调状态\r\n         InitializeCallbackState();\r\n-        \r\n-        // 初始化性能监控\r\n         InitializePerformanceMonitoring();\r\n-        \r\n-        // 初始化回调统计\r\n         InitializeCallbackStatistics();\r\n-        \r\n-        // 注册回调方法\r\n         RegisterCallbacks();\r\n         \r\n         isInitialized = true;\r\n         callbackSystemState = \"已初始化\";\r\n         Debug.Log(\"回调系统初始化完成\");\r\n     }\r\n \r\n-    /// <summary>\r\n-    /// 初始化回调状态\r\n-    /// </summary>\r\n     private void InitializeCallbackState()\r\n     {\r\n         currentCallbackType = CallbackType.None;\r\n         isCallbackExecuting = false;\r\n@@ -110,11 +96,8 @@\n         \r\n         Debug.Log(\"回调状态已初始化\");\r\n     }\r\n \r\n-    /// <summary>\r\n-    /// 初始化性能监控\r\n-    /// </summary>\r\n     private void InitializePerformanceMonitoring()\r\n     {\r\n         if (enablePerformanceMonitoring)\r\n         {\r\n@@ -128,11 +111,8 @@\n             Debug.Log(\"性能监控初始化完成\");\r\n         }\r\n     }\r\n \r\n-    /// <summary>\r\n-    /// 初始化回调统计\r\n-    /// </summary>\r\n     private void InitializeCallbackStatistics()\r\n     {\r\n         callbackTypeCount.Clear();\r\n         callbackMethodCount.Clear();\r\n@@ -143,118 +123,83 @@\n         \r\n         Debug.Log(\"回调统计初始化完成\");\r\n     }\r\n \r\n-    /// <summary>\r\n-    /// 注册回调方法\r\n-    /// </summary>\r\n     private void RegisterCallbacks()\r\n     {\r\n-        // 注册构建回调\r\n         if (enableBuildCallbacks)\r\n         {\r\n             RegisterBuildCallbacks();\r\n         }\r\n         \r\n-        // 注册场景回调\r\n         if (enableSceneCallbacks)\r\n         {\r\n             RegisterSceneCallbacks();\r\n         }\r\n         \r\n-        // 注册资产回调\r\n         if (enableAssetCallbacks)\r\n         {\r\n             RegisterAssetCallbacks();\r\n         }\r\n         \r\n-        // 注册编辑器回调\r\n         if (enableEditorCallbacks)\r\n         {\r\n             RegisterEditorCallbacks();\r\n         }\r\n         \r\n         Debug.Log(\"回调方法注册完成\");\r\n     }\r\n \r\n-    /// <summary>\r\n-    /// 注册构建回调\r\n-    /// </summary>\r\n     private void RegisterBuildCallbacks()\r\n     {\r\n-        // 这里可以注册自定义的构建回调\r\n-        // 由于Unity的限制，实际的回调注册需要在静态方法中进行\r\n-        totalBuildCallbacks = 2; // IPreprocessBuildWithReport 和 IPostprocessBuildWithReport\r\n-        \r\n+        totalBuildCallbacks = 2;\r\n         Debug.Log(\"构建回调已注册\");\r\n     }\r\n \r\n-    /// <summary>\r\n-    /// 注册场景回调\r\n-    /// </summary>\r\n     private void RegisterSceneCallbacks()\r\n     {\r\n-        // 注册场景打开回调\r\n         UnityEditor.SceneManagement.EditorSceneManager.sceneOpened += OnSceneOpened;\r\n         UnityEditor.SceneManagement.EditorSceneManager.sceneClosing += OnSceneClosing;\r\n         UnityEditor.SceneManagement.EditorSceneManager.sceneClosed += OnSceneClosed;\r\n         \r\n         totalSceneCallbacks = 3;\r\n-        \r\n         Debug.Log(\"场景回调已注册\");\r\n     }\r\n \r\n-    /// <summary>\r\n-    /// 注册资产回调\r\n-    /// </summary>\r\n     private void RegisterAssetCallbacks()\r\n     {\r\n-        // 注册资产导入回调\r\n         AssetDatabase.importPackageStarted += OnImportPackageStarted;\r\n         AssetDatabase.importPackageCompleted += OnImportPackageCompleted;\r\n         AssetDatabase.importPackageFailed += OnImportPackageFailed;\r\n         \r\n         totalAssetCallbacks = 3;\r\n-        \r\n         Debug.Log(\"资产回调已注册\");\r\n     }\r\n \r\n-    /// <summary>\r\n-    /// 注册编辑器回调\r\n-    /// </summary>\r\n     private void RegisterEditorCallbacks()\r\n     {\r\n-        // 注册编辑器更新回调\r\n         EditorApplication.update += OnEditorUpdate;\r\n         EditorApplication.playModeStateChanged += OnPlayModeStateChanged;\r\n         EditorApplication.hierarchyChanged += OnHierarchyChanged;\r\n         EditorApplication.projectChanged += OnProjectChanged;\r\n         \r\n         totalEditorCallbacks = 4;\r\n-        \r\n         Debug.Log(\"编辑器回调已注册\");\r\n     }\r\n \r\n     private void Update()\r\n     {\r\n         if (!isInitialized) return;\r\n         \r\n-        // 更新回调状态\r\n         UpdateCallbackStatus();\r\n-        \r\n-        // 处理待执行的回调\r\n         ProcessPendingCallbacks();\r\n         \r\n-        // 性能监控\r\n         if (enablePerformanceMonitoring)\r\n         {\r\n             UpdatePerformanceMonitoring();\r\n         }\r\n     }\r\n \r\n-    /// <summary>\r\n-    /// 更新回调状态\r\n-    /// </summary>\r\n     private void UpdateCallbackStatus()\r\n     {\r\n         if (isCallbackExecuting)\r\n         {\r\n@@ -265,11 +210,8 @@\n             callbackSystemState = \"空闲\";\r\n         }\r\n     }\r\n \r\n-    /// <summary>\r\n-    /// 处理待执行的回调\r\n-    /// </summary>\r\n     private void ProcessPendingCallbacks()\r\n     {\r\n         if (pendingCallbacks.Count > 0)\r\n         {\r\n@@ -279,12 +221,8 @@\n             ExecuteCallback(callback);\r\n         }\r\n     }\r\n \r\n-    /// <summary>\r\n-    /// 执行回调\r\n-    /// </summary>\r\n-    /// <param name=\"callback\">回调方法</param>\r\n     private void ExecuteCallback(System.Action callback)\r\n     {\r\n         if (callback == null) return;\r\n         \r\n@@ -314,24 +252,18 @@\n         \r\n         callbackExecutionTime = Time.realtimeSinceStartup - callbackStartTime;\r\n         isCallbackExecuting = false;\r\n         \r\n-        // 更新性能数据\r\n         UpdateCallbackPerformance();\r\n         \r\n-        // 记录到历史\r\n         if (enableCallbackHistory)\r\n         {\r\n             AddCallbackHistoryEntry(callback.Method.Name, lastCallbackResult, callbackExecutionTime);\r\n         }\r\n         \r\n-        // 添加到已完成列表\r\n         completedCallbacks.Add(callback);\r\n     }\r\n \r\n-    /// <summary>\r\n-    /// 更新回调性能数据\r\n-    /// </summary>\r\n     private void UpdateCallbackPerformance()\r\n     {\r\n         if (enablePerformanceMonitoring)\r\n         {\r\n@@ -347,26 +279,16 @@\n             }\r\n         }\r\n     }\r\n \r\n-    /// <summary>\r\n-    /// 更新性能监控\r\n-    /// </summary>\r\n     private void UpdatePerformanceMonitoring()\r\n     {\r\n-        // 计算平均执行时间\r\n         if (totalExecutionCount > 0)\r\n         {\r\n             averageExecutionTime = totalExecutionTime / totalExecutionCount;\r\n         }\r\n     }\r\n \r\n-    /// <summary>\r\n-    /// 添加回调历史条目\r\n-    /// </summary>\r\n-    /// <param name=\"methodName\">方法名称</param>\r\n-    /// <param name=\"result\">结果</param>\r\n-    /// <param name=\"executionTime\">执行时间</param>\r\n     private void AddCallbackHistoryEntry(string methodName, string result, float executionTime)\r\n     {\r\n         var entry = new CallbackHistoryEntry\r\n         {\r\n@@ -379,34 +301,26 @@\n         \r\n         callbackHistory[callbackHistoryIndex] = entry;\r\n         callbackHistoryIndex = (callbackHistoryIndex + 1) % callbackHistory.Length;\r\n         \r\n-        // 更新统计\r\n         UpdateCallbackStatistics(methodName);\r\n     }\r\n \r\n-    /// <summary>\r\n-    /// 更新回调统计\r\n-    /// </summary>\r\n-    /// <param name=\"methodName\">方法名称</param>\r\n     private void UpdateCallbackStatistics(string methodName)\r\n     {\r\n-        // 更新方法统计\r\n         if (!callbackMethodCount.ContainsKey(methodName))\r\n         {\r\n             callbackMethodCount[methodName] = 0;\r\n         }\r\n         callbackMethodCount[methodName]++;\r\n         \r\n-        // 更新类型统计\r\n         if (!callbackTypeCount.ContainsKey(currentCallbackType))\r\n         {\r\n             callbackTypeCount[currentCallbackType] = 0;\r\n         }\r\n         callbackTypeCount[currentCallbackType]++;\r\n     }\r\n \r\n-    // 场景回调方法\r\n     private void OnSceneOpened(UnityEngine.SceneManagement.Scene scene, UnityEditor.SceneManagement.OpenSceneMode mode)\r\n     {\r\n         currentCallbackType = CallbackType.Scene;\r\n         Debug.Log($\"场景已打开: {scene.name}, 模式: {mode}\");\r\n@@ -423,9 +337,8 @@\n         currentCallbackType = CallbackType.Scene;\r\n         Debug.Log($\"场景已关闭: {scene.name}\");\r\n     }\r\n \r\n-    // 资产回调方法\r\n     private void OnImportPackageStarted(string packageName)\r\n     {\r\n         currentCallbackType = CallbackType.Asset;\r\n         Debug.Log($\"包导入开始: {packageName}\");\r\n@@ -442,13 +355,11 @@\n         currentCallbackType = CallbackType.Asset;\r\n         Debug.LogError($\"包导入失败: {packageName}, 错误: {errorMessage}\");\r\n     }\r\n \r\n-    // 编辑器回调方法\r\n     private void OnEditorUpdate()\r\n     {\r\n         currentCallbackType = CallbackType.Editor;\r\n-        // 编辑器更新回调，这里不记录日志避免刷屏\r\n     }\r\n \r\n     private void OnPlayModeStateChanged(PlayModeStateChange state)\r\n     {\r\n@@ -467,32 +378,20 @@\n         currentCallbackType = CallbackType.Editor;\r\n         Debug.Log(\"项目已改变\");\r\n     }\r\n \r\n-    // IPreprocessBuildWithReport 接口实现\r\n     public void OnPreprocessBuild(BuildReport report)\r\n     {\r\n         currentCallbackType = CallbackType.Build;\r\n         Debug.Log(\"构建预处理开始\");\r\n-        \r\n-        // 在这里可以添加构建前的准备工作\r\n-        // 例如：清理临时文件、验证资源等\r\n     }\r\n \r\n-    // IPostprocessBuildWithReport 接口实现\r\n     public void OnPostprocessBuild(BuildReport report)\r\n     {\r\n         currentCallbackType = CallbackType.Build;\r\n         Debug.Log(\"构建后处理开始\");\r\n-        \r\n-        // 在这里可以添加构建后的处理工作\r\n-        // 例如：复制额外文件、设置权限等\r\n     }\r\n \r\n-    /// <summary>\r\n-    /// 添加待执行的回调\r\n-    /// </summary>\r\n-    /// <param name=\"callback\">回调方法</param>\r\n     public void AddPendingCallback(System.Action callback)\r\n     {\r\n         if (callback != null)\r\n         {\r\n@@ -500,29 +399,20 @@\n             Debug.Log($\"已添加待执行回调: {callback.Method.Name}\");\r\n         }\r\n     }\r\n \r\n-    /// <summary>\r\n-    /// 清除所有待执行的回调\r\n-    /// </summary>\r\n     public void ClearPendingCallbacks()\r\n     {\r\n         pendingCallbacks.Clear();\r\n         Debug.Log(\"所有待执行回调已清除\");\r\n     }\r\n \r\n-    /// <summary>\r\n-    /// 清除所有已完成的回调\r\n-    /// </summary>\r\n     public void ClearCompletedCallbacks()\r\n     {\r\n         completedCallbacks.Clear();\r\n         Debug.Log(\"所有已完成回调已清除\");\r\n     }\r\n \r\n-    /// <summary>\r\n-    /// 生成回调报告\r\n-    /// </summary>\r\n     public void GenerateCallbackReport()\r\n     {\r\n         Debug.Log(\"=== 回调系统报告 ===\");\r\n         Debug.Log($\"回调系统状态: {callbackSystemState}\");\r\n@@ -548,21 +438,15 @@\n             Debug.Log($\"{kvp.Key}: {kvp.Value} 次\");\r\n         }\r\n     }\r\n \r\n-    /// <summary>\r\n-    /// 清除回调历史\r\n-    /// </summary>\r\n     public void ClearCallbackHistory()\r\n     {\r\n         callbackHistory = new CallbackHistoryEntry[20];\r\n         callbackHistoryIndex = 0;\r\n         Debug.Log(\"回调历史已清除\");\r\n     }\r\n \r\n-    /// <summary>\r\n-    /// 重置回调统计\r\n-    /// </summary>\r\n     public void ResetCallbackStatistics()\r\n     {\r\n         callbackTypeCount.Clear();\r\n         callbackMethodCount.Clear();\r\n@@ -575,9 +459,8 @@\n     }\r\n \r\n     private void OnDestroy()\r\n     {\r\n-        // 清理回调注册\r\n         if (enableSceneCallbacks)\r\n         {\r\n             UnityEditor.SceneManagement.EditorSceneManager.sceneOpened -= OnSceneOpened;\r\n             UnityEditor.SceneManagement.EditorSceneManager.sceneClosing -= OnSceneClosing;\r\n@@ -674,11 +557,8 @@\n         GUILayout.EndArea();\r\n     }\r\n }\r\n \r\n-/// <summary>\r\n-/// 回调类型枚举\r\n-/// </summary>\r\n public enum CallbackType\r\n {\r\n     None,\r\n     Build,\r\n@@ -686,11 +566,8 @@\n     Asset,\r\n     Editor\r\n }\r\n \r\n-/// <summary>\r\n-/// 回调历史条目\r\n-/// </summary>\r\n [System.Serializable]\r\n public class CallbackHistoryEntry\r\n {\r\n     public string timestamp;\r\n"
                }
            ],
            "date": 1750938668139,
            "name": "Commit-0",
            "content": "using UnityEngine;\r\nusing UnityEditor;\r\nusing UnityEditor.Callbacks;\r\nusing UnityEditor.Build;\r\nusing UnityEditor.Build.Reporting;\r\nusing System.Collections.Generic;\r\n\r\n/// <summary>\r\n/// UnityEditor.Callbacks 命名空间案例演示\r\n/// 展示编辑器回调系统的使用，包括构建回调、场景回调等\r\n/// </summary>\r\npublic class CallbacksExample : MonoBehaviour, IPreprocessBuildWithReport, IPostprocessBuildWithReport\r\n{\r\n    [Header(\"回调系统配置\")]\r\n    [SerializeField] private bool enableCallbackSystem = true; //启用回调系统\r\n    [SerializeField] private bool enableCallbackLogging = true; //启用回调日志\r\n    [SerializeField] private bool enableCallbackValidation = true; //启用回调验证\r\n    [SerializeField] private bool enableCallbackPerformance = true; //启用回调性能监控\r\n    [SerializeField] private bool enableCallbackHistory = true; //启用回调历史记录\r\n    \r\n    [Header(\"回调类型\")]\r\n    [SerializeField] private CallbackType currentCallbackType = CallbackType.None; //当前回调类型\r\n    [SerializeField] private bool enableBuildCallbacks = true; //启用构建回调\r\n    [SerializeField] private bool enableSceneCallbacks = true; //启用场景回调\r\n    [SerializeField] private bool enableAssetCallbacks = true; //启用资产回调\r\n    [SerializeField] private bool enableEditorCallbacks = true; //启用编辑器回调\r\n    \r\n    [Header(\"回调状态\")]\r\n    [SerializeField] private string callbackSystemState = \"未初始化\"; //回调系统状态\r\n    [SerializeField] private bool isCallbackExecuting = false; //回调是否正在执行\r\n    [SerializeField] private float callbackExecutionTime = 0f; //回调执行时间\r\n    [SerializeField] private int callbackExecutionCount = 0; //回调执行次数\r\n    [SerializeField] private string lastCallbackResult = \"\"; //最后回调结果\r\n    \r\n    [Header(\"回调历史\")]\r\n    [SerializeField] private CallbackHistoryEntry[] callbackHistory = new CallbackHistoryEntry[20]; //回调历史\r\n    [SerializeField] private int callbackHistoryIndex = 0; //回调历史索引\r\n    [SerializeField] private bool enableCallbackHistory = true; //启用回调历史\r\n    \r\n    [Header(\"性能监控\")]\r\n    [SerializeField] private bool enablePerformanceMonitoring = true; //启用性能监控\r\n    [SerializeField] private float[] executionTimeHistory = new float[100]; //执行时间历史\r\n    [SerializeField] private int executionTimeIndex = 0; //执行时间索引\r\n    [SerializeField] private float averageExecutionTime = 0f; //平均执行时间\r\n    [SerializeField] private float maxExecutionTime = 0f; //最大执行时间\r\n    [SerializeField] private float totalExecutionTime = 0f; //总执行时间\r\n    [SerializeField] private int totalExecutionCount = 0; //总执行次数\r\n    \r\n    [Header(\"回调统计\")]\r\n    [SerializeField] private Dictionary<CallbackType, int> callbackTypeCount = new Dictionary<CallbackType, int>(); //回调类型统计\r\n    [SerializeField] private Dictionary<string, int> callbackMethodCount = new Dictionary<string, int>(); //回调方法统计\r\n    [SerializeField] private int totalBuildCallbacks = 0; //总构建回调数\r\n    [SerializeField] private int totalSceneCallbacks = 0; //总场景回调数\r\n    [SerializeField] private int totalAssetCallbacks = 0; //总资产回调数\r\n    [SerializeField] private int totalEditorCallbacks = 0; //总编辑器回调数\r\n    \r\n    [Header(\"回调配置\")]\r\n    [SerializeField] private int callbackOrder = 0; //回调顺序\r\n    [SerializeField] private bool enableCallbackOrdering = true; //启用回调排序\r\n    [SerializeField] private bool enableCallbackChaining = true; //启用回调链\r\n    [SerializeField] private bool enableCallbackErrorHandling = true; //启用回调错误处理\r\n    \r\n    private bool isInitialized = false;\r\n    private float callbackStartTime = 0f;\r\n    private List<System.Action> pendingCallbacks = new List<System.Action>();\r\n    private List<System.Action> completedCallbacks = new List<System.Action>();\r\n\r\n    // IPreprocessBuildWithReport 接口实现\r\n    public int callbackOrder => this.callbackOrder;\r\n\r\n    private void Start()\r\n    {\r\n        InitializeCallbackSystem();\r\n    }\r\n\r\n    /// <summary>\r\n    /// 初始化回调系统\r\n    /// </summary>\r\n    private void InitializeCallbackSystem()\r\n    {\r\n        if (!enableCallbackSystem) return;\r\n        \r\n        // 初始化回调状态\r\n        InitializeCallbackState();\r\n        \r\n        // 初始化性能监控\r\n        InitializePerformanceMonitoring();\r\n        \r\n        // 初始化回调统计\r\n        InitializeCallbackStatistics();\r\n        \r\n        // 注册回调方法\r\n        RegisterCallbacks();\r\n        \r\n        isInitialized = true;\r\n        callbackSystemState = \"已初始化\";\r\n        Debug.Log(\"回调系统初始化完成\");\r\n    }\r\n\r\n    /// <summary>\r\n    /// 初始化回调状态\r\n    /// </summary>\r\n    private void InitializeCallbackState()\r\n    {\r\n        currentCallbackType = CallbackType.None;\r\n        isCallbackExecuting = false;\r\n        callbackExecutionTime = 0f;\r\n        callbackExecutionCount = 0;\r\n        lastCallbackResult = \"就绪\";\r\n        \r\n        Debug.Log(\"回调状态已初始化\");\r\n    }\r\n\r\n    /// <summary>\r\n    /// 初始化性能监控\r\n    /// </summary>\r\n    private void InitializePerformanceMonitoring()\r\n    {\r\n        if (enablePerformanceMonitoring)\r\n        {\r\n            executionTimeHistory = new float[100];\r\n            executionTimeIndex = 0;\r\n            averageExecutionTime = 0f;\r\n            maxExecutionTime = 0f;\r\n            totalExecutionTime = 0f;\r\n            totalExecutionCount = 0;\r\n            \r\n            Debug.Log(\"性能监控初始化完成\");\r\n        }\r\n    }\r\n\r\n    /// <summary>\r\n    /// 初始化回调统计\r\n    /// </summary>\r\n    private void InitializeCallbackStatistics()\r\n    {\r\n        callbackTypeCount.Clear();\r\n        callbackMethodCount.Clear();\r\n        totalBuildCallbacks = 0;\r\n        totalSceneCallbacks = 0;\r\n        totalAssetCallbacks = 0;\r\n        totalEditorCallbacks = 0;\r\n        \r\n        Debug.Log(\"回调统计初始化完成\");\r\n    }\r\n\r\n    /// <summary>\r\n    /// 注册回调方法\r\n    /// </summary>\r\n    private void RegisterCallbacks()\r\n    {\r\n        // 注册构建回调\r\n        if (enableBuildCallbacks)\r\n        {\r\n            RegisterBuildCallbacks();\r\n        }\r\n        \r\n        // 注册场景回调\r\n        if (enableSceneCallbacks)\r\n        {\r\n            RegisterSceneCallbacks();\r\n        }\r\n        \r\n        // 注册资产回调\r\n        if (enableAssetCallbacks)\r\n        {\r\n            RegisterAssetCallbacks();\r\n        }\r\n        \r\n        // 注册编辑器回调\r\n        if (enableEditorCallbacks)\r\n        {\r\n            RegisterEditorCallbacks();\r\n        }\r\n        \r\n        Debug.Log(\"回调方法注册完成\");\r\n    }\r\n\r\n    /// <summary>\r\n    /// 注册构建回调\r\n    /// </summary>\r\n    private void RegisterBuildCallbacks()\r\n    {\r\n        // 这里可以注册自定义的构建回调\r\n        // 由于Unity的限制，实际的回调注册需要在静态方法中进行\r\n        totalBuildCallbacks = 2; // IPreprocessBuildWithReport 和 IPostprocessBuildWithReport\r\n        \r\n        Debug.Log(\"构建回调已注册\");\r\n    }\r\n\r\n    /// <summary>\r\n    /// 注册场景回调\r\n    /// </summary>\r\n    private void RegisterSceneCallbacks()\r\n    {\r\n        // 注册场景打开回调\r\n        UnityEditor.SceneManagement.EditorSceneManager.sceneOpened += OnSceneOpened;\r\n        UnityEditor.SceneManagement.EditorSceneManager.sceneClosing += OnSceneClosing;\r\n        UnityEditor.SceneManagement.EditorSceneManager.sceneClosed += OnSceneClosed;\r\n        \r\n        totalSceneCallbacks = 3;\r\n        \r\n        Debug.Log(\"场景回调已注册\");\r\n    }\r\n\r\n    /// <summary>\r\n    /// 注册资产回调\r\n    /// </summary>\r\n    private void RegisterAssetCallbacks()\r\n    {\r\n        // 注册资产导入回调\r\n        AssetDatabase.importPackageStarted += OnImportPackageStarted;\r\n        AssetDatabase.importPackageCompleted += OnImportPackageCompleted;\r\n        AssetDatabase.importPackageFailed += OnImportPackageFailed;\r\n        \r\n        totalAssetCallbacks = 3;\r\n        \r\n        Debug.Log(\"资产回调已注册\");\r\n    }\r\n\r\n    /// <summary>\r\n    /// 注册编辑器回调\r\n    /// </summary>\r\n    private void RegisterEditorCallbacks()\r\n    {\r\n        // 注册编辑器更新回调\r\n        EditorApplication.update += OnEditorUpdate;\r\n        EditorApplication.playModeStateChanged += OnPlayModeStateChanged;\r\n        EditorApplication.hierarchyChanged += OnHierarchyChanged;\r\n        EditorApplication.projectChanged += OnProjectChanged;\r\n        \r\n        totalEditorCallbacks = 4;\r\n        \r\n        Debug.Log(\"编辑器回调已注册\");\r\n    }\r\n\r\n    private void Update()\r\n    {\r\n        if (!isInitialized) return;\r\n        \r\n        // 更新回调状态\r\n        UpdateCallbackStatus();\r\n        \r\n        // 处理待执行的回调\r\n        ProcessPendingCallbacks();\r\n        \r\n        // 性能监控\r\n        if (enablePerformanceMonitoring)\r\n        {\r\n            UpdatePerformanceMonitoring();\r\n        }\r\n    }\r\n\r\n    /// <summary>\r\n    /// 更新回调状态\r\n    /// </summary>\r\n    private void UpdateCallbackStatus()\r\n    {\r\n        if (isCallbackExecuting)\r\n        {\r\n            callbackSystemState = \"执行中\";\r\n        }\r\n        else\r\n        {\r\n            callbackSystemState = \"空闲\";\r\n        }\r\n    }\r\n\r\n    /// <summary>\r\n    /// 处理待执行的回调\r\n    /// </summary>\r\n    private void ProcessPendingCallbacks()\r\n    {\r\n        if (pendingCallbacks.Count > 0)\r\n        {\r\n            var callback = pendingCallbacks[0];\r\n            pendingCallbacks.RemoveAt(0);\r\n            \r\n            ExecuteCallback(callback);\r\n        }\r\n    }\r\n\r\n    /// <summary>\r\n    /// 执行回调\r\n    /// </summary>\r\n    /// <param name=\"callback\">回调方法</param>\r\n    private void ExecuteCallback(System.Action callback)\r\n    {\r\n        if (callback == null) return;\r\n        \r\n        callbackStartTime = Time.realtimeSinceStartup;\r\n        isCallbackExecuting = true;\r\n        callbackExecutionCount++;\r\n        \r\n        try\r\n        {\r\n            callback.Invoke();\r\n            lastCallbackResult = \"执行成功\";\r\n            \r\n            if (enableCallbackLogging)\r\n            {\r\n                Debug.Log($\"回调执行成功: {callback.Method.Name}\");\r\n            }\r\n        }\r\n        catch (System.Exception e)\r\n        {\r\n            lastCallbackResult = $\"执行失败: {e.Message}\";\r\n            \r\n            if (enableCallbackErrorHandling)\r\n            {\r\n                Debug.LogError($\"回调执行失败: {e.Message}\");\r\n            }\r\n        }\r\n        \r\n        callbackExecutionTime = Time.realtimeSinceStartup - callbackStartTime;\r\n        isCallbackExecuting = false;\r\n        \r\n        // 更新性能数据\r\n        UpdateCallbackPerformance();\r\n        \r\n        // 记录到历史\r\n        if (enableCallbackHistory)\r\n        {\r\n            AddCallbackHistoryEntry(callback.Method.Name, lastCallbackResult, callbackExecutionTime);\r\n        }\r\n        \r\n        // 添加到已完成列表\r\n        completedCallbacks.Add(callback);\r\n    }\r\n\r\n    /// <summary>\r\n    /// 更新回调性能数据\r\n    /// </summary>\r\n    private void UpdateCallbackPerformance()\r\n    {\r\n        if (enablePerformanceMonitoring)\r\n        {\r\n            executionTimeHistory[executionTimeIndex] = callbackExecutionTime;\r\n            executionTimeIndex = (executionTimeIndex + 1) % 100;\r\n            \r\n            totalExecutionTime += callbackExecutionTime;\r\n            totalExecutionCount++;\r\n            \r\n            if (callbackExecutionTime > maxExecutionTime)\r\n            {\r\n                maxExecutionTime = callbackExecutionTime;\r\n            }\r\n        }\r\n    }\r\n\r\n    /// <summary>\r\n    /// 更新性能监控\r\n    /// </summary>\r\n    private void UpdatePerformanceMonitoring()\r\n    {\r\n        // 计算平均执行时间\r\n        if (totalExecutionCount > 0)\r\n        {\r\n            averageExecutionTime = totalExecutionTime / totalExecutionCount;\r\n        }\r\n    }\r\n\r\n    /// <summary>\r\n    /// 添加回调历史条目\r\n    /// </summary>\r\n    /// <param name=\"methodName\">方法名称</param>\r\n    /// <param name=\"result\">结果</param>\r\n    /// <param name=\"executionTime\">执行时间</param>\r\n    private void AddCallbackHistoryEntry(string methodName, string result, float executionTime)\r\n    {\r\n        var entry = new CallbackHistoryEntry\r\n        {\r\n            timestamp = System.DateTime.Now.ToString(),\r\n            methodName = methodName,\r\n            result = result,\r\n            executionTime = executionTime,\r\n            callbackType = currentCallbackType.ToString()\r\n        };\r\n        \r\n        callbackHistory[callbackHistoryIndex] = entry;\r\n        callbackHistoryIndex = (callbackHistoryIndex + 1) % callbackHistory.Length;\r\n        \r\n        // 更新统计\r\n        UpdateCallbackStatistics(methodName);\r\n    }\r\n\r\n    /// <summary>\r\n    /// 更新回调统计\r\n    /// </summary>\r\n    /// <param name=\"methodName\">方法名称</param>\r\n    private void UpdateCallbackStatistics(string methodName)\r\n    {\r\n        // 更新方法统计\r\n        if (!callbackMethodCount.ContainsKey(methodName))\r\n        {\r\n            callbackMethodCount[methodName] = 0;\r\n        }\r\n        callbackMethodCount[methodName]++;\r\n        \r\n        // 更新类型统计\r\n        if (!callbackTypeCount.ContainsKey(currentCallbackType))\r\n        {\r\n            callbackTypeCount[currentCallbackType] = 0;\r\n        }\r\n        callbackTypeCount[currentCallbackType]++;\r\n    }\r\n\r\n    // 场景回调方法\r\n    private void OnSceneOpened(UnityEngine.SceneManagement.Scene scene, UnityEditor.SceneManagement.OpenSceneMode mode)\r\n    {\r\n        currentCallbackType = CallbackType.Scene;\r\n        Debug.Log($\"场景已打开: {scene.name}, 模式: {mode}\");\r\n    }\r\n\r\n    private void OnSceneClosing(UnityEngine.SceneManagement.Scene scene, bool removingScene)\r\n    {\r\n        currentCallbackType = CallbackType.Scene;\r\n        Debug.Log($\"场景正在关闭: {scene.name}, 移除: {removingScene}\");\r\n    }\r\n\r\n    private void OnSceneClosed(UnityEngine.SceneManagement.Scene scene)\r\n    {\r\n        currentCallbackType = CallbackType.Scene;\r\n        Debug.Log($\"场景已关闭: {scene.name}\");\r\n    }\r\n\r\n    // 资产回调方法\r\n    private void OnImportPackageStarted(string packageName)\r\n    {\r\n        currentCallbackType = CallbackType.Asset;\r\n        Debug.Log($\"包导入开始: {packageName}\");\r\n    }\r\n\r\n    private void OnImportPackageCompleted(string packageName)\r\n    {\r\n        currentCallbackType = CallbackType.Asset;\r\n        Debug.Log($\"包导入完成: {packageName}\");\r\n    }\r\n\r\n    private void OnImportPackageFailed(string packageName, string errorMessage)\r\n    {\r\n        currentCallbackType = CallbackType.Asset;\r\n        Debug.LogError($\"包导入失败: {packageName}, 错误: {errorMessage}\");\r\n    }\r\n\r\n    // 编辑器回调方法\r\n    private void OnEditorUpdate()\r\n    {\r\n        currentCallbackType = CallbackType.Editor;\r\n        // 编辑器更新回调，这里不记录日志避免刷屏\r\n    }\r\n\r\n    private void OnPlayModeStateChanged(PlayModeStateChange state)\r\n    {\r\n        currentCallbackType = CallbackType.Editor;\r\n        Debug.Log($\"播放模式状态改变: {state}\");\r\n    }\r\n\r\n    private void OnHierarchyChanged()\r\n    {\r\n        currentCallbackType = CallbackType.Editor;\r\n        Debug.Log(\"层级视图已改变\");\r\n    }\r\n\r\n    private void OnProjectChanged()\r\n    {\r\n        currentCallbackType = CallbackType.Editor;\r\n        Debug.Log(\"项目已改变\");\r\n    }\r\n\r\n    // IPreprocessBuildWithReport 接口实现\r\n    public void OnPreprocessBuild(BuildReport report)\r\n    {\r\n        currentCallbackType = CallbackType.Build;\r\n        Debug.Log(\"构建预处理开始\");\r\n        \r\n        // 在这里可以添加构建前的准备工作\r\n        // 例如：清理临时文件、验证资源等\r\n    }\r\n\r\n    // IPostprocessBuildWithReport 接口实现\r\n    public void OnPostprocessBuild(BuildReport report)\r\n    {\r\n        currentCallbackType = CallbackType.Build;\r\n        Debug.Log(\"构建后处理开始\");\r\n        \r\n        // 在这里可以添加构建后的处理工作\r\n        // 例如：复制额外文件、设置权限等\r\n    }\r\n\r\n    /// <summary>\r\n    /// 添加待执行的回调\r\n    /// </summary>\r\n    /// <param name=\"callback\">回调方法</param>\r\n    public void AddPendingCallback(System.Action callback)\r\n    {\r\n        if (callback != null)\r\n        {\r\n            pendingCallbacks.Add(callback);\r\n            Debug.Log($\"已添加待执行回调: {callback.Method.Name}\");\r\n        }\r\n    }\r\n\r\n    /// <summary>\r\n    /// 清除所有待执行的回调\r\n    /// </summary>\r\n    public void ClearPendingCallbacks()\r\n    {\r\n        pendingCallbacks.Clear();\r\n        Debug.Log(\"所有待执行回调已清除\");\r\n    }\r\n\r\n    /// <summary>\r\n    /// 清除所有已完成的回调\r\n    /// </summary>\r\n    public void ClearCompletedCallbacks()\r\n    {\r\n        completedCallbacks.Clear();\r\n        Debug.Log(\"所有已完成回调已清除\");\r\n    }\r\n\r\n    /// <summary>\r\n    /// 生成回调报告\r\n    /// </summary>\r\n    public void GenerateCallbackReport()\r\n    {\r\n        Debug.Log(\"=== 回调系统报告 ===\");\r\n        Debug.Log($\"回调系统状态: {callbackSystemState}\");\r\n        Debug.Log($\"当前回调类型: {currentCallbackType}\");\r\n        Debug.Log($\"回调执行次数: {callbackExecutionCount}\");\r\n        Debug.Log($\"最后回调结果: {lastCallbackResult}\");\r\n        Debug.Log($\"总执行次数: {totalExecutionCount}\");\r\n        Debug.Log($\"平均执行时间: {averageExecutionTime:F4}秒\");\r\n        Debug.Log($\"最大执行时间: {maxExecutionTime:F4}秒\");\r\n        Debug.Log($\"总执行时间: {totalExecutionTime:F4}秒\");\r\n        Debug.Log($\"待执行回调数: {pendingCallbacks.Count}\");\r\n        Debug.Log($\"已完成回调数: {completedCallbacks.Count}\");\r\n        \r\n        Debug.Log(\"=== 回调类型统计 ===\");\r\n        foreach (var kvp in callbackTypeCount)\r\n        {\r\n            Debug.Log($\"{kvp.Key}: {kvp.Value} 次\");\r\n        }\r\n        \r\n        Debug.Log(\"=== 回调方法统计 ===\");\r\n        foreach (var kvp in callbackMethodCount)\r\n        {\r\n            Debug.Log($\"{kvp.Key}: {kvp.Value} 次\");\r\n        }\r\n    }\r\n\r\n    /// <summary>\r\n    /// 清除回调历史\r\n    /// </summary>\r\n    public void ClearCallbackHistory()\r\n    {\r\n        callbackHistory = new CallbackHistoryEntry[20];\r\n        callbackHistoryIndex = 0;\r\n        Debug.Log(\"回调历史已清除\");\r\n    }\r\n\r\n    /// <summary>\r\n    /// 重置回调统计\r\n    /// </summary>\r\n    public void ResetCallbackStatistics()\r\n    {\r\n        callbackTypeCount.Clear();\r\n        callbackMethodCount.Clear();\r\n        totalExecutionCount = 0;\r\n        totalExecutionTime = 0f;\r\n        averageExecutionTime = 0f;\r\n        maxExecutionTime = 0f;\r\n        \r\n        Debug.Log(\"回调统计已重置\");\r\n    }\r\n\r\n    private void OnDestroy()\r\n    {\r\n        // 清理回调注册\r\n        if (enableSceneCallbacks)\r\n        {\r\n            UnityEditor.SceneManagement.EditorSceneManager.sceneOpened -= OnSceneOpened;\r\n            UnityEditor.SceneManagement.EditorSceneManager.sceneClosing -= OnSceneClosing;\r\n            UnityEditor.SceneManagement.EditorSceneManager.sceneClosed -= OnSceneClosed;\r\n        }\r\n        \r\n        if (enableAssetCallbacks)\r\n        {\r\n            AssetDatabase.importPackageStarted -= OnImportPackageStarted;\r\n            AssetDatabase.importPackageCompleted -= OnImportPackageCompleted;\r\n            AssetDatabase.importPackageFailed -= OnImportPackageFailed;\r\n        }\r\n        \r\n        if (enableEditorCallbacks)\r\n        {\r\n            EditorApplication.update -= OnEditorUpdate;\r\n            EditorApplication.playModeStateChanged -= OnPlayModeStateChanged;\r\n            EditorApplication.hierarchyChanged -= OnHierarchyChanged;\r\n            EditorApplication.projectChanged -= OnProjectChanged;\r\n        }\r\n        \r\n        Debug.Log(\"回调注册已清理\");\r\n    }\r\n\r\n    private void OnGUI()\r\n    {\r\n        GUILayout.BeginArea(new Rect(10, 10, 400, 800));\r\n        GUILayout.Label(\"Callbacks 回调系统演示\", UnityEditor.EditorStyles.boldLabel);\r\n        \r\n        GUILayout.Space(10);\r\n        GUILayout.Label(\"回调系统配置:\");\r\n        enableCallbackSystem = GUILayout.Toggle(enableCallbackSystem, \"启用回调系统\");\r\n        enableCallbackLogging = GUILayout.Toggle(enableCallbackLogging, \"启用回调日志\");\r\n        enableCallbackValidation = GUILayout.Toggle(enableCallbackValidation, \"启用回调验证\");\r\n        enableCallbackPerformance = GUILayout.Toggle(enableCallbackPerformance, \"启用回调性能监控\");\r\n        enableCallbackHistory = GUILayout.Toggle(enableCallbackHistory, \"启用回调历史记录\");\r\n        \r\n        GUILayout.Space(10);\r\n        GUILayout.Label(\"回调类型:\");\r\n        enableBuildCallbacks = GUILayout.Toggle(enableBuildCallbacks, \"启用构建回调\");\r\n        enableSceneCallbacks = GUILayout.Toggle(enableSceneCallbacks, \"启用场景回调\");\r\n        enableAssetCallbacks = GUILayout.Toggle(enableAssetCallbacks, \"启用资产回调\");\r\n        enableEditorCallbacks = GUILayout.Toggle(enableEditorCallbacks, \"启用编辑器回调\");\r\n        \r\n        GUILayout.Space(10);\r\n        GUILayout.Label(\"回调状态:\");\r\n        GUILayout.Label($\"回调系统状态: {callbackSystemState}\");\r\n        GUILayout.Label($\"当前回调类型: {currentCallbackType}\");\r\n        GUILayout.Label($\"回调执行次数: {callbackExecutionCount}\");\r\n        GUILayout.Label($\"最后回调结果: {lastCallbackResult}\");\r\n        GUILayout.Label($\"总执行次数: {totalExecutionCount}\");\r\n        GUILayout.Label($\"平均执行时间: {averageExecutionTime:F4}秒\");\r\n        GUILayout.Label($\"最大执行时间: {maxExecutionTime:F4}秒\");\r\n        GUILayout.Label($\"待执行回调数: {pendingCallbacks.Count}\");\r\n        GUILayout.Label($\"已完成回调数: {completedCallbacks.Count}\");\r\n        \r\n        GUILayout.Space(10);\r\n        \r\n        if (GUILayout.Button(\"生成回调报告\"))\r\n        {\r\n            GenerateCallbackReport();\r\n        }\r\n        \r\n        if (GUILayout.Button(\"清除回调历史\"))\r\n        {\r\n            ClearCallbackHistory();\r\n        }\r\n        \r\n        if (GUILayout.Button(\"重置回调统计\"))\r\n        {\r\n            ResetCallbackStatistics();\r\n        }\r\n        \r\n        if (GUILayout.Button(\"清除待执行回调\"))\r\n        {\r\n            ClearPendingCallbacks();\r\n        }\r\n        \r\n        if (GUILayout.Button(\"清除已完成回调\"))\r\n        {\r\n            ClearCompletedCallbacks();\r\n        }\r\n        \r\n        GUILayout.Space(10);\r\n        GUILayout.Label(\"回调历史:\");\r\n        for (int i = 0; i < callbackHistory.Length; i++)\r\n        {\r\n            if (callbackHistory[i] != null && !string.IsNullOrEmpty(callbackHistory[i].timestamp))\r\n            {\r\n                GUILayout.Label($\"{callbackHistory[i].timestamp} - {callbackHistory[i].methodName} - {callbackHistory[i].result}\");\r\n            }\r\n        }\r\n        \r\n        GUILayout.EndArea();\r\n    }\r\n}\r\n\r\n/// <summary>\r\n/// 回调类型枚举\r\n/// </summary>\r\npublic enum CallbackType\r\n{\r\n    None,\r\n    Build,\r\n    Scene,\r\n    Asset,\r\n    Editor\r\n}\r\n\r\n/// <summary>\r\n/// 回调历史条目\r\n/// </summary>\r\n[System.Serializable]\r\npublic class CallbackHistoryEntry\r\n{\r\n    public string timestamp;\r\n    public string methodName;\r\n    public string result;\r\n    public float executionTime;\r\n    public string callbackType;\r\n} "
        }
    ]
}