{
    "sourceFile": "Assets/UnityEditor/Chapter 6 Gizmos/README.md",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746900262917,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746900262917,
            "name": "Commit-0",
            "content": "# Unity编辑器扩展 - Chapter 6: Gizmos\r\n\r\n## 概述\r\n\r\n本章专注于Unity编辑器中的Gizmos和Handles系统，这是Unity场景视图中用于可视化和交互操作的重要工具。Gizmos主要用于可视化显示游戏对象的信息，而Handles则提供了与场景视图中对象交互的功能。通过本章的学习，你将掌握如何使用这些工具来增强场景编辑体验，创建自定义的编辑器工具，并提供直观的可视化效果。\r\n\r\n## 核心知识点\r\n\r\n### Gizmos系统概览\r\n\r\nUnity中的Gizmos主要分为以下几种类型：\r\n\r\n- **内置Gizmos** - Unity自带的基本可视化形状和图标（如球体、立方体、线条等）\r\n- **自定义Gizmos** - 开发者自定义的可视化效果，用于展示特定的游戏对象信息\r\n- **Gizmo图标** - 可用于标记场景中的特定位置或对象\r\n- **场景Gizmos** - 场景视图中的轴向、网格和其他辅助元素\r\n\r\n### Handles系统概览\r\n\r\nUnity中的Handles主要分为以下几种类型：\r\n\r\n- **位置控制** - 用于移动、旋转和缩放对象的控制柄\r\n- **自定义控制柄** - 开发者自定义的交互控制，用于特定功能\r\n- **GUI控制** - 在场景视图中绘制的GUI元素，用于与对象交互\r\n- **拾取和选择** - 用于在场景视图中选择对象的功能\r\n\r\n## 相关特性\r\n\r\n### Gizmos类\r\n\r\n- **基本用法**: `Gizmos.DrawLine(Vector3 from, Vector3 to)`等方法\r\n- **用途**: 在场景视图中绘制基本形状和图标，用于可视化信息\r\n- **示例**:  \r\n  ```csharp\r\n  void OnDrawGizmos() {\r\n      Gizmos.color = Color.red;\r\n      Gizmos.DrawSphere(transform.position, 1f);\r\n  }\r\n  ```\r\n\r\n### Handles类\r\n\r\n- **基本用法**: `Handles.PositionHandle(Vector3 position, Quaternion rotation)`等方法\r\n- **用途**: 在场景视图中提供交互控制\r\n- **示例**:  \r\n  ```csharp\r\n  void OnSceneGUI() {\r\n      EditorGUI.BeginChangeCheck();\r\n      Vector3 newPosition = Handles.PositionHandle(target.position, Quaternion.identity);\r\n      if (EditorGUI.EndChangeCheck()) {\r\n          Undo.RecordObject(target, \"Move Object\");\r\n          target.position = newPosition;\r\n      }\r\n  }\r\n  ```\r\n\r\n### DrawGizmo特性\r\n\r\n- **基本语法**: `[DrawGizmo(GizmoType flags, Type targetType)]`\r\n- **用途**: 为特定类型的对象绘制Gizmo，不需要对象自身实现OnDrawGizmos方法\r\n- **示例**:  \r\n  ```csharp\r\n  [DrawGizmo(GizmoType.Active | GizmoType.Selected, typeof(MyComponent))]\r\n  static void DrawGizmo(MyComponent target, GizmoType gizmoType) {\r\n      Gizmos.DrawSphere(target.transform.position, 1f);\r\n  }\r\n  ```\r\n\r\n### OnDrawGizmos和OnDrawGizmosSelected方法\r\n\r\n- **基本用法**: 在MonoBehaviour中实现这些方法\r\n- **用途**: OnDrawGizmos总是绘制，OnDrawGizmosSelected仅在对象被选中时绘制\r\n- **示例**:  \r\n  ```csharp\r\n  void OnDrawGizmos() {\r\n      Gizmos.color = Color.yellow;\r\n      Gizmos.DrawWireSphere(transform.position, detectionRadius);\r\n  }\r\n  void OnDrawGizmosSelected() {\r\n      Gizmos.color = Color.red;\r\n      Gizmos.DrawSphere(transform.position, attackRadius);\r\n  }\r\n  ```\r\n\r\n## 代码结构\r\n\r\n本章包含的主要代码文件：\r\n\r\n1. **GizmosExample.cs**: 演示了基本Gizmos的使用方法\r\n2. **GizmosExampleEditor.cs**: 演示了如何在自定义编辑器中使用Gizmos\r\n3. **BeizerPath.cs**: 实现了贝塞尔曲线路径系统\r\n4. **BeizerPathEditor.cs**: 贝塞尔曲线路径的编辑器界面\r\n5. **AvatarCameraController.cs**: 实现了角色相机控制器\r\n6. **AvatarCameraControllerEditor.cs**: 角色相机控制器的可视化编辑界面\r\n\r\n## 思维导图\r\n\r\n```\r\nUnity Gizmos和Handles系统\r\n├── Gizmos系统\r\n│   ├── 基本绘制函数\r\n│   │   ├── DrawLine - 绘制线段\r\n│   │   ├── DrawSphere/DrawWireSphere - 绘制实心/线框球体\r\n│   │   ├── DrawCube/DrawWireCube - 绘制实心/线框立方体\r\n│   │   ├── DrawIcon - 绘制图标\r\n│   │   ├── DrawGUITexture - 绘制GUI纹理\r\n│   │   ├── DrawFrustum - 绘制视锥体\r\n│   │   ├── DrawRay - 绘制射线\r\n│   │   └── DrawMesh - 绘制网格\r\n│   │\r\n│   ├── 属性设置\r\n│   │   ├── color - 设置绘制颜色\r\n│   │   ├── matrix - 设置变换矩阵\r\n│   │   └── exposure - 设置曝光度\r\n│   │\r\n│   ├── 回调方法\r\n│   │   ├── OnDrawGizmos - 总是绘制的Gizmos\r\n│   │   └── OnDrawGizmosSelected - 仅在选中时绘制的Gizmos\r\n│   │\r\n│   └── DrawGizmo特性\r\n│       ├── GizmoType.Active - 激活状态下的Gizmo\r\n│       ├── GizmoType.Selected - 选中状态下的Gizmo\r\n│       ├── GizmoType.Pickable - 可拾取的Gizmo\r\n│       ├── GizmoType.NotInSelectionHierarchy - 未选中对象层级的Gizmo\r\n│       └── GizmoType.InSelectionHierarchy - 选中对象层级的Gizmo\r\n│\r\n├── Handles系统\r\n│   ├── 交互控制柄\r\n│   │   ├── PositionHandle - 位置控制柄\r\n│   │   ├── RotationHandle - 旋转控制柄\r\n│   │   ├── ScaleHandle - 缩放控制柄\r\n│   │   ├── FreeMoveHandle - 自由移动控制柄\r\n│   │   ├── Slider - 单轴滑动控制\r\n│   │   └── RadiusHandle - 半径控制柄\r\n│   │\r\n│   ├── 绘制函数\r\n│   │   ├── DrawLine - 绘制线段\r\n│   │   ├── DrawPolyLine - 绘制多段线\r\n│   │   ├── DrawWireDisc - 绘制线框圆盘\r\n│   │   ├── DrawWireArc - 绘制线框弧\r\n│   │   ├── DrawSolidDisc - 绘制实心圆盘\r\n│   │   ├── DrawSolidArc - 绘制实心弧\r\n│   │   ├── DrawBezier - 绘制贝塞尔曲线\r\n│   │   └── DrawDottedLine - 绘制虚线\r\n│   │\r\n│   ├── GUI相关\r\n│   │   ├── BeginGUI/EndGUI - GUI绘制块\r\n│   │   ├── Label - 绘制标签\r\n│   │   ├── Button - 绘制按钮\r\n│   │   └── ColorPicker - 颜色选择器\r\n│   │\r\n│   └── 事件和输入\r\n│       ├── Event.current - 当前事件\r\n│       ├── HandleUtility.GUIPointToWorldRay - GUI点转换为世界射线\r\n│       ├── HandleUtility.PickObject - 拾取对象\r\n│       └── HandleUtility.AddDefaultControl - 添加默认控制\r\n│\r\n├── 应用场景\r\n│   ├── 路径编辑工具\r\n│   │   ├── 贝塞尔曲线路径\r\n│   │   ├── 路径点编辑\r\n│   │   ├── 曲线可视化\r\n│   │   └── 运行时导航指引\r\n│   │\r\n│   ├── 相机控制系统\r\n│   │   ├── 视角预览\r\n│   │   ├── 关注点控制\r\n│   │   ├── 距离调整\r\n│   │   └── 碰撞检测\r\n│   │\r\n│   ├── 游戏对象调试\r\n│   │   ├── 碰撞区域可视化\r\n│   │   ├── 视野范围显示\r\n│   │   ├── AI路径展示\r\n│   │   └── 物理关系展示\r\n│   │\r\n│   └── 编辑器工具\r\n│       ├── 关卡设计辅助\r\n│       ├── 对象对齐工具\r\n│       ├── 批量编辑工具\r\n│       └── 自定义变换控制\r\n│\r\n└── 最佳实践\r\n    ├── 性能优化\r\n    │   ├── 条件性绘制\r\n    │   ├── 距离衰减显示\r\n    │   ├── LOD (Level of Detail)\r\n    │   └── 缓存计算结果\r\n    │\r\n    ├── 视觉设计\r\n    │   ├── 一致的颜色方案\r\n    │   ├── 清晰的形状区分\r\n    │   ├── 适当的不透明度\r\n    │   └── 动态视觉反馈\r\n    │\r\n    ├── 代码组织\r\n    │   ├── 分离绘制逻辑\r\n    │   ├── 复用公共函数\r\n    │   ├── 使用SceneView.duringSceneGui\r\n    │   └── 编辑模式与运行模式分离\r\n    │\r\n    └── 用户体验\r\n        ├── 直观的交互设计\r\n        ├── 恰当的拾取区域大小\r\n        ├── 上下文相关的控制\r\n        └── 撤销/重做支持\r\n```\r\n\r\n## UML类图\r\n\r\n```\r\n+--------------------+                 +--------------------+\r\n|     MonoBehaviour  |                 |     Editor         |\r\n+--------------------+                 +--------------------+\r\n| + OnDrawGizmos()   |                 | + OnSceneGUI()     |\r\n| + OnDrawGizmosSelected() |           | + OnInspectorGUI() |\r\n+--------------------+                 +--------------------+\r\n         ^                                     ^\r\n         |                                     |\r\n+--------------------+                 +--------------------+\r\n|   GizmosExample    |                 | GizmosExampleEditor|\r\n+--------------------+<----------------+--------------------+\r\n| - showGizmos: bool |                 | - DrawGizmos()     |\r\n| - radius: float    |                 | + OnSceneGUI()     |\r\n| + OnDrawGizmos()   |                 | + OnInspectorGUI() |\r\n+--------------------+                 +--------------------+\r\n\r\n+--------------------+                 +--------------------+\r\n|     BeizerPath     |                 |  BeizerPathEditor  |\r\n+--------------------+<----------------+--------------------+\r\n| - points: Vector3[]|                 | - DrawPath()       |\r\n| - controlPoints: Vector3[] |         | - DrawControlPoints() |\r\n| + GetPoint(): Vector3 |              | + OnSceneGUI()     |\r\n| + OnDrawGizmos()   |                 | + OnInspectorGUI() |\r\n+--------------------+                 +--------------------+\r\n\r\n+--------------------+                 +---------------------+\r\n|AvatarCameraController|               |AvatarCameraControllerEditor|\r\n+--------------------+<----------------+---------------------+\r\n| - target: Transform|                 | - DrawCameraView()  |\r\n| - distance: float  |                 | - DrawOrbit()       |\r\n| - minDistance: float |               | + OnSceneGUI()      |\r\n| - maxDistance: float |               | + OnInspectorGUI()  |\r\n| - orbitSpeed: float|                 | - DrawHandle()      |\r\n| + UpdateCamera()   |                 +---------------------+\r\n+--------------------+\r\n```\r\n\r\n## 重要类和接口\r\n\r\n### Gizmos相关类\r\n\r\n| 类/接口名称 | 类型 | 描述 | 重要方法/属性 |\r\n|----------|------|------|--------------|\r\n| Gizmos | 静态类 | 提供在场景视图中绘制形状和图标的功能 | `DrawLine()`, `DrawSphere()`, `DrawIcon()`, `color` |\r\n| GizmoType | 枚举 | 定义Gizmo的显示条件和类型 | `Active`, `Selected`, `Pickable` |\r\n| DrawGizmo | 特性 | 用于标记静态方法为Gizmo绘制方法 | `targetType`, `gizmoType` |\r\n\r\n### Handles相关类\r\n\r\n| 类/接口名称 | 类型 | 描述 | 重要方法/属性 |\r\n|----------|------|------|--------------|\r\n| Handles | 静态类 | 提供在场景视图中绘制交互控制柄的功能 | `PositionHandle()`, `DrawLine()`, `Button()` |\r\n| HandleUtility | 静态类 | 提供处理场景视图交互的辅助功能 | `PickObject()`, `GUIPointToWorldRay()` |\r\n| EditorGUI | 静态类 | 提供在编辑器中绘制GUI元素的功能 | `BeginChangeCheck()`, `EndChangeCheck()` |\r\n| EditorGUILayout | 静态类 | 提供在编辑器中使用布局绘制GUI的功能 | `FloatField()`, `Toggle()` |\r\n\r\n### 实例项目类\r\n\r\n| 类/接口名称 | 类型 | 描述 | 重要方法/属性 |\r\n|----------|------|------|--------------|\r\n| GizmosExample | MonoBehaviour | 基本Gizmos使用示例 | `OnDrawGizmos()`, `radius` |\r\n| BeizerPath | MonoBehaviour | 贝塞尔曲线路径实现 | `GetPoint()`, `points`, `controlPoints` |\r\n| AvatarCameraController | MonoBehaviour | 角色相机控制器 | `UpdateCamera()`, `distance`, `target` |\r\n| GizmosExampleEditor | Editor | GizmosExample的自定义编辑器 | `OnSceneGUI()`, `DrawGizmos()` |\r\n| BeizerPathEditor | Editor | BeizerPath的自定义编辑器 | `OnSceneGUI()`, `DrawControlPoints()` |\r\n| AvatarCameraControllerEditor | Editor | 相机控制器的自定义编辑器 | `OnSceneGUI()`, `DrawCameraView()` |\r\n\r\n## 应用场景\r\n\r\n1. **游戏对象可视化**: 显示游戏对象的范围、方向或特殊属性\r\n2. **编辑器工具创建**: 构建自定义的场景编辑工具，如路径编辑器\r\n3. **调试辅助**: 在开发过程中可视化显示物理碰撞、AI路径或视线范围\r\n4. **关卡设计**: 辅助开发者进行关卡布局和设计\r\n5. **相机控制**: 创建和编辑相机行为，如镜头轨迹或视角边界\r\n\r\n## 最佳实践\r\n\r\n1. **性能优化**:\r\n   - 在OnDrawGizmosSelected中绘制复杂Gizmo，而非OnDrawGizmos中\r\n   - 为Gizmo添加距离检测，仅在靠近时显示详细信息\r\n   - 避免在Gizmo绘制方法中分配新对象\r\n\r\n2. **视觉清晰度**:\r\n   - 为不同类型的信息使用一致的颜色方案\r\n   - 使用适当的不透明度，避免遮挡场景内容\r\n   - 选择易于识别的形状表示不同含义\r\n\r\n3. **代码组织**:\r\n   - 将复杂的Gizmo/Handle绘制代码分离到独立方法中\r\n   - 使用DrawGizmo特性而非OnDrawGizmos以减少MonoBehaviour上的代码\r\n   - 利用SceneView.duringSceneGui事件实现编辑模式下的交互\r\n\r\n4. **用户体验**:\r\n   - 总是添加Undo支持，让用户可以撤销交互操作\r\n   - 提供适当大小的控制柄，便于鼠标选择\r\n   - 添加视觉反馈，明确当前可交互的元素\r\n\r\n## 相关资源\r\n\r\n### 官方文档\r\n\r\n- [Unity Gizmos 类参考](https://docs.unity3d.com/ScriptReference/Gizmos.html)\r\n- [Unity Handles 类参考](https://docs.unity3d.com/ScriptReference/Handles.html)\r\n- [Unity DrawGizmo 特性参考](https://docs.unity3d.com/ScriptReference/DrawGizmoAttribute.html)\r\n- [Unity OnDrawGizmos 方法](https://docs.unity3d.com/ScriptReference/MonoBehaviour.OnDrawGizmos.html)\r\n- [Unity HandleUtility 类参考](https://docs.unity3d.com/ScriptReference/HandleUtility.html)\r\n- [Unity Editor 扩展基础](https://docs.unity3d.com/Manual/ExtendingTheEditor.html)\r\n\r\n### 教程与参考\r\n\r\n- [Unity 编辑器工具开发入门](https://learn.unity.com/tutorial/editor-scripting)\r\n- [创建自定义编辑器工具](https://docs.unity3d.com/Manual/editor-CustomEditors.html)\r\n- [在场景视图中绘制](https://docs.unity3d.com/Manual/DrawingGizmos.html)\r\n- [Handles与用户交互](https://docs.unity3d.com/Manual/HandleUtility.html)\r\n- [Unity贝塞尔曲线实现](https://catlikecoding.com/unity/tutorials/curves-and-splines/) "
        }
    ]
}