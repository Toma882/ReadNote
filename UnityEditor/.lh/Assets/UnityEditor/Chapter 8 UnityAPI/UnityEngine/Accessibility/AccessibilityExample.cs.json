{
    "sourceFile": "Assets/UnityEditor/Chapter 8 UnityAPI/UnityEngine/Accessibility/AccessibilityExample.cs",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1750933421725,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1750933421725,
            "name": "Commit-0",
            "content": "using UnityEngine;\r\n\r\n/// <summary>\r\n/// UnityEngine.Accessibility 命名空间案例演示\r\n/// 展示无障碍功能、屏幕阅读器支持等核心功能\r\n/// </summary>\r\npublic class AccessibilityExample : MonoBehaviour\r\n{\r\n    [Header(\"无障碍设置\")]\r\n    [SerializeField] private bool enableAccessibility = true; //启用无障碍功能\r\n    [SerializeField] private string screenReaderText = \"这是一个无障碍演示\"; //屏幕阅读器文本\r\n    [SerializeField] private bool announceChanges = true; //宣布变化\r\n    [SerializeField] private float announcementDelay = 0.5f; //宣布延迟\r\n\r\n    [Header(\"UI无障碍\")]\r\n    [SerializeField] private string buttonLabel = \"测试按钮\"; //按钮标签\r\n    [SerializeField] private string buttonDescription = \"点击此按钮进行测试\"; //按钮描述\r\n    [SerializeField] private bool isButtonEnabled = true; //按钮是否启用\r\n    [SerializeField] private bool isButtonVisible = true; //按钮是否可见\r\n\r\n    [Header(\"导航无障碍\")]\r\n    [SerializeField] private bool enableKeyboardNavigation = true; //启用键盘导航\r\n    [SerializeField] private bool enableVoiceNavigation = true; //启用语音导航\r\n    [SerializeField] private string navigationHint = \"使用Tab键在元素间导航\"; //导航提示\r\n\r\n    [Header(\"视觉无障碍\")]\r\n    [SerializeField] private bool highContrastMode = false; //高对比度模式\r\n    [SerializeField] private bool largeTextMode = false; //大文本模式\r\n    [SerializeField] private float textScale = 1.0f; //文本缩放\r\n    [SerializeField] private Color highContrastColor = Color.yellow; //高对比度颜色\r\n\r\n    private float lastAnnouncementTime = 0f;\r\n    private string lastAnnouncedText = \"\";\r\n\r\n    private void Start()\r\n    {\r\n        InitializeAccessibility();\r\n    }\r\n\r\n    /// <summary>\r\n    /// 初始化无障碍功能\r\n    /// </summary>\r\n    private void InitializeAccessibility()\r\n    {\r\n        if (enableAccessibility)\r\n        {\r\n            // 设置屏幕阅读器文本\r\n            SetScreenReaderText(screenReaderText);\r\n            \r\n            // 启用无障碍功能\r\n            EnableAccessibilityFeatures();\r\n            \r\n            Debug.Log(\"无障碍功能已初始化\");\r\n        }\r\n    }\r\n\r\n    /// <summary>\r\n    /// 启用无障碍功能\r\n    /// </summary>\r\n    private void EnableAccessibilityFeatures()\r\n    {\r\n        // 这里可以调用Unity的无障碍API\r\n        // 注意：Unity的无障碍API可能因版本而异\r\n        \r\n        Debug.Log(\"无障碍功能已启用\");\r\n    }\r\n\r\n    /// <summary>\r\n    /// 设置屏幕阅读器文本\r\n    /// </summary>\r\n    /// <param name=\"text\">要朗读的文本</param>\r\n    public void SetScreenReaderText(string text)\r\n    {\r\n        screenReaderText = text;\r\n        \r\n        if (enableAccessibility && announceChanges)\r\n        {\r\n            AnnounceToScreenReader(text);\r\n        }\r\n    }\r\n\r\n    /// <summary>\r\n    /// 向屏幕阅读器宣布文本\r\n    /// </summary>\r\n    /// <param name=\"text\">要宣布的文本</param>\r\n    public void AnnounceToScreenReader(string text)\r\n    {\r\n        if (Time.time - lastAnnouncementTime > announcementDelay)\r\n        {\r\n            // 这里应该调用实际的屏幕阅读器API\r\n            // 由于Unity的无障碍API限制，这里只是模拟\r\n            Debug.Log($\"[屏幕阅读器] {text}\");\r\n            \r\n            lastAnnouncedText = text;\r\n            lastAnnouncementTime = Time.time;\r\n        }\r\n    }\r\n\r\n    /// <summary>\r\n    /// 设置按钮无障碍属性\r\n    /// </summary>\r\n    /// <param name=\"label\">按钮标签</param>\r\n    /// <param name=\"description\">按钮描述</param>\r\n    public void SetButtonAccessibility(string label, string description)\r\n    {\r\n        buttonLabel = label;\r\n        buttonDescription = description;\r\n        \r\n        if (enableAccessibility)\r\n        {\r\n            AnnounceToScreenReader($\"按钮: {label}, {description}\");\r\n        }\r\n    }\r\n\r\n    /// <summary>\r\n    /// 启用/禁用按钮\r\n    /// </summary>\r\n    /// <param name=\"enabled\">是否启用</param>\r\n    public void SetButtonEnabled(bool enabled)\r\n    {\r\n        isButtonEnabled = enabled;\r\n        \r\n        if (enableAccessibility && announceChanges)\r\n        {\r\n            string status = enabled ? \"启用\" : \"禁用\";\r\n            AnnounceToScreenReader($\"按钮已{status}\");\r\n        }\r\n    }\r\n\r\n    /// <summary>\r\n    /// 设置高对比度模式\r\n    /// </summary>\r\n    /// <param name=\"enabled\">是否启用</param>\r\n    public void SetHighContrastMode(bool enabled)\r\n    {\r\n        highContrastMode = enabled;\r\n        \r\n        if (enabled)\r\n        {\r\n            // 应用高对比度设置\r\n            ApplyHighContrastSettings();\r\n            AnnounceToScreenReader(\"高对比度模式已启用\");\r\n        }\r\n        else\r\n        {\r\n            // 恢复正常设置\r\n            ApplyNormalSettings();\r\n            AnnounceToScreenReader(\"高对比度模式已禁用\");\r\n        }\r\n    }\r\n\r\n    /// <summary>\r\n    /// 设置大文本模式\r\n    /// </summary>\r\n    /// <param name=\"enabled\">是否启用</param>\r\n    public void SetLargeTextMode(bool enabled)\r\n    {\r\n        largeTextMode = enabled;\r\n        \r\n        if (enabled)\r\n        {\r\n            textScale = 1.5f;\r\n            AnnounceToScreenReader(\"大文本模式已启用\");\r\n        }\r\n        else\r\n        {\r\n            textScale = 1.0f;\r\n            AnnounceToScreenReader(\"大文本模式已禁用\");\r\n        }\r\n    }\r\n\r\n    /// <summary>\r\n    /// 应用高对比度设置\r\n    /// </summary>\r\n    private void ApplyHighContrastSettings()\r\n    {\r\n        // 这里应该应用实际的高对比度设置\r\n        // 例如修改UI颜色、增加边框等\r\n        Debug.Log(\"应用高对比度设置\");\r\n    }\r\n\r\n    /// <summary>\r\n    /// 应用正常设置\r\n    /// </summary>\r\n    private void ApplyNormalSettings()\r\n    {\r\n        // 恢复正常显示设置\r\n        Debug.Log(\"应用正常显示设置\");\r\n    }\r\n\r\n    /// <summary>\r\n    /// 获取无障碍信息\r\n    /// </summary>\r\n    public void GetAccessibilityInfo()\r\n    {\r\n        Debug.Log(\"=== 无障碍信息 ===\");\r\n        Debug.Log($\"无障碍功能启用: {enableAccessibility}\");\r\n        Debug.Log($\"屏幕阅读器文本: {screenReaderText}\");\r\n        Debug.Log($\"宣布变化: {announceChanges}\");\r\n        Debug.Log($\"键盘导航: {enableKeyboardNavigation}\");\r\n        Debug.Log($\"语音导航: {enableVoiceNavigation}\");\r\n        Debug.Log($\"高对比度模式: {highContrastMode}\");\r\n        Debug.Log($\"大文本模式: {largeTextMode}\");\r\n        Debug.Log($\"文本缩放: {textScale}\");\r\n    }\r\n\r\n    /// <summary>\r\n    /// 测试无障碍功能\r\n    /// </summary>\r\n    public void TestAccessibility()\r\n    {\r\n        if (enableAccessibility)\r\n        {\r\n            AnnounceToScreenReader(\"开始无障碍功能测试\");\r\n            \r\n            // 模拟各种无障碍操作\r\n            SetButtonAccessibility(\"测试按钮\", \"用于测试无障碍功能\");\r\n            SetButtonEnabled(true);\r\n            SetHighContrastMode(true);\r\n            \r\n            Debug.Log(\"无障碍功能测试完成\");\r\n        }\r\n    }\r\n\r\n    /// <summary>\r\n    /// 重置无障碍设置\r\n    /// </summary>\r\n    public void ResetAccessibilitySettings()\r\n    {\r\n        enableAccessibility = true;\r\n        screenReaderText = \"这是一个无障碍演示\";\r\n        announceChanges = true;\r\n        announcementDelay = 0.5f;\r\n        \r\n        buttonLabel = \"测试按钮\";\r\n        buttonDescription = \"点击此按钮进行测试\";\r\n        isButtonEnabled = true;\r\n        isButtonVisible = true;\r\n        \r\n        enableKeyboardNavigation = true;\r\n        enableVoiceNavigation = true;\r\n        navigationHint = \"使用Tab键在元素间导航\";\r\n        \r\n        highContrastMode = false;\r\n        largeTextMode = false;\r\n        textScale = 1.0f;\r\n        \r\n        ApplyNormalSettings();\r\n        AnnounceToScreenReader(\"无障碍设置已重置\");\r\n        \r\n        Debug.Log(\"无障碍设置已重置\");\r\n    }\r\n\r\n    private void OnGUI()\r\n    {\r\n        GUILayout.BeginArea(new Rect(10, 10, 400, 600));\r\n        GUILayout.Label(\"Accessibility 无障碍功能演示\", UnityEditor.EditorStyles.boldLabel);\r\n        \r\n        GUILayout.Space(10);\r\n        GUILayout.Label(\"基本设置:\");\r\n        \r\n        enableAccessibility = GUILayout.Toggle(enableAccessibility, \"启用无障碍功能\");\r\n        announceChanges = GUILayout.Toggle(announceChanges, \"宣布变化\");\r\n        announcementDelay = float.TryParse(GUILayout.TextField(\"宣布延迟\", announcementDelay.ToString()), out var delay) ? delay : announcementDelay;\r\n        \r\n        GUILayout.Space(10);\r\n        GUILayout.Label(\"屏幕阅读器:\");\r\n        \r\n        screenReaderText = GUILayout.TextField(\"屏幕阅读器文本\", screenReaderText);\r\n        if (GUILayout.Button(\"宣布文本\"))\r\n        {\r\n            AnnounceToScreenReader(screenReaderText);\r\n        }\r\n        \r\n        GUILayout.Space(10);\r\n        GUILayout.Label(\"UI无障碍:\");\r\n        \r\n        buttonLabel = GUILayout.TextField(\"按钮标签\", buttonLabel);\r\n        buttonDescription = GUILayout.TextField(\"按钮描述\", buttonDescription);\r\n        \r\n        GUILayout.BeginHorizontal();\r\n        isButtonEnabled = GUILayout.Toggle(isButtonEnabled, \"按钮启用\");\r\n        isButtonVisible = GUILayout.Toggle(isButtonVisible, \"按钮可见\");\r\n        GUILayout.EndHorizontal();\r\n        \r\n        if (GUILayout.Button(\"设置按钮无障碍\"))\r\n        {\r\n            SetButtonAccessibility(buttonLabel, buttonDescription);\r\n        }\r\n        \r\n        GUILayout.Space(10);\r\n        GUILayout.Label(\"导航设置:\");\r\n        \r\n        enableKeyboardNavigation = GUILayout.Toggle(enableKeyboardNavigation, \"键盘导航\");\r\n        enableVoiceNavigation = GUILayout.Toggle(enableVoiceNavigation, \"语音导航\");\r\n        navigationHint = GUILayout.TextField(\"导航提示\", navigationHint);\r\n        \r\n        GUILayout.Space(10);\r\n        GUILayout.Label(\"视觉设置:\");\r\n        \r\n        highContrastMode = GUILayout.Toggle(highContrastMode, \"高对比度模式\");\r\n        largeTextMode = GUILayout.Toggle(largeTextMode, \"大文本模式\");\r\n        textScale = float.TryParse(GUILayout.TextField(\"文本缩放\", textScale.ToString()), out var scale) ? scale : textScale;\r\n        \r\n        GUILayout.Space(10);\r\n        \r\n        if (GUILayout.Button(\"测试无障碍功能\"))\r\n        {\r\n            TestAccessibility();\r\n        }\r\n        \r\n        if (GUILayout.Button(\"获取无障碍信息\"))\r\n        {\r\n            GetAccessibilityInfo();\r\n        }\r\n        \r\n        if (GUILayout.Button(\"重置无障碍设置\"))\r\n        {\r\n            ResetAccessibilitySettings();\r\n        }\r\n        \r\n        GUILayout.EndArea();\r\n    }\r\n} "
        }
    ]
}