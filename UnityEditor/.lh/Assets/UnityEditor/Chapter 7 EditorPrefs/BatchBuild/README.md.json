{
    "sourceFile": "Assets/UnityEditor/Chapter 7 EditorPrefs/BatchBuild/README.md",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 1,
            "patches": [
                {
                    "date": 1746899996232,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1746900167368,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -181,5 +181,5 @@\n - [Unity文档: BuildPipeline](https://docs.unity3d.com/ScriptReference/BuildPipeline.html)\r\n - [Unity文档: BuildTarget](https://docs.unity3d.com/ScriptReference/BuildTarget.html)\r\n - [Unity文档: BuildOptions](https://docs.unity3d.com/ScriptReference/BuildOptions.html)\r\n - [Unity文档: ScriptableObject](https://docs.unity3d.com/ScriptReference/ScriptableObject.html)\r\n-- [Unity文档: EditorGUI](https://docs.unity3d.com/ScriptReference/EditorGUI.html)\n\\ No newline at end of file\n+- [Unity文档: EditorGUI](https://docs.unity3d.com/ScriptReference/EditorGUI.html)\r\n"
                }
            ],
            "date": 1746899996232,
            "name": "Commit-0",
            "content": "# BatchBuild 模块\r\n\r\n## 概述\r\nBatchBuild 模块是一个强大的批量构建系统，旨在简化Unity项目的多平台打包和发布流程。通过可视化的编辑器界面，开发者可以创建和管理多个构建配置文件，为不同的目标平台设置不同的构建参数，并一键触发批量构建过程。该模块基于ScriptableObject实现持久化数据存储，提供了直观的配置界面和完整的构建流程管理，大大提高了多平台发布的效率。\r\n\r\n## 核心功能\r\n- **批量构建配置管理**：创建并管理多个构建配置任务\r\n- **多平台支持**：支持Unity所有可构建的目标平台\r\n- **可视化编辑界面**：提供直观的构建配置界面\r\n- **自动化构建流程**：一键触发多个构建任务\r\n- **构建报告生成**：提供详细的构建结果报告\r\n\r\n## 重要接口和类\r\n\r\n### `BuildProfile` 类\r\n构建配置文件类，继承自ScriptableObject，用于存储构建任务集合。\r\n\r\n| 属性/方法 | 说明 |\r\n|---------|------|\r\n| `BuildTasks` | 构建任务列表，存储所有的构建任务 |\r\n\r\n### `BuildTask` 类\r\n单个构建任务的数据类，定义了构建任务的各项参数。\r\n\r\n| 属性/方法 | 说明 |\r\n|---------|------|\r\n| `ProductName` | 产品名称，也用作输出文件名 |\r\n| `BuildTarget` | 目标平台，定义构建输出的目标平台 |\r\n| `BuildPath` | 构建输出路径，定义构建文件的保存位置 |\r\n| `SceneAssets` | 要包含在构建中的场景列表 |\r\n\r\n### `BuildProfileEditor` 类\r\n自定义编辑器类，为BuildProfile提供可视化编辑界面。\r\n\r\n| 方法 | 说明 |\r\n|------|------|\r\n| `OnInspectorGUI()` | 绘制Inspector界面，显示构建配置编辑器 |\r\n| `OnTopGUI()` | 绘制顶部工具栏，包含创建、展开、收缩、清空和打包按钮 |\r\n| `OnBodyGUI()` | 绘制主体内容，显示所有构建任务的详细配置 |\r\n\r\n## UML类图\r\n\r\n```\r\n+-------------------+       +------------------+\r\n|   BuildProfile    |1------*|    BuildTask    |\r\n+-------------------+       +------------------+\r\n| +BuildTasks: List |       | +ProductName     |\r\n+-------------------+       | +BuildTarget     |\r\n        ^                   | +BuildPath       |\r\n        |                   | +SceneAssets     |\r\n        |                   +------------------+\r\n+---------------------+             ^\r\n| ScriptableObject   |             |\r\n+---------------------+             |\r\n| +hideFlags         |     +-------------------------+\r\n| +name              |     |     [Serializable]      |\r\n+---------------------+     +-------------------------+\r\n\r\n+---------------------+       +------------------+\r\n| BuildProfileEditor  |------>|   BuildProfile   |\r\n+---------------------+       +------------------+\r\n| -foldoutMap         |\r\n| -scroll             |\r\n| -profile            |\r\n| +OnInspectorGUI()   |\r\n| +OnTopGUI()         |\r\n| +OnBodyGUI()        |\r\n+---------------------+\r\n```\r\n\r\n## 批量构建流程图\r\n\r\n```\r\n创建构建配置文件 --> 添加构建任务 --> 配置构建参数(平台、场景、路径) --> 点击\"打包\"按钮 --> 执行构建流程 --> 生成构建报告\r\n```\r\n\r\n## 思维导图\r\n\r\n```\r\nBatchBuild模块\r\n├── 数据结构\r\n│   ├── BuildProfile (ScriptableObject)\r\n│   │   └── 管理多个BuildTask\r\n│   └── BuildTask (可序列化类)\r\n│       ├── 产品名称\r\n│       ├── 目标平台\r\n│       ├── 构建路径\r\n│       └── 场景列表\r\n├── 编辑器扩展\r\n│   ├── BuildProfileEditor\r\n│   │   ├── 顶部工具栏\r\n│   │   │   ├── 新建任务\r\n│   │   │   ├── 展开/收缩\r\n│   │   │   ├── 清空列表\r\n│   │   │   └── 打包按钮\r\n│   │   └── 任务配置区域\r\n│   │       ├── 任务折叠/展开\r\n│   │       ├── 场景资源选择\r\n│   │       ├── 平台选择\r\n│   │       └── 路径配置\r\n│   └── 编辑器集成\r\n│       ├── 撤销/重做支持\r\n│       ├── 进度条显示\r\n│       └── 日志输出\r\n└── 构建流程\r\n    ├── 任务准备\r\n    │   ├── 场景列表转换\r\n    │   └── 输出路径组装\r\n    ├── 构建执行\r\n    │   ├── BuildPipeline.BuildPlayer调用\r\n    │   └── 构建选项设置\r\n    └── 结果报告\r\n        ├── 构建成功/失败统计\r\n        └── 日志输出\r\n```\r\n\r\n## 应用场景\r\n1. **多平台同步发布**：同时为多个平台构建游戏版本\r\n2. **自动化构建流程**：集成到CI/CD系统中实现自动化构建\r\n3. **版本发布管理**：管理不同版本的构建配置\r\n4. **测试环境部署**：快速为测试团队提供不同平台的构建版本\r\n5. **构建参数管理**：统一管理和复用构建参数设置\r\n\r\n## 最佳实践\r\n1. **构建配置文件组织**：为不同类型的构建（开发版、测试版、发布版）创建单独的配置文件\r\n2. **命名规范**：为构建任务和输出文件采用清晰的命名规则，包含版本号和平台信息\r\n3. **场景管理**：确保所有需要构建的场景都已保存并正确添加到构建任务中\r\n4. **构建路径策略**：使用相对路径或环境变量增强构建脚本的可移植性\r\n5. **构建报告保存**：保存构建报告以便追踪和分析构建历史\r\n6. **持续集成**：将批量构建功能集成到版本控制和CI/CD工作流程中\r\n\r\n## 代码示例\r\n```csharp\r\n// 1. 如何从脚本触发批量构建\r\npublic class BatchBuildExample\r\n{\r\n    [MenuItem(\"Tools/Run Batch Build\")]\r\n    public static void RunBatchBuild()\r\n    {\r\n        // 加载构建配置文件\r\n        BuildProfile profile = AssetDatabase.LoadAssetAtPath<BuildProfile>(\r\n            \"Assets/BuildProfiles/ReleaseProfile.asset\");\r\n        \r\n        if (profile == null)\r\n        {\r\n            Debug.LogError(\"构建配置文件不存在!\");\r\n            return;\r\n        }\r\n        \r\n        // 执行构建\r\n        foreach (BuildTask task in profile.BuildTasks)\r\n        {\r\n            // 准备场景列表\r\n            List<string> scenePaths = new List<string>();\r\n            foreach (SceneAsset sceneAsset in task.SceneAssets)\r\n            {\r\n                string scenePath = AssetDatabase.GetAssetPath(sceneAsset);\r\n                if (!string.IsNullOrEmpty(scenePath))\r\n                {\r\n                    scenePaths.Add(scenePath);\r\n                }\r\n            }\r\n            \r\n            // 执行构建\r\n            string outputPath = Path.Combine(task.BuildPath, task.ProductName);\r\n            BuildReport report = BuildPipeline.BuildPlayer(\r\n                scenePaths.ToArray(),\r\n                outputPath,\r\n                task.BuildTarget,\r\n                BuildOptions.None\r\n            );\r\n            \r\n            // 输出构建结果\r\n            Debug.Log($\"构建 {task.ProductName} 结果: {report.summary.result}\");\r\n        }\r\n    }\r\n}\r\n```\r\n\r\n## 相关资源\r\n- [Unity文档: BuildPipeline](https://docs.unity3d.com/ScriptReference/BuildPipeline.html)\r\n- [Unity文档: BuildTarget](https://docs.unity3d.com/ScriptReference/BuildTarget.html)\r\n- [Unity文档: BuildOptions](https://docs.unity3d.com/ScriptReference/BuildOptions.html)\r\n- [Unity文档: ScriptableObject](https://docs.unity3d.com/ScriptReference/ScriptableObject.html)\r\n- [Unity文档: EditorGUI](https://docs.unity3d.com/ScriptReference/EditorGUI.html)"
        }
    ]
}