{
    "sourceFile": "Assets/UnityEditor/Chapter 8 UnityAPI/UnityEditor/Search/SearchExample.cs",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1750938884852,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1750938884852,
            "name": "Commit-0",
            "content": "using UnityEngine;\r\nusing UnityEditor;\r\nusing UnityEditor.Search;\r\nusing System.Collections.Generic;\r\n\r\n/// <summary>\r\n/// UnityEditor.Search 命名空间案例演示\r\n/// 展示搜索系统的使用，包括资产搜索、场景搜索和自定义搜索\r\n/// </summary>\r\npublic class SearchExample : MonoBehaviour\r\n{\r\n    [Header(\"搜索系统配置\")]\r\n    [SerializeField] private bool enableSearchSystem = true;\r\n    [SerializeField] private bool enableSearchLogging = true;\r\n    [SerializeField] private bool enableSearchValidation = true;\r\n    [SerializeField] private bool enableSearchPerformance = true;\r\n    [SerializeField] private bool enableSearchHistory = true;\r\n    \r\n    [Header(\"搜索配置\")]\r\n    [SerializeField] private string searchQuery = \"\";\r\n    [SerializeField] private SearchProvider currentProvider = SearchProvider.Asset;\r\n    [SerializeField] private SearchFlags searchFlags = SearchFlags.Default;\r\n    [SerializeField] private int maxResults = 100;\r\n    [SerializeField] private bool enableFuzzySearch = true;\r\n    [SerializeField] private bool enableRegexSearch = false;\r\n    [SerializeField] private bool enableCaseSensitive = false;\r\n    \r\n    [Header(\"搜索状态\")]\r\n    [SerializeField] private SearchStatus searchStatus = SearchStatus.Idle;\r\n    [SerializeField] private bool isSearching = false;\r\n    [SerializeField] private float searchProgress = 0f;\r\n    [SerializeField] private string searchMessage = \"\";\r\n    [SerializeField] private int totalResults = 0;\r\n    [SerializeField] private int filteredResults = 0;\r\n    [SerializeField] private float searchTime = 0f;\r\n    \r\n    [Header(\"搜索结果\")]\r\n    [SerializeField] private SearchItem[] searchResults = new SearchItem[0];\r\n    [SerializeField] private SearchItem[] filteredSearchResults = new SearchItem[0];\r\n    [SerializeField] private string[] resultPaths = new string[0];\r\n    [SerializeField] private string[] resultTypes = new string[0];\r\n    [SerializeField] private string[] resultLabels = new string[0];\r\n    \r\n    [Header(\"搜索历史\")]\r\n    [SerializeField] private SearchHistoryEntry[] searchHistory = new SearchHistoryEntry[10];\r\n    [SerializeField] private int searchHistoryIndex = 0;\r\n    [SerializeField] private bool enableSearchHistory = true;\r\n    \r\n    [Header(\"性能监控\")]\r\n    [SerializeField] private bool enablePerformanceMonitoring = true;\r\n    [SerializeField] private float[] searchTimeHistory = new float[100];\r\n    [SerializeField] private int searchTimeIndex = 0;\r\n    [SerializeField] private float averageSearchTime = 0f;\r\n    [SerializeField] private float maxSearchTime = 0f;\r\n    [SerializeField] private float totalSearchTime = 0f;\r\n    [SerializeField] private int totalSearchCount = 0;\r\n    \r\n    [Header(\"搜索统计\")]\r\n    [SerializeField] private Dictionary<string, int> searchTypeCount = new Dictionary<string, int>();\r\n    [SerializeField] private Dictionary<string, int> searchProviderCount = new Dictionary<string, int>();\r\n    [SerializeField] private int totalAssetSearches = 0;\r\n    [SerializeField] private int totalSceneSearches = 0;\r\n    [SerializeField] private int totalCustomSearches = 0;\r\n    [SerializeField] private int totalGlobalSearches = 0;\r\n    \r\n    [Header(\"搜索过滤器\")]\r\n    [SerializeField] private string[] searchFilters = new string[0];\r\n    [SerializeField] private string[] excludeFilters = new string[0];\r\n    [SerializeField] private string[] typeFilters = new string[0];\r\n    [SerializeField] private string[] pathFilters = new string[0];\r\n    [SerializeField] private bool enableAdvancedFiltering = false;\r\n    \r\n    private bool isInitialized = false;\r\n    private float searchStartTime = 0f;\r\n    private SearchContext searchContext;\r\n    private List<SearchItem> pendingResults = new List<SearchItem>();\r\n\r\n    private void Start()\r\n    {\r\n        InitializeSearchSystem();\r\n    }\r\n\r\n    private void InitializeSearchSystem()\r\n    {\r\n        if (!enableSearchSystem) return;\r\n        \r\n        InitializeSearchState();\r\n        InitializePerformanceMonitoring();\r\n        InitializeSearchStatistics();\r\n        RegisterSearchCallbacks();\r\n        \r\n        isInitialized = true;\r\n        searchStatus = SearchStatus.Idle;\r\n        Debug.Log(\"搜索系统初始化完成\");\r\n    }\r\n\r\n    private void InitializeSearchState()\r\n    {\r\n        searchStatus = SearchStatus.Idle;\r\n        isSearching = false;\r\n        searchProgress = 0f;\r\n        searchMessage = \"就绪\";\r\n        totalResults = 0;\r\n        filteredResults = 0;\r\n        searchTime = 0f;\r\n        \r\n        Debug.Log(\"搜索状态已初始化\");\r\n    }\r\n\r\n    private void InitializePerformanceMonitoring()\r\n    {\r\n        if (enablePerformanceMonitoring)\r\n        {\r\n            searchTimeHistory = new float[100];\r\n            searchTimeIndex = 0;\r\n            averageSearchTime = 0f;\r\n            maxSearchTime = 0f;\r\n            totalSearchTime = 0f;\r\n            totalSearchCount = 0;\r\n            \r\n            Debug.Log(\"性能监控初始化完成\");\r\n        }\r\n    }\r\n\r\n    private void InitializeSearchStatistics()\r\n    {\r\n        searchTypeCount.Clear();\r\n        searchProviderCount.Clear();\r\n        totalAssetSearches = 0;\r\n        totalSceneSearches = 0;\r\n        totalCustomSearches = 0;\r\n        totalGlobalSearches = 0;\r\n        \r\n        Debug.Log(\"搜索统计初始化完成\");\r\n    }\r\n\r\n    private void RegisterSearchCallbacks()\r\n    {\r\n        // 注册搜索回调\r\n        SearchService.searchItemSelected += OnSearchItemSelected;\r\n        SearchService.searchItemExecuted += OnSearchItemExecuted;\r\n        \r\n        Debug.Log(\"搜索回调已注册\");\r\n    }\r\n\r\n    private void Update()\r\n    {\r\n        if (!isInitialized) return;\r\n        \r\n        UpdateSearchStatus();\r\n        UpdateSearchProgress();\r\n        \r\n        if (enablePerformanceMonitoring)\r\n        {\r\n            UpdatePerformanceMonitoring();\r\n        }\r\n    }\r\n\r\n    private void UpdateSearchStatus()\r\n    {\r\n        if (isSearching)\r\n        {\r\n            searchStatus = SearchStatus.Searching;\r\n        }\r\n        else\r\n        {\r\n            searchStatus = SearchStatus.Idle;\r\n        }\r\n    }\r\n\r\n    private void UpdateSearchProgress()\r\n    {\r\n        if (isSearching)\r\n        {\r\n            // 模拟搜索进度\r\n            searchProgress = Mathf.Clamp01(searchProgress + Time.deltaTime * 0.2f);\r\n        }\r\n        else\r\n        {\r\n            searchProgress = 0f;\r\n        }\r\n    }\r\n\r\n    private void UpdatePerformanceMonitoring()\r\n    {\r\n        if (totalSearchCount > 0)\r\n        {\r\n            averageSearchTime = totalSearchTime / totalSearchCount;\r\n        }\r\n    }\r\n\r\n    private void OnSearchItemSelected(SearchItem item)\r\n    {\r\n        if (enableSearchLogging)\r\n        {\r\n            Debug.Log($\"搜索项被选中: {item.label} ({item.id})\");\r\n        }\r\n    }\r\n\r\n    private void OnSearchItemExecuted(SearchItem item)\r\n    {\r\n        if (enableSearchLogging)\r\n        {\r\n            Debug.Log($\"搜索项被执行: {item.label} ({item.id})\");\r\n        }\r\n    }\r\n\r\n    public void StartSearch()\r\n    {\r\n        if (isSearching)\r\n        {\r\n            Debug.LogWarning(\"搜索正在进行中，请等待完成\");\r\n            return;\r\n        }\r\n        \r\n        if (string.IsNullOrEmpty(searchQuery))\r\n        {\r\n            Debug.LogWarning(\"搜索查询不能为空\");\r\n            return;\r\n        }\r\n        \r\n        if (!enableSearchValidation || ValidateSearch())\r\n        {\r\n            isSearching = true;\r\n            searchStartTime = Time.realtimeSinceStartup;\r\n            searchProgress = 0f;\r\n            searchMessage = \"搜索开始...\";\r\n            \r\n            // 执行搜索\r\n            ExecuteSearch();\r\n        }\r\n    }\r\n\r\n    private bool ValidateSearch()\r\n    {\r\n        bool isValid = true;\r\n        \r\n        if (string.IsNullOrEmpty(searchQuery))\r\n        {\r\n            Debug.LogError(\"搜索查询不能为空\");\r\n            isValid = false;\r\n        }\r\n        \r\n        if (maxResults <= 0)\r\n        {\r\n            Debug.LogError(\"最大结果数必须大于0\");\r\n            isValid = false;\r\n        }\r\n        \r\n        return isValid;\r\n    }\r\n\r\n    private void ExecuteSearch()\r\n    {\r\n        try\r\n        {\r\n            // 创建搜索上下文\r\n            searchContext = SearchService.CreateContext(searchQuery, searchFlags);\r\n            \r\n            // 设置搜索提供者\r\n            SetSearchProvider();\r\n            \r\n            // 设置搜索过滤器\r\n            SetSearchFilters();\r\n            \r\n            // 执行搜索\r\n            SearchService.Request(searchContext, OnSearchCompleted, maxResults);\r\n            \r\n            Debug.Log($\"开始搜索: {searchQuery}\");\r\n        }\r\n        catch (System.Exception e)\r\n        {\r\n            Debug.LogError($\"搜索失败: {e.Message}\");\r\n            OnSearchError(e);\r\n        }\r\n    }\r\n\r\n    private void SetSearchProvider()\r\n    {\r\n        switch (currentProvider)\r\n        {\r\n            case SearchProvider.Asset:\r\n                searchContext.providers = new[] { \"asset\" };\r\n                totalAssetSearches++;\r\n                break;\r\n            case SearchProvider.Scene:\r\n                searchContext.providers = new[] { \"scene\" };\r\n                totalSceneSearches++;\r\n                break;\r\n            case SearchProvider.Global:\r\n                searchContext.providers = new[] { \"global\" };\r\n                totalGlobalSearches++;\r\n                break;\r\n            case SearchProvider.Custom:\r\n                searchContext.providers = new[] { \"custom\" };\r\n                totalCustomSearches++;\r\n                break;\r\n        }\r\n        \r\n        // 更新统计\r\n        string providerName = currentProvider.ToString();\r\n        if (!searchProviderCount.ContainsKey(providerName))\r\n        {\r\n            searchProviderCount[providerName] = 0;\r\n        }\r\n        searchProviderCount[providerName]++;\r\n    }\r\n\r\n    private void SetSearchFilters()\r\n    {\r\n        if (!enableAdvancedFiltering) return;\r\n        \r\n        // 设置类型过滤器\r\n        if (typeFilters.Length > 0)\r\n        {\r\n            searchContext.filterId = string.Join(\",\", typeFilters);\r\n        }\r\n        \r\n        // 设置路径过滤器\r\n        if (pathFilters.Length > 0)\r\n        {\r\n            // 这里可以设置路径过滤器\r\n        }\r\n    }\r\n\r\n    private void OnSearchCompleted(SearchContext context, IList<SearchItem> items)\r\n    {\r\n        searchTime = Time.realtimeSinceStartup - searchStartTime;\r\n        isSearching = false;\r\n        searchProgress = 1f;\r\n        searchMessage = \"搜索完成\";\r\n        \r\n        // 处理搜索结果\r\n        ProcessSearchResults(items);\r\n        \r\n        // 更新性能数据\r\n        UpdateSearchPerformance();\r\n        \r\n        // 记录到历史\r\n        if (enableSearchHistory)\r\n        {\r\n            AddSearchHistoryEntry();\r\n        }\r\n        \r\n        if (enableSearchLogging)\r\n        {\r\n            Debug.Log($\"搜索完成: {totalResults} 个结果, 耗时: {searchTime:F3}秒\");\r\n        }\r\n    }\r\n\r\n    private void OnSearchError(System.Exception exception)\r\n    {\r\n        searchTime = Time.realtimeSinceStartup - searchStartTime;\r\n        isSearching = false;\r\n        searchProgress = 0f;\r\n        searchMessage = $\"搜索失败: {exception.Message}\";\r\n        \r\n        Debug.LogError($\"搜索过程中发生错误: {exception}\");\r\n    }\r\n\r\n    private void ProcessSearchResults(IList<SearchItem> items)\r\n    {\r\n        searchResults = new SearchItem[items.Count];\r\n        items.CopyTo(searchResults, 0);\r\n        totalResults = items.Count;\r\n        \r\n        // 过滤结果\r\n        FilterSearchResults();\r\n        \r\n        // 提取结果信息\r\n        ExtractResultInfo();\r\n        \r\n        // 更新统计\r\n        UpdateSearchStatistics();\r\n    }\r\n\r\n    private void FilterSearchResults()\r\n    {\r\n        if (searchFilters.Length == 0 && excludeFilters.Length == 0)\r\n        {\r\n            filteredSearchResults = searchResults;\r\n            filteredResults = totalResults;\r\n            return;\r\n        }\r\n        \r\n        List<SearchItem> filtered = new List<SearchItem>();\r\n        \r\n        foreach (var item in searchResults)\r\n        {\r\n            bool shouldInclude = true;\r\n            \r\n            // 应用包含过滤器\r\n            if (searchFilters.Length > 0)\r\n            {\r\n                shouldInclude = false;\r\n                foreach (string filter in searchFilters)\r\n                {\r\n                    if (item.label.ToLower().Contains(filter.ToLower()) ||\r\n                        item.id.ToLower().Contains(filter.ToLower()))\r\n                    {\r\n                        shouldInclude = true;\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n            \r\n            // 应用排除过滤器\r\n            if (shouldInclude && excludeFilters.Length > 0)\r\n            {\r\n                foreach (string filter in excludeFilters)\r\n                {\r\n                    if (item.label.ToLower().Contains(filter.ToLower()) ||\r\n                        item.id.ToLower().Contains(filter.ToLower()))\r\n                    {\r\n                        shouldInclude = false;\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n            \r\n            if (shouldInclude)\r\n            {\r\n                filtered.Add(item);\r\n            }\r\n        }\r\n        \r\n        filteredSearchResults = filtered.ToArray();\r\n        filteredResults = filtered.Count;\r\n    }\r\n\r\n    private void ExtractResultInfo()\r\n    {\r\n        resultPaths = new string[filteredSearchResults.Length];\r\n        resultTypes = new string[filteredSearchResults.Length];\r\n        resultLabels = new string[filteredSearchResults.Length];\r\n        \r\n        for (int i = 0; i < filteredSearchResults.Length; i++)\r\n        {\r\n            var item = filteredSearchResults[i];\r\n            resultPaths[i] = item.id;\r\n            resultTypes[i] = item.type?.ToString() ?? \"Unknown\";\r\n            resultLabels[i] = item.label;\r\n        }\r\n    }\r\n\r\n    private void UpdateSearchStatistics()\r\n    {\r\n        foreach (var item in filteredSearchResults)\r\n        {\r\n            string type = item.type?.ToString() ?? \"Unknown\";\r\n            if (!searchTypeCount.ContainsKey(type))\r\n            {\r\n                searchTypeCount[type] = 0;\r\n            }\r\n            searchTypeCount[type]++;\r\n        }\r\n    }\r\n\r\n    private void UpdateSearchPerformance()\r\n    {\r\n        if (enablePerformanceMonitoring)\r\n        {\r\n            searchTimeHistory[searchTimeIndex] = searchTime;\r\n            searchTimeIndex = (searchTimeIndex + 1) % 100;\r\n            \r\n            totalSearchTime += searchTime;\r\n            totalSearchCount++;\r\n            \r\n            if (searchTime > maxSearchTime)\r\n            {\r\n                maxSearchTime = searchTime;\r\n            }\r\n        }\r\n    }\r\n\r\n    private void AddSearchHistoryEntry()\r\n    {\r\n        var entry = new SearchHistoryEntry\r\n        {\r\n            timestamp = System.DateTime.Now.ToString(),\r\n            query = searchQuery,\r\n            provider = currentProvider.ToString(),\r\n            totalResults = totalResults,\r\n            filteredResults = filteredResults,\r\n            searchTime = searchTime,\r\n            success = !string.IsNullOrEmpty(searchMessage) && !searchMessage.Contains(\"失败\")\r\n        };\r\n        \r\n        searchHistory[searchHistoryIndex] = entry;\r\n        searchHistoryIndex = (searchHistoryIndex + 1) % searchHistory.Length;\r\n    }\r\n\r\n    public void ClearSearchResults()\r\n    {\r\n        searchResults = new SearchItem[0];\r\n        filteredSearchResults = new SearchItem[0];\r\n        resultPaths = new string[0];\r\n        resultTypes = new string[0];\r\n        resultLabels = new string[0];\r\n        totalResults = 0;\r\n        filteredResults = 0;\r\n        \r\n        Debug.Log(\"搜索结果已清除\");\r\n    }\r\n\r\n    public void SetSearchQuery(string query)\r\n    {\r\n        searchQuery = query;\r\n        Debug.Log($\"搜索查询已设置: {query}\");\r\n    }\r\n\r\n    public void SetSearchProvider(SearchProvider provider)\r\n    {\r\n        currentProvider = provider;\r\n        Debug.Log($\"搜索提供者已设置: {provider}\");\r\n    }\r\n\r\n    public void AddSearchFilter(string filter)\r\n    {\r\n        List<string> filters = new List<string>(searchFilters);\r\n        if (!filters.Contains(filter))\r\n        {\r\n            filters.Add(filter);\r\n            searchFilters = filters.ToArray();\r\n            Debug.Log($\"搜索过滤器已添加: {filter}\");\r\n        }\r\n    }\r\n\r\n    public void RemoveSearchFilter(string filter)\r\n    {\r\n        List<string> filters = new List<string>(searchFilters);\r\n        if (filters.Remove(filter))\r\n        {\r\n            searchFilters = filters.ToArray();\r\n            Debug.Log($\"搜索过滤器已移除: {filter}\");\r\n        }\r\n    }\r\n\r\n    public void AddExcludeFilter(string filter)\r\n    {\r\n        List<string> filters = new List<string>(excludeFilters);\r\n        if (!filters.Contains(filter))\r\n        {\r\n            filters.Add(filter);\r\n            excludeFilters = filters.ToArray();\r\n            Debug.Log($\"排除过滤器已添加: {filter}\");\r\n        }\r\n    }\r\n\r\n    public void RemoveExcludeFilter(string filter)\r\n    {\r\n        List<string> filters = new List<string>(excludeFilters);\r\n        if (filters.Remove(filter))\r\n        {\r\n            excludeFilters = filters.ToArray();\r\n            Debug.Log($\"排除过滤器已移除: {filter}\");\r\n        }\r\n    }\r\n\r\n    public void GenerateSearchReport()\r\n    {\r\n        Debug.Log(\"=== 搜索系统报告 ===\");\r\n        Debug.Log($\"搜索系统状态: {searchStatus}\");\r\n        Debug.Log($\"当前搜索提供者: {currentProvider}\");\r\n        Debug.Log($\"搜索查询: {searchQuery}\");\r\n        Debug.Log($\"搜索标志: {searchFlags}\");\r\n        Debug.Log($\"最大结果数: {maxResults}\");\r\n        Debug.Log($\"总结果数: {totalResults}\");\r\n        Debug.Log($\"过滤后结果数: {filteredResults}\");\r\n        Debug.Log($\"搜索时间: {searchTime:F3}秒\");\r\n        Debug.Log($\"总搜索次数: {totalSearchCount}\");\r\n        Debug.Log($\"平均搜索时间: {averageSearchTime:F3}秒\");\r\n        Debug.Log($\"最大搜索时间: {maxSearchTime:F3}秒\");\r\n        Debug.Log($\"总搜索时间: {totalSearchTime:F3}秒\");\r\n        \r\n        Debug.Log(\"=== 搜索类型统计 ===\");\r\n        foreach (var kvp in searchTypeCount)\r\n        {\r\n            Debug.Log($\"{kvp.Key}: {kvp.Value} 个\");\r\n        }\r\n        \r\n        Debug.Log(\"=== 搜索提供者统计 ===\");\r\n        foreach (var kvp in searchProviderCount)\r\n        {\r\n            Debug.Log($\"{kvp.Key}: {kvp.Value} 次\");\r\n        }\r\n        \r\n        Debug.Log(\"=== 搜索结果 ===\");\r\n        for (int i = 0; i < Mathf.Min(filteredSearchResults.Length, 10); i++)\r\n        {\r\n            var item = filteredSearchResults[i];\r\n            Debug.Log($\"{i + 1}. {item.label} ({item.type}) - {item.id}\");\r\n        }\r\n    }\r\n\r\n    public void ClearSearchHistory()\r\n    {\r\n        searchHistory = new SearchHistoryEntry[10];\r\n        searchHistoryIndex = 0;\r\n        Debug.Log(\"搜索历史已清除\");\r\n    }\r\n\r\n    public void ResetSearchStatistics()\r\n    {\r\n        searchTypeCount.Clear();\r\n        searchProviderCount.Clear();\r\n        totalSearchCount = 0;\r\n        totalSearchTime = 0f;\r\n        averageSearchTime = 0f;\r\n        maxSearchTime = 0f;\r\n        \r\n        Debug.Log(\"搜索统计已重置\");\r\n    }\r\n\r\n    private void OnDestroy()\r\n    {\r\n        SearchService.searchItemSelected -= OnSearchItemSelected;\r\n        SearchService.searchItemExecuted -= OnSearchItemExecuted;\r\n        \r\n        Debug.Log(\"搜索回调已清理\");\r\n    }\r\n\r\n    private void OnGUI()\r\n    {\r\n        GUILayout.BeginArea(new Rect(10, 10, 400, 800));\r\n        GUILayout.Label(\"Search 搜索系统演示\", UnityEditor.EditorStyles.boldLabel);\r\n        \r\n        GUILayout.Space(10);\r\n        GUILayout.Label(\"搜索系统配置:\");\r\n        enableSearchSystem = GUILayout.Toggle(enableSearchSystem, \"启用搜索系统\");\r\n        enableSearchLogging = GUILayout.Toggle(enableSearchLogging, \"启用搜索日志\");\r\n        enableSearchValidation = GUILayout.Toggle(enableSearchValidation, \"启用搜索验证\");\r\n        enableSearchPerformance = GUILayout.Toggle(enableSearchPerformance, \"启用搜索性能监控\");\r\n        enableSearchHistory = GUILayout.Toggle(enableSearchHistory, \"启用搜索历史记录\");\r\n        \r\n        GUILayout.Space(10);\r\n        GUILayout.Label(\"搜索配置:\");\r\n        searchQuery = GUILayout.TextField(\"搜索查询\", searchQuery);\r\n        currentProvider = (SearchProvider)System.Enum.Parse(typeof(SearchProvider), GUILayout.TextField(\"搜索提供者\", currentProvider.ToString()));\r\n        maxResults = int.TryParse(GUILayout.TextField(\"最大结果数\", maxResults.ToString()), out var max) ? max : maxResults;\r\n        enableFuzzySearch = GUILayout.Toggle(enableFuzzySearch, \"启用模糊搜索\");\r\n        enableRegexSearch = GUILayout.Toggle(enableRegexSearch, \"启用正则表达式搜索\");\r\n        enableCaseSensitive = GUILayout.Toggle(enableCaseSensitive, \"启用大小写敏感\");\r\n        \r\n        GUILayout.Space(10);\r\n        GUILayout.Label(\"搜索状态:\");\r\n        GUILayout.Label($\"搜索状态: {searchStatus}\");\r\n        GUILayout.Label($\"是否正在搜索: {isSearching}\");\r\n        GUILayout.Label($\"搜索进度: {searchProgress * 100:F1}%\");\r\n        GUILayout.Label($\"搜索消息: {searchMessage}\");\r\n        GUILayout.Label($\"总结果数: {totalResults}\");\r\n        GUILayout.Label($\"过滤后结果数: {filteredResults}\");\r\n        GUILayout.Label($\"搜索时间: {searchTime:F3}秒\");\r\n        GUILayout.Label($\"总搜索次数: {totalSearchCount}\");\r\n        GUILayout.Label($\"平均搜索时间: {averageSearchTime:F3}秒\");\r\n        GUILayout.Label($\"最大搜索时间: {maxSearchTime:F3}秒\");\r\n        \r\n        GUILayout.Space(10);\r\n        \r\n        if (GUILayout.Button(\"开始搜索\"))\r\n        {\r\n            StartSearch();\r\n        }\r\n        \r\n        if (GUILayout.Button(\"清除搜索结果\"))\r\n        {\r\n            ClearSearchResults();\r\n        }\r\n        \r\n        if (GUILayout.Button(\"生成搜索报告\"))\r\n        {\r\n            GenerateSearchReport();\r\n        }\r\n        \r\n        if (GUILayout.Button(\"清除搜索历史\"))\r\n        {\r\n            ClearSearchHistory();\r\n        }\r\n        \r\n        if (GUILayout.Button(\"重置搜索统计\"))\r\n        {\r\n            ResetSearchStatistics();\r\n        }\r\n        \r\n        GUILayout.Space(10);\r\n        GUILayout.Label(\"搜索结果:\");\r\n        for (int i = 0; i < Mathf.Min(filteredSearchResults.Length, 5); i++)\r\n        {\r\n            var item = filteredSearchResults[i];\r\n            GUILayout.Label($\"{i + 1}. {item.label}\");\r\n        }\r\n        \r\n        GUILayout.Space(10);\r\n        GUILayout.Label(\"搜索历史:\");\r\n        for (int i = 0; i < searchHistory.Length; i++)\r\n        {\r\n            if (searchHistory[i] != null && !string.IsNullOrEmpty(searchHistory[i].timestamp))\r\n            {\r\n                var entry = searchHistory[i];\r\n                string status = entry.success ? \"成功\" : \"失败\";\r\n                GUILayout.Label($\"{entry.timestamp} - {entry.query} - {status} - {entry.searchTime:F3}s\");\r\n            }\r\n        }\r\n        \r\n        GUILayout.EndArea();\r\n    }\r\n}\r\n\r\npublic enum SearchProvider\r\n{\r\n    Asset,\r\n    Scene,\r\n    Global,\r\n    Custom\r\n}\r\n\r\npublic enum SearchStatus\r\n{\r\n    Idle,\r\n    Searching,\r\n    Completed,\r\n    Failed\r\n}\r\n\r\n[System.Serializable]\r\npublic class SearchHistoryEntry\r\n{\r\n    public string timestamp;\r\n    public string query;\r\n    public string provider;\r\n    public int totalResults;\r\n    public int filteredResults;\r\n    public float searchTime;\r\n    public bool success;\r\n} "
        }
    ]
}