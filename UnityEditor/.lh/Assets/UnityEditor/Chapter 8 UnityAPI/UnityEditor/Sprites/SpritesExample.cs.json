{
    "sourceFile": "Assets/UnityEditor/Chapter 8 UnityAPI/UnityEditor/Sprites/SpritesExample.cs",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1750941093204,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1750941093204,
            "name": "Commit-0",
            "content": "using UnityEngine;\r\nusing UnityEditor;\r\nusing UnityEditor.Sprites;\r\nusing UnityEngine.U2D;\r\nusing System.Collections.Generic;\r\n\r\nnamespace UnityEditor.Sprites.Examples\r\n{\r\n    /// <summary>\r\n    /// UnityEditor.Sprites 命名空间使用示例\r\n    /// 演示精灵编辑器系统的创建、编辑和管理功能\r\n    /// </summary>\r\n    public class SpritesExample : MonoBehaviour\r\n    {\r\n        [Header(\"精灵配置\")]\r\n        [SerializeField] private bool enableSpriteEditor = true;\r\n        [SerializeField] private string spriteName = \"CustomSprite\";\r\n        [SerializeField] private Vector2 spriteSize = new Vector2(64, 64);\r\n        [SerializeField] private SpriteAlignment alignment = SpriteAlignment.Center;\r\n        \r\n        [Header(\"精灵状态\")]\r\n        [SerializeField] private int spriteCount = 0;\r\n        [SerializeField] private string currentSprite = \"\";\r\n        [SerializeField] private bool isSpriteValid = false;\r\n        \r\n        [Header(\"目标对象\")]\r\n        [SerializeField] private Texture2D sourceTexture;\r\n        [SerializeField] private SpriteRenderer spriteRenderer;\r\n        [SerializeField] private SpriteAtlas spriteAtlas;\r\n        \r\n        [Header(\"精灵数据\")]\r\n        [SerializeField] private List<Sprite> availableSprites = new List<Sprite>();\r\n        [SerializeField] private Sprite currentSpriteAsset;\r\n        \r\n        private Dictionary<string, Sprite> spriteRegistry = new Dictionary<string, Sprite>();\r\n        \r\n        /// <summary>\r\n        /// 初始化精灵系统\r\n        /// </summary>\r\n        private void Start()\r\n        {\r\n            InitializeSpriteSystem();\r\n        }\r\n        \r\n        /// <summary>\r\n        /// 初始化精灵系统\r\n        /// </summary>\r\n        private void InitializeSpriteSystem()\r\n        {\r\n            if (!enableSpriteEditor)\r\n            {\r\n                Debug.Log(\"精灵编辑器系统已禁用\");\r\n                return;\r\n            }\r\n            \r\n            try\r\n            {\r\n                // 加载可用精灵\r\n                LoadAvailableSprites();\r\n                \r\n                // 创建默认精灵\r\n                CreateDefaultSprites();\r\n                \r\n                Debug.Log(\"精灵编辑器系统初始化完成\");\r\n            }\r\n            catch (System.Exception e)\r\n            {\r\n                Debug.LogError($\"精灵编辑器系统初始化失败: {e.Message}\");\r\n            }\r\n        }\r\n        \r\n        /// <summary>\r\n        /// 加载可用精灵\r\n        /// </summary>\r\n        private void LoadAvailableSprites()\r\n        {\r\n            availableSprites.Clear();\r\n            spriteRegistry.Clear();\r\n            \r\n            // 获取所有精灵资源\r\n            string[] spriteGuids = AssetDatabase.FindAssets(\"t:Sprite\");\r\n            foreach (string guid in spriteGuids)\r\n            {\r\n                string path = AssetDatabase.GUIDToAssetPath(guid);\r\n                Sprite sprite = AssetDatabase.LoadAssetAtPath<Sprite>(path);\r\n                if (sprite != null)\r\n                {\r\n                    availableSprites.Add(sprite);\r\n                    spriteRegistry[sprite.name] = sprite;\r\n                }\r\n            }\r\n            \r\n            spriteCount = availableSprites.Count;\r\n            Debug.Log($\"加载了 {spriteCount} 个精灵\");\r\n        }\r\n        \r\n        /// <summary>\r\n        /// 创建默认精灵\r\n        /// </summary>\r\n        private void CreateDefaultSprites()\r\n        {\r\n            // 创建简单的彩色精灵\r\n            CreateColorSprite(\"RedSprite\", Color.red);\r\n            CreateColorSprite(\"GreenSprite\", Color.green);\r\n            CreateColorSprite(\"BlueSprite\", Color.blue);\r\n        }\r\n        \r\n        /// <summary>\r\n        /// 创建彩色精灵\r\n        /// </summary>\r\n        private void CreateColorSprite(string spriteName, Color color)\r\n        {\r\n            // 创建纹理\r\n            Texture2D texture = new Texture2D((int)spriteSize.x, (int)spriteSize.y);\r\n            Color[] pixels = new Color[texture.width * texture.height];\r\n            \r\n            for (int i = 0; i < pixels.Length; i++)\r\n            {\r\n                pixels[i] = color;\r\n            }\r\n            \r\n            texture.SetPixels(pixels);\r\n            texture.Apply();\r\n            \r\n            // 创建精灵\r\n            Sprite sprite = Sprite.Create(texture, new Rect(0, 0, texture.width, texture.height), \r\n                Vector2.zero, 100, 0, SpriteMeshType.FullRect, Vector4.zero);\r\n            sprite.name = spriteName;\r\n            \r\n            // 保存精灵\r\n            SaveSprite(sprite, spriteName);\r\n            \r\n            // 添加到注册表\r\n            availableSprites.Add(sprite);\r\n            spriteRegistry[spriteName] = sprite;\r\n            \r\n            Debug.Log($\"彩色精灵已创建: {spriteName}\");\r\n        }\r\n        \r\n        /// <summary>\r\n        /// 保存精灵\r\n        /// </summary>\r\n        private void SaveSprite(Sprite sprite, string fileName)\r\n        {\r\n            string path = $\"Assets/Sprites/{fileName}.png\";\r\n            \r\n            // 确保目录存在\r\n            string directory = System.IO.Path.GetDirectoryName(path);\r\n            if (!System.IO.Directory.Exists(directory))\r\n            {\r\n                System.IO.Directory.CreateDirectory(directory);\r\n            }\r\n            \r\n            // 保存纹理\r\n            byte[] pngData = sprite.texture.EncodeToPNG();\r\n            System.IO.File.WriteAllBytes(path, pngData);\r\n            \r\n            // 刷新资源数据库\r\n            AssetDatabase.Refresh();\r\n            \r\n            // 设置精灵导入设置\r\n            TextureImporter importer = AssetImporter.GetAtPath(path) as TextureImporter;\r\n            if (importer != null)\r\n            {\r\n                importer.textureType = TextureImporterType.Sprite;\r\n                importer.spriteAlignment = (int)alignment;\r\n                importer.spritePixelsPerUnit = 100;\r\n                importer.SaveAndReimport();\r\n            }\r\n            \r\n            Debug.Log($\"精灵已保存: {path}\");\r\n        }\r\n        \r\n        /// <summary>\r\n        /// 从纹理创建精灵\r\n        /// </summary>\r\n        public Sprite CreateSpriteFromTexture(Texture2D texture, string spriteName)\r\n        {\r\n            if (texture == null)\r\n            {\r\n                Debug.LogError(\"纹理为空\");\r\n                return null;\r\n            }\r\n            \r\n            // 创建精灵\r\n            Sprite sprite = Sprite.Create(texture, new Rect(0, 0, texture.width, texture.height), \r\n                Vector2.zero, 100, 0, SpriteMeshType.FullRect, Vector4.zero);\r\n            sprite.name = spriteName;\r\n            \r\n            // 保存精灵\r\n            SaveSprite(sprite, spriteName);\r\n            \r\n            // 添加到注册表\r\n            availableSprites.Add(sprite);\r\n            spriteRegistry[spriteName] = sprite;\r\n            spriteCount = availableSprites.Count;\r\n            \r\n            Debug.Log($\"从纹理创建精灵: {spriteName}\");\r\n            return sprite;\r\n        }\r\n        \r\n        /// <summary>\r\n        /// 创建精灵图集\r\n        /// </summary>\r\n        public SpriteAtlas CreateSpriteAtlas(string atlasName, Sprite[] sprites)\r\n        {\r\n            if (sprites == null || sprites.Length == 0)\r\n            {\r\n                Debug.LogError(\"精灵数组为空\");\r\n                return null;\r\n            }\r\n            \r\n            // 创建精灵图集\r\n            SpriteAtlas atlas = new SpriteAtlas();\r\n            \r\n            // 设置图集参数\r\n            SpriteAtlasPackingSettings packingSettings = new SpriteAtlasPackingSettings()\r\n            {\r\n                enableRotation = false,\r\n                enableTightPacking = true,\r\n                padding = 2\r\n            };\r\n            atlas.SetPackingSettings(packingSettings);\r\n            \r\n            // 设置纹理参数\r\n            SpriteAtlasTextureSettings textureSettings = new SpriteAtlasTextureSettings()\r\n            {\r\n                readable = false,\r\n                generateMipMaps = false,\r\n                sRGB = true,\r\n                filterMode = FilterMode.Bilinear\r\n            };\r\n            atlas.SetTextureSettings(textureSettings);\r\n            \r\n            // 添加精灵\r\n            atlas.Add(sprites);\r\n            \r\n            // 保存图集\r\n            string path = $\"Assets/Sprites/{atlasName}.spriteatlas\";\r\n            string directory = System.IO.Path.GetDirectoryName(path);\r\n            if (!System.IO.Directory.Exists(directory))\r\n            {\r\n                System.IO.Directory.CreateDirectory(directory);\r\n            }\r\n            \r\n            AssetDatabase.CreateAsset(atlas, path);\r\n            AssetDatabase.SaveAssets();\r\n            \r\n            Debug.Log($\"精灵图集已创建: {atlasName}\");\r\n            return atlas;\r\n        }\r\n        \r\n        /// <summary>\r\n        /// 设置精灵属性\r\n        /// </summary>\r\n        public void SetSpriteProperties(Sprite sprite, Vector2 pivot, SpriteAlignment alignment)\r\n        {\r\n            if (sprite == null)\r\n            {\r\n                Debug.LogError(\"精灵为空\");\r\n                return;\r\n            }\r\n            \r\n            string path = AssetDatabase.GetAssetPath(sprite);\r\n            TextureImporter importer = AssetImporter.GetAtPath(path) as TextureImporter;\r\n            \r\n            if (importer != null)\r\n            {\r\n                importer.spriteAlignment = (int)alignment;\r\n                importer.spritePivot = pivot;\r\n                importer.SaveAndReimport();\r\n                \r\n                Debug.Log($\"精灵属性已设置: {sprite.name}\");\r\n            }\r\n        }\r\n        \r\n        /// <summary>\r\n        /// 获取精灵信息\r\n        /// </summary>\r\n        public string GetSpriteInfo(Sprite sprite)\r\n        {\r\n            if (sprite == null)\r\n                return \"精灵为空\";\r\n            \r\n            return $\"名称: {sprite.name}, 大小: {sprite.rect.size}, 像素密度: {sprite.pixelsPerUnit}, 边界: {sprite.bounds}\";\r\n        }\r\n        \r\n        /// <summary>\r\n        /// 验证精灵有效性\r\n        /// </summary>\r\n        public bool ValidateSprite(Sprite sprite)\r\n        {\r\n            return sprite != null && sprite.texture != null;\r\n        }\r\n        \r\n        /// <summary>\r\n        /// 导出精灵\r\n        /// </summary>\r\n        public void ExportSprite(Sprite sprite)\r\n        {\r\n            if (sprite == null)\r\n            {\r\n                Debug.LogWarning(\"精灵为空\");\r\n                return;\r\n            }\r\n            \r\n            string exportPath = EditorUtility.SaveFilePanel(\"导出精灵\", \"\", sprite.name, \"png\");\r\n            if (string.IsNullOrEmpty(exportPath))\r\n                return;\r\n            \r\n            try\r\n            {\r\n                // 创建纹理副本\r\n                Texture2D texture = sprite.texture;\r\n                Rect rect = sprite.rect;\r\n                \r\n                // 提取精灵区域\r\n                Color[] pixels = texture.GetPixels((int)rect.x, (int)rect.y, (int)rect.width, (int)rect.height);\r\n                Texture2D spriteTexture = new Texture2D((int)rect.width, (int)rect.height);\r\n                spriteTexture.SetPixels(pixels);\r\n                spriteTexture.Apply();\r\n                \r\n                // 保存为PNG\r\n                byte[] pngData = spriteTexture.EncodeToPNG();\r\n                System.IO.File.WriteAllBytes(exportPath, pngData);\r\n                \r\n                Debug.Log($\"精灵已导出到: {exportPath}\");\r\n            }\r\n            catch (System.Exception e)\r\n            {\r\n                Debug.LogError($\"导出精灵失败: {e.Message}\");\r\n            }\r\n        }\r\n        \r\n        /// <summary>\r\n        /// 导入精灵\r\n        /// </summary>\r\n        public void ImportSprite()\r\n        {\r\n            string importPath = EditorUtility.OpenFilePanel(\"导入精灵\", \"\", \"png,jpg,jpeg\");\r\n            if (string.IsNullOrEmpty(importPath))\r\n                return;\r\n            \r\n            try\r\n            {\r\n                string fileName = System.IO.Path.GetFileNameWithoutExtension(importPath);\r\n                string targetPath = $\"Assets/Sprites/{fileName}.png\";\r\n                \r\n                // 确保目录存在\r\n                string directory = System.IO.Path.GetDirectoryName(targetPath);\r\n                if (!System.IO.Directory.Exists(directory))\r\n                {\r\n                    System.IO.Directory.CreateDirectory(directory);\r\n                }\r\n                \r\n                // 复制文件\r\n                System.IO.File.Copy(importPath, targetPath, true);\r\n                AssetDatabase.Refresh();\r\n                \r\n                // 设置导入设置\r\n                TextureImporter importer = AssetImporter.GetAtPath(targetPath) as TextureImporter;\r\n                if (importer != null)\r\n                {\r\n                    importer.textureType = TextureImporterType.Sprite;\r\n                    importer.spriteAlignment = (int)alignment;\r\n                    importer.spritePixelsPerUnit = 100;\r\n                    importer.SaveAndReimport();\r\n                }\r\n                \r\n                // 重新加载精灵\r\n                LoadAvailableSprites();\r\n                \r\n                Debug.Log($\"精灵已导入: {targetPath}\");\r\n            }\r\n            catch (System.Exception e)\r\n            {\r\n                Debug.LogError($\"导入精灵失败: {e.Message}\");\r\n            }\r\n        }\r\n        \r\n        /// <summary>\r\n        /// 获取所有精灵名称\r\n        /// </summary>\r\n        public string[] GetAllSpriteNames()\r\n        {\r\n            return availableSprites.Select(s => s.name).ToArray();\r\n        }\r\n        \r\n        /// <summary>\r\n        /// 应用精灵到渲染器\r\n        /// </summary>\r\n        public void ApplySpriteToRenderer(Sprite sprite, SpriteRenderer renderer)\r\n        {\r\n            if (sprite == null || renderer == null)\r\n            {\r\n                Debug.LogWarning(\"精灵或渲染器为空\");\r\n                return;\r\n            }\r\n            \r\n            renderer.sprite = sprite;\r\n            currentSprite = sprite.name;\r\n            currentSpriteAsset = sprite;\r\n            \r\n            Debug.Log($\"精灵已应用到渲染器: {sprite.name}\");\r\n        }\r\n        \r\n        /// <summary>\r\n        /// 在编辑器中显示GUI\r\n        /// </summary>\r\n        private void OnGUI()\r\n        {\r\n            if (!Application.isPlaying) return;\r\n            \r\n            GUILayout.BeginArea(new Rect(10, 10, 500, 700));\r\n            GUILayout.Label(\"UnityEditor.Sprites 示例\", EditorStyles.boldLabel);\r\n            \r\n            GUILayout.Space(10);\r\n            GUILayout.Label($\"状态: {(enableSpriteEditor ? \"启用\" : \"禁用\")}\");\r\n            GUILayout.Label($\"精灵数量: {spriteCount}\");\r\n            GUILayout.Label($\"当前精灵: {currentSprite}\");\r\n            GUILayout.Label($\"精灵有效: {(isSpriteValid ? \"是\" : \"否\")}\");\r\n            \r\n            GUILayout.Space(10);\r\n            GUILayout.Label(\"精灵创建\", EditorStyles.boldLabel);\r\n            \r\n            spriteName = GUILayout.TextField(\"精灵名称\", spriteName);\r\n            spriteSize = EditorGUILayout.Vector2Field(\"精灵大小\", spriteSize);\r\n            alignment = (SpriteAlignment)EditorGUILayout.EnumPopup(\"对齐方式\", alignment);\r\n            \r\n            if (GUILayout.Button(\"创建红色精灵\"))\r\n            {\r\n                CreateColorSprite(spriteName + \"_Red\", Color.red);\r\n            }\r\n            \r\n            if (GUILayout.Button(\"创建绿色精灵\"))\r\n            {\r\n                CreateColorSprite(spriteName + \"_Green\", Color.green);\r\n            }\r\n            \r\n            if (GUILayout.Button(\"创建蓝色精灵\"))\r\n            {\r\n                CreateColorSprite(spriteName + \"_Blue\", Color.blue);\r\n            }\r\n            \r\n            GUILayout.Space(10);\r\n            GUILayout.Label(\"精灵管理\", EditorStyles.boldLabel);\r\n            \r\n            sourceTexture = (Texture2D)EditorGUILayout.ObjectField(\"源纹理\", sourceTexture, typeof(Texture2D), false);\r\n            \r\n            if (GUILayout.Button(\"从纹理创建精灵\"))\r\n            {\r\n                if (sourceTexture != null)\r\n                {\r\n                    CreateSpriteFromTexture(sourceTexture, spriteName);\r\n                }\r\n            }\r\n            \r\n            string[] spriteNames = GetAllSpriteNames();\r\n            if (spriteNames.Length > 0)\r\n            {\r\n                int selectedIndex = EditorGUILayout.Popup(\"选择精灵\", 0, spriteNames);\r\n                if (selectedIndex >= 0 && selectedIndex < availableSprites.Count)\r\n                {\r\n                    currentSpriteAsset = availableSprites[selectedIndex];\r\n                    \r\n                    GUILayout.Label(GetSpriteInfo(currentSpriteAsset));\r\n                    \r\n                    if (GUILayout.Button(\"导出精灵\"))\r\n                    {\r\n                        ExportSprite(currentSpriteAsset);\r\n                    }\r\n                    \r\n                    if (GUILayout.Button(\"验证精灵\"))\r\n                    {\r\n                        isSpriteValid = ValidateSprite(currentSpriteAsset);\r\n                        Debug.Log($\"精灵验证结果: {(isSpriteValid ? \"有效\" : \"无效\")}\");\r\n                    }\r\n                }\r\n            }\r\n            \r\n            GUILayout.Space(10);\r\n            GUILayout.Label(\"精灵应用\", EditorStyles.boldLabel);\r\n            \r\n            spriteRenderer = (SpriteRenderer)EditorGUILayout.ObjectField(\"精灵渲染器\", spriteRenderer, typeof(SpriteRenderer), true);\r\n            \r\n            if (GUILayout.Button(\"应用当前精灵到渲染器\"))\r\n            {\r\n                if (currentSpriteAsset != null && spriteRenderer != null)\r\n                {\r\n                    ApplySpriteToRenderer(currentSpriteAsset, spriteRenderer);\r\n                }\r\n            }\r\n            \r\n            GUILayout.Space(10);\r\n            GUILayout.Label(\"导入导出\", EditorStyles.boldLabel);\r\n            \r\n            if (GUILayout.Button(\"导入精灵\"))\r\n            {\r\n                ImportSprite();\r\n            }\r\n            \r\n            if (GUILayout.Button(\"刷新精灵列表\"))\r\n            {\r\n                LoadAvailableSprites();\r\n            }\r\n            \r\n            GUILayout.Space(10);\r\n            GUILayout.Label(\"配置\", EditorStyles.boldLabel);\r\n            \r\n            enableSpriteEditor = EditorGUILayout.Toggle(\"启用精灵编辑器\", enableSpriteEditor);\r\n            \r\n            GUILayout.EndArea();\r\n        }\r\n    }\r\n} "
        }
    ]
}