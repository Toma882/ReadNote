{
    "sourceFile": "Assets/UnityAPI/Chapter 1 Core/Time/TimeExamples.cs",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1750927866609,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1750927866609,
            "name": "Commit-0",
            "content": "using UnityEngine;\r\nusing System.Collections;\r\n\r\n/// <summary>\r\n/// Time API使用案例\r\n/// 演示Unity时间系统的各种功能\r\n/// </summary>\r\npublic class TimeExamples : MonoBehaviour\r\n{\r\n    [Header(\"时间控制\")]\r\n    [SerializeField] private float timeScale = 1f;\r\n    [SerializeField] private bool useFixedTimeStep = true;\r\n    \r\n    [Header(\"计时器\")]\r\n    [SerializeField] private float timerDuration = 5f;\r\n    [SerializeField] private bool startTimerOnStart = true;\r\n    \r\n    [Header(\"帧率控制\")]\r\n    [SerializeField] private int targetFrameRate = 60;\r\n    [SerializeField] private bool limitFrameRate = false;\r\n    \r\n    private float timer;\r\n    private bool timerRunning;\r\n    private float startTime;\r\n    private int frameCount;\r\n    private float lastFrameTime;\r\n    \r\n    private void Start()\r\n    {\r\n        // 初始化时间系统\r\n        InitializeTimeSystem();\r\n        \r\n        // 演示各种Time API功能\r\n        DemonstrateTimeProperties();\r\n        DemonstrateTimeControl();\r\n        DemonstrateTimeMeasurement();\r\n        DemonstrateFrameRateControl();\r\n        \r\n        // 启动计时器\r\n        if (startTimerOnStart)\r\n        {\r\n            StartTimer();\r\n        }\r\n    }\r\n    \r\n    /// <summary>\r\n    /// 初始化时间系统\r\n    /// </summary>\r\n    private void InitializeTimeSystem()\r\n    {\r\n        // 设置目标帧率\r\n        if (limitFrameRate)\r\n        {\r\n            Application.targetFrameRate = targetFrameRate;\r\n        }\r\n        \r\n        // 设置时间缩放\r\n        Time.timeScale = timeScale;\r\n        \r\n        // 设置固定时间步长\r\n        if (useFixedTimeStep)\r\n        {\r\n            Time.fixedDeltaTime = 0.02f; // 50 FPS\r\n        }\r\n        \r\n        startTime = Time.time;\r\n        frameCount = 0;\r\n        lastFrameTime = Time.time;\r\n    }\r\n    \r\n    /// <summary>\r\n    /// 演示Time基础属性\r\n    /// </summary>\r\n    private void DemonstrateTimeProperties()\r\n    {\r\n        Debug.Log(\"=== Time基础属性示例 ===\");\r\n        \r\n        // 1. time - 游戏开始后的时间\r\n        Debug.Log($\"游戏时间: {Time.time:F2} 秒\");\r\n        \r\n        // 2. timeSinceLevelLoad - 当前关卡加载后的时间\r\n        Debug.Log($\"关卡时间: {Time.timeSinceLevelLoad:F2} 秒\");\r\n        \r\n        // 3. deltaTime - 上一帧到当前帧的时间间隔\r\n        Debug.Log($\"帧间隔: {Time.deltaTime:F4} 秒\");\r\n        \r\n        // 4. fixedDeltaTime - 固定时间步长\r\n        Debug.Log($\"固定时间步长: {Time.fixedDeltaTime:F4} 秒\");\r\n        \r\n        // 5. timeScale - 时间缩放\r\n        Debug.Log($\"时间缩放: {Time.timeScale:F2}\");\r\n        \r\n        // 6. frameCount - 总帧数\r\n        Debug.Log($\"总帧数: {Time.frameCount}\");\r\n        \r\n        // 7. realtimeSinceStartup - 真实时间\r\n        Debug.Log($\"真实时间: {Time.realtimeSinceStartup:F2} 秒\");\r\n        \r\n        // 8. unscaledDeltaTime - 不受时间缩放影响的帧间隔\r\n        Debug.Log($\"未缩放帧间隔: {Time.unscaledDeltaTime:F4} 秒\");\r\n        \r\n        // 9. unscaledTime - 不受时间缩放影响的游戏时间\r\n        Debug.Log($\"未缩放游戏时间: {Time.unscaledTime:F2} 秒\");\r\n    }\r\n    \r\n    /// <summary>\r\n    /// 演示时间控制功能\r\n    /// </summary>\r\n    private void DemonstrateTimeControl()\r\n    {\r\n        Debug.Log(\"=== 时间控制示例 ===\");\r\n        \r\n        // 1. 暂停游戏\r\n        Time.timeScale = 0f;\r\n        Debug.Log(\"游戏已暂停 (timeScale = 0)\");\r\n        \r\n        // 2. 慢动作\r\n        StartCoroutine(SlowMotionDemo());\r\n        \r\n        // 3. 快进\r\n        StartCoroutine(FastForwardDemo());\r\n        \r\n        // 4. 恢复正常速度\r\n        StartCoroutine(NormalSpeedDemo());\r\n    }\r\n    \r\n    /// <summary>\r\n    /// 慢动作演示\r\n    /// </summary>\r\n    private IEnumerator SlowMotionDemo()\r\n    {\r\n        yield return new WaitForSecondsRealtime(2f); // 使用真实时间等待\r\n        \r\n        Time.timeScale = 0.5f;\r\n        Debug.Log(\"慢动作模式 (timeScale = 0.5)\");\r\n        \r\n        yield return new WaitForSecondsRealtime(3f);\r\n    }\r\n    \r\n    /// <summary>\r\n    /// 快进演示\r\n    /// </summary>\r\n    private IEnumerator FastForwardDemo()\r\n    {\r\n        Time.timeScale = 2f;\r\n        Debug.Log(\"快进模式 (timeScale = 2.0)\");\r\n        \r\n        yield return new WaitForSecondsRealtime(3f);\r\n    }\r\n    \r\n    /// <summary>\r\n    /// 恢复正常速度演示\r\n    /// </summary>\r\n    private IEnumerator NormalSpeedDemo()\r\n    {\r\n        yield return new WaitForSecondsRealtime(6f);\r\n        \r\n        Time.timeScale = 1f;\r\n        Debug.Log(\"恢复正常速度 (timeScale = 1.0)\");\r\n    }\r\n    \r\n    /// <summary>\r\n    /// 演示时间测量功能\r\n    /// </summary>\r\n    private void DemonstrateTimeMeasurement()\r\n    {\r\n        Debug.Log(\"=== 时间测量示例 ===\");\r\n        \r\n        // 1. 测量代码执行时间\r\n        float startTime = Time.realtimeSinceStartup;\r\n        \r\n        // 模拟一些耗时操作\r\n        for (int i = 0; i < 1000000; i++)\r\n        {\r\n            Mathf.Sqrt(i);\r\n        }\r\n        \r\n        float endTime = Time.realtimeSinceStartup;\r\n        float executionTime = endTime - startTime;\r\n        \r\n        Debug.Log($\"代码执行时间: {executionTime:F4} 秒\");\r\n        \r\n        // 2. 创建计时器\r\n        StartCoroutine(TimerDemo());\r\n        \r\n        // 3. 创建延迟执行\r\n        StartCoroutine(DelayedExecutionDemo());\r\n    }\r\n    \r\n    /// <summary>\r\n    /// 计时器演示\r\n    /// </summary>\r\n    private IEnumerator TimerDemo()\r\n    {\r\n        Debug.Log(\"开始5秒计时器...\");\r\n        \r\n        float timer = 5f;\r\n        while (timer > 0)\r\n        {\r\n            yield return null; // 等待下一帧\r\n            timer -= Time.deltaTime;\r\n            Debug.Log($\"计时器剩余: {timer:F1} 秒\");\r\n        }\r\n        \r\n        Debug.Log(\"计时器结束!\");\r\n    }\r\n    \r\n    /// <summary>\r\n    /// 延迟执行演示\r\n    /// </summary>\r\n    private IEnumerator DelayedExecutionDemo()\r\n    {\r\n        Debug.Log(\"3秒后执行延迟操作...\");\r\n        \r\n        yield return new WaitForSeconds(3f);\r\n        Debug.Log(\"延迟操作执行完成!\");\r\n        \r\n        // 使用WaitForSecondsRealtime (不受时间缩放影响)\r\n        Debug.Log(\"2秒后执行真实时间延迟操作...\");\r\n        yield return new WaitForSecondsRealtime(2f);\r\n        Debug.Log(\"真实时间延迟操作执行完成!\");\r\n    }\r\n    \r\n    /// <summary>\r\n    /// 演示帧率控制\r\n    /// </summary>\r\n    private void DemonstrateFrameRateControl()\r\n    {\r\n        Debug.Log(\"=== 帧率控制示例 ===\");\r\n        \r\n        // 1. 设置目标帧率\r\n        Application.targetFrameRate = 30;\r\n        Debug.Log($\"设置目标帧率为: {Application.targetFrameRate} FPS\");\r\n        \r\n        // 2. 获取当前帧率\r\n        StartCoroutine(CalculateFrameRate());\r\n        \r\n        // 3. 动态调整帧率\r\n        StartCoroutine(DynamicFrameRateDemo());\r\n    }\r\n    \r\n    /// <summary>\r\n    /// 计算帧率\r\n    /// </summary>\r\n    private IEnumerator CalculateFrameRate()\r\n    {\r\n        while (true)\r\n        {\r\n            yield return new WaitForSeconds(1f);\r\n            \r\n            float currentTime = Time.time;\r\n            float deltaTime = currentTime - lastFrameTime;\r\n            float fps = 1f / deltaTime;\r\n            \r\n            Debug.Log($\"当前帧率: {fps:F1} FPS\");\r\n            \r\n            lastFrameTime = currentTime;\r\n        }\r\n    }\r\n    \r\n    /// <summary>\r\n    /// 动态帧率演示\r\n    /// </summary>\r\n    private IEnumerator DynamicFrameRateDemo()\r\n    {\r\n        yield return new WaitForSeconds(5f);\r\n        \r\n        // 降低帧率\r\n        Application.targetFrameRate = 15;\r\n        Debug.Log(\"降低帧率到 15 FPS\");\r\n        \r\n        yield return new WaitForSeconds(5f);\r\n        \r\n        // 提高帧率\r\n        Application.targetFrameRate = 60;\r\n        Debug.Log(\"提高帧率到 60 FPS\");\r\n        \r\n        yield return new WaitForSeconds(5f);\r\n        \r\n        // 不限制帧率\r\n        Application.targetFrameRate = -1;\r\n        Debug.Log(\"不限制帧率\");\r\n    }\r\n    \r\n    /// <summary>\r\n    /// 启动计时器\r\n    /// </summary>\r\n    public void StartTimer()\r\n    {\r\n        timer = timerDuration;\r\n        timerRunning = true;\r\n        Debug.Log($\"启动 {timerDuration} 秒计时器\");\r\n    }\r\n    \r\n    /// <summary>\r\n    /// 停止计时器\r\n    /// </summary>\r\n    public void StopTimer()\r\n    {\r\n        timerRunning = false;\r\n        Debug.Log(\"停止计时器\");\r\n    }\r\n    \r\n    /// <summary>\r\n    /// 重置计时器\r\n    /// </summary>\r\n    public void ResetTimer()\r\n    {\r\n        timer = timerDuration;\r\n        Debug.Log(\"重置计时器\");\r\n    }\r\n    \r\n    /// <summary>\r\n    /// 在Update中更新计时器和显示信息\r\n    /// </summary>\r\n    private void Update()\r\n    {\r\n        UpdateTimer();\r\n        HandleInput();\r\n        UpdateFrameCount();\r\n    }\r\n    \r\n    /// <summary>\r\n    /// 更新计时器\r\n    /// </summary>\r\n    private void UpdateTimer()\r\n    {\r\n        if (timerRunning)\r\n        {\r\n            timer -= Time.deltaTime;\r\n            \r\n            if (timer <= 0)\r\n            {\r\n                timer = 0;\r\n                timerRunning = false;\r\n                Debug.Log(\"计时器结束!\");\r\n            }\r\n        }\r\n    }\r\n    \r\n    /// <summary>\r\n    /// 处理输入\r\n    /// </summary>\r\n    private void HandleInput()\r\n    {\r\n        // 空格键启动/停止计时器\r\n        if (Input.GetKeyDown(KeyCode.Space))\r\n        {\r\n            if (timerRunning)\r\n            {\r\n                StopTimer();\r\n            }\r\n            else\r\n            {\r\n                StartTimer();\r\n            }\r\n        }\r\n        \r\n        // R键重置计时器\r\n        if (Input.GetKeyDown(KeyCode.R))\r\n        {\r\n            ResetTimer();\r\n        }\r\n        \r\n        // T键切换时间缩放\r\n        if (Input.GetKeyDown(KeyCode.T))\r\n        {\r\n            ToggleTimeScale();\r\n        }\r\n        \r\n        // 数字键设置时间缩放\r\n        if (Input.GetKeyDown(KeyCode.Alpha1))\r\n        {\r\n            Time.timeScale = 0.5f;\r\n            Debug.Log(\"时间缩放设置为 0.5\");\r\n        }\r\n        if (Input.GetKeyDown(KeyCode.Alpha2))\r\n        {\r\n            Time.timeScale = 1f;\r\n            Debug.Log(\"时间缩放设置为 1.0\");\r\n        }\r\n        if (Input.GetKeyDown(KeyCode.Alpha3))\r\n        {\r\n            Time.timeScale = 2f;\r\n            Debug.Log(\"时间缩放设置为 2.0\");\r\n        }\r\n    }\r\n    \r\n    /// <summary>\r\n    /// 切换时间缩放\r\n    /// </summary>\r\n    private void ToggleTimeScale()\r\n    {\r\n        if (Time.timeScale > 0)\r\n        {\r\n            Time.timeScale = 0f;\r\n            Debug.Log(\"游戏暂停\");\r\n        }\r\n        else\r\n        {\r\n            Time.timeScale = 1f;\r\n            Debug.Log(\"游戏恢复\");\r\n        }\r\n    }\r\n    \r\n    /// <summary>\r\n    /// 更新帧计数\r\n    /// </summary>\r\n    private void UpdateFrameCount()\r\n    {\r\n        frameCount++;\r\n    }\r\n    \r\n    /// <summary>\r\n    /// 在FixedUpdate中演示固定时间步长\r\n    /// </summary>\r\n    private void FixedUpdate()\r\n    {\r\n        // 固定时间步长的更新\r\n        // 这里可以放置物理相关的代码\r\n    }\r\n    \r\n    /// <summary>\r\n    /// 在OnGUI中显示时间信息\r\n    /// </summary>\r\n    private void OnGUI()\r\n    {\r\n        GUILayout.BeginArea(new Rect(10, 10, 400, 300));\r\n        \r\n        GUILayout.Label(\"Time API信息\", EditorStyles.boldLabel);\r\n        GUILayout.Space(5);\r\n        \r\n        // 基础时间信息\r\n        GUILayout.Label($\"游戏时间: {Time.time:F2}s\");\r\n        GUILayout.Label($\"关卡时间: {Time.timeSinceLevelLoad:F2}s\");\r\n        GUILayout.Label($\"帧间隔: {Time.deltaTime:F4}s\");\r\n        GUILayout.Label($\"时间缩放: {Time.timeScale:F2}\");\r\n        GUILayout.Label($\"总帧数: {Time.frameCount}\");\r\n        GUILayout.Label($\"真实时间: {Time.realtimeSinceStartup:F2}s\");\r\n        \r\n        GUILayout.Space(10);\r\n        \r\n        // 计时器信息\r\n        GUILayout.Label(\"计时器\", EditorStyles.boldLabel);\r\n        GUILayout.Label($\"剩余时间: {timer:F1}s\");\r\n        GUILayout.Label($\"状态: {(timerRunning ? \"运行中\" : \"已停止\")}\");\r\n        \r\n        GUILayout.Space(10);\r\n        \r\n        // 控制说明\r\n        GUILayout.Label(\"控制说明:\", EditorStyles.boldLabel);\r\n        GUILayout.Label(\"空格 - 启动/停止计时器\");\r\n        GUILayout.Label(\"R - 重置计时器\");\r\n        GUILayout.Label(\"T - 暂停/恢复游戏\");\r\n        GUILayout.Label(\"1/2/3 - 设置时间缩放\");\r\n        \r\n        GUILayout.EndArea();\r\n    }\r\n    \r\n    /// <summary>\r\n    /// 在OnDestroy中清理\r\n    /// </summary>\r\n    private void OnDestroy()\r\n    {\r\n        // 恢复时间缩放\r\n        Time.timeScale = 1f;\r\n        \r\n        // 恢复帧率限制\r\n        Application.targetFrameRate = -1;\r\n    }\r\n} "
        }
    ]
}